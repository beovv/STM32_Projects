
f103_i2c_scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003300  08003300  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08003300  08003300  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003300  08003300  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003300  08003300  00013300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003304  08003304  00013304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08003308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200000a0  080033a8  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  080033a8  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY
 13 .debug_info   000082d7  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000188f  00000000  00000000  000283e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  00029c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000755  00000000  00000000  0002a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017155  00000000  00000000  0002ad1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b2e7  00000000  00000000  00041e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008450f  00000000  00000000  0004d159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b48  00000000  00000000  000d1668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d41b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	080030a4 	.word	0x080030a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	080030a4 	.word	0x080030a4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t Buf20[20]   = {0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x1C};
 8000154:	4b68      	ldr	r3, [pc, #416]	; (80002f8 <main+0x1ac>)
 8000156:	f507 7408 	add.w	r4, r7, #544	; 0x220
 800015a:	461d      	mov	r5, r3
 800015c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800015e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000160:	682b      	ldr	r3, [r5, #0]
 8000162:	6023      	str	r3, [r4, #0]
	uint8_t Init10[20]  = {0xB0,0x8B,0x43,0x40,0x40,0x11,0x06,0x00,0x01,0xB1,0x41,0x22,0xA9,0x41,0x22,0xFF,0xFF,0x00,0x30,0x00};
 8000164:	4b65      	ldr	r3, [pc, #404]	; (80002fc <main+0x1b0>)
 8000166:	f507 7403 	add.w	r4, r7, #524	; 0x20c
 800016a:	461d      	mov	r5, r3
 800016c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800016e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000170:	682b      	ldr	r3, [r5, #0]
 8000172:	6023      	str	r3, [r4, #0]
	uint8_t Init11[20]  = {0xB0,0x8B,0x43,0x40,0x40,0x11,0x06,0x01,0x01,0xB1,0x41,0x22,0xA9,0x41,0x22,0xFF,0xFF,0x00,0x30,0x00};
 8000174:	4b62      	ldr	r3, [pc, #392]	; (8000300 <main+0x1b4>)
 8000176:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 800017a:	461d      	mov	r5, r3
 800017c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800017e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000180:	682b      	ldr	r3, [r5, #0]
 8000182:	6023      	str	r3, [r4, #0]
	uint8_t Init12[20]  = {0xB0,0x8B,0x43,0x40,0x40,0x11,0x06,0x02,0x01,0xB1,0x41,0x22,0xA9,0x41,0x22,0xFF,0xFF,0x00,0x30,0x00};
 8000184:	4b5f      	ldr	r3, [pc, #380]	; (8000304 <main+0x1b8>)
 8000186:	f507 74f2 	add.w	r4, r7, #484	; 0x1e4
 800018a:	461d      	mov	r5, r3
 800018c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800018e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000190:	682b      	ldr	r3, [r5, #0]
 8000192:	6023      	str	r3, [r4, #0]
	char strs[20][20] = {"POWER_CTRL","AMP_DAC_CTRL","DAC_CTRL","VOL_LEFT_CTRL","VOL_RIGHT_CTRL",
 8000194:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000198:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800019c:	4a5a      	ldr	r2, [pc, #360]	; (8000308 <main+0x1bc>)
 800019e:	4618      	mov	r0, r3
 80001a0:	4611      	mov	r1, r2
 80001a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80001a6:	461a      	mov	r2, r3
 80001a8:	f002 fb1e 	bl	80027e8 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ac:	f000 fb44 	bl	8000838 <HAL_Init>

  /* USER CODE BEGIN Init */
  	uint8_t i = 0, ret;
 80001b0:	2300      	movs	r3, #0
 80001b2:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	uint8_t Buf1[1];
	uint8_t Buf2[1];
	uint8_t dB10[1];
	uint8_t dB11[1];
	uint8_t dB12[1];
	char log[55] = {0,};
 80001b6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80001ba:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	3304      	adds	r3, #4
 80001c4:	2233      	movs	r2, #51	; 0x33
 80001c6:	2100      	movs	r1, #0
 80001c8:	4618      	mov	r0, r3
 80001ca:	f002 fad9 	bl	8002780 <memset>
	//bool send_usart = 0;
	//uint16_t count = 190;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ce:	f000 f8ad 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d2:	f000 f977 	bl	80004c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d6:	f000 f8ef 	bl	80003b8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80001da:	f000 f949 	bl	8000470 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80001de:	f000 f919 	bl	8000414 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Transmit(&huart1, StartMSG1, sizeof(StartMSG1), 10000);
 80001e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80001e6:	221f      	movs	r2, #31
 80001e8:	4948      	ldr	r1, [pc, #288]	; (800030c <main+0x1c0>)
 80001ea:	4849      	ldr	r0, [pc, #292]	; (8000310 <main+0x1c4>)
 80001ec:	f001 fe1d 	bl	8001e2a <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 80001f0:	2301      	movs	r3, #1
 80001f2:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 80001f6:	e033      	b.n	8000260 <main+0x114>
  {
     ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80001f8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	b299      	uxth	r1, r3
 8000202:	2305      	movs	r3, #5
 8000204:	2203      	movs	r2, #3
 8000206:	4843      	ldr	r0, [pc, #268]	; (8000314 <main+0x1c8>)
 8000208:	f001 f822 	bl	8001250 <HAL_I2C_IsDeviceReady>
 800020c:	4603      	mov	r3, r0
 800020e:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
      if (ret != HAL_OK) // No ACK Received At That Address
 8000212:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 8000216:	2b00      	cmp	r3, #0
 8000218:	d007      	beq.n	800022a <main+0xde>
      {
          HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 800021a:	f242 7310 	movw	r3, #10000	; 0x2710
 800021e:	2204      	movs	r2, #4
 8000220:	493d      	ldr	r1, [pc, #244]	; (8000318 <main+0x1cc>)
 8000222:	483b      	ldr	r0, [pc, #236]	; (8000310 <main+0x1c4>)
 8000224:	f001 fe01 	bl	8001e2a <HAL_UART_Transmit>
 8000228:	e015      	b.n	8000256 <main+0x10a>
      }
      else if(ret == HAL_OK)
 800022a:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 800022e:	2b00      	cmp	r3, #0
 8000230:	d111      	bne.n	8000256 <main+0x10a>
       if (ret == HAL_OK)
 8000232:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 8000236:	2b00      	cmp	r3, #0
 8000238:	d10d      	bne.n	8000256 <main+0x10a>
     {
    	  sprintf(buf, "0x%X \r\n", i);
 800023a:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800023e:	461a      	mov	r2, r3
 8000240:	4936      	ldr	r1, [pc, #216]	; (800031c <main+0x1d0>)
 8000242:	4837      	ldr	r0, [pc, #220]	; (8000320 <main+0x1d4>)
 8000244:	f002 fa7c 	bl	8002740 <siprintf>
          HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 10000);
 8000248:	f242 7310 	movw	r3, #10000	; 0x2710
 800024c:	2219      	movs	r2, #25
 800024e:	4934      	ldr	r1, [pc, #208]	; (8000320 <main+0x1d4>)
 8000250:	482f      	ldr	r0, [pc, #188]	; (8000310 <main+0x1c4>)
 8000252:	f001 fdea 	bl	8001e2a <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 8000256:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800025a:	3301      	adds	r3, #1
 800025c:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 8000260:	f997 3237 	ldrsb.w	r3, [r7, #567]	; 0x237
 8000264:	2b00      	cmp	r3, #0
 8000266:	dac7      	bge.n	80001f8 <main+0xac>
      }
  }

  HAL_Delay(100);
 8000268:	2064      	movs	r0, #100	; 0x64
 800026a:	f000 fb47 	bl	80008fc <HAL_Delay>

  HAL_UART_Transmit(&huart1, StartMSG2, sizeof(StartMSG2), 10000);
 800026e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000272:	221f      	movs	r2, #31
 8000274:	492b      	ldr	r1, [pc, #172]	; (8000324 <main+0x1d8>)
 8000276:	4826      	ldr	r0, [pc, #152]	; (8000310 <main+0x1c4>)
 8000278:	f001 fdd7 	bl	8001e2a <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 800027c:	2301      	movs	r3, #1
 800027e:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 8000282:	e033      	b.n	80002ec <main+0x1a0>
  {
     ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8000284:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000288:	b29b      	uxth	r3, r3
 800028a:	005b      	lsls	r3, r3, #1
 800028c:	b299      	uxth	r1, r3
 800028e:	2305      	movs	r3, #5
 8000290:	2203      	movs	r2, #3
 8000292:	4825      	ldr	r0, [pc, #148]	; (8000328 <main+0x1dc>)
 8000294:	f000 ffdc 	bl	8001250 <HAL_I2C_IsDeviceReady>
 8000298:	4603      	mov	r3, r0
 800029a:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
      if (ret != HAL_OK) // No ACK Received At That Address
 800029e:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d007      	beq.n	80002b6 <main+0x16a>
      {
          HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 80002a6:	f242 7310 	movw	r3, #10000	; 0x2710
 80002aa:	2204      	movs	r2, #4
 80002ac:	491a      	ldr	r1, [pc, #104]	; (8000318 <main+0x1cc>)
 80002ae:	4818      	ldr	r0, [pc, #96]	; (8000310 <main+0x1c4>)
 80002b0:	f001 fdbb 	bl	8001e2a <HAL_UART_Transmit>
 80002b4:	e015      	b.n	80002e2 <main+0x196>
      }
      else if(ret == HAL_OK)
 80002b6:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d111      	bne.n	80002e2 <main+0x196>
       if (ret == HAL_OK)
 80002be:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d10d      	bne.n	80002e2 <main+0x196>
     {
    	  sprintf(buf, "0x%X \r\n", i);
 80002c6:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80002ca:	461a      	mov	r2, r3
 80002cc:	4913      	ldr	r1, [pc, #76]	; (800031c <main+0x1d0>)
 80002ce:	4814      	ldr	r0, [pc, #80]	; (8000320 <main+0x1d4>)
 80002d0:	f002 fa36 	bl	8002740 <siprintf>
          HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 10000);
 80002d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80002d8:	2219      	movs	r2, #25
 80002da:	4911      	ldr	r1, [pc, #68]	; (8000320 <main+0x1d4>)
 80002dc:	480c      	ldr	r0, [pc, #48]	; (8000310 <main+0x1c4>)
 80002de:	f001 fda4 	bl	8001e2a <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 80002e2:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80002e6:	3301      	adds	r3, #1
 80002e8:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 80002ec:	f997 3237 	ldrsb.w	r3, [r7, #567]	; 0x237
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	dac7      	bge.n	8000284 <main+0x138>
  */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <main+0x1a8>
 80002f6:	bf00      	nop
 80002f8:	080030c4 	.word	0x080030c4
 80002fc:	080030d8 	.word	0x080030d8
 8000300:	080030ec 	.word	0x080030ec
 8000304:	08003100 	.word	0x08003100
 8000308:	08003114 	.word	0x08003114
 800030c:	20000004 	.word	0x20000004
 8000310:	20000164 	.word	0x20000164
 8000314:	200000bc 	.word	0x200000bc
 8000318:	20000000 	.word	0x20000000
 800031c:	080030bc 	.word	0x080030bc
 8000320:	200001a8 	.word	0x200001a8
 8000324:	20000024 	.word	0x20000024
 8000328:	20000110 	.word	0x20000110

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b090      	sub	sp, #64	; 0x40
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f002 fa20 	bl	8002780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034e:	2301      	movs	r3, #1
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000356:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	2301      	movs	r3, #1
 800035e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000360:	2302      	movs	r3, #2
 8000362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000368:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000370:	f107 0318 	add.w	r3, r7, #24
 8000374:	4618      	mov	r0, r3
 8000376:	f001 f8f1 	bl	800155c <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000380:	f000 f8ce 	bl	8000520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	230f      	movs	r3, #15
 8000386:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000388:	2302      	movs	r3, #2
 800038a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2102      	movs	r1, #2
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 fb5e 	bl	8001a60 <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003aa:	f000 f8b9 	bl	8000520 <Error_Handler>
  }
}
 80003ae:	bf00      	nop
 80003b0:	3740      	adds	r7, #64	; 0x40
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <MX_I2C1_Init+0x50>)
 80003be:	4a13      	ldr	r2, [pc, #76]	; (800040c <MX_I2C1_Init+0x54>)
 80003c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_I2C1_Init+0x50>)
 80003c4:	4a12      	ldr	r2, [pc, #72]	; (8000410 <MX_I2C1_Init+0x58>)
 80003c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_I2C1_Init+0x50>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_I2C1_Init+0x50>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_I2C1_Init+0x50>)
 80003d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <MX_I2C1_Init+0x50>)
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_I2C1_Init+0x50>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <MX_I2C1_Init+0x50>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_I2C1_Init+0x50>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <MX_I2C1_Init+0x50>)
 80003f6:	f000 fde7 	bl	8000fc8 <HAL_I2C_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000400:	f000 f88e 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	200000bc 	.word	0x200000bc
 800040c:	40005400 	.word	0x40005400
 8000410:	000186a0 	.word	0x000186a0

08000414 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_I2C2_Init+0x50>)
 800041a:	4a13      	ldr	r2, [pc, #76]	; (8000468 <MX_I2C2_Init+0x54>)
 800041c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_I2C2_Init+0x50>)
 8000420:	4a12      	ldr	r2, [pc, #72]	; (800046c <MX_I2C2_Init+0x58>)
 8000422:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_I2C2_Init+0x50>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_I2C2_Init+0x50>)
 800042c:	2200      	movs	r2, #0
 800042e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <MX_I2C2_Init+0x50>)
 8000432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000436:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000438:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <MX_I2C2_Init+0x50>)
 800043a:	2200      	movs	r2, #0
 800043c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_I2C2_Init+0x50>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <MX_I2C2_Init+0x50>)
 8000446:	2200      	movs	r2, #0
 8000448:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <MX_I2C2_Init+0x50>)
 800044c:	2200      	movs	r2, #0
 800044e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000450:	4804      	ldr	r0, [pc, #16]	; (8000464 <MX_I2C2_Init+0x50>)
 8000452:	f000 fdb9 	bl	8000fc8 <HAL_I2C_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800045c:	f000 f860 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000110 	.word	0x20000110
 8000468:	40005800 	.word	0x40005800
 800046c:	000186a0 	.word	0x000186a0

08000470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000476:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <MX_USART1_UART_Init+0x50>)
 8000478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800047c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000496:	220c      	movs	r2, #12
 8000498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004a6:	4805      	ldr	r0, [pc, #20]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 80004a8:	f001 fc72 	bl	8001d90 <HAL_UART_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004b2:	f000 f835 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000164 	.word	0x20000164
 80004c0:	40013800 	.word	0x40013800

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ca:	4b14      	ldr	r3, [pc, #80]	; (800051c <MX_GPIO_Init+0x58>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a13      	ldr	r2, [pc, #76]	; (800051c <MX_GPIO_Init+0x58>)
 80004d0:	f043 0320 	orr.w	r3, r3, #32
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b11      	ldr	r3, [pc, #68]	; (800051c <MX_GPIO_Init+0x58>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0320 	and.w	r3, r3, #32
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <MX_GPIO_Init+0x58>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a0d      	ldr	r2, [pc, #52]	; (800051c <MX_GPIO_Init+0x58>)
 80004e8:	f043 0308 	orr.w	r3, r3, #8
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <MX_GPIO_Init+0x58>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 0308 	and.w	r3, r3, #8
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <MX_GPIO_Init+0x58>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a07      	ldr	r2, [pc, #28]	; (800051c <MX_GPIO_Init+0x58>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	6193      	str	r3, [r2, #24]
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <MX_GPIO_Init+0x58>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f003 0304 	and.w	r3, r3, #4
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	40021000 	.word	0x40021000

08000520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000524:	b672      	cpsid	i
}
 8000526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000528:	e7fe      	b.n	8000528 <Error_Handler+0x8>
	...

0800052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <HAL_MspInit+0x5c>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a14      	ldr	r2, [pc, #80]	; (8000588 <HAL_MspInit+0x5c>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_MspInit+0x5c>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <HAL_MspInit+0x5c>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_MspInit+0x5c>)
 8000550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <HAL_MspInit+0x5c>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <HAL_MspInit+0x60>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <HAL_MspInit+0x60>)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	40021000 	.word	0x40021000
 800058c:	40010000 	.word	0x40010000

08000590 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 0318 	add.w	r3, r7, #24
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a2b      	ldr	r2, [pc, #172]	; (8000658 <HAL_I2C_MspInit+0xc8>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d124      	bne.n	80005fa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b0:	4b2a      	ldr	r3, [pc, #168]	; (800065c <HAL_I2C_MspInit+0xcc>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a29      	ldr	r2, [pc, #164]	; (800065c <HAL_I2C_MspInit+0xcc>)
 80005b6:	f043 0308 	orr.w	r3, r3, #8
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b27      	ldr	r3, [pc, #156]	; (800065c <HAL_I2C_MspInit+0xcc>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0308 	and.w	r3, r3, #8
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005c8:	23c0      	movs	r3, #192	; 0xc0
 80005ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005cc:	2312      	movs	r3, #18
 80005ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d0:	2303      	movs	r3, #3
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d4:	f107 0318 	add.w	r3, r7, #24
 80005d8:	4619      	mov	r1, r3
 80005da:	4821      	ldr	r0, [pc, #132]	; (8000660 <HAL_I2C_MspInit+0xd0>)
 80005dc:	f000 fb70 	bl	8000cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <HAL_I2C_MspInit+0xcc>)
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	4a1d      	ldr	r2, [pc, #116]	; (800065c <HAL_I2C_MspInit+0xcc>)
 80005e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005ea:	61d3      	str	r3, [r2, #28]
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <HAL_I2C_MspInit+0xcc>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80005f8:	e029      	b.n	800064e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <HAL_I2C_MspInit+0xd4>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d124      	bne.n	800064e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_I2C_MspInit+0xcc>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <HAL_I2C_MspInit+0xcc>)
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_I2C_MspInit+0xcc>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0308 	and.w	r3, r3, #8
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800061c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000622:	2312      	movs	r3, #18
 8000624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000626:	2303      	movs	r3, #3
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	f107 0318 	add.w	r3, r7, #24
 800062e:	4619      	mov	r1, r3
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <HAL_I2C_MspInit+0xd0>)
 8000632:	f000 fb45 	bl	8000cc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <HAL_I2C_MspInit+0xcc>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <HAL_I2C_MspInit+0xcc>)
 800063c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_I2C_MspInit+0xcc>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
}
 800064e:	bf00      	nop
 8000650:	3728      	adds	r7, #40	; 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40005400 	.word	0x40005400
 800065c:	40021000 	.word	0x40021000
 8000660:	40010c00 	.word	0x40010c00
 8000664:	40005800 	.word	0x40005800

08000668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a20      	ldr	r2, [pc, #128]	; (8000704 <HAL_UART_MspInit+0x9c>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d139      	bne.n	80006fc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <HAL_UART_MspInit+0xa0>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a1e      	ldr	r2, [pc, #120]	; (8000708 <HAL_UART_MspInit+0xa0>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <HAL_UART_MspInit+0xa0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_UART_MspInit+0xa0>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a18      	ldr	r2, [pc, #96]	; (8000708 <HAL_UART_MspInit+0xa0>)
 80006a6:	f043 0304 	orr.w	r3, r3, #4
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <HAL_UART_MspInit+0xa0>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	480f      	ldr	r0, [pc, #60]	; (800070c <HAL_UART_MspInit+0xa4>)
 80006ce:	f000 faf7 	bl	8000cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	4809      	ldr	r0, [pc, #36]	; (800070c <HAL_UART_MspInit+0xa4>)
 80006e8:	f000 faea 	bl	8000cc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2025      	movs	r0, #37	; 0x25
 80006f2:	f000 f9fe 	bl	8000af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006f6:	2025      	movs	r0, #37	; 0x25
 80006f8:	f000 fa17 	bl	8000b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40013800 	.word	0x40013800
 8000708:	40021000 	.word	0x40021000
 800070c:	40010800 	.word	0x40010800

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <NMI_Handler+0x4>

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>

08000722 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <UsageFault_Handler+0x4>

0800072e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000756:	f000 f8b5 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <USART1_IRQHandler+0x10>)
 8000766:	f001 fbf3 	bl	8001f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000164 	.word	0x20000164

08000774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800077c:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <_sbrk+0x5c>)
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <_sbrk+0x60>)
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <_sbrk+0x64>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <_sbrk+0x64>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <_sbrk+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d207      	bcs.n	80007b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a4:	f001 fff4 	bl	8002790 <__errno>
 80007a8:	4603      	mov	r3, r0
 80007aa:	220c      	movs	r2, #12
 80007ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	e009      	b.n	80007c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <_sbrk+0x64>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <_sbrk+0x64>)
 80007c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007c6:	68fb      	ldr	r3, [r7, #12]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20005000 	.word	0x20005000
 80007d4:	00000400 	.word	0x00000400
 80007d8:	200001c4 	.word	0x200001c4
 80007dc:	20000318 	.word	0x20000318

080007e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ee:	490d      	ldr	r1, [pc, #52]	; (8000824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000804:	4c0a      	ldr	r4, [pc, #40]	; (8000830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000812:	f7ff ffe5 	bl	80007e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000816:	f001 ffc1 	bl	800279c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff fc97 	bl	800014c <main>
  bx lr
 800081e:	4770      	bx	lr
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000828:	08003308 	.word	0x08003308
  ldr r2, =_sbss
 800082c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000830:	20000314 	.word	0x20000314

08000834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_2_IRQHandler>
	...

08000838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_Init+0x28>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_Init+0x28>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000848:	2003      	movs	r0, #3
 800084a:	f000 f947 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084e:	200f      	movs	r0, #15
 8000850:	f000 f808 	bl	8000864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000854:	f7ff fe6a 	bl	800052c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40022000 	.word	0x40022000

08000864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_InitTick+0x54>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_InitTick+0x58>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	fbb3 f3f1 	udiv	r3, r3, r1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f95f 	bl	8000b46 <HAL_SYSTICK_Config>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e00e      	b.n	80008b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	d80a      	bhi.n	80008ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000898:	2200      	movs	r2, #0
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f000 f927 	bl	8000af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a4:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <HAL_InitTick+0x5c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000044 	.word	0x20000044
 80008bc:	2000004c 	.word	0x2000004c
 80008c0:	20000048 	.word	0x20000048

080008c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_IncTick+0x1c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x20>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a03      	ldr	r2, [pc, #12]	; (80008e4 <HAL_IncTick+0x20>)
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	2000004c 	.word	0x2000004c
 80008e4:	200001c8 	.word	0x200001c8

080008e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <HAL_GetTick+0x10>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	200001c8 	.word	0x200001c8

080008fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000904:	f7ff fff0 	bl	80008e8 <HAL_GetTick>
 8000908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000914:	d005      	beq.n	8000922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_Delay+0x44>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000922:	bf00      	nop
 8000924:	f7ff ffe0 	bl	80008e8 <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d8f7      	bhi.n	8000924 <HAL_Delay+0x28>
  {
  }
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000004c 	.word	0x2000004c

08000944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800096c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db0b      	blt.n	80009d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 021f 	and.w	r2, r3, #31
 80009c0:	4906      	ldr	r1, [pc, #24]	; (80009dc <__NVIC_EnableIRQ+0x34>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	fa00 f202 	lsl.w	r2, r0, r2
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db0a      	blt.n	8000a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <__NVIC_SetPriority+0x4c>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a08:	e00a      	b.n	8000a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4908      	ldr	r1, [pc, #32]	; (8000a30 <__NVIC_SetPriority+0x50>)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	3b04      	subs	r3, #4
 8000a18:	0112      	lsls	r2, r2, #4
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	761a      	strb	r2, [r3, #24]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b089      	sub	sp, #36	; 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f1c3 0307 	rsb	r3, r3, #7
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	bf28      	it	cs
 8000a52:	2304      	movcs	r3, #4
 8000a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d902      	bls.n	8000a64 <NVIC_EncodePriority+0x30>
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3b03      	subs	r3, #3
 8000a62:	e000      	b.n	8000a66 <NVIC_EncodePriority+0x32>
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43d9      	mvns	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	4313      	orrs	r3, r2
         );
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3724      	adds	r7, #36	; 0x24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa8:	d301      	bcc.n	8000aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00f      	b.n	8000ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <SysTick_Config+0x40>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab6:	210f      	movs	r1, #15
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f7ff ff90 	bl	80009e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac8:	2207      	movs	r2, #7
 8000aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	e000e010 	.word	0xe000e010

08000adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff2d 	bl	8000944 <__NVIC_SetPriorityGrouping>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b04:	f7ff ff42 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	6978      	ldr	r0, [r7, #20]
 8000b10:	f7ff ff90 	bl	8000a34 <NVIC_EncodePriority>
 8000b14:	4602      	mov	r2, r0
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff5f 	bl	80009e0 <__NVIC_SetPriority>
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff35 	bl	80009a8 <__NVIC_EnableIRQ>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffa2 	bl	8000a98 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b085      	sub	sp, #20
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d008      	beq.n	8000b86 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2204      	movs	r2, #4
 8000b78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e020      	b.n	8000bc8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 020e 	bic.w	r2, r2, #14
 8000b94:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 0201 	bic.w	r2, r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bae:	2101      	movs	r1, #1
 8000bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
	...

08000bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d005      	beq.n	8000bf6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2204      	movs	r2, #4
 8000bee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e051      	b.n	8000c9a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 020e 	bic.w	r2, r2, #14
 8000c04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f022 0201 	bic.w	r2, r2, #1
 8000c14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a22      	ldr	r2, [pc, #136]	; (8000ca4 <HAL_DMA_Abort_IT+0xd0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d029      	beq.n	8000c74 <HAL_DMA_Abort_IT+0xa0>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a20      	ldr	r2, [pc, #128]	; (8000ca8 <HAL_DMA_Abort_IT+0xd4>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d022      	beq.n	8000c70 <HAL_DMA_Abort_IT+0x9c>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a1f      	ldr	r2, [pc, #124]	; (8000cac <HAL_DMA_Abort_IT+0xd8>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d01a      	beq.n	8000c6a <HAL_DMA_Abort_IT+0x96>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a1d      	ldr	r2, [pc, #116]	; (8000cb0 <HAL_DMA_Abort_IT+0xdc>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d012      	beq.n	8000c64 <HAL_DMA_Abort_IT+0x90>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <HAL_DMA_Abort_IT+0xe0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d00a      	beq.n	8000c5e <HAL_DMA_Abort_IT+0x8a>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <HAL_DMA_Abort_IT+0xe4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d102      	bne.n	8000c58 <HAL_DMA_Abort_IT+0x84>
 8000c52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c56:	e00e      	b.n	8000c76 <HAL_DMA_Abort_IT+0xa2>
 8000c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c5c:	e00b      	b.n	8000c76 <HAL_DMA_Abort_IT+0xa2>
 8000c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c62:	e008      	b.n	8000c76 <HAL_DMA_Abort_IT+0xa2>
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	e005      	b.n	8000c76 <HAL_DMA_Abort_IT+0xa2>
 8000c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6e:	e002      	b.n	8000c76 <HAL_DMA_Abort_IT+0xa2>
 8000c70:	2310      	movs	r3, #16
 8000c72:	e000      	b.n	8000c76 <HAL_DMA_Abort_IT+0xa2>
 8000c74:	2301      	movs	r3, #1
 8000c76:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <HAL_DMA_Abort_IT+0xe8>)
 8000c78:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	4798      	blx	r3
    } 
  }
  return status;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40020008 	.word	0x40020008
 8000ca8:	4002001c 	.word	0x4002001c
 8000cac:	40020030 	.word	0x40020030
 8000cb0:	40020044 	.word	0x40020044
 8000cb4:	40020058 	.word	0x40020058
 8000cb8:	4002006c 	.word	0x4002006c
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b08b      	sub	sp, #44	; 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd2:	e169      	b.n	8000fa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 8158 	bne.w	8000fa2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	4a9a      	ldr	r2, [pc, #616]	; (8000f60 <HAL_GPIO_Init+0x2a0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d05e      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000cfc:	4a98      	ldr	r2, [pc, #608]	; (8000f60 <HAL_GPIO_Init+0x2a0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d875      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d02:	4a98      	ldr	r2, [pc, #608]	; (8000f64 <HAL_GPIO_Init+0x2a4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d058      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d08:	4a96      	ldr	r2, [pc, #600]	; (8000f64 <HAL_GPIO_Init+0x2a4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d86f      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d0e:	4a96      	ldr	r2, [pc, #600]	; (8000f68 <HAL_GPIO_Init+0x2a8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d052      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d14:	4a94      	ldr	r2, [pc, #592]	; (8000f68 <HAL_GPIO_Init+0x2a8>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d869      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d1a:	4a94      	ldr	r2, [pc, #592]	; (8000f6c <HAL_GPIO_Init+0x2ac>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d04c      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d20:	4a92      	ldr	r2, [pc, #584]	; (8000f6c <HAL_GPIO_Init+0x2ac>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d863      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d26:	4a92      	ldr	r2, [pc, #584]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d046      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
 8000d2c:	4a90      	ldr	r2, [pc, #576]	; (8000f70 <HAL_GPIO_Init+0x2b0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d85d      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d82a      	bhi.n	8000d8c <HAL_GPIO_Init+0xcc>
 8000d36:	2b12      	cmp	r3, #18
 8000d38:	d859      	bhi.n	8000dee <HAL_GPIO_Init+0x12e>
 8000d3a:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <HAL_GPIO_Init+0x80>)
 8000d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d40:	08000dbb 	.word	0x08000dbb
 8000d44:	08000d95 	.word	0x08000d95
 8000d48:	08000da7 	.word	0x08000da7
 8000d4c:	08000de9 	.word	0x08000de9
 8000d50:	08000def 	.word	0x08000def
 8000d54:	08000def 	.word	0x08000def
 8000d58:	08000def 	.word	0x08000def
 8000d5c:	08000def 	.word	0x08000def
 8000d60:	08000def 	.word	0x08000def
 8000d64:	08000def 	.word	0x08000def
 8000d68:	08000def 	.word	0x08000def
 8000d6c:	08000def 	.word	0x08000def
 8000d70:	08000def 	.word	0x08000def
 8000d74:	08000def 	.word	0x08000def
 8000d78:	08000def 	.word	0x08000def
 8000d7c:	08000def 	.word	0x08000def
 8000d80:	08000def 	.word	0x08000def
 8000d84:	08000d9d 	.word	0x08000d9d
 8000d88:	08000db1 	.word	0x08000db1
 8000d8c:	4a79      	ldr	r2, [pc, #484]	; (8000f74 <HAL_GPIO_Init+0x2b4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d92:	e02c      	b.n	8000dee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	623b      	str	r3, [r7, #32]
          break;
 8000d9a:	e029      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	3304      	adds	r3, #4
 8000da2:	623b      	str	r3, [r7, #32]
          break;
 8000da4:	e024      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	3308      	adds	r3, #8
 8000dac:	623b      	str	r3, [r7, #32]
          break;
 8000dae:	e01f      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	330c      	adds	r3, #12
 8000db6:	623b      	str	r3, [r7, #32]
          break;
 8000db8:	e01a      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d102      	bne.n	8000dc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e013      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d105      	bne.n	8000ddc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	611a      	str	r2, [r3, #16]
          break;
 8000dda:	e009      	b.n	8000df0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	615a      	str	r2, [r3, #20]
          break;
 8000de6:	e003      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          break;
 8000dee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	2bff      	cmp	r3, #255	; 0xff
 8000df4:	d801      	bhi.n	8000dfa <HAL_GPIO_Init+0x13a>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	e001      	b.n	8000dfe <HAL_GPIO_Init+0x13e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	2bff      	cmp	r3, #255	; 0xff
 8000e04:	d802      	bhi.n	8000e0c <HAL_GPIO_Init+0x14c>
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	e002      	b.n	8000e12 <HAL_GPIO_Init+0x152>
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	3b08      	subs	r3, #8
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	210f      	movs	r1, #15
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	401a      	ands	r2, r3
 8000e24:	6a39      	ldr	r1, [r7, #32]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 80b1 	beq.w	8000fa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e40:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a4c      	ldr	r2, [pc, #304]	; (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b4a      	ldr	r3, [pc, #296]	; (8000f78 <HAL_GPIO_Init+0x2b8>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e58:	4a48      	ldr	r2, [pc, #288]	; (8000f7c <HAL_GPIO_Init+0x2bc>)
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a40      	ldr	r2, [pc, #256]	; (8000f80 <HAL_GPIO_Init+0x2c0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d013      	beq.n	8000eac <HAL_GPIO_Init+0x1ec>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a3f      	ldr	r2, [pc, #252]	; (8000f84 <HAL_GPIO_Init+0x2c4>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d00d      	beq.n	8000ea8 <HAL_GPIO_Init+0x1e8>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a3e      	ldr	r2, [pc, #248]	; (8000f88 <HAL_GPIO_Init+0x2c8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d007      	beq.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a3d      	ldr	r2, [pc, #244]	; (8000f8c <HAL_GPIO_Init+0x2cc>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d101      	bne.n	8000ea0 <HAL_GPIO_Init+0x1e0>
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e006      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	e004      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e002      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000eac:	2300      	movs	r3, #0
 8000eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb0:	f002 0203 	and.w	r2, r2, #3
 8000eb4:	0092      	lsls	r2, r2, #2
 8000eb6:	4093      	lsls	r3, r2
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ebe:	492f      	ldr	r1, [pc, #188]	; (8000f7c <HAL_GPIO_Init+0x2bc>)
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	492c      	ldr	r1, [pc, #176]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	600b      	str	r3, [r1, #0]
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4928      	ldr	r1, [pc, #160]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f00:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	4922      	ldr	r1, [pc, #136]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	604b      	str	r3, [r1, #4]
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	491e      	ldr	r1, [pc, #120]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d006      	beq.n	8000f36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	4918      	ldr	r1, [pc, #96]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	608b      	str	r3, [r1, #8]
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4914      	ldr	r1, [pc, #80]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d021      	beq.n	8000f94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	490e      	ldr	r1, [pc, #56]	; (8000f90 <HAL_GPIO_Init+0x2d0>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	60cb      	str	r3, [r1, #12]
 8000f5c:	e021      	b.n	8000fa2 <HAL_GPIO_Init+0x2e2>
 8000f5e:	bf00      	nop
 8000f60:	10320000 	.word	0x10320000
 8000f64:	10310000 	.word	0x10310000
 8000f68:	10220000 	.word	0x10220000
 8000f6c:	10210000 	.word	0x10210000
 8000f70:	10120000 	.word	0x10120000
 8000f74:	10110000 	.word	0x10110000
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	40010800 	.word	0x40010800
 8000f84:	40010c00 	.word	0x40010c00
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40011400 	.word	0x40011400
 8000f90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4909      	ldr	r1, [pc, #36]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f47f ae8e 	bne.w	8000cd4 <HAL_GPIO_Init+0x14>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	372c      	adds	r7, #44	; 0x2c
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40010400 	.word	0x40010400

08000fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e12b      	b.n	8001232 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d106      	bne.n	8000ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff face 	bl	8000590 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2224      	movs	r2, #36	; 0x24
 8000ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0201 	bic.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800101a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800102a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800102c:	f000 fe6a 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8001030:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	4a81      	ldr	r2, [pc, #516]	; (800123c <HAL_I2C_Init+0x274>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d807      	bhi.n	800104c <HAL_I2C_Init+0x84>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4a80      	ldr	r2, [pc, #512]	; (8001240 <HAL_I2C_Init+0x278>)
 8001040:	4293      	cmp	r3, r2
 8001042:	bf94      	ite	ls
 8001044:	2301      	movls	r3, #1
 8001046:	2300      	movhi	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	e006      	b.n	800105a <HAL_I2C_Init+0x92>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4a7d      	ldr	r2, [pc, #500]	; (8001244 <HAL_I2C_Init+0x27c>)
 8001050:	4293      	cmp	r3, r2
 8001052:	bf94      	ite	ls
 8001054:	2301      	movls	r3, #1
 8001056:	2300      	movhi	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e0e7      	b.n	8001232 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4a78      	ldr	r2, [pc, #480]	; (8001248 <HAL_I2C_Init+0x280>)
 8001066:	fba2 2303 	umull	r2, r3, r2, r3
 800106a:	0c9b      	lsrs	r3, r3, #18
 800106c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	430a      	orrs	r2, r1
 8001080:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4a6a      	ldr	r2, [pc, #424]	; (800123c <HAL_I2C_Init+0x274>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d802      	bhi.n	800109c <HAL_I2C_Init+0xd4>
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	3301      	adds	r3, #1
 800109a:	e009      	b.n	80010b0 <HAL_I2C_Init+0xe8>
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010a2:	fb02 f303 	mul.w	r3, r2, r3
 80010a6:	4a69      	ldr	r2, [pc, #420]	; (800124c <HAL_I2C_Init+0x284>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	099b      	lsrs	r3, r3, #6
 80010ae:	3301      	adds	r3, #1
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	430b      	orrs	r3, r1
 80010b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	495c      	ldr	r1, [pc, #368]	; (800123c <HAL_I2C_Init+0x274>)
 80010cc:	428b      	cmp	r3, r1
 80010ce:	d819      	bhi.n	8001104 <HAL_I2C_Init+0x13c>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	1e59      	subs	r1, r3, #1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fbb1 f3f3 	udiv	r3, r1, r3
 80010de:	1c59      	adds	r1, r3, #1
 80010e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80010e4:	400b      	ands	r3, r1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00a      	beq.n	8001100 <HAL_I2C_Init+0x138>
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1e59      	subs	r1, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010f8:	3301      	adds	r3, #1
 80010fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010fe:	e051      	b.n	80011a4 <HAL_I2C_Init+0x1dc>
 8001100:	2304      	movs	r3, #4
 8001102:	e04f      	b.n	80011a4 <HAL_I2C_Init+0x1dc>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d111      	bne.n	8001130 <HAL_I2C_Init+0x168>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	1e58      	subs	r0, r3, #1
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6859      	ldr	r1, [r3, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	440b      	add	r3, r1
 800111a:	fbb0 f3f3 	udiv	r3, r0, r3
 800111e:	3301      	adds	r3, #1
 8001120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	e012      	b.n	8001156 <HAL_I2C_Init+0x18e>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1e58      	subs	r0, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6859      	ldr	r1, [r3, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	0099      	lsls	r1, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	fbb0 f3f3 	udiv	r3, r0, r3
 8001146:	3301      	adds	r3, #1
 8001148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800114c:	2b00      	cmp	r3, #0
 800114e:	bf0c      	ite	eq
 8001150:	2301      	moveq	r3, #1
 8001152:	2300      	movne	r3, #0
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_I2C_Init+0x196>
 800115a:	2301      	movs	r3, #1
 800115c:	e022      	b.n	80011a4 <HAL_I2C_Init+0x1dc>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d10e      	bne.n	8001184 <HAL_I2C_Init+0x1bc>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	1e58      	subs	r0, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6859      	ldr	r1, [r3, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	440b      	add	r3, r1
 8001174:	fbb0 f3f3 	udiv	r3, r0, r3
 8001178:	3301      	adds	r3, #1
 800117a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800117e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001182:	e00f      	b.n	80011a4 <HAL_I2C_Init+0x1dc>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	1e58      	subs	r0, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6859      	ldr	r1, [r3, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	0099      	lsls	r1, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	fbb0 f3f3 	udiv	r3, r0, r3
 800119a:	3301      	adds	r3, #1
 800119c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	6809      	ldr	r1, [r1, #0]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69da      	ldr	r2, [r3, #28]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6911      	ldr	r1, [r2, #16]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68d2      	ldr	r2, [r2, #12]
 80011de:	4311      	orrs	r1, r2
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	430b      	orrs	r3, r1
 80011e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0201 	orr.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2220      	movs	r2, #32
 800121e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	000186a0 	.word	0x000186a0
 8001240:	001e847f 	.word	0x001e847f
 8001244:	003d08ff 	.word	0x003d08ff
 8001248:	431bde83 	.word	0x431bde83
 800124c:	10624dd3 	.word	0x10624dd3

08001250 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af02      	add	r7, sp, #8
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	460b      	mov	r3, r1
 800125e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff fb42 	bl	80008e8 <HAL_GetTick>
 8001264:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b20      	cmp	r3, #32
 8001274:	f040 8111 	bne.w	800149a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2319      	movs	r3, #25
 800127e:	2201      	movs	r2, #1
 8001280:	4988      	ldr	r1, [pc, #544]	; (80014a4 <HAL_I2C_IsDeviceReady+0x254>)
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f000 f912 	bl	80014ac <I2C_WaitOnFlagUntilTimeout>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800128e:	2302      	movs	r3, #2
 8001290:	e104      	b.n	800149c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <HAL_I2C_IsDeviceReady+0x50>
 800129c:	2302      	movs	r3, #2
 800129e:	e0fd      	b.n	800149c <HAL_I2C_IsDeviceReady+0x24c>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d007      	beq.n	80012c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0201 	orr.w	r2, r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2224      	movs	r2, #36	; 0x24
 80012da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4a70      	ldr	r2, [pc, #448]	; (80014a8 <HAL_I2C_IsDeviceReady+0x258>)
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2200      	movs	r2, #0
 8001302:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f8d0 	bl	80014ac <I2C_WaitOnFlagUntilTimeout>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00d      	beq.n	800132e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001320:	d103      	bne.n	800132a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e0b6      	b.n	800149c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800132e:	897b      	ldrh	r3, [r7, #10]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800133c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fad3 	bl	80008e8 <HAL_GetTick>
 8001342:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b02      	cmp	r3, #2
 8001350:	bf0c      	ite	eq
 8001352:	2301      	moveq	r3, #1
 8001354:	2300      	movne	r3, #0
 8001356:	b2db      	uxtb	r3, r3
 8001358:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001368:	bf0c      	ite	eq
 800136a:	2301      	moveq	r3, #1
 800136c:	2300      	movne	r3, #0
 800136e:	b2db      	uxtb	r3, r3
 8001370:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001372:	e025      	b.n	80013c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001374:	f7ff fab8 	bl	80008e8 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d302      	bcc.n	800138a <HAL_I2C_IsDeviceReady+0x13a>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	22a0      	movs	r2, #160	; 0xa0
 800138e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b02      	cmp	r3, #2
 800139e:	bf0c      	ite	eq
 80013a0:	2301      	moveq	r3, #1
 80013a2:	2300      	movne	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2ba0      	cmp	r3, #160	; 0xa0
 80013ca:	d005      	beq.n	80013d8 <HAL_I2C_IsDeviceReady+0x188>
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <HAL_I2C_IsDeviceReady+0x188>
 80013d2:	7dbb      	ldrb	r3, [r7, #22]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0cd      	beq.n	8001374 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2220      	movs	r2, #32
 80013dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d129      	bne.n	8001442 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2319      	movs	r3, #25
 800141a:	2201      	movs	r2, #1
 800141c:	4921      	ldr	r1, [pc, #132]	; (80014a4 <HAL_I2C_IsDeviceReady+0x254>)
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 f844 	bl	80014ac <I2C_WaitOnFlagUntilTimeout>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e036      	b.n	800149c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2220      	movs	r2, #32
 8001432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e02c      	b.n	800149c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001450:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800145a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2319      	movs	r3, #25
 8001462:	2201      	movs	r2, #1
 8001464:	490f      	ldr	r1, [pc, #60]	; (80014a4 <HAL_I2C_IsDeviceReady+0x254>)
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 f820 	bl	80014ac <I2C_WaitOnFlagUntilTimeout>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e012      	b.n	800149c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	3301      	adds	r3, #1
 800147a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	f4ff af32 	bcc.w	80012ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2220      	movs	r2, #32
 800148a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800149a:	2302      	movs	r3, #2
  }
}
 800149c:	4618      	mov	r0, r3
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	00100002 	.word	0x00100002
 80014a8:	ffff0000 	.word	0xffff0000

080014ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	4613      	mov	r3, r2
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014bc:	e025      	b.n	800150a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	d021      	beq.n	800150a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014c6:	f7ff fa0f 	bl	80008e8 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d302      	bcc.n	80014dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d116      	bne.n	800150a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2220      	movs	r2, #32
 80014e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f043 0220 	orr.w	r2, r3, #32
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e023      	b.n	8001552 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	0c1b      	lsrs	r3, r3, #16
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b01      	cmp	r3, #1
 8001512:	d10d      	bne.n	8001530 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4013      	ands	r3, r2
 8001520:	b29b      	uxth	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf0c      	ite	eq
 8001526:	2301      	moveq	r3, #1
 8001528:	2300      	movne	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	e00c      	b.n	800154a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4013      	ands	r3, r2
 800153c:	b29b      	uxth	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	bf0c      	ite	eq
 8001542:	2301      	moveq	r3, #1
 8001544:	2300      	movne	r3, #0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	429a      	cmp	r2, r3
 800154e:	d0b6      	beq.n	80014be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e272      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8087 	beq.w	800168a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800157c:	4b92      	ldr	r3, [pc, #584]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	2b04      	cmp	r3, #4
 8001586:	d00c      	beq.n	80015a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001588:	4b8f      	ldr	r3, [pc, #572]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b08      	cmp	r3, #8
 8001592:	d112      	bne.n	80015ba <HAL_RCC_OscConfig+0x5e>
 8001594:	4b8c      	ldr	r3, [pc, #560]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a0:	d10b      	bne.n	80015ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a2:	4b89      	ldr	r3, [pc, #548]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d06c      	beq.n	8001688 <HAL_RCC_OscConfig+0x12c>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d168      	bne.n	8001688 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e24c      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c2:	d106      	bne.n	80015d2 <HAL_RCC_OscConfig+0x76>
 80015c4:	4b80      	ldr	r3, [pc, #512]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a7f      	ldr	r2, [pc, #508]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	e02e      	b.n	8001630 <HAL_RCC_OscConfig+0xd4>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x98>
 80015da:	4b7b      	ldr	r3, [pc, #492]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a7a      	ldr	r2, [pc, #488]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b78      	ldr	r3, [pc, #480]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a77      	ldr	r2, [pc, #476]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e01d      	b.n	8001630 <HAL_RCC_OscConfig+0xd4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0xbc>
 80015fe:	4b72      	ldr	r3, [pc, #456]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a71      	ldr	r2, [pc, #452]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	4b6f      	ldr	r3, [pc, #444]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a6e      	ldr	r2, [pc, #440]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e00b      	b.n	8001630 <HAL_RCC_OscConfig+0xd4>
 8001618:	4b6b      	ldr	r3, [pc, #428]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a6a      	ldr	r2, [pc, #424]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 800161e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b68      	ldr	r3, [pc, #416]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a67      	ldr	r2, [pc, #412]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d013      	beq.n	8001660 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff f956 	bl	80008e8 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff f952 	bl	80008e8 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	; 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e200      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b5d      	ldr	r3, [pc, #372]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0xe4>
 800165e:	e014      	b.n	800168a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff f942 	bl	80008e8 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff f93e 	bl	80008e8 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e1ec      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167a:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x10c>
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d063      	beq.n	800175e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001696:	4b4c      	ldr	r3, [pc, #304]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00b      	beq.n	80016ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016a2:	4b49      	ldr	r3, [pc, #292]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d11c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x18c>
 80016ae:	4b46      	ldr	r3, [pc, #280]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d116      	bne.n	80016e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <HAL_RCC_OscConfig+0x176>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d001      	beq.n	80016d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e1c0      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d2:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4939      	ldr	r1, [pc, #228]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e6:	e03a      	b.n	800175e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d020      	beq.n	8001732 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f0:	4b36      	ldr	r3, [pc, #216]	; (80017cc <HAL_RCC_OscConfig+0x270>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f6:	f7ff f8f7 	bl	80008e8 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fe:	f7ff f8f3 	bl	80008e8 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e1a1      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171c:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4927      	ldr	r1, [pc, #156]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 800172c:	4313      	orrs	r3, r2
 800172e:	600b      	str	r3, [r1, #0]
 8001730:	e015      	b.n	800175e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <HAL_RCC_OscConfig+0x270>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff f8d6 	bl	80008e8 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001740:	f7ff f8d2 	bl	80008e8 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e180      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d03a      	beq.n	80017e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d019      	beq.n	80017a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_RCC_OscConfig+0x274>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001778:	f7ff f8b6 	bl	80008e8 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001780:	f7ff f8b2 	bl	80008e8 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e160      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_RCC_OscConfig+0x26c>)
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800179e:	2001      	movs	r0, #1
 80017a0:	f000 fad8 	bl	8001d54 <RCC_Delay>
 80017a4:	e01c      	b.n	80017e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_RCC_OscConfig+0x274>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ac:	f7ff f89c 	bl	80008e8 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b2:	e00f      	b.n	80017d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff f898 	bl	80008e8 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d908      	bls.n	80017d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e146      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	42420000 	.word	0x42420000
 80017d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d4:	4b92      	ldr	r3, [pc, #584]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1e9      	bne.n	80017b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80a6 	beq.w	800193a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f2:	4b8b      	ldr	r3, [pc, #556]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10d      	bne.n	800181a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a87      	ldr	r2, [pc, #540]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	61d3      	str	r3, [r2, #28]
 800180a:	4b85      	ldr	r3, [pc, #532]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001816:	2301      	movs	r3, #1
 8001818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181a:	4b82      	ldr	r3, [pc, #520]	; (8001a24 <HAL_RCC_OscConfig+0x4c8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d118      	bne.n	8001858 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001826:	4b7f      	ldr	r3, [pc, #508]	; (8001a24 <HAL_RCC_OscConfig+0x4c8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a7e      	ldr	r2, [pc, #504]	; (8001a24 <HAL_RCC_OscConfig+0x4c8>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001832:	f7ff f859 	bl	80008e8 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183a:	f7ff f855 	bl	80008e8 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b64      	cmp	r3, #100	; 0x64
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e103      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184c:	4b75      	ldr	r3, [pc, #468]	; (8001a24 <HAL_RCC_OscConfig+0x4c8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x312>
 8001860:	4b6f      	ldr	r3, [pc, #444]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4a6e      	ldr	r2, [pc, #440]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6213      	str	r3, [r2, #32]
 800186c:	e02d      	b.n	80018ca <HAL_RCC_OscConfig+0x36e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x334>
 8001876:	4b6a      	ldr	r3, [pc, #424]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	4a69      	ldr	r2, [pc, #420]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6213      	str	r3, [r2, #32]
 8001882:	4b67      	ldr	r3, [pc, #412]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	4a66      	ldr	r2, [pc, #408]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	f023 0304 	bic.w	r3, r3, #4
 800188c:	6213      	str	r3, [r2, #32]
 800188e:	e01c      	b.n	80018ca <HAL_RCC_OscConfig+0x36e>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b05      	cmp	r3, #5
 8001896:	d10c      	bne.n	80018b2 <HAL_RCC_OscConfig+0x356>
 8001898:	4b61      	ldr	r3, [pc, #388]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4a60      	ldr	r2, [pc, #384]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6213      	str	r3, [r2, #32]
 80018a4:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4a5d      	ldr	r2, [pc, #372]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6213      	str	r3, [r2, #32]
 80018b0:	e00b      	b.n	80018ca <HAL_RCC_OscConfig+0x36e>
 80018b2:	4b5b      	ldr	r3, [pc, #364]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a5a      	ldr	r2, [pc, #360]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6213      	str	r3, [r2, #32]
 80018be:	4b58      	ldr	r3, [pc, #352]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4a57      	ldr	r2, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d015      	beq.n	80018fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d2:	f7ff f809 	bl	80008e8 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f7ff f805 	bl	80008e8 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e0b1      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f0:	4b4b      	ldr	r3, [pc, #300]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0ee      	beq.n	80018da <HAL_RCC_OscConfig+0x37e>
 80018fc:	e014      	b.n	8001928 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fe:	f7fe fff3 	bl	80008e8 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001904:	e00a      	b.n	800191c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7fe ffef 	bl	80008e8 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	f241 3288 	movw	r2, #5000	; 0x1388
 8001914:	4293      	cmp	r3, r2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e09b      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191c:	4b40      	ldr	r3, [pc, #256]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1ee      	bne.n	8001906 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d105      	bne.n	800193a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192e:	4b3c      	ldr	r3, [pc, #240]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a3b      	ldr	r2, [pc, #236]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001938:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 8087 	beq.w	8001a52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001944:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b08      	cmp	r3, #8
 800194e:	d061      	beq.n	8001a14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d146      	bne.n	80019e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001958:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <HAL_RCC_OscConfig+0x4cc>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7fe ffc3 	bl	80008e8 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001966:	f7fe ffbf 	bl	80008e8 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e06d      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001978:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198c:	d108      	bne.n	80019a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	4921      	ldr	r1, [pc, #132]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a19      	ldr	r1, [r3, #32]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	430b      	orrs	r3, r1
 80019b2:	491b      	ldr	r1, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_RCC_OscConfig+0x4cc>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7fe ff93 	bl	80008e8 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c6:	f7fe ff8f 	bl	80008e8 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e03d      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x46a>
 80019e4:	e035      	b.n	8001a52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_RCC_OscConfig+0x4cc>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7fe ff7c 	bl	80008e8 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f4:	f7fe ff78 	bl	80008e8 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e026      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x498>
 8001a12:	e01e      	b.n	8001a52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e019      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40007000 	.word	0x40007000
 8001a28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_OscConfig+0x500>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0d0      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b6a      	ldr	r3, [pc, #424]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d910      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b67      	ldr	r3, [pc, #412]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 0207 	bic.w	r2, r3, #7
 8001a8a:	4965      	ldr	r1, [pc, #404]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0b8      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d020      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001abc:	4b59      	ldr	r3, [pc, #356]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a58      	ldr	r2, [pc, #352]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ac6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad4:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4a52      	ldr	r2, [pc, #328]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ade:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae0:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	494d      	ldr	r1, [pc, #308]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d040      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d115      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e07f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1e:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e073      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e06b      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3e:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f023 0203 	bic.w	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4936      	ldr	r1, [pc, #216]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b50:	f7fe feca 	bl	80008e8 <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b58:	f7fe fec6 	bl	80008e8 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e053      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 020c 	and.w	r2, r3, #12
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d1eb      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d210      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 0207 	bic.w	r2, r3, #7
 8001b96:	4922      	ldr	r1, [pc, #136]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e032      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4916      	ldr	r1, [pc, #88]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	490e      	ldr	r1, [pc, #56]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bee:	f000 f821 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	490a      	ldr	r1, [pc, #40]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001c00:	5ccb      	ldrb	r3, [r1, r3]
 8001c02:	fa22 f303 	lsr.w	r3, r2, r3
 8001c06:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <HAL_RCC_ClockConfig+0x1cc>)
 8001c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_RCC_ClockConfig+0x1d0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fe28 	bl	8000864 <HAL_InitTick>

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40022000 	.word	0x40022000
 8001c24:	40021000 	.word	0x40021000
 8001c28:	080032b4 	.word	0x080032b4
 8001c2c:	20000044 	.word	0x20000044
 8001c30:	20000048 	.word	0x20000048

08001c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c34:	b490      	push	{r4, r7}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c3a:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001c3c:	1d3c      	adds	r4, r7, #4
 8001c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c44:	f240 2301 	movw	r3, #513	; 0x201
 8001c48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c5e:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d002      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x40>
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d003      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x46>
 8001c72:	e02b      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c74:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c76:	623b      	str	r3, [r7, #32]
      break;
 8001c78:	e02b      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	0c9b      	lsrs	r3, r3, #18
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3328      	adds	r3, #40	; 0x28
 8001c84:	443b      	add	r3, r7
 8001c86:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c8a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d012      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	0c5b      	lsrs	r3, r3, #17
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	3328      	adds	r3, #40	; 0x28
 8001ca2:	443b      	add	r3, r7
 8001ca4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ca8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cae:	fb03 f202 	mul.w	r2, r3, r2
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	e004      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc0:	fb02 f303 	mul.w	r3, r2, r3
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	623b      	str	r3, [r7, #32]
      break;
 8001cca:	e002      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cce:	623b      	str	r3, [r7, #32]
      break;
 8001cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3728      	adds	r7, #40	; 0x28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc90      	pop	{r4, r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	080032a4 	.word	0x080032a4
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	007a1200 	.word	0x007a1200
 8001cec:	003d0900 	.word	0x003d0900

08001cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf4:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	20000044 	.word	0x20000044

08001d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d08:	f7ff fff2 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4903      	ldr	r1, [pc, #12]	; (8001d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	080032c4 	.word	0x080032c4

08001d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d30:	f7ff ffde 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	0adb      	lsrs	r3, r3, #11
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	4903      	ldr	r1, [pc, #12]	; (8001d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	080032c4 	.word	0x080032c4

08001d54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <RCC_Delay+0x34>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <RCC_Delay+0x38>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	0a5b      	lsrs	r3, r3, #9
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d70:	bf00      	nop
  }
  while (Delay --);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	60fa      	str	r2, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f9      	bne.n	8001d70 <RCC_Delay+0x1c>
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	20000044 	.word	0x20000044
 8001d8c:	10624dd3 	.word	0x10624dd3

08001d90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e03f      	b.n	8001e22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d106      	bne.n	8001dbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7fe fc56 	bl	8000668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2224      	movs	r2, #36	; 0x24
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fc25 	bl	8002624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b08a      	sub	sp, #40	; 0x28
 8001e2e:	af02      	add	r7, sp, #8
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4613      	mov	r3, r2
 8001e38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d17c      	bne.n	8001f44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_UART_Transmit+0x2c>
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e075      	b.n	8001f46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_UART_Transmit+0x3e>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e06e      	b.n	8001f46 <HAL_UART_Transmit+0x11c>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2221      	movs	r2, #33	; 0x21
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e7e:	f7fe fd33 	bl	80008e8 <HAL_GetTick>
 8001e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	88fa      	ldrh	r2, [r7, #6]
 8001e88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	88fa      	ldrh	r2, [r7, #6]
 8001e8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e98:	d108      	bne.n	8001eac <HAL_UART_Transmit+0x82>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d104      	bne.n	8001eac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	e003      	b.n	8001eb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ebc:	e02a      	b.n	8001f14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 fa11 	bl	80022f0 <UART_WaitOnFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e036      	b.n	8001f46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10b      	bne.n	8001ef6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	e007      	b.n	8001f06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	781a      	ldrb	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	3301      	adds	r3, #1
 8001f04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1cf      	bne.n	8001ebe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2200      	movs	r2, #0
 8001f26:	2140      	movs	r1, #64	; 0x40
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f9e1 	bl	80022f0 <UART_WaitOnFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e006      	b.n	8001f46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e000      	b.n	8001f46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f44:	2302      	movs	r3, #2
  }
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3720      	adds	r7, #32
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10d      	bne.n	8001fa2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <HAL_UART_IRQHandler+0x52>
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fa99 	bl	80024d2 <UART_Receive_IT>
      return;
 8001fa0:	e17b      	b.n	800229a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80b1 	beq.w	800210c <HAL_UART_IRQHandler+0x1bc>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <HAL_UART_IRQHandler+0x70>
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80a6 	beq.w	800210c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_UART_IRQHandler+0x90>
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_UART_IRQHandler+0xb0>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f043 0202 	orr.w	r2, r3, #2
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_UART_IRQHandler+0xd0>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f043 0204 	orr.w	r2, r3, #4
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00f      	beq.n	800204a <HAL_UART_IRQHandler+0xfa>
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b00      	cmp	r3, #0
 8002032:	d104      	bne.n	800203e <HAL_UART_IRQHandler+0xee>
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f043 0208 	orr.w	r2, r3, #8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 811e 	beq.w	8002290 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <HAL_UART_IRQHandler+0x11e>
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fa32 	bl	80024d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf14      	ite	ne
 800207c:	2301      	movne	r3, #1
 800207e:	2300      	moveq	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <HAL_UART_IRQHandler+0x146>
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d031      	beq.n	80020fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f974 	bl	8002384 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d023      	beq.n	80020f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d013      	beq.n	80020ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	4a76      	ldr	r2, [pc, #472]	; (80022a0 <HAL_UART_IRQHandler+0x350>)
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fd80 	bl	8000bd4 <HAL_DMA_Abort_IT>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d016      	beq.n	8002108 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020e4:	4610      	mov	r0, r2
 80020e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e8:	e00e      	b.n	8002108 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8ec 	bl	80022c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f0:	e00a      	b.n	8002108 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f8e8 	bl	80022c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f8:	e006      	b.n	8002108 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8e4 	bl	80022c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002106:	e0c3      	b.n	8002290 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002108:	bf00      	nop
    return;
 800210a:	e0c1      	b.n	8002290 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	2b01      	cmp	r3, #1
 8002112:	f040 80a1 	bne.w	8002258 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 809b 	beq.w	8002258 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8095 	beq.w	8002258 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d04e      	beq.n	80021f0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800215c:	8a3b      	ldrh	r3, [r7, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8098 	beq.w	8002294 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002168:	8a3a      	ldrh	r2, [r7, #16]
 800216a:	429a      	cmp	r2, r3
 800216c:	f080 8092 	bcs.w	8002294 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	8a3a      	ldrh	r2, [r7, #16]
 8002174:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b20      	cmp	r3, #32
 800217e:	d02b      	beq.n	80021d8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800218e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0210 	bic.w	r2, r2, #16
 80021cc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe fcc3 	bl	8000b5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4619      	mov	r1, r3
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f876 	bl	80022da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80021ee:	e051      	b.n	8002294 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d047      	beq.n	8002298 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002208:	8a7b      	ldrh	r3, [r7, #18]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d044      	beq.n	8002298 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800221c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0201 	bic.w	r2, r2, #1
 800222c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0210 	bic.w	r2, r2, #16
 800224a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800224c:	8a7b      	ldrh	r3, [r7, #18]
 800224e:	4619      	mov	r1, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f842 	bl	80022da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002256:	e01f      	b.n	8002298 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <HAL_UART_IRQHandler+0x324>
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f8c9 	bl	8002404 <UART_Transmit_IT>
    return;
 8002272:	e012      	b.n	800229a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <HAL_UART_IRQHandler+0x34a>
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f90a 	bl	80024a2 <UART_EndTransmit_IT>
    return;
 800228e:	e004      	b.n	800229a <HAL_UART_IRQHandler+0x34a>
    return;
 8002290:	bf00      	nop
 8002292:	e002      	b.n	800229a <HAL_UART_IRQHandler+0x34a>
      return;
 8002294:	bf00      	nop
 8002296:	e000      	b.n	800229a <HAL_UART_IRQHandler+0x34a>
      return;
 8002298:	bf00      	nop
  }
}
 800229a:	3728      	adds	r7, #40	; 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	080023dd 	.word	0x080023dd

080022a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr

080022da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002300:	e02c      	b.n	800235c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d028      	beq.n	800235c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <UART_WaitOnFlagUntilTimeout+0x30>
 8002310:	f7fe faea 	bl	80008e8 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	429a      	cmp	r2, r3
 800231e:	d21d      	bcs.n	800235c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800232e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e00f      	b.n	800237c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	4013      	ands	r3, r2
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	429a      	cmp	r2, r3
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	429a      	cmp	r2, r3
 8002378:	d0c3      	beq.n	8002302 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800239a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d107      	bne.n	80023c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0210 	bic.w	r2, r2, #16
 80023c2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f7ff ff66 	bl	80022c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b21      	cmp	r3, #33	; 0x21
 8002416:	d13e      	bne.n	8002496 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002420:	d114      	bne.n	800244c <UART_Transmit_IT+0x48>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d110      	bne.n	800244c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800243e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	1c9a      	adds	r2, r3, #2
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	621a      	str	r2, [r3, #32]
 800244a:	e008      	b.n	800245e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	1c59      	adds	r1, r3, #1
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6211      	str	r1, [r2, #32]
 8002456:	781a      	ldrb	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29b      	uxth	r3, r3
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4619      	mov	r1, r3
 800246c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10f      	bne.n	8002492 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002480:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002490:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002496:	2302      	movs	r3, #2
  }
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff feee 	bl	80022a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b22      	cmp	r3, #34	; 0x22
 80024e4:	f040 8099 	bne.w	800261a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f0:	d117      	bne.n	8002522 <UART_Receive_IT+0x50>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d113      	bne.n	8002522 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	b29b      	uxth	r3, r3
 800250c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002510:	b29a      	uxth	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	1c9a      	adds	r2, r3, #2
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	629a      	str	r2, [r3, #40]	; 0x28
 8002520:	e026      	b.n	8002570 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002528:	2300      	movs	r3, #0
 800252a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002534:	d007      	beq.n	8002546 <UART_Receive_IT+0x74>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10a      	bne.n	8002554 <UART_Receive_IT+0x82>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e008      	b.n	8002566 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002560:	b2da      	uxtb	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29b      	uxth	r3, r3
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4619      	mov	r1, r3
 800257e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002580:	2b00      	cmp	r3, #0
 8002582:	d148      	bne.n	8002616 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0220 	bic.w	r2, r2, #32
 8002592:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d123      	bne.n	800260c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0210 	bic.w	r2, r2, #16
 80025d8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	d10a      	bne.n	80025fe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002602:	4619      	mov	r1, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff fe68 	bl	80022da <HAL_UARTEx_RxEventCallback>
 800260a:	e002      	b.n	8002612 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff fe52 	bl	80022b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	e002      	b.n	800261c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e000      	b.n	800261c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800261a:	2302      	movs	r3, #2
  }
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800265e:	f023 030c 	bic.w	r3, r3, #12
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	430b      	orrs	r3, r1
 800266a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a2c      	ldr	r2, [pc, #176]	; (8002738 <UART_SetConfig+0x114>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d103      	bne.n	8002694 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800268c:	f7ff fb4e 	bl	8001d2c <HAL_RCC_GetPCLK2Freq>
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	e002      	b.n	800269a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002694:	f7ff fb36 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8002698:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	009a      	lsls	r2, r3, #2
 80026a4:	441a      	add	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	4a22      	ldr	r2, [pc, #136]	; (800273c <UART_SetConfig+0x118>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	0119      	lsls	r1, r3, #4
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	009a      	lsls	r2, r3, #2
 80026c4:	441a      	add	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026d0:	4b1a      	ldr	r3, [pc, #104]	; (800273c <UART_SetConfig+0x118>)
 80026d2:	fba3 0302 	umull	r0, r3, r3, r2
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2064      	movs	r0, #100	; 0x64
 80026da:	fb00 f303 	mul.w	r3, r0, r3
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	3332      	adds	r3, #50	; 0x32
 80026e4:	4a15      	ldr	r2, [pc, #84]	; (800273c <UART_SetConfig+0x118>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f0:	4419      	add	r1, r3
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	009a      	lsls	r2, r3, #2
 80026fc:	441a      	add	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	fbb2 f2f3 	udiv	r2, r2, r3
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <UART_SetConfig+0x118>)
 800270a:	fba3 0302 	umull	r0, r3, r3, r2
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	2064      	movs	r0, #100	; 0x64
 8002712:	fb00 f303 	mul.w	r3, r0, r3
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	3332      	adds	r3, #50	; 0x32
 800271c:	4a07      	ldr	r2, [pc, #28]	; (800273c <UART_SetConfig+0x118>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	f003 020f 	and.w	r2, r3, #15
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	440a      	add	r2, r1
 800272e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40013800 	.word	0x40013800
 800273c:	51eb851f 	.word	0x51eb851f

08002740 <siprintf>:
 8002740:	b40e      	push	{r1, r2, r3}
 8002742:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002746:	b500      	push	{lr}
 8002748:	b09c      	sub	sp, #112	; 0x70
 800274a:	ab1d      	add	r3, sp, #116	; 0x74
 800274c:	9002      	str	r0, [sp, #8]
 800274e:	9006      	str	r0, [sp, #24]
 8002750:	9107      	str	r1, [sp, #28]
 8002752:	9104      	str	r1, [sp, #16]
 8002754:	4808      	ldr	r0, [pc, #32]	; (8002778 <siprintf+0x38>)
 8002756:	4909      	ldr	r1, [pc, #36]	; (800277c <siprintf+0x3c>)
 8002758:	f853 2b04 	ldr.w	r2, [r3], #4
 800275c:	9105      	str	r1, [sp, #20]
 800275e:	6800      	ldr	r0, [r0, #0]
 8002760:	a902      	add	r1, sp, #8
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	f000 f99c 	bl	8002aa0 <_svfiprintf_r>
 8002768:	2200      	movs	r2, #0
 800276a:	9b02      	ldr	r3, [sp, #8]
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	b01c      	add	sp, #112	; 0x70
 8002770:	f85d eb04 	ldr.w	lr, [sp], #4
 8002774:	b003      	add	sp, #12
 8002776:	4770      	bx	lr
 8002778:	2000009c 	.word	0x2000009c
 800277c:	ffff0208 	.word	0xffff0208

08002780 <memset>:
 8002780:	4603      	mov	r3, r0
 8002782:	4402      	add	r2, r0
 8002784:	4293      	cmp	r3, r2
 8002786:	d100      	bne.n	800278a <memset+0xa>
 8002788:	4770      	bx	lr
 800278a:	f803 1b01 	strb.w	r1, [r3], #1
 800278e:	e7f9      	b.n	8002784 <memset+0x4>

08002790 <__errno>:
 8002790:	4b01      	ldr	r3, [pc, #4]	; (8002798 <__errno+0x8>)
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	2000009c 	.word	0x2000009c

0800279c <__libc_init_array>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	2600      	movs	r6, #0
 80027a0:	4d0c      	ldr	r5, [pc, #48]	; (80027d4 <__libc_init_array+0x38>)
 80027a2:	4c0d      	ldr	r4, [pc, #52]	; (80027d8 <__libc_init_array+0x3c>)
 80027a4:	1b64      	subs	r4, r4, r5
 80027a6:	10a4      	asrs	r4, r4, #2
 80027a8:	42a6      	cmp	r6, r4
 80027aa:	d109      	bne.n	80027c0 <__libc_init_array+0x24>
 80027ac:	f000 fc7a 	bl	80030a4 <_init>
 80027b0:	2600      	movs	r6, #0
 80027b2:	4d0a      	ldr	r5, [pc, #40]	; (80027dc <__libc_init_array+0x40>)
 80027b4:	4c0a      	ldr	r4, [pc, #40]	; (80027e0 <__libc_init_array+0x44>)
 80027b6:	1b64      	subs	r4, r4, r5
 80027b8:	10a4      	asrs	r4, r4, #2
 80027ba:	42a6      	cmp	r6, r4
 80027bc:	d105      	bne.n	80027ca <__libc_init_array+0x2e>
 80027be:	bd70      	pop	{r4, r5, r6, pc}
 80027c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c4:	4798      	blx	r3
 80027c6:	3601      	adds	r6, #1
 80027c8:	e7ee      	b.n	80027a8 <__libc_init_array+0xc>
 80027ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ce:	4798      	blx	r3
 80027d0:	3601      	adds	r6, #1
 80027d2:	e7f2      	b.n	80027ba <__libc_init_array+0x1e>
 80027d4:	08003300 	.word	0x08003300
 80027d8:	08003300 	.word	0x08003300
 80027dc:	08003300 	.word	0x08003300
 80027e0:	08003304 	.word	0x08003304

080027e4 <__retarget_lock_acquire_recursive>:
 80027e4:	4770      	bx	lr

080027e6 <__retarget_lock_release_recursive>:
 80027e6:	4770      	bx	lr

080027e8 <memcpy>:
 80027e8:	440a      	add	r2, r1
 80027ea:	4291      	cmp	r1, r2
 80027ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80027f0:	d100      	bne.n	80027f4 <memcpy+0xc>
 80027f2:	4770      	bx	lr
 80027f4:	b510      	push	{r4, lr}
 80027f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027fa:	4291      	cmp	r1, r2
 80027fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002800:	d1f9      	bne.n	80027f6 <memcpy+0xe>
 8002802:	bd10      	pop	{r4, pc}

08002804 <_free_r>:
 8002804:	b538      	push	{r3, r4, r5, lr}
 8002806:	4605      	mov	r5, r0
 8002808:	2900      	cmp	r1, #0
 800280a:	d040      	beq.n	800288e <_free_r+0x8a>
 800280c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002810:	1f0c      	subs	r4, r1, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	bfb8      	it	lt
 8002816:	18e4      	addlt	r4, r4, r3
 8002818:	f000 f8dc 	bl	80029d4 <__malloc_lock>
 800281c:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <_free_r+0x8c>)
 800281e:	6813      	ldr	r3, [r2, #0]
 8002820:	b933      	cbnz	r3, 8002830 <_free_r+0x2c>
 8002822:	6063      	str	r3, [r4, #4]
 8002824:	6014      	str	r4, [r2, #0]
 8002826:	4628      	mov	r0, r5
 8002828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800282c:	f000 b8d8 	b.w	80029e0 <__malloc_unlock>
 8002830:	42a3      	cmp	r3, r4
 8002832:	d908      	bls.n	8002846 <_free_r+0x42>
 8002834:	6820      	ldr	r0, [r4, #0]
 8002836:	1821      	adds	r1, r4, r0
 8002838:	428b      	cmp	r3, r1
 800283a:	bf01      	itttt	eq
 800283c:	6819      	ldreq	r1, [r3, #0]
 800283e:	685b      	ldreq	r3, [r3, #4]
 8002840:	1809      	addeq	r1, r1, r0
 8002842:	6021      	streq	r1, [r4, #0]
 8002844:	e7ed      	b.n	8002822 <_free_r+0x1e>
 8002846:	461a      	mov	r2, r3
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	b10b      	cbz	r3, 8002850 <_free_r+0x4c>
 800284c:	42a3      	cmp	r3, r4
 800284e:	d9fa      	bls.n	8002846 <_free_r+0x42>
 8002850:	6811      	ldr	r1, [r2, #0]
 8002852:	1850      	adds	r0, r2, r1
 8002854:	42a0      	cmp	r0, r4
 8002856:	d10b      	bne.n	8002870 <_free_r+0x6c>
 8002858:	6820      	ldr	r0, [r4, #0]
 800285a:	4401      	add	r1, r0
 800285c:	1850      	adds	r0, r2, r1
 800285e:	4283      	cmp	r3, r0
 8002860:	6011      	str	r1, [r2, #0]
 8002862:	d1e0      	bne.n	8002826 <_free_r+0x22>
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4408      	add	r0, r1
 800286a:	6010      	str	r0, [r2, #0]
 800286c:	6053      	str	r3, [r2, #4]
 800286e:	e7da      	b.n	8002826 <_free_r+0x22>
 8002870:	d902      	bls.n	8002878 <_free_r+0x74>
 8002872:	230c      	movs	r3, #12
 8002874:	602b      	str	r3, [r5, #0]
 8002876:	e7d6      	b.n	8002826 <_free_r+0x22>
 8002878:	6820      	ldr	r0, [r4, #0]
 800287a:	1821      	adds	r1, r4, r0
 800287c:	428b      	cmp	r3, r1
 800287e:	bf01      	itttt	eq
 8002880:	6819      	ldreq	r1, [r3, #0]
 8002882:	685b      	ldreq	r3, [r3, #4]
 8002884:	1809      	addeq	r1, r1, r0
 8002886:	6021      	streq	r1, [r4, #0]
 8002888:	6063      	str	r3, [r4, #4]
 800288a:	6054      	str	r4, [r2, #4]
 800288c:	e7cb      	b.n	8002826 <_free_r+0x22>
 800288e:	bd38      	pop	{r3, r4, r5, pc}
 8002890:	2000030c 	.word	0x2000030c

08002894 <sbrk_aligned>:
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	4e0e      	ldr	r6, [pc, #56]	; (80028d0 <sbrk_aligned+0x3c>)
 8002898:	460c      	mov	r4, r1
 800289a:	6831      	ldr	r1, [r6, #0]
 800289c:	4605      	mov	r5, r0
 800289e:	b911      	cbnz	r1, 80028a6 <sbrk_aligned+0x12>
 80028a0:	f000 fbaa 	bl	8002ff8 <_sbrk_r>
 80028a4:	6030      	str	r0, [r6, #0]
 80028a6:	4621      	mov	r1, r4
 80028a8:	4628      	mov	r0, r5
 80028aa:	f000 fba5 	bl	8002ff8 <_sbrk_r>
 80028ae:	1c43      	adds	r3, r0, #1
 80028b0:	d00a      	beq.n	80028c8 <sbrk_aligned+0x34>
 80028b2:	1cc4      	adds	r4, r0, #3
 80028b4:	f024 0403 	bic.w	r4, r4, #3
 80028b8:	42a0      	cmp	r0, r4
 80028ba:	d007      	beq.n	80028cc <sbrk_aligned+0x38>
 80028bc:	1a21      	subs	r1, r4, r0
 80028be:	4628      	mov	r0, r5
 80028c0:	f000 fb9a 	bl	8002ff8 <_sbrk_r>
 80028c4:	3001      	adds	r0, #1
 80028c6:	d101      	bne.n	80028cc <sbrk_aligned+0x38>
 80028c8:	f04f 34ff 	mov.w	r4, #4294967295
 80028cc:	4620      	mov	r0, r4
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	20000310 	.word	0x20000310

080028d4 <_malloc_r>:
 80028d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028d8:	1ccd      	adds	r5, r1, #3
 80028da:	f025 0503 	bic.w	r5, r5, #3
 80028de:	3508      	adds	r5, #8
 80028e0:	2d0c      	cmp	r5, #12
 80028e2:	bf38      	it	cc
 80028e4:	250c      	movcc	r5, #12
 80028e6:	2d00      	cmp	r5, #0
 80028e8:	4607      	mov	r7, r0
 80028ea:	db01      	blt.n	80028f0 <_malloc_r+0x1c>
 80028ec:	42a9      	cmp	r1, r5
 80028ee:	d905      	bls.n	80028fc <_malloc_r+0x28>
 80028f0:	230c      	movs	r3, #12
 80028f2:	2600      	movs	r6, #0
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	4630      	mov	r0, r6
 80028f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80029d0 <_malloc_r+0xfc>
 8002900:	f000 f868 	bl	80029d4 <__malloc_lock>
 8002904:	f8d8 3000 	ldr.w	r3, [r8]
 8002908:	461c      	mov	r4, r3
 800290a:	bb5c      	cbnz	r4, 8002964 <_malloc_r+0x90>
 800290c:	4629      	mov	r1, r5
 800290e:	4638      	mov	r0, r7
 8002910:	f7ff ffc0 	bl	8002894 <sbrk_aligned>
 8002914:	1c43      	adds	r3, r0, #1
 8002916:	4604      	mov	r4, r0
 8002918:	d155      	bne.n	80029c6 <_malloc_r+0xf2>
 800291a:	f8d8 4000 	ldr.w	r4, [r8]
 800291e:	4626      	mov	r6, r4
 8002920:	2e00      	cmp	r6, #0
 8002922:	d145      	bne.n	80029b0 <_malloc_r+0xdc>
 8002924:	2c00      	cmp	r4, #0
 8002926:	d048      	beq.n	80029ba <_malloc_r+0xe6>
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	4631      	mov	r1, r6
 800292c:	4638      	mov	r0, r7
 800292e:	eb04 0903 	add.w	r9, r4, r3
 8002932:	f000 fb61 	bl	8002ff8 <_sbrk_r>
 8002936:	4581      	cmp	r9, r0
 8002938:	d13f      	bne.n	80029ba <_malloc_r+0xe6>
 800293a:	6821      	ldr	r1, [r4, #0]
 800293c:	4638      	mov	r0, r7
 800293e:	1a6d      	subs	r5, r5, r1
 8002940:	4629      	mov	r1, r5
 8002942:	f7ff ffa7 	bl	8002894 <sbrk_aligned>
 8002946:	3001      	adds	r0, #1
 8002948:	d037      	beq.n	80029ba <_malloc_r+0xe6>
 800294a:	6823      	ldr	r3, [r4, #0]
 800294c:	442b      	add	r3, r5
 800294e:	6023      	str	r3, [r4, #0]
 8002950:	f8d8 3000 	ldr.w	r3, [r8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d038      	beq.n	80029ca <_malloc_r+0xf6>
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	42a2      	cmp	r2, r4
 800295c:	d12b      	bne.n	80029b6 <_malloc_r+0xe2>
 800295e:	2200      	movs	r2, #0
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	e00f      	b.n	8002984 <_malloc_r+0xb0>
 8002964:	6822      	ldr	r2, [r4, #0]
 8002966:	1b52      	subs	r2, r2, r5
 8002968:	d41f      	bmi.n	80029aa <_malloc_r+0xd6>
 800296a:	2a0b      	cmp	r2, #11
 800296c:	d917      	bls.n	800299e <_malloc_r+0xca>
 800296e:	1961      	adds	r1, r4, r5
 8002970:	42a3      	cmp	r3, r4
 8002972:	6025      	str	r5, [r4, #0]
 8002974:	bf18      	it	ne
 8002976:	6059      	strne	r1, [r3, #4]
 8002978:	6863      	ldr	r3, [r4, #4]
 800297a:	bf08      	it	eq
 800297c:	f8c8 1000 	streq.w	r1, [r8]
 8002980:	5162      	str	r2, [r4, r5]
 8002982:	604b      	str	r3, [r1, #4]
 8002984:	4638      	mov	r0, r7
 8002986:	f104 060b 	add.w	r6, r4, #11
 800298a:	f000 f829 	bl	80029e0 <__malloc_unlock>
 800298e:	f026 0607 	bic.w	r6, r6, #7
 8002992:	1d23      	adds	r3, r4, #4
 8002994:	1af2      	subs	r2, r6, r3
 8002996:	d0ae      	beq.n	80028f6 <_malloc_r+0x22>
 8002998:	1b9b      	subs	r3, r3, r6
 800299a:	50a3      	str	r3, [r4, r2]
 800299c:	e7ab      	b.n	80028f6 <_malloc_r+0x22>
 800299e:	42a3      	cmp	r3, r4
 80029a0:	6862      	ldr	r2, [r4, #4]
 80029a2:	d1dd      	bne.n	8002960 <_malloc_r+0x8c>
 80029a4:	f8c8 2000 	str.w	r2, [r8]
 80029a8:	e7ec      	b.n	8002984 <_malloc_r+0xb0>
 80029aa:	4623      	mov	r3, r4
 80029ac:	6864      	ldr	r4, [r4, #4]
 80029ae:	e7ac      	b.n	800290a <_malloc_r+0x36>
 80029b0:	4634      	mov	r4, r6
 80029b2:	6876      	ldr	r6, [r6, #4]
 80029b4:	e7b4      	b.n	8002920 <_malloc_r+0x4c>
 80029b6:	4613      	mov	r3, r2
 80029b8:	e7cc      	b.n	8002954 <_malloc_r+0x80>
 80029ba:	230c      	movs	r3, #12
 80029bc:	4638      	mov	r0, r7
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	f000 f80e 	bl	80029e0 <__malloc_unlock>
 80029c4:	e797      	b.n	80028f6 <_malloc_r+0x22>
 80029c6:	6025      	str	r5, [r4, #0]
 80029c8:	e7dc      	b.n	8002984 <_malloc_r+0xb0>
 80029ca:	605b      	str	r3, [r3, #4]
 80029cc:	deff      	udf	#255	; 0xff
 80029ce:	bf00      	nop
 80029d0:	2000030c 	.word	0x2000030c

080029d4 <__malloc_lock>:
 80029d4:	4801      	ldr	r0, [pc, #4]	; (80029dc <__malloc_lock+0x8>)
 80029d6:	f7ff bf05 	b.w	80027e4 <__retarget_lock_acquire_recursive>
 80029da:	bf00      	nop
 80029dc:	20000308 	.word	0x20000308

080029e0 <__malloc_unlock>:
 80029e0:	4801      	ldr	r0, [pc, #4]	; (80029e8 <__malloc_unlock+0x8>)
 80029e2:	f7ff bf00 	b.w	80027e6 <__retarget_lock_release_recursive>
 80029e6:	bf00      	nop
 80029e8:	20000308 	.word	0x20000308

080029ec <__ssputs_r>:
 80029ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029f0:	461f      	mov	r7, r3
 80029f2:	688e      	ldr	r6, [r1, #8]
 80029f4:	4682      	mov	sl, r0
 80029f6:	42be      	cmp	r6, r7
 80029f8:	460c      	mov	r4, r1
 80029fa:	4690      	mov	r8, r2
 80029fc:	680b      	ldr	r3, [r1, #0]
 80029fe:	d82c      	bhi.n	8002a5a <__ssputs_r+0x6e>
 8002a00:	898a      	ldrh	r2, [r1, #12]
 8002a02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a06:	d026      	beq.n	8002a56 <__ssputs_r+0x6a>
 8002a08:	6965      	ldr	r5, [r4, #20]
 8002a0a:	6909      	ldr	r1, [r1, #16]
 8002a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a10:	eba3 0901 	sub.w	r9, r3, r1
 8002a14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a18:	1c7b      	adds	r3, r7, #1
 8002a1a:	444b      	add	r3, r9
 8002a1c:	106d      	asrs	r5, r5, #1
 8002a1e:	429d      	cmp	r5, r3
 8002a20:	bf38      	it	cc
 8002a22:	461d      	movcc	r5, r3
 8002a24:	0553      	lsls	r3, r2, #21
 8002a26:	d527      	bpl.n	8002a78 <__ssputs_r+0x8c>
 8002a28:	4629      	mov	r1, r5
 8002a2a:	f7ff ff53 	bl	80028d4 <_malloc_r>
 8002a2e:	4606      	mov	r6, r0
 8002a30:	b360      	cbz	r0, 8002a8c <__ssputs_r+0xa0>
 8002a32:	464a      	mov	r2, r9
 8002a34:	6921      	ldr	r1, [r4, #16]
 8002a36:	f7ff fed7 	bl	80027e8 <memcpy>
 8002a3a:	89a3      	ldrh	r3, [r4, #12]
 8002a3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a44:	81a3      	strh	r3, [r4, #12]
 8002a46:	6126      	str	r6, [r4, #16]
 8002a48:	444e      	add	r6, r9
 8002a4a:	6026      	str	r6, [r4, #0]
 8002a4c:	463e      	mov	r6, r7
 8002a4e:	6165      	str	r5, [r4, #20]
 8002a50:	eba5 0509 	sub.w	r5, r5, r9
 8002a54:	60a5      	str	r5, [r4, #8]
 8002a56:	42be      	cmp	r6, r7
 8002a58:	d900      	bls.n	8002a5c <__ssputs_r+0x70>
 8002a5a:	463e      	mov	r6, r7
 8002a5c:	4632      	mov	r2, r6
 8002a5e:	4641      	mov	r1, r8
 8002a60:	6820      	ldr	r0, [r4, #0]
 8002a62:	f000 faaf 	bl	8002fc4 <memmove>
 8002a66:	2000      	movs	r0, #0
 8002a68:	68a3      	ldr	r3, [r4, #8]
 8002a6a:	1b9b      	subs	r3, r3, r6
 8002a6c:	60a3      	str	r3, [r4, #8]
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	4433      	add	r3, r6
 8002a72:	6023      	str	r3, [r4, #0]
 8002a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a78:	462a      	mov	r2, r5
 8002a7a:	f000 fadb 	bl	8003034 <_realloc_r>
 8002a7e:	4606      	mov	r6, r0
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d1e0      	bne.n	8002a46 <__ssputs_r+0x5a>
 8002a84:	4650      	mov	r0, sl
 8002a86:	6921      	ldr	r1, [r4, #16]
 8002a88:	f7ff febc 	bl	8002804 <_free_r>
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	f8ca 3000 	str.w	r3, [sl]
 8002a92:	89a3      	ldrh	r3, [r4, #12]
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a9c:	81a3      	strh	r3, [r4, #12]
 8002a9e:	e7e9      	b.n	8002a74 <__ssputs_r+0x88>

08002aa0 <_svfiprintf_r>:
 8002aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aa4:	4698      	mov	r8, r3
 8002aa6:	898b      	ldrh	r3, [r1, #12]
 8002aa8:	4607      	mov	r7, r0
 8002aaa:	061b      	lsls	r3, r3, #24
 8002aac:	460d      	mov	r5, r1
 8002aae:	4614      	mov	r4, r2
 8002ab0:	b09d      	sub	sp, #116	; 0x74
 8002ab2:	d50e      	bpl.n	8002ad2 <_svfiprintf_r+0x32>
 8002ab4:	690b      	ldr	r3, [r1, #16]
 8002ab6:	b963      	cbnz	r3, 8002ad2 <_svfiprintf_r+0x32>
 8002ab8:	2140      	movs	r1, #64	; 0x40
 8002aba:	f7ff ff0b 	bl	80028d4 <_malloc_r>
 8002abe:	6028      	str	r0, [r5, #0]
 8002ac0:	6128      	str	r0, [r5, #16]
 8002ac2:	b920      	cbnz	r0, 8002ace <_svfiprintf_r+0x2e>
 8002ac4:	230c      	movs	r3, #12
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8002acc:	e0d0      	b.n	8002c70 <_svfiprintf_r+0x1d0>
 8002ace:	2340      	movs	r3, #64	; 0x40
 8002ad0:	616b      	str	r3, [r5, #20]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002adc:	2330      	movs	r3, #48	; 0x30
 8002ade:	f04f 0901 	mov.w	r9, #1
 8002ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ae6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002c88 <_svfiprintf_r+0x1e8>
 8002aea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002aee:	4623      	mov	r3, r4
 8002af0:	469a      	mov	sl, r3
 8002af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002af6:	b10a      	cbz	r2, 8002afc <_svfiprintf_r+0x5c>
 8002af8:	2a25      	cmp	r2, #37	; 0x25
 8002afa:	d1f9      	bne.n	8002af0 <_svfiprintf_r+0x50>
 8002afc:	ebba 0b04 	subs.w	fp, sl, r4
 8002b00:	d00b      	beq.n	8002b1a <_svfiprintf_r+0x7a>
 8002b02:	465b      	mov	r3, fp
 8002b04:	4622      	mov	r2, r4
 8002b06:	4629      	mov	r1, r5
 8002b08:	4638      	mov	r0, r7
 8002b0a:	f7ff ff6f 	bl	80029ec <__ssputs_r>
 8002b0e:	3001      	adds	r0, #1
 8002b10:	f000 80a9 	beq.w	8002c66 <_svfiprintf_r+0x1c6>
 8002b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b16:	445a      	add	r2, fp
 8002b18:	9209      	str	r2, [sp, #36]	; 0x24
 8002b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80a1 	beq.w	8002c66 <_svfiprintf_r+0x1c6>
 8002b24:	2300      	movs	r3, #0
 8002b26:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b2e:	f10a 0a01 	add.w	sl, sl, #1
 8002b32:	9304      	str	r3, [sp, #16]
 8002b34:	9307      	str	r3, [sp, #28]
 8002b36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b3a:	931a      	str	r3, [sp, #104]	; 0x68
 8002b3c:	4654      	mov	r4, sl
 8002b3e:	2205      	movs	r2, #5
 8002b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b44:	4850      	ldr	r0, [pc, #320]	; (8002c88 <_svfiprintf_r+0x1e8>)
 8002b46:	f000 fa67 	bl	8003018 <memchr>
 8002b4a:	9a04      	ldr	r2, [sp, #16]
 8002b4c:	b9d8      	cbnz	r0, 8002b86 <_svfiprintf_r+0xe6>
 8002b4e:	06d0      	lsls	r0, r2, #27
 8002b50:	bf44      	itt	mi
 8002b52:	2320      	movmi	r3, #32
 8002b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b58:	0711      	lsls	r1, r2, #28
 8002b5a:	bf44      	itt	mi
 8002b5c:	232b      	movmi	r3, #43	; 0x2b
 8002b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b62:	f89a 3000 	ldrb.w	r3, [sl]
 8002b66:	2b2a      	cmp	r3, #42	; 0x2a
 8002b68:	d015      	beq.n	8002b96 <_svfiprintf_r+0xf6>
 8002b6a:	4654      	mov	r4, sl
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f04f 0c0a 	mov.w	ip, #10
 8002b72:	9a07      	ldr	r2, [sp, #28]
 8002b74:	4621      	mov	r1, r4
 8002b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b7a:	3b30      	subs	r3, #48	; 0x30
 8002b7c:	2b09      	cmp	r3, #9
 8002b7e:	d94d      	bls.n	8002c1c <_svfiprintf_r+0x17c>
 8002b80:	b1b0      	cbz	r0, 8002bb0 <_svfiprintf_r+0x110>
 8002b82:	9207      	str	r2, [sp, #28]
 8002b84:	e014      	b.n	8002bb0 <_svfiprintf_r+0x110>
 8002b86:	eba0 0308 	sub.w	r3, r0, r8
 8002b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	46a2      	mov	sl, r4
 8002b92:	9304      	str	r3, [sp, #16]
 8002b94:	e7d2      	b.n	8002b3c <_svfiprintf_r+0x9c>
 8002b96:	9b03      	ldr	r3, [sp, #12]
 8002b98:	1d19      	adds	r1, r3, #4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	9103      	str	r1, [sp, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bfbb      	ittet	lt
 8002ba2:	425b      	neglt	r3, r3
 8002ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8002ba8:	9307      	strge	r3, [sp, #28]
 8002baa:	9307      	strlt	r3, [sp, #28]
 8002bac:	bfb8      	it	lt
 8002bae:	9204      	strlt	r2, [sp, #16]
 8002bb0:	7823      	ldrb	r3, [r4, #0]
 8002bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8002bb4:	d10c      	bne.n	8002bd0 <_svfiprintf_r+0x130>
 8002bb6:	7863      	ldrb	r3, [r4, #1]
 8002bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8002bba:	d134      	bne.n	8002c26 <_svfiprintf_r+0x186>
 8002bbc:	9b03      	ldr	r3, [sp, #12]
 8002bbe:	3402      	adds	r4, #2
 8002bc0:	1d1a      	adds	r2, r3, #4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	9203      	str	r2, [sp, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bfb8      	it	lt
 8002bca:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bce:	9305      	str	r3, [sp, #20]
 8002bd0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002c8c <_svfiprintf_r+0x1ec>
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	4650      	mov	r0, sl
 8002bd8:	7821      	ldrb	r1, [r4, #0]
 8002bda:	f000 fa1d 	bl	8003018 <memchr>
 8002bde:	b138      	cbz	r0, 8002bf0 <_svfiprintf_r+0x150>
 8002be0:	2240      	movs	r2, #64	; 0x40
 8002be2:	9b04      	ldr	r3, [sp, #16]
 8002be4:	eba0 000a 	sub.w	r0, r0, sl
 8002be8:	4082      	lsls	r2, r0
 8002bea:	4313      	orrs	r3, r2
 8002bec:	3401      	adds	r4, #1
 8002bee:	9304      	str	r3, [sp, #16]
 8002bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bf4:	2206      	movs	r2, #6
 8002bf6:	4826      	ldr	r0, [pc, #152]	; (8002c90 <_svfiprintf_r+0x1f0>)
 8002bf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bfc:	f000 fa0c 	bl	8003018 <memchr>
 8002c00:	2800      	cmp	r0, #0
 8002c02:	d038      	beq.n	8002c76 <_svfiprintf_r+0x1d6>
 8002c04:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <_svfiprintf_r+0x1f4>)
 8002c06:	bb1b      	cbnz	r3, 8002c50 <_svfiprintf_r+0x1b0>
 8002c08:	9b03      	ldr	r3, [sp, #12]
 8002c0a:	3307      	adds	r3, #7
 8002c0c:	f023 0307 	bic.w	r3, r3, #7
 8002c10:	3308      	adds	r3, #8
 8002c12:	9303      	str	r3, [sp, #12]
 8002c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c16:	4433      	add	r3, r6
 8002c18:	9309      	str	r3, [sp, #36]	; 0x24
 8002c1a:	e768      	b.n	8002aee <_svfiprintf_r+0x4e>
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	2001      	movs	r0, #1
 8002c20:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c24:	e7a6      	b.n	8002b74 <_svfiprintf_r+0xd4>
 8002c26:	2300      	movs	r3, #0
 8002c28:	f04f 0c0a 	mov.w	ip, #10
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	3401      	adds	r4, #1
 8002c30:	9305      	str	r3, [sp, #20]
 8002c32:	4620      	mov	r0, r4
 8002c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c38:	3a30      	subs	r2, #48	; 0x30
 8002c3a:	2a09      	cmp	r2, #9
 8002c3c:	d903      	bls.n	8002c46 <_svfiprintf_r+0x1a6>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0c6      	beq.n	8002bd0 <_svfiprintf_r+0x130>
 8002c42:	9105      	str	r1, [sp, #20]
 8002c44:	e7c4      	b.n	8002bd0 <_svfiprintf_r+0x130>
 8002c46:	4604      	mov	r4, r0
 8002c48:	2301      	movs	r3, #1
 8002c4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c4e:	e7f0      	b.n	8002c32 <_svfiprintf_r+0x192>
 8002c50:	ab03      	add	r3, sp, #12
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	462a      	mov	r2, r5
 8002c56:	4638      	mov	r0, r7
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <_svfiprintf_r+0x1f8>)
 8002c5a:	a904      	add	r1, sp, #16
 8002c5c:	f3af 8000 	nop.w
 8002c60:	1c42      	adds	r2, r0, #1
 8002c62:	4606      	mov	r6, r0
 8002c64:	d1d6      	bne.n	8002c14 <_svfiprintf_r+0x174>
 8002c66:	89ab      	ldrh	r3, [r5, #12]
 8002c68:	065b      	lsls	r3, r3, #25
 8002c6a:	f53f af2d 	bmi.w	8002ac8 <_svfiprintf_r+0x28>
 8002c6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c70:	b01d      	add	sp, #116	; 0x74
 8002c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c76:	ab03      	add	r3, sp, #12
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	462a      	mov	r2, r5
 8002c7c:	4638      	mov	r0, r7
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <_svfiprintf_r+0x1f8>)
 8002c80:	a904      	add	r1, sp, #16
 8002c82:	f000 f87d 	bl	8002d80 <_printf_i>
 8002c86:	e7eb      	b.n	8002c60 <_svfiprintf_r+0x1c0>
 8002c88:	080032cc 	.word	0x080032cc
 8002c8c:	080032d2 	.word	0x080032d2
 8002c90:	080032d6 	.word	0x080032d6
 8002c94:	00000000 	.word	0x00000000
 8002c98:	080029ed 	.word	0x080029ed

08002c9c <_printf_common>:
 8002c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ca0:	4616      	mov	r6, r2
 8002ca2:	4699      	mov	r9, r3
 8002ca4:	688a      	ldr	r2, [r1, #8]
 8002ca6:	690b      	ldr	r3, [r1, #16]
 8002ca8:	4607      	mov	r7, r0
 8002caa:	4293      	cmp	r3, r2
 8002cac:	bfb8      	it	lt
 8002cae:	4613      	movlt	r3, r2
 8002cb0:	6033      	str	r3, [r6, #0]
 8002cb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cb6:	460c      	mov	r4, r1
 8002cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cbc:	b10a      	cbz	r2, 8002cc2 <_printf_common+0x26>
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	6033      	str	r3, [r6, #0]
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	0699      	lsls	r1, r3, #26
 8002cc6:	bf42      	ittt	mi
 8002cc8:	6833      	ldrmi	r3, [r6, #0]
 8002cca:	3302      	addmi	r3, #2
 8002ccc:	6033      	strmi	r3, [r6, #0]
 8002cce:	6825      	ldr	r5, [r4, #0]
 8002cd0:	f015 0506 	ands.w	r5, r5, #6
 8002cd4:	d106      	bne.n	8002ce4 <_printf_common+0x48>
 8002cd6:	f104 0a19 	add.w	sl, r4, #25
 8002cda:	68e3      	ldr	r3, [r4, #12]
 8002cdc:	6832      	ldr	r2, [r6, #0]
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	42ab      	cmp	r3, r5
 8002ce2:	dc2b      	bgt.n	8002d3c <_printf_common+0xa0>
 8002ce4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ce8:	1e13      	subs	r3, r2, #0
 8002cea:	6822      	ldr	r2, [r4, #0]
 8002cec:	bf18      	it	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	0692      	lsls	r2, r2, #26
 8002cf2:	d430      	bmi.n	8002d56 <_printf_common+0xba>
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	4638      	mov	r0, r7
 8002cf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cfc:	47c0      	blx	r8
 8002cfe:	3001      	adds	r0, #1
 8002d00:	d023      	beq.n	8002d4a <_printf_common+0xae>
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	6922      	ldr	r2, [r4, #16]
 8002d06:	f003 0306 	and.w	r3, r3, #6
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	bf14      	ite	ne
 8002d0e:	2500      	movne	r5, #0
 8002d10:	6833      	ldreq	r3, [r6, #0]
 8002d12:	f04f 0600 	mov.w	r6, #0
 8002d16:	bf08      	it	eq
 8002d18:	68e5      	ldreq	r5, [r4, #12]
 8002d1a:	f104 041a 	add.w	r4, r4, #26
 8002d1e:	bf08      	it	eq
 8002d20:	1aed      	subeq	r5, r5, r3
 8002d22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002d26:	bf08      	it	eq
 8002d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	bfc4      	itt	gt
 8002d30:	1a9b      	subgt	r3, r3, r2
 8002d32:	18ed      	addgt	r5, r5, r3
 8002d34:	42b5      	cmp	r5, r6
 8002d36:	d11a      	bne.n	8002d6e <_printf_common+0xd2>
 8002d38:	2000      	movs	r0, #0
 8002d3a:	e008      	b.n	8002d4e <_printf_common+0xb2>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	4652      	mov	r2, sl
 8002d40:	4649      	mov	r1, r9
 8002d42:	4638      	mov	r0, r7
 8002d44:	47c0      	blx	r8
 8002d46:	3001      	adds	r0, #1
 8002d48:	d103      	bne.n	8002d52 <_printf_common+0xb6>
 8002d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d52:	3501      	adds	r5, #1
 8002d54:	e7c1      	b.n	8002cda <_printf_common+0x3e>
 8002d56:	2030      	movs	r0, #48	; 0x30
 8002d58:	18e1      	adds	r1, r4, r3
 8002d5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d64:	4422      	add	r2, r4
 8002d66:	3302      	adds	r3, #2
 8002d68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d6c:	e7c2      	b.n	8002cf4 <_printf_common+0x58>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	4622      	mov	r2, r4
 8002d72:	4649      	mov	r1, r9
 8002d74:	4638      	mov	r0, r7
 8002d76:	47c0      	blx	r8
 8002d78:	3001      	adds	r0, #1
 8002d7a:	d0e6      	beq.n	8002d4a <_printf_common+0xae>
 8002d7c:	3601      	adds	r6, #1
 8002d7e:	e7d9      	b.n	8002d34 <_printf_common+0x98>

08002d80 <_printf_i>:
 8002d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d84:	7e0f      	ldrb	r7, [r1, #24]
 8002d86:	4691      	mov	r9, r2
 8002d88:	2f78      	cmp	r7, #120	; 0x78
 8002d8a:	4680      	mov	r8, r0
 8002d8c:	460c      	mov	r4, r1
 8002d8e:	469a      	mov	sl, r3
 8002d90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d96:	d807      	bhi.n	8002da8 <_printf_i+0x28>
 8002d98:	2f62      	cmp	r7, #98	; 0x62
 8002d9a:	d80a      	bhi.n	8002db2 <_printf_i+0x32>
 8002d9c:	2f00      	cmp	r7, #0
 8002d9e:	f000 80d5 	beq.w	8002f4c <_printf_i+0x1cc>
 8002da2:	2f58      	cmp	r7, #88	; 0x58
 8002da4:	f000 80c1 	beq.w	8002f2a <_printf_i+0x1aa>
 8002da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002db0:	e03a      	b.n	8002e28 <_printf_i+0xa8>
 8002db2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002db6:	2b15      	cmp	r3, #21
 8002db8:	d8f6      	bhi.n	8002da8 <_printf_i+0x28>
 8002dba:	a101      	add	r1, pc, #4	; (adr r1, 8002dc0 <_printf_i+0x40>)
 8002dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002dc0:	08002e19 	.word	0x08002e19
 8002dc4:	08002e2d 	.word	0x08002e2d
 8002dc8:	08002da9 	.word	0x08002da9
 8002dcc:	08002da9 	.word	0x08002da9
 8002dd0:	08002da9 	.word	0x08002da9
 8002dd4:	08002da9 	.word	0x08002da9
 8002dd8:	08002e2d 	.word	0x08002e2d
 8002ddc:	08002da9 	.word	0x08002da9
 8002de0:	08002da9 	.word	0x08002da9
 8002de4:	08002da9 	.word	0x08002da9
 8002de8:	08002da9 	.word	0x08002da9
 8002dec:	08002f33 	.word	0x08002f33
 8002df0:	08002e59 	.word	0x08002e59
 8002df4:	08002eed 	.word	0x08002eed
 8002df8:	08002da9 	.word	0x08002da9
 8002dfc:	08002da9 	.word	0x08002da9
 8002e00:	08002f55 	.word	0x08002f55
 8002e04:	08002da9 	.word	0x08002da9
 8002e08:	08002e59 	.word	0x08002e59
 8002e0c:	08002da9 	.word	0x08002da9
 8002e10:	08002da9 	.word	0x08002da9
 8002e14:	08002ef5 	.word	0x08002ef5
 8002e18:	682b      	ldr	r3, [r5, #0]
 8002e1a:	1d1a      	adds	r2, r3, #4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	602a      	str	r2, [r5, #0]
 8002e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0a0      	b.n	8002f6e <_printf_i+0x1ee>
 8002e2c:	6820      	ldr	r0, [r4, #0]
 8002e2e:	682b      	ldr	r3, [r5, #0]
 8002e30:	0607      	lsls	r7, r0, #24
 8002e32:	f103 0104 	add.w	r1, r3, #4
 8002e36:	6029      	str	r1, [r5, #0]
 8002e38:	d501      	bpl.n	8002e3e <_printf_i+0xbe>
 8002e3a:	681e      	ldr	r6, [r3, #0]
 8002e3c:	e003      	b.n	8002e46 <_printf_i+0xc6>
 8002e3e:	0646      	lsls	r6, r0, #25
 8002e40:	d5fb      	bpl.n	8002e3a <_printf_i+0xba>
 8002e42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002e46:	2e00      	cmp	r6, #0
 8002e48:	da03      	bge.n	8002e52 <_printf_i+0xd2>
 8002e4a:	232d      	movs	r3, #45	; 0x2d
 8002e4c:	4276      	negs	r6, r6
 8002e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e52:	230a      	movs	r3, #10
 8002e54:	4859      	ldr	r0, [pc, #356]	; (8002fbc <_printf_i+0x23c>)
 8002e56:	e012      	b.n	8002e7e <_printf_i+0xfe>
 8002e58:	682b      	ldr	r3, [r5, #0]
 8002e5a:	6820      	ldr	r0, [r4, #0]
 8002e5c:	1d19      	adds	r1, r3, #4
 8002e5e:	6029      	str	r1, [r5, #0]
 8002e60:	0605      	lsls	r5, r0, #24
 8002e62:	d501      	bpl.n	8002e68 <_printf_i+0xe8>
 8002e64:	681e      	ldr	r6, [r3, #0]
 8002e66:	e002      	b.n	8002e6e <_printf_i+0xee>
 8002e68:	0641      	lsls	r1, r0, #25
 8002e6a:	d5fb      	bpl.n	8002e64 <_printf_i+0xe4>
 8002e6c:	881e      	ldrh	r6, [r3, #0]
 8002e6e:	2f6f      	cmp	r7, #111	; 0x6f
 8002e70:	bf0c      	ite	eq
 8002e72:	2308      	moveq	r3, #8
 8002e74:	230a      	movne	r3, #10
 8002e76:	4851      	ldr	r0, [pc, #324]	; (8002fbc <_printf_i+0x23c>)
 8002e78:	2100      	movs	r1, #0
 8002e7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e7e:	6865      	ldr	r5, [r4, #4]
 8002e80:	2d00      	cmp	r5, #0
 8002e82:	bfa8      	it	ge
 8002e84:	6821      	ldrge	r1, [r4, #0]
 8002e86:	60a5      	str	r5, [r4, #8]
 8002e88:	bfa4      	itt	ge
 8002e8a:	f021 0104 	bicge.w	r1, r1, #4
 8002e8e:	6021      	strge	r1, [r4, #0]
 8002e90:	b90e      	cbnz	r6, 8002e96 <_printf_i+0x116>
 8002e92:	2d00      	cmp	r5, #0
 8002e94:	d04b      	beq.n	8002f2e <_printf_i+0x1ae>
 8002e96:	4615      	mov	r5, r2
 8002e98:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e9c:	fb03 6711 	mls	r7, r3, r1, r6
 8002ea0:	5dc7      	ldrb	r7, [r0, r7]
 8002ea2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ea6:	4637      	mov	r7, r6
 8002ea8:	42bb      	cmp	r3, r7
 8002eaa:	460e      	mov	r6, r1
 8002eac:	d9f4      	bls.n	8002e98 <_printf_i+0x118>
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d10b      	bne.n	8002eca <_printf_i+0x14a>
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	07de      	lsls	r6, r3, #31
 8002eb6:	d508      	bpl.n	8002eca <_printf_i+0x14a>
 8002eb8:	6923      	ldr	r3, [r4, #16]
 8002eba:	6861      	ldr	r1, [r4, #4]
 8002ebc:	4299      	cmp	r1, r3
 8002ebe:	bfde      	ittt	le
 8002ec0:	2330      	movle	r3, #48	; 0x30
 8002ec2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ec6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002eca:	1b52      	subs	r2, r2, r5
 8002ecc:	6122      	str	r2, [r4, #16]
 8002ece:	464b      	mov	r3, r9
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	4640      	mov	r0, r8
 8002ed4:	f8cd a000 	str.w	sl, [sp]
 8002ed8:	aa03      	add	r2, sp, #12
 8002eda:	f7ff fedf 	bl	8002c9c <_printf_common>
 8002ede:	3001      	adds	r0, #1
 8002ee0:	d14a      	bne.n	8002f78 <_printf_i+0x1f8>
 8002ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee6:	b004      	add	sp, #16
 8002ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	f043 0320 	orr.w	r3, r3, #32
 8002ef2:	6023      	str	r3, [r4, #0]
 8002ef4:	2778      	movs	r7, #120	; 0x78
 8002ef6:	4832      	ldr	r0, [pc, #200]	; (8002fc0 <_printf_i+0x240>)
 8002ef8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	6829      	ldr	r1, [r5, #0]
 8002f00:	061f      	lsls	r7, r3, #24
 8002f02:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f06:	d402      	bmi.n	8002f0e <_printf_i+0x18e>
 8002f08:	065f      	lsls	r7, r3, #25
 8002f0a:	bf48      	it	mi
 8002f0c:	b2b6      	uxthmi	r6, r6
 8002f0e:	07df      	lsls	r7, r3, #31
 8002f10:	bf48      	it	mi
 8002f12:	f043 0320 	orrmi.w	r3, r3, #32
 8002f16:	6029      	str	r1, [r5, #0]
 8002f18:	bf48      	it	mi
 8002f1a:	6023      	strmi	r3, [r4, #0]
 8002f1c:	b91e      	cbnz	r6, 8002f26 <_printf_i+0x1a6>
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	f023 0320 	bic.w	r3, r3, #32
 8002f24:	6023      	str	r3, [r4, #0]
 8002f26:	2310      	movs	r3, #16
 8002f28:	e7a6      	b.n	8002e78 <_printf_i+0xf8>
 8002f2a:	4824      	ldr	r0, [pc, #144]	; (8002fbc <_printf_i+0x23c>)
 8002f2c:	e7e4      	b.n	8002ef8 <_printf_i+0x178>
 8002f2e:	4615      	mov	r5, r2
 8002f30:	e7bd      	b.n	8002eae <_printf_i+0x12e>
 8002f32:	682b      	ldr	r3, [r5, #0]
 8002f34:	6826      	ldr	r6, [r4, #0]
 8002f36:	1d18      	adds	r0, r3, #4
 8002f38:	6961      	ldr	r1, [r4, #20]
 8002f3a:	6028      	str	r0, [r5, #0]
 8002f3c:	0635      	lsls	r5, r6, #24
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	d501      	bpl.n	8002f46 <_printf_i+0x1c6>
 8002f42:	6019      	str	r1, [r3, #0]
 8002f44:	e002      	b.n	8002f4c <_printf_i+0x1cc>
 8002f46:	0670      	lsls	r0, r6, #25
 8002f48:	d5fb      	bpl.n	8002f42 <_printf_i+0x1c2>
 8002f4a:	8019      	strh	r1, [r3, #0]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	4615      	mov	r5, r2
 8002f50:	6123      	str	r3, [r4, #16]
 8002f52:	e7bc      	b.n	8002ece <_printf_i+0x14e>
 8002f54:	682b      	ldr	r3, [r5, #0]
 8002f56:	2100      	movs	r1, #0
 8002f58:	1d1a      	adds	r2, r3, #4
 8002f5a:	602a      	str	r2, [r5, #0]
 8002f5c:	681d      	ldr	r5, [r3, #0]
 8002f5e:	6862      	ldr	r2, [r4, #4]
 8002f60:	4628      	mov	r0, r5
 8002f62:	f000 f859 	bl	8003018 <memchr>
 8002f66:	b108      	cbz	r0, 8002f6c <_printf_i+0x1ec>
 8002f68:	1b40      	subs	r0, r0, r5
 8002f6a:	6060      	str	r0, [r4, #4]
 8002f6c:	6863      	ldr	r3, [r4, #4]
 8002f6e:	6123      	str	r3, [r4, #16]
 8002f70:	2300      	movs	r3, #0
 8002f72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f76:	e7aa      	b.n	8002ece <_printf_i+0x14e>
 8002f78:	462a      	mov	r2, r5
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	4640      	mov	r0, r8
 8002f7e:	6923      	ldr	r3, [r4, #16]
 8002f80:	47d0      	blx	sl
 8002f82:	3001      	adds	r0, #1
 8002f84:	d0ad      	beq.n	8002ee2 <_printf_i+0x162>
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	079b      	lsls	r3, r3, #30
 8002f8a:	d413      	bmi.n	8002fb4 <_printf_i+0x234>
 8002f8c:	68e0      	ldr	r0, [r4, #12]
 8002f8e:	9b03      	ldr	r3, [sp, #12]
 8002f90:	4298      	cmp	r0, r3
 8002f92:	bfb8      	it	lt
 8002f94:	4618      	movlt	r0, r3
 8002f96:	e7a6      	b.n	8002ee6 <_printf_i+0x166>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	4632      	mov	r2, r6
 8002f9c:	4649      	mov	r1, r9
 8002f9e:	4640      	mov	r0, r8
 8002fa0:	47d0      	blx	sl
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d09d      	beq.n	8002ee2 <_printf_i+0x162>
 8002fa6:	3501      	adds	r5, #1
 8002fa8:	68e3      	ldr	r3, [r4, #12]
 8002faa:	9903      	ldr	r1, [sp, #12]
 8002fac:	1a5b      	subs	r3, r3, r1
 8002fae:	42ab      	cmp	r3, r5
 8002fb0:	dcf2      	bgt.n	8002f98 <_printf_i+0x218>
 8002fb2:	e7eb      	b.n	8002f8c <_printf_i+0x20c>
 8002fb4:	2500      	movs	r5, #0
 8002fb6:	f104 0619 	add.w	r6, r4, #25
 8002fba:	e7f5      	b.n	8002fa8 <_printf_i+0x228>
 8002fbc:	080032dd 	.word	0x080032dd
 8002fc0:	080032ee 	.word	0x080032ee

08002fc4 <memmove>:
 8002fc4:	4288      	cmp	r0, r1
 8002fc6:	b510      	push	{r4, lr}
 8002fc8:	eb01 0402 	add.w	r4, r1, r2
 8002fcc:	d902      	bls.n	8002fd4 <memmove+0x10>
 8002fce:	4284      	cmp	r4, r0
 8002fd0:	4623      	mov	r3, r4
 8002fd2:	d807      	bhi.n	8002fe4 <memmove+0x20>
 8002fd4:	1e43      	subs	r3, r0, #1
 8002fd6:	42a1      	cmp	r1, r4
 8002fd8:	d008      	beq.n	8002fec <memmove+0x28>
 8002fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fe2:	e7f8      	b.n	8002fd6 <memmove+0x12>
 8002fe4:	4601      	mov	r1, r0
 8002fe6:	4402      	add	r2, r0
 8002fe8:	428a      	cmp	r2, r1
 8002fea:	d100      	bne.n	8002fee <memmove+0x2a>
 8002fec:	bd10      	pop	{r4, pc}
 8002fee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ff6:	e7f7      	b.n	8002fe8 <memmove+0x24>

08002ff8 <_sbrk_r>:
 8002ff8:	b538      	push	{r3, r4, r5, lr}
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	4d05      	ldr	r5, [pc, #20]	; (8003014 <_sbrk_r+0x1c>)
 8002ffe:	4604      	mov	r4, r0
 8003000:	4608      	mov	r0, r1
 8003002:	602b      	str	r3, [r5, #0]
 8003004:	f7fd fbb6 	bl	8000774 <_sbrk>
 8003008:	1c43      	adds	r3, r0, #1
 800300a:	d102      	bne.n	8003012 <_sbrk_r+0x1a>
 800300c:	682b      	ldr	r3, [r5, #0]
 800300e:	b103      	cbz	r3, 8003012 <_sbrk_r+0x1a>
 8003010:	6023      	str	r3, [r4, #0]
 8003012:	bd38      	pop	{r3, r4, r5, pc}
 8003014:	20000304 	.word	0x20000304

08003018 <memchr>:
 8003018:	4603      	mov	r3, r0
 800301a:	b510      	push	{r4, lr}
 800301c:	b2c9      	uxtb	r1, r1
 800301e:	4402      	add	r2, r0
 8003020:	4293      	cmp	r3, r2
 8003022:	4618      	mov	r0, r3
 8003024:	d101      	bne.n	800302a <memchr+0x12>
 8003026:	2000      	movs	r0, #0
 8003028:	e003      	b.n	8003032 <memchr+0x1a>
 800302a:	7804      	ldrb	r4, [r0, #0]
 800302c:	3301      	adds	r3, #1
 800302e:	428c      	cmp	r4, r1
 8003030:	d1f6      	bne.n	8003020 <memchr+0x8>
 8003032:	bd10      	pop	{r4, pc}

08003034 <_realloc_r>:
 8003034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003038:	4680      	mov	r8, r0
 800303a:	4614      	mov	r4, r2
 800303c:	460e      	mov	r6, r1
 800303e:	b921      	cbnz	r1, 800304a <_realloc_r+0x16>
 8003040:	4611      	mov	r1, r2
 8003042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003046:	f7ff bc45 	b.w	80028d4 <_malloc_r>
 800304a:	b92a      	cbnz	r2, 8003058 <_realloc_r+0x24>
 800304c:	f7ff fbda 	bl	8002804 <_free_r>
 8003050:	4625      	mov	r5, r4
 8003052:	4628      	mov	r0, r5
 8003054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003058:	f000 f81b 	bl	8003092 <_malloc_usable_size_r>
 800305c:	4284      	cmp	r4, r0
 800305e:	4607      	mov	r7, r0
 8003060:	d802      	bhi.n	8003068 <_realloc_r+0x34>
 8003062:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003066:	d812      	bhi.n	800308e <_realloc_r+0x5a>
 8003068:	4621      	mov	r1, r4
 800306a:	4640      	mov	r0, r8
 800306c:	f7ff fc32 	bl	80028d4 <_malloc_r>
 8003070:	4605      	mov	r5, r0
 8003072:	2800      	cmp	r0, #0
 8003074:	d0ed      	beq.n	8003052 <_realloc_r+0x1e>
 8003076:	42bc      	cmp	r4, r7
 8003078:	4622      	mov	r2, r4
 800307a:	4631      	mov	r1, r6
 800307c:	bf28      	it	cs
 800307e:	463a      	movcs	r2, r7
 8003080:	f7ff fbb2 	bl	80027e8 <memcpy>
 8003084:	4631      	mov	r1, r6
 8003086:	4640      	mov	r0, r8
 8003088:	f7ff fbbc 	bl	8002804 <_free_r>
 800308c:	e7e1      	b.n	8003052 <_realloc_r+0x1e>
 800308e:	4635      	mov	r5, r6
 8003090:	e7df      	b.n	8003052 <_realloc_r+0x1e>

08003092 <_malloc_usable_size_r>:
 8003092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003096:	1f18      	subs	r0, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	bfbc      	itt	lt
 800309c:	580b      	ldrlt	r3, [r1, r0]
 800309e:	18c0      	addlt	r0, r0, r3
 80030a0:	4770      	bx	lr
	...

080030a4 <_init>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	bf00      	nop
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr

080030b0 <_fini>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	bf00      	nop
 80030b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b6:	bc08      	pop	{r3}
 80030b8:	469e      	mov	lr, r3
 80030ba:	4770      	bx	lr
