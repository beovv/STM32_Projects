
i2c_scanner_usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007410  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080076c0  080076c0  000176c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007734  08007734  00017734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800773c  0800773c  0001773c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b0  24000000  08007744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000274  240000b0  080077f4  000200b0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000324  080077f4  00020324  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200de  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001360b  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000024bd  00000000  00000000  0003372c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000df0  00000000  00000000  00035bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000add  00000000  00000000  000369e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002fc14  00000000  00000000  000374bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014f34  00000000  00000000  000670d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013678a  00000000  00000000  0007c005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003f64  00000000  00000000  001b2790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  001b66f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000b0 	.word	0x240000b0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080076a8 	.word	0x080076a8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000b4 	.word	0x240000b4
 80002ec:	080076a8 	.word	0x080076a8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fbba 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f870 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f95e 	bl	8000958 <MX_GPIO_Init>
  MX_I2C3_Init();
 800069c:	f000 f8d0 	bl	8000840 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80006a0:	f000 f90e 	bl	80008c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
 80006a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80006a8:	221d      	movs	r2, #29
 80006aa:	4929      	ldr	r1, [pc, #164]	; (8000750 <main+0xc4>)
 80006ac:	4829      	ldr	r0, [pc, #164]	; (8000754 <main+0xc8>)
 80006ae:	f004 fd07 	bl	80050c0 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 80006b2:	4b29      	ldr	r3, [pc, #164]	; (8000758 <main+0xcc>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
 80006b8:	e035      	b.n	8000726 <main+0x9a>
  {
     ret = HAL_I2C_IsDeviceReady(&hi2c3, (uint16_t)(i<<1), 3, 5);
 80006ba:	4b27      	ldr	r3, [pc, #156]	; (8000758 <main+0xcc>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	b299      	uxth	r1, r3
 80006c4:	2305      	movs	r3, #5
 80006c6:	2203      	movs	r2, #3
 80006c8:	4824      	ldr	r0, [pc, #144]	; (800075c <main+0xd0>)
 80006ca:	f001 fce3 	bl	8002094 <HAL_I2C_IsDeviceReady>
 80006ce:	4603      	mov	r3, r0
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <main+0xd4>)
 80006d4:	701a      	strb	r2, [r3, #0]
      if (ret != HAL_OK) /* No ACK Received At That Address */
 80006d6:	4b22      	ldr	r3, [pc, #136]	; (8000760 <main+0xd4>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <main+0x62>
      {
          HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 80006de:	f242 7310 	movw	r3, #10000	; 0x2710
 80006e2:	2204      	movs	r2, #4
 80006e4:	491f      	ldr	r1, [pc, #124]	; (8000764 <main+0xd8>)
 80006e6:	481b      	ldr	r0, [pc, #108]	; (8000754 <main+0xc8>)
 80006e8:	f004 fcea 	bl	80050c0 <HAL_UART_Transmit>
 80006ec:	e015      	b.n	800071a <main+0x8e>
      }
      else if(ret == HAL_OK)
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <main+0xd4>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d111      	bne.n	800071a <main+0x8e>
       if (ret == HAL_OK)
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <main+0xd4>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d10d      	bne.n	800071a <main+0x8e>
     {
    	  sprintf(buf, "0x%X \r\n", i);
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <main+0xcc>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	461a      	mov	r2, r3
 8000704:	4918      	ldr	r1, [pc, #96]	; (8000768 <main+0xdc>)
 8000706:	4819      	ldr	r0, [pc, #100]	; (800076c <main+0xe0>)
 8000708:	f006 fb2a 	bl	8006d60 <siprintf>
          HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 10000);
 800070c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000710:	2219      	movs	r2, #25
 8000712:	4916      	ldr	r1, [pc, #88]	; (800076c <main+0xe0>)
 8000714:	480f      	ldr	r0, [pc, #60]	; (8000754 <main+0xc8>)
 8000716:	f004 fcd3 	bl	80050c0 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <main+0xcc>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <main+0xcc>)
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <main+0xcc>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b25b      	sxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	dac4      	bge.n	80006ba <main+0x2e>
      }
  }
  HAL_UART_Transmit(&huart1, (uint8_t *)EndMSG, sizeof(EndMSG), 10000);
 8000730:	f242 7310 	movw	r3, #10000	; 0x2710
 8000734:	220b      	movs	r2, #11
 8000736:	490e      	ldr	r1, [pc, #56]	; (8000770 <main+0xe4>)
 8000738:	4806      	ldr	r0, [pc, #24]	; (8000754 <main+0xc8>)
 800073a:	f004 fcc1 	bl	80050c0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)Init, sizeof(Init), 10000);
 800073e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000742:	221d      	movs	r2, #29
 8000744:	490b      	ldr	r1, [pc, #44]	; (8000774 <main+0xe8>)
 8000746:	4803      	ldr	r0, [pc, #12]	; (8000754 <main+0xc8>)
 8000748:	f004 fcba 	bl	80050c0 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800074c:	e7fe      	b.n	800074c <main+0xc0>
 800074e:	bf00      	nop
 8000750:	24000004 	.word	0x24000004
 8000754:	24000120 	.word	0x24000120
 8000758:	240001b4 	.word	0x240001b4
 800075c:	240000cc 	.word	0x240000cc
 8000760:	240001b5 	.word	0x240001b5
 8000764:	24000000 	.word	0x24000000
 8000768:	080076c0 	.word	0x080076c0
 800076c:	240001b8 	.word	0x240001b8
 8000770:	24000024 	.word	0x24000024
 8000774:	24000030 	.word	0x24000030

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09c      	sub	sp, #112	; 0x70
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	224c      	movs	r2, #76	; 0x4c
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f006 fb0a 	bl	8006da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2220      	movs	r2, #32
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f006 fb04 	bl	8006da0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000798:	4b27      	ldr	r3, [pc, #156]	; (8000838 <SystemClock_Config+0xc0>)
 800079a:	f04f 32ff 	mov.w	r2, #4294967295
 800079e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a2:	2002      	movs	r0, #2
 80007a4:	f001 fe64 	bl	8002470 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a8:	2300      	movs	r3, #0
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <SystemClock_Config+0xc4>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a22      	ldr	r2, [pc, #136]	; (800083c <SystemClock_Config+0xc4>)
 80007b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <SystemClock_Config+0xc4>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007c4:	bf00      	nop
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <SystemClock_Config+0xc4>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007d2:	d1f8      	bne.n	80007c6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007d8:	2301      	movs	r3, #1
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80007dc:	2340      	movs	r3, #64	; 0x40
 80007de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fe7b 	bl	80024e4 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007f4:	f000 f8da 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	233f      	movs	r3, #63	; 0x3f
 80007fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000808:	2340      	movs	r3, #64	; 0x40
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800080c:	2340      	movs	r3, #64	; 0x40
 800080e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000814:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000816:	2340      	movs	r3, #64	; 0x40
 8000818:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2102      	movs	r1, #2
 800081e:	4618      	mov	r0, r3
 8000820:	f002 fa92 	bl	8002d48 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800082a:	f000 f8bf 	bl	80009ac <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3770      	adds	r7, #112	; 0x70
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	58024400 	.word	0x58024400
 800083c:	58024800 	.word	0x58024800

08000840 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_I2C3_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <MX_I2C3_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_I2C3_Init+0x74>)
 800084c:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <MX_I2C3_Init+0x7c>)
 800084e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_I2C3_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_I2C3_Init+0x74>)
 8000858:	2201      	movs	r2, #1
 800085a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_I2C3_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_I2C3_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_I2C3_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_I2C3_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_I2C3_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800087a:	480e      	ldr	r0, [pc, #56]	; (80008b4 <MX_I2C3_Init+0x74>)
 800087c:	f001 fb7a 	bl	8001f74 <HAL_I2C_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000886:	f000 f891 	bl	80009ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <MX_I2C3_Init+0x74>)
 800088e:	f001 fd58 	bl	8002342 <HAL_I2CEx_ConfigAnalogFilter>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000898:	f000 f888 	bl	80009ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_I2C3_Init+0x74>)
 80008a0:	f001 fd9a 	bl	80023d8 <HAL_I2CEx_ConfigDigitalFilter>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 f87f 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	240000cc 	.word	0x240000cc
 80008b8:	40005c00 	.word	0x40005c00
 80008bc:	00707cbb 	.word	0x00707cbb

080008c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_USART1_UART_Init+0x90>)
 80008c6:	4a23      	ldr	r2, [pc, #140]	; (8000954 <MX_USART1_UART_Init+0x94>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <MX_USART1_UART_Init+0x90>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_USART1_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_USART1_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_USART1_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_USART1_UART_Init+0x90>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_USART1_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_USART1_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_USART1_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USART1_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART1_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000908:	4811      	ldr	r0, [pc, #68]	; (8000950 <MX_USART1_UART_Init+0x90>)
 800090a:	f004 fb89 	bl	8005020 <HAL_UART_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000914:	f000 f84a 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_USART1_UART_Init+0x90>)
 800091c:	f006 f956 	bl	8006bcc <HAL_UARTEx_SetTxFifoThreshold>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000926:	f000 f841 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092a:	2100      	movs	r1, #0
 800092c:	4808      	ldr	r0, [pc, #32]	; (8000950 <MX_USART1_UART_Init+0x90>)
 800092e:	f006 f98b 	bl	8006c48 <HAL_UARTEx_SetRxFifoThreshold>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000938:	f000 f838 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_USART1_UART_Init+0x90>)
 800093e:	f006 f90c 	bl	8006b5a <HAL_UARTEx_DisableFifoMode>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000948:	f000 f830 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24000120 	.word	0x24000120
 8000954:	40011000 	.word	0x40011000

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_GPIO_Init+0x50>)
 8000960:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000964:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <MX_GPIO_Init+0x50>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_GPIO_Init+0x50>)
 8000970:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_GPIO_Init+0x50>)
 800097e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000982:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <MX_GPIO_Init+0x50>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_GPIO_Init+0x50>)
 800098e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	58024400 	.word	0x58024400

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <HAL_MspInit+0x30>)
 80009c0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009c4:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x30>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x30>)
 80009d0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	58024400 	.word	0x58024400

080009ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b0bc      	sub	sp, #240	; 0xf0
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a04:	f107 0318 	add.w	r3, r7, #24
 8000a08:	22c0      	movs	r2, #192	; 0xc0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f006 f9c7 	bl	8006da0 <memset>
  if(hi2c->Instance==I2C3)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a39      	ldr	r2, [pc, #228]	; (8000afc <HAL_I2C_MspInit+0x110>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d16b      	bne.n	8000af4 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000a1c:	f04f 0208 	mov.w	r2, #8
 8000a20:	f04f 0300 	mov.w	r3, #0
 8000a24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a2e:	f107 0318 	add.w	r3, r7, #24
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 fd14 	bl	8003460 <HAL_RCCEx_PeriphCLKConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000a3e:	f7ff ffb5 	bl	80009ac <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <HAL_I2C_MspInit+0x114>)
 8000a44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a48:	4a2d      	ldr	r2, [pc, #180]	; (8000b00 <HAL_I2C_MspInit+0x114>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a52:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <HAL_I2C_MspInit+0x114>)
 8000a54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <HAL_I2C_MspInit+0x114>)
 8000a62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a66:	4a26      	ldr	r2, [pc, #152]	; (8000b00 <HAL_I2C_MspInit+0x114>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <HAL_I2C_MspInit+0x114>)
 8000a72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a86:	2312      	movs	r3, #18
 8000a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4817      	ldr	r0, [pc, #92]	; (8000b04 <HAL_I2C_MspInit+0x118>)
 8000aa6:	f001 f8b5 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab2:	2312      	movs	r3, #18
 8000ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <HAL_I2C_MspInit+0x11c>)
 8000ad2:	f001 f89f 	bl	8001c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_I2C_MspInit+0x114>)
 8000ad8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000adc:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_I2C_MspInit+0x114>)
 8000ade:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ae2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_I2C_MspInit+0x114>)
 8000ae8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000af4:	bf00      	nop
 8000af6:	37f0      	adds	r7, #240	; 0xf0
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40005c00 	.word	0x40005c00
 8000b00:	58024400 	.word	0x58024400
 8000b04:	58020800 	.word	0x58020800
 8000b08:	58020000 	.word	0x58020000

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0ba      	sub	sp, #232	; 0xe8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	22c0      	movs	r2, #192	; 0xc0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f006 f937 	bl	8006da0 <memset>
  if(huart->Instance==USART1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a2b      	ldr	r2, [pc, #172]	; (8000be4 <HAL_UART_MspInit+0xd8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d14e      	bne.n	8000bda <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b3c:	f04f 0201 	mov.w	r2, #1
 8000b40:	f04f 0300 	mov.w	r3, #0
 8000b44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 fc84 	bl	8003460 <HAL_RCCEx_PeriphCLKConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b5e:	f7ff ff25 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <HAL_UART_MspInit+0xdc>)
 8000b64:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000b68:	4a1f      	ldr	r2, [pc, #124]	; (8000be8 <HAL_UART_MspInit+0xdc>)
 8000b6a:	f043 0310 	orr.w	r3, r3, #16
 8000b6e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000b72:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <HAL_UART_MspInit+0xdc>)
 8000b74:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <HAL_UART_MspInit+0xdc>)
 8000b82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b86:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <HAL_UART_MspInit+0xdc>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_UART_MspInit+0xdc>)
 8000b92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bb8:	2307      	movs	r3, #7
 8000bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <HAL_UART_MspInit+0xe0>)
 8000bc6:	f001 f825 	bl	8001c14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2025      	movs	r0, #37	; 0x25
 8000bd0:	f000 fa87 	bl	80010e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bd4:	2025      	movs	r0, #37	; 0x25
 8000bd6:	f000 fa9e 	bl	8001116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	37e8      	adds	r7, #232	; 0xe8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40011000 	.word	0x40011000
 8000be8:	58024400 	.word	0x58024400
 8000bec:	58020000 	.word	0x58020000

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 f956 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <USART1_IRQHandler+0x10>)
 8000c4a:	f004 fac7 	bl	80051dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	24000120 	.word	0x24000120

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f006 f892 	bl	8006db0 <__errno>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <_sbrk+0x64>)
 8000ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	24100000 	.word	0x24100000
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	240001d4 	.word	0x240001d4
 8000cc0:	24000328 	.word	0x24000328

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <SystemInit+0xd0>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cce:	4a31      	ldr	r2, [pc, #196]	; (8000d94 <SystemInit+0xd0>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cd8:	4b2f      	ldr	r3, [pc, #188]	; (8000d98 <SystemInit+0xd4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 030f 	and.w	r3, r3, #15
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d807      	bhi.n	8000cf4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ce4:	4b2c      	ldr	r3, [pc, #176]	; (8000d98 <SystemInit+0xd4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f023 030f 	bic.w	r3, r3, #15
 8000cec:	4a2a      	ldr	r2, [pc, #168]	; (8000d98 <SystemInit+0xd4>)
 8000cee:	f043 0303 	orr.w	r3, r3, #3
 8000cf2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <SystemInit+0xd8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a28      	ldr	r2, [pc, #160]	; (8000d9c <SystemInit+0xd8>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d00:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <SystemInit+0xd8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d06:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <SystemInit+0xd8>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4924      	ldr	r1, [pc, #144]	; (8000d9c <SystemInit+0xd8>)
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <SystemInit+0xdc>)
 8000d0e:	4013      	ands	r3, r2
 8000d10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <SystemInit+0xd4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 030c 	and.w	r3, r3, #12
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d007      	beq.n	8000d2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <SystemInit+0xd4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f023 030f 	bic.w	r3, r3, #15
 8000d26:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <SystemInit+0xd4>)
 8000d28:	f043 0303 	orr.w	r3, r3, #3
 8000d2c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <SystemInit+0xd8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <SystemInit+0xd8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <SystemInit+0xd8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <SystemInit+0xd8>)
 8000d42:	4a18      	ldr	r2, [pc, #96]	; (8000da4 <SystemInit+0xe0>)
 8000d44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <SystemInit+0xd8>)
 8000d48:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <SystemInit+0xe4>)
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <SystemInit+0xd8>)
 8000d4e:	4a17      	ldr	r2, [pc, #92]	; (8000dac <SystemInit+0xe8>)
 8000d50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <SystemInit+0xd8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <SystemInit+0xd8>)
 8000d5a:	4a14      	ldr	r2, [pc, #80]	; (8000dac <SystemInit+0xe8>)
 8000d5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <SystemInit+0xd8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <SystemInit+0xd8>)
 8000d66:	4a11      	ldr	r2, [pc, #68]	; (8000dac <SystemInit+0xe8>)
 8000d68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <SystemInit+0xd8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <SystemInit+0xd8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <SystemInit+0xd8>)
 8000d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <SystemInit+0xd8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <SystemInit+0xec>)
 8000d84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00
 8000d98:	52002000 	.word	0x52002000
 8000d9c:	58024400 	.word	0x58024400
 8000da0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000da4:	02020200 	.word	0x02020200
 8000da8:	01ff0000 	.word	0x01ff0000
 8000dac:	01010280 	.word	0x01010280
 8000db0:	52004000 	.word	0x52004000

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000db8:	f7ff ff84 	bl	8000cc4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dbe:	490d      	ldr	r1, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	; (8000e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f005 ffeb 	bl	8006dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fc51 	bl	800068c <main>
  bx  lr
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dec:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000df0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000df4:	240000b0 	.word	0x240000b0
  ldr r2, =_sidata
 8000df8:	08007744 	.word	0x08007744
  ldr r2, =_sbss
 8000dfc:	240000b0 	.word	0x240000b0
  ldr r4, =_ebss
 8000e00:	24000324 	.word	0x24000324

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f000 f95c 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e14:	f002 f94e 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_Init+0x68>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	0a1b      	lsrs	r3, r3, #8
 8000e20:	f003 030f 	and.w	r3, r3, #15
 8000e24:	4913      	ldr	r1, [pc, #76]	; (8000e74 <HAL_Init+0x6c>)
 8000e26:	5ccb      	ldrb	r3, [r1, r3]
 8000e28:	f003 031f 	and.w	r3, r3, #31
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e30:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_Init+0x68>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <HAL_Init+0x6c>)
 8000e3c:	5cd3      	ldrb	r3, [r2, r3]
 8000e3e:	f003 031f 	and.w	r3, r3, #31
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	fa22 f303 	lsr.w	r3, r2, r3
 8000e48:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_Init+0x70>)
 8000e4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_Init+0x74>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e52:	200f      	movs	r0, #15
 8000e54:	f000 f814 	bl	8000e80 <HAL_InitTick>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e002      	b.n	8000e68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e62:	f7ff fda9 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	58024400 	.word	0x58024400
 8000e74:	080076c8 	.word	0x080076c8
 8000e78:	24000054 	.word	0x24000054
 8000e7c:	24000050 	.word	0x24000050

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_InitTick+0x60>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e021      	b.n	8000ed8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <HAL_InitTick+0x64>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_InitTick+0x60>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f941 	bl	8001132 <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f000 f90b 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x68>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2400005c 	.word	0x2400005c
 8000ee4:	24000050 	.word	0x24000050
 8000ee8:	24000058 	.word	0x24000058

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2400005c 	.word	0x2400005c
 8000f10:	240001d8 	.word	0x240001d8

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	240001d8 	.word	0x240001d8

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <__NVIC_SetPriorityGrouping+0x40>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <__NVIC_SetPriorityGrouping+0x40>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00
 8000f70:	05fa0000 	.word	0x05fa0000

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db0b      	blt.n	8000fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	f003 021f 	and.w	r2, r3, #31
 8000fa8:	4907      	ldr	r1, [pc, #28]	; (8000fc8 <__NVIC_EnableIRQ+0x38>)
 8000faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff ff8e 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff29 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff40 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff90 	bl	8001020 <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5f 	bl	8000fcc <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff33 	bl	8000f90 <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffa4 	bl	8001088 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff fede 	bl	8000f14 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e2dc      	b.n	800171e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d008      	beq.n	8001182 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e2cd      	b.n	800171e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a76      	ldr	r2, [pc, #472]	; (8001360 <HAL_DMA_Abort+0x214>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d04a      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a74      	ldr	r2, [pc, #464]	; (8001364 <HAL_DMA_Abort+0x218>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d045      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a73      	ldr	r2, [pc, #460]	; (8001368 <HAL_DMA_Abort+0x21c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d040      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a71      	ldr	r2, [pc, #452]	; (800136c <HAL_DMA_Abort+0x220>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d03b      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a70      	ldr	r2, [pc, #448]	; (8001370 <HAL_DMA_Abort+0x224>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d036      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a6e      	ldr	r2, [pc, #440]	; (8001374 <HAL_DMA_Abort+0x228>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d031      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a6d      	ldr	r2, [pc, #436]	; (8001378 <HAL_DMA_Abort+0x22c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d02c      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a6b      	ldr	r2, [pc, #428]	; (800137c <HAL_DMA_Abort+0x230>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d027      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a6a      	ldr	r2, [pc, #424]	; (8001380 <HAL_DMA_Abort+0x234>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d022      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a68      	ldr	r2, [pc, #416]	; (8001384 <HAL_DMA_Abort+0x238>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d01d      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a67      	ldr	r2, [pc, #412]	; (8001388 <HAL_DMA_Abort+0x23c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d018      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a65      	ldr	r2, [pc, #404]	; (800138c <HAL_DMA_Abort+0x240>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a64      	ldr	r2, [pc, #400]	; (8001390 <HAL_DMA_Abort+0x244>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d00e      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a62      	ldr	r2, [pc, #392]	; (8001394 <HAL_DMA_Abort+0x248>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d009      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a61      	ldr	r2, [pc, #388]	; (8001398 <HAL_DMA_Abort+0x24c>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d004      	beq.n	8001222 <HAL_DMA_Abort+0xd6>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a5f      	ldr	r2, [pc, #380]	; (800139c <HAL_DMA_Abort+0x250>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d101      	bne.n	8001226 <HAL_DMA_Abort+0xda>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <HAL_DMA_Abort+0xdc>
 8001226:	2300      	movs	r3, #0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d013      	beq.n	8001254 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 021e 	bic.w	r2, r2, #30
 800123a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	695a      	ldr	r2, [r3, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800124a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	e00a      	b.n	800126a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 020e 	bic.w	r2, r2, #14
 8001262:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a3c      	ldr	r2, [pc, #240]	; (8001360 <HAL_DMA_Abort+0x214>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d072      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a3a      	ldr	r2, [pc, #232]	; (8001364 <HAL_DMA_Abort+0x218>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d06d      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a39      	ldr	r2, [pc, #228]	; (8001368 <HAL_DMA_Abort+0x21c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d068      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a37      	ldr	r2, [pc, #220]	; (800136c <HAL_DMA_Abort+0x220>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d063      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a36      	ldr	r2, [pc, #216]	; (8001370 <HAL_DMA_Abort+0x224>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d05e      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a34      	ldr	r2, [pc, #208]	; (8001374 <HAL_DMA_Abort+0x228>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d059      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a33      	ldr	r2, [pc, #204]	; (8001378 <HAL_DMA_Abort+0x22c>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d054      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a31      	ldr	r2, [pc, #196]	; (800137c <HAL_DMA_Abort+0x230>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d04f      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a30      	ldr	r2, [pc, #192]	; (8001380 <HAL_DMA_Abort+0x234>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d04a      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a2e      	ldr	r2, [pc, #184]	; (8001384 <HAL_DMA_Abort+0x238>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d045      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a2d      	ldr	r2, [pc, #180]	; (8001388 <HAL_DMA_Abort+0x23c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d040      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a2b      	ldr	r2, [pc, #172]	; (800138c <HAL_DMA_Abort+0x240>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d03b      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a2a      	ldr	r2, [pc, #168]	; (8001390 <HAL_DMA_Abort+0x244>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d036      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a28      	ldr	r2, [pc, #160]	; (8001394 <HAL_DMA_Abort+0x248>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d031      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a27      	ldr	r2, [pc, #156]	; (8001398 <HAL_DMA_Abort+0x24c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d02c      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a25      	ldr	r2, [pc, #148]	; (800139c <HAL_DMA_Abort+0x250>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d027      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <HAL_DMA_Abort+0x254>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d022      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a22      	ldr	r2, [pc, #136]	; (80013a4 <HAL_DMA_Abort+0x258>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d01d      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <HAL_DMA_Abort+0x25c>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d018      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <HAL_DMA_Abort+0x260>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a1e      	ldr	r2, [pc, #120]	; (80013b0 <HAL_DMA_Abort+0x264>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d00e      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <HAL_DMA_Abort+0x268>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d009      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a1b      	ldr	r2, [pc, #108]	; (80013b8 <HAL_DMA_Abort+0x26c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d004      	beq.n	800135a <HAL_DMA_Abort+0x20e>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a19      	ldr	r2, [pc, #100]	; (80013bc <HAL_DMA_Abort+0x270>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d132      	bne.n	80013c0 <HAL_DMA_Abort+0x274>
 800135a:	2301      	movs	r3, #1
 800135c:	e031      	b.n	80013c2 <HAL_DMA_Abort+0x276>
 800135e:	bf00      	nop
 8001360:	40020010 	.word	0x40020010
 8001364:	40020028 	.word	0x40020028
 8001368:	40020040 	.word	0x40020040
 800136c:	40020058 	.word	0x40020058
 8001370:	40020070 	.word	0x40020070
 8001374:	40020088 	.word	0x40020088
 8001378:	400200a0 	.word	0x400200a0
 800137c:	400200b8 	.word	0x400200b8
 8001380:	40020410 	.word	0x40020410
 8001384:	40020428 	.word	0x40020428
 8001388:	40020440 	.word	0x40020440
 800138c:	40020458 	.word	0x40020458
 8001390:	40020470 	.word	0x40020470
 8001394:	40020488 	.word	0x40020488
 8001398:	400204a0 	.word	0x400204a0
 800139c:	400204b8 	.word	0x400204b8
 80013a0:	58025408 	.word	0x58025408
 80013a4:	5802541c 	.word	0x5802541c
 80013a8:	58025430 	.word	0x58025430
 80013ac:	58025444 	.word	0x58025444
 80013b0:	58025458 	.word	0x58025458
 80013b4:	5802546c 	.word	0x5802546c
 80013b8:	58025480 	.word	0x58025480
 80013bc:	58025494 	.word	0x58025494
 80013c0:	2300      	movs	r3, #0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d007      	beq.n	80013d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a6d      	ldr	r2, [pc, #436]	; (8001590 <HAL_DMA_Abort+0x444>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d04a      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a6b      	ldr	r2, [pc, #428]	; (8001594 <HAL_DMA_Abort+0x448>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d045      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a6a      	ldr	r2, [pc, #424]	; (8001598 <HAL_DMA_Abort+0x44c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d040      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a68      	ldr	r2, [pc, #416]	; (800159c <HAL_DMA_Abort+0x450>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d03b      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a67      	ldr	r2, [pc, #412]	; (80015a0 <HAL_DMA_Abort+0x454>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d036      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a65      	ldr	r2, [pc, #404]	; (80015a4 <HAL_DMA_Abort+0x458>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d031      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a64      	ldr	r2, [pc, #400]	; (80015a8 <HAL_DMA_Abort+0x45c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d02c      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a62      	ldr	r2, [pc, #392]	; (80015ac <HAL_DMA_Abort+0x460>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d027      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a61      	ldr	r2, [pc, #388]	; (80015b0 <HAL_DMA_Abort+0x464>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d022      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a5f      	ldr	r2, [pc, #380]	; (80015b4 <HAL_DMA_Abort+0x468>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d01d      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a5e      	ldr	r2, [pc, #376]	; (80015b8 <HAL_DMA_Abort+0x46c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d018      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a5c      	ldr	r2, [pc, #368]	; (80015bc <HAL_DMA_Abort+0x470>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d013      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a5b      	ldr	r2, [pc, #364]	; (80015c0 <HAL_DMA_Abort+0x474>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d00e      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a59      	ldr	r2, [pc, #356]	; (80015c4 <HAL_DMA_Abort+0x478>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d009      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a58      	ldr	r2, [pc, #352]	; (80015c8 <HAL_DMA_Abort+0x47c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d004      	beq.n	8001476 <HAL_DMA_Abort+0x32a>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a56      	ldr	r2, [pc, #344]	; (80015cc <HAL_DMA_Abort+0x480>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d108      	bne.n	8001488 <HAL_DMA_Abort+0x33c>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0201 	bic.w	r2, r2, #1
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e007      	b.n	8001498 <HAL_DMA_Abort+0x34c>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001498:	e013      	b.n	80014c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800149a:	f7ff fd3b 	bl	8000f14 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b05      	cmp	r3, #5
 80014a6:	d90c      	bls.n	80014c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2220      	movs	r2, #32
 80014ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2203      	movs	r2, #3
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e12d      	b.n	800171e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1e5      	bne.n	800149a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a2f      	ldr	r2, [pc, #188]	; (8001590 <HAL_DMA_Abort+0x444>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d04a      	beq.n	800156e <HAL_DMA_Abort+0x422>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a2d      	ldr	r2, [pc, #180]	; (8001594 <HAL_DMA_Abort+0x448>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d045      	beq.n	800156e <HAL_DMA_Abort+0x422>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a2c      	ldr	r2, [pc, #176]	; (8001598 <HAL_DMA_Abort+0x44c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d040      	beq.n	800156e <HAL_DMA_Abort+0x422>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a2a      	ldr	r2, [pc, #168]	; (800159c <HAL_DMA_Abort+0x450>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d03b      	beq.n	800156e <HAL_DMA_Abort+0x422>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <HAL_DMA_Abort+0x454>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d036      	beq.n	800156e <HAL_DMA_Abort+0x422>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a27      	ldr	r2, [pc, #156]	; (80015a4 <HAL_DMA_Abort+0x458>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d031      	beq.n	800156e <HAL_DMA_Abort+0x422>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a26      	ldr	r2, [pc, #152]	; (80015a8 <HAL_DMA_Abort+0x45c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d02c      	beq.n	800156e <HAL_DMA_Abort+0x422>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a24      	ldr	r2, [pc, #144]	; (80015ac <HAL_DMA_Abort+0x460>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d027      	beq.n	800156e <HAL_DMA_Abort+0x422>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a23      	ldr	r2, [pc, #140]	; (80015b0 <HAL_DMA_Abort+0x464>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d022      	beq.n	800156e <HAL_DMA_Abort+0x422>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a21      	ldr	r2, [pc, #132]	; (80015b4 <HAL_DMA_Abort+0x468>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d01d      	beq.n	800156e <HAL_DMA_Abort+0x422>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <HAL_DMA_Abort+0x46c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d018      	beq.n	800156e <HAL_DMA_Abort+0x422>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <HAL_DMA_Abort+0x470>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d013      	beq.n	800156e <HAL_DMA_Abort+0x422>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_DMA_Abort+0x474>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d00e      	beq.n	800156e <HAL_DMA_Abort+0x422>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <HAL_DMA_Abort+0x478>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d009      	beq.n	800156e <HAL_DMA_Abort+0x422>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <HAL_DMA_Abort+0x47c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d004      	beq.n	800156e <HAL_DMA_Abort+0x422>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a18      	ldr	r2, [pc, #96]	; (80015cc <HAL_DMA_Abort+0x480>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_DMA_Abort+0x426>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_DMA_Abort+0x428>
 8001572:	2300      	movs	r3, #0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d02b      	beq.n	80015d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001582:	f003 031f 	and.w	r3, r3, #31
 8001586:	223f      	movs	r2, #63	; 0x3f
 8001588:	409a      	lsls	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	e02a      	b.n	80015e6 <HAL_DMA_Abort+0x49a>
 8001590:	40020010 	.word	0x40020010
 8001594:	40020028 	.word	0x40020028
 8001598:	40020040 	.word	0x40020040
 800159c:	40020058 	.word	0x40020058
 80015a0:	40020070 	.word	0x40020070
 80015a4:	40020088 	.word	0x40020088
 80015a8:	400200a0 	.word	0x400200a0
 80015ac:	400200b8 	.word	0x400200b8
 80015b0:	40020410 	.word	0x40020410
 80015b4:	40020428 	.word	0x40020428
 80015b8:	40020440 	.word	0x40020440
 80015bc:	40020458 	.word	0x40020458
 80015c0:	40020470 	.word	0x40020470
 80015c4:	40020488 	.word	0x40020488
 80015c8:	400204a0 	.word	0x400204a0
 80015cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	2201      	movs	r2, #1
 80015e0:	409a      	lsls	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a4f      	ldr	r2, [pc, #316]	; (8001728 <HAL_DMA_Abort+0x5dc>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d072      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a4d      	ldr	r2, [pc, #308]	; (800172c <HAL_DMA_Abort+0x5e0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d06d      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a4c      	ldr	r2, [pc, #304]	; (8001730 <HAL_DMA_Abort+0x5e4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d068      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a4a      	ldr	r2, [pc, #296]	; (8001734 <HAL_DMA_Abort+0x5e8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d063      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a49      	ldr	r2, [pc, #292]	; (8001738 <HAL_DMA_Abort+0x5ec>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d05e      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a47      	ldr	r2, [pc, #284]	; (800173c <HAL_DMA_Abort+0x5f0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d059      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a46      	ldr	r2, [pc, #280]	; (8001740 <HAL_DMA_Abort+0x5f4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d054      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a44      	ldr	r2, [pc, #272]	; (8001744 <HAL_DMA_Abort+0x5f8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d04f      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a43      	ldr	r2, [pc, #268]	; (8001748 <HAL_DMA_Abort+0x5fc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d04a      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a41      	ldr	r2, [pc, #260]	; (800174c <HAL_DMA_Abort+0x600>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d045      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a40      	ldr	r2, [pc, #256]	; (8001750 <HAL_DMA_Abort+0x604>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d040      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a3e      	ldr	r2, [pc, #248]	; (8001754 <HAL_DMA_Abort+0x608>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d03b      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a3d      	ldr	r2, [pc, #244]	; (8001758 <HAL_DMA_Abort+0x60c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d036      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a3b      	ldr	r2, [pc, #236]	; (800175c <HAL_DMA_Abort+0x610>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d031      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a3a      	ldr	r2, [pc, #232]	; (8001760 <HAL_DMA_Abort+0x614>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d02c      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a38      	ldr	r2, [pc, #224]	; (8001764 <HAL_DMA_Abort+0x618>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d027      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a37      	ldr	r2, [pc, #220]	; (8001768 <HAL_DMA_Abort+0x61c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d022      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a35      	ldr	r2, [pc, #212]	; (800176c <HAL_DMA_Abort+0x620>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d01d      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a34      	ldr	r2, [pc, #208]	; (8001770 <HAL_DMA_Abort+0x624>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d018      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a32      	ldr	r2, [pc, #200]	; (8001774 <HAL_DMA_Abort+0x628>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a31      	ldr	r2, [pc, #196]	; (8001778 <HAL_DMA_Abort+0x62c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00e      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a2f      	ldr	r2, [pc, #188]	; (800177c <HAL_DMA_Abort+0x630>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d009      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a2e      	ldr	r2, [pc, #184]	; (8001780 <HAL_DMA_Abort+0x634>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d004      	beq.n	80016d6 <HAL_DMA_Abort+0x58a>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2c      	ldr	r2, [pc, #176]	; (8001784 <HAL_DMA_Abort+0x638>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_DMA_Abort+0x58e>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_DMA_Abort+0x590>
 80016da:	2300      	movs	r3, #0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d015      	beq.n	800170c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80016e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00c      	beq.n	800170c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001700:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800170a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40020010 	.word	0x40020010
 800172c:	40020028 	.word	0x40020028
 8001730:	40020040 	.word	0x40020040
 8001734:	40020058 	.word	0x40020058
 8001738:	40020070 	.word	0x40020070
 800173c:	40020088 	.word	0x40020088
 8001740:	400200a0 	.word	0x400200a0
 8001744:	400200b8 	.word	0x400200b8
 8001748:	40020410 	.word	0x40020410
 800174c:	40020428 	.word	0x40020428
 8001750:	40020440 	.word	0x40020440
 8001754:	40020458 	.word	0x40020458
 8001758:	40020470 	.word	0x40020470
 800175c:	40020488 	.word	0x40020488
 8001760:	400204a0 	.word	0x400204a0
 8001764:	400204b8 	.word	0x400204b8
 8001768:	58025408 	.word	0x58025408
 800176c:	5802541c 	.word	0x5802541c
 8001770:	58025430 	.word	0x58025430
 8001774:	58025444 	.word	0x58025444
 8001778:	58025458 	.word	0x58025458
 800177c:	5802546c 	.word	0x5802546c
 8001780:	58025480 	.word	0x58025480
 8001784:	58025494 	.word	0x58025494

08001788 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e237      	b.n	8001c0a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d004      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e22c      	b.n	8001c0a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a5c      	ldr	r2, [pc, #368]	; (8001928 <HAL_DMA_Abort_IT+0x1a0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d04a      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a5b      	ldr	r2, [pc, #364]	; (800192c <HAL_DMA_Abort_IT+0x1a4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d045      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a59      	ldr	r2, [pc, #356]	; (8001930 <HAL_DMA_Abort_IT+0x1a8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d040      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a58      	ldr	r2, [pc, #352]	; (8001934 <HAL_DMA_Abort_IT+0x1ac>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d03b      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a56      	ldr	r2, [pc, #344]	; (8001938 <HAL_DMA_Abort_IT+0x1b0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d036      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a55      	ldr	r2, [pc, #340]	; (800193c <HAL_DMA_Abort_IT+0x1b4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d031      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a53      	ldr	r2, [pc, #332]	; (8001940 <HAL_DMA_Abort_IT+0x1b8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d02c      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a52      	ldr	r2, [pc, #328]	; (8001944 <HAL_DMA_Abort_IT+0x1bc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d027      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a50      	ldr	r2, [pc, #320]	; (8001948 <HAL_DMA_Abort_IT+0x1c0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d022      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a4f      	ldr	r2, [pc, #316]	; (800194c <HAL_DMA_Abort_IT+0x1c4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d01d      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a4d      	ldr	r2, [pc, #308]	; (8001950 <HAL_DMA_Abort_IT+0x1c8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d018      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a4c      	ldr	r2, [pc, #304]	; (8001954 <HAL_DMA_Abort_IT+0x1cc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d013      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a4a      	ldr	r2, [pc, #296]	; (8001958 <HAL_DMA_Abort_IT+0x1d0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00e      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a49      	ldr	r2, [pc, #292]	; (800195c <HAL_DMA_Abort_IT+0x1d4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d009      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a47      	ldr	r2, [pc, #284]	; (8001960 <HAL_DMA_Abort_IT+0x1d8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d004      	beq.n	8001850 <HAL_DMA_Abort_IT+0xc8>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a46      	ldr	r2, [pc, #280]	; (8001964 <HAL_DMA_Abort_IT+0x1dc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_DMA_Abort_IT+0xcc>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_DMA_Abort_IT+0xce>
 8001854:	2300      	movs	r3, #0
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8086 	beq.w	8001968 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2204      	movs	r2, #4
 8001860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <HAL_DMA_Abort_IT+0x1a0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d04a      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a2e      	ldr	r2, [pc, #184]	; (800192c <HAL_DMA_Abort_IT+0x1a4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d045      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a2c      	ldr	r2, [pc, #176]	; (8001930 <HAL_DMA_Abort_IT+0x1a8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d040      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <HAL_DMA_Abort_IT+0x1ac>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d03b      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a29      	ldr	r2, [pc, #164]	; (8001938 <HAL_DMA_Abort_IT+0x1b0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d036      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a28      	ldr	r2, [pc, #160]	; (800193c <HAL_DMA_Abort_IT+0x1b4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d031      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a26      	ldr	r2, [pc, #152]	; (8001940 <HAL_DMA_Abort_IT+0x1b8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d02c      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a25      	ldr	r2, [pc, #148]	; (8001944 <HAL_DMA_Abort_IT+0x1bc>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d027      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a23      	ldr	r2, [pc, #140]	; (8001948 <HAL_DMA_Abort_IT+0x1c0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d022      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a22      	ldr	r2, [pc, #136]	; (800194c <HAL_DMA_Abort_IT+0x1c4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d01d      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a20      	ldr	r2, [pc, #128]	; (8001950 <HAL_DMA_Abort_IT+0x1c8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d018      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a1f      	ldr	r2, [pc, #124]	; (8001954 <HAL_DMA_Abort_IT+0x1cc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d013      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <HAL_DMA_Abort_IT+0x1d0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00e      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a1c      	ldr	r2, [pc, #112]	; (800195c <HAL_DMA_Abort_IT+0x1d4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d009      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a1a      	ldr	r2, [pc, #104]	; (8001960 <HAL_DMA_Abort_IT+0x1d8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d004      	beq.n	8001904 <HAL_DMA_Abort_IT+0x17c>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a19      	ldr	r2, [pc, #100]	; (8001964 <HAL_DMA_Abort_IT+0x1dc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d108      	bne.n	8001916 <HAL_DMA_Abort_IT+0x18e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e178      	b.n	8001c08 <HAL_DMA_Abort_IT+0x480>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0201 	bic.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	e16f      	b.n	8001c08 <HAL_DMA_Abort_IT+0x480>
 8001928:	40020010 	.word	0x40020010
 800192c:	40020028 	.word	0x40020028
 8001930:	40020040 	.word	0x40020040
 8001934:	40020058 	.word	0x40020058
 8001938:	40020070 	.word	0x40020070
 800193c:	40020088 	.word	0x40020088
 8001940:	400200a0 	.word	0x400200a0
 8001944:	400200b8 	.word	0x400200b8
 8001948:	40020410 	.word	0x40020410
 800194c:	40020428 	.word	0x40020428
 8001950:	40020440 	.word	0x40020440
 8001954:	40020458 	.word	0x40020458
 8001958:	40020470 	.word	0x40020470
 800195c:	40020488 	.word	0x40020488
 8001960:	400204a0 	.word	0x400204a0
 8001964:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 020e 	bic.w	r2, r2, #14
 8001976:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a6c      	ldr	r2, [pc, #432]	; (8001b30 <HAL_DMA_Abort_IT+0x3a8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d04a      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a6b      	ldr	r2, [pc, #428]	; (8001b34 <HAL_DMA_Abort_IT+0x3ac>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d045      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a69      	ldr	r2, [pc, #420]	; (8001b38 <HAL_DMA_Abort_IT+0x3b0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d040      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a68      	ldr	r2, [pc, #416]	; (8001b3c <HAL_DMA_Abort_IT+0x3b4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d03b      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a66      	ldr	r2, [pc, #408]	; (8001b40 <HAL_DMA_Abort_IT+0x3b8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d036      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a65      	ldr	r2, [pc, #404]	; (8001b44 <HAL_DMA_Abort_IT+0x3bc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d031      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a63      	ldr	r2, [pc, #396]	; (8001b48 <HAL_DMA_Abort_IT+0x3c0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d02c      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a62      	ldr	r2, [pc, #392]	; (8001b4c <HAL_DMA_Abort_IT+0x3c4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d027      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a60      	ldr	r2, [pc, #384]	; (8001b50 <HAL_DMA_Abort_IT+0x3c8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d022      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a5f      	ldr	r2, [pc, #380]	; (8001b54 <HAL_DMA_Abort_IT+0x3cc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d01d      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a5d      	ldr	r2, [pc, #372]	; (8001b58 <HAL_DMA_Abort_IT+0x3d0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d018      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a5c      	ldr	r2, [pc, #368]	; (8001b5c <HAL_DMA_Abort_IT+0x3d4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d013      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a5a      	ldr	r2, [pc, #360]	; (8001b60 <HAL_DMA_Abort_IT+0x3d8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00e      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a59      	ldr	r2, [pc, #356]	; (8001b64 <HAL_DMA_Abort_IT+0x3dc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d009      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a57      	ldr	r2, [pc, #348]	; (8001b68 <HAL_DMA_Abort_IT+0x3e0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d004      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x290>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a56      	ldr	r2, [pc, #344]	; (8001b6c <HAL_DMA_Abort_IT+0x3e4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d108      	bne.n	8001a2a <HAL_DMA_Abort_IT+0x2a2>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e007      	b.n	8001a3a <HAL_DMA_Abort_IT+0x2b2>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0201 	bic.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a3c      	ldr	r2, [pc, #240]	; (8001b30 <HAL_DMA_Abort_IT+0x3a8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d072      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a3a      	ldr	r2, [pc, #232]	; (8001b34 <HAL_DMA_Abort_IT+0x3ac>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d06d      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a39      	ldr	r2, [pc, #228]	; (8001b38 <HAL_DMA_Abort_IT+0x3b0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d068      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a37      	ldr	r2, [pc, #220]	; (8001b3c <HAL_DMA_Abort_IT+0x3b4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d063      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a36      	ldr	r2, [pc, #216]	; (8001b40 <HAL_DMA_Abort_IT+0x3b8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d05e      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a34      	ldr	r2, [pc, #208]	; (8001b44 <HAL_DMA_Abort_IT+0x3bc>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d059      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a33      	ldr	r2, [pc, #204]	; (8001b48 <HAL_DMA_Abort_IT+0x3c0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d054      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a31      	ldr	r2, [pc, #196]	; (8001b4c <HAL_DMA_Abort_IT+0x3c4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d04f      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a30      	ldr	r2, [pc, #192]	; (8001b50 <HAL_DMA_Abort_IT+0x3c8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d04a      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a2e      	ldr	r2, [pc, #184]	; (8001b54 <HAL_DMA_Abort_IT+0x3cc>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d045      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a2d      	ldr	r2, [pc, #180]	; (8001b58 <HAL_DMA_Abort_IT+0x3d0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d040      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a2b      	ldr	r2, [pc, #172]	; (8001b5c <HAL_DMA_Abort_IT+0x3d4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d03b      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a2a      	ldr	r2, [pc, #168]	; (8001b60 <HAL_DMA_Abort_IT+0x3d8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d036      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a28      	ldr	r2, [pc, #160]	; (8001b64 <HAL_DMA_Abort_IT+0x3dc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d031      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a27      	ldr	r2, [pc, #156]	; (8001b68 <HAL_DMA_Abort_IT+0x3e0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d02c      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_DMA_Abort_IT+0x3e4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d027      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a24      	ldr	r2, [pc, #144]	; (8001b70 <HAL_DMA_Abort_IT+0x3e8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d022      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <HAL_DMA_Abort_IT+0x3ec>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d01d      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a21      	ldr	r2, [pc, #132]	; (8001b78 <HAL_DMA_Abort_IT+0x3f0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d018      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <HAL_DMA_Abort_IT+0x3f4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <HAL_DMA_Abort_IT+0x3f8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00e      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <HAL_DMA_Abort_IT+0x3fc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d009      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <HAL_DMA_Abort_IT+0x400>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d004      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x3a2>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_DMA_Abort_IT+0x404>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d132      	bne.n	8001b90 <HAL_DMA_Abort_IT+0x408>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e031      	b.n	8001b92 <HAL_DMA_Abort_IT+0x40a>
 8001b2e:	bf00      	nop
 8001b30:	40020010 	.word	0x40020010
 8001b34:	40020028 	.word	0x40020028
 8001b38:	40020040 	.word	0x40020040
 8001b3c:	40020058 	.word	0x40020058
 8001b40:	40020070 	.word	0x40020070
 8001b44:	40020088 	.word	0x40020088
 8001b48:	400200a0 	.word	0x400200a0
 8001b4c:	400200b8 	.word	0x400200b8
 8001b50:	40020410 	.word	0x40020410
 8001b54:	40020428 	.word	0x40020428
 8001b58:	40020440 	.word	0x40020440
 8001b5c:	40020458 	.word	0x40020458
 8001b60:	40020470 	.word	0x40020470
 8001b64:	40020488 	.word	0x40020488
 8001b68:	400204a0 	.word	0x400204a0
 8001b6c:	400204b8 	.word	0x400204b8
 8001b70:	58025408 	.word	0x58025408
 8001b74:	5802541c 	.word	0x5802541c
 8001b78:	58025430 	.word	0x58025430
 8001b7c:	58025444 	.word	0x58025444
 8001b80:	58025458 	.word	0x58025458
 8001b84:	5802546c 	.word	0x5802546c
 8001b88:	58025480 	.word	0x58025480
 8001b8c:	58025494 	.word	0x58025494
 8001b90:	2300      	movs	r3, #0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d028      	beq.n	8001be8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001baa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	f003 031f 	and.w	r3, r3, #31
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001bc4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00c      	beq.n	8001be8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bdc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001be6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c22:	4b89      	ldr	r3, [pc, #548]	; (8001e48 <HAL_GPIO_Init+0x234>)
 8001c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c26:	e194      	b.n	8001f52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8186 	beq.w	8001f4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d005      	beq.n	8001c58 <HAL_GPIO_Init+0x44>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d130      	bne.n	8001cba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c8e:	2201      	movs	r2, #1
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 0201 	and.w	r2, r3, #1
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d017      	beq.n	8001cf6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d123      	bne.n	8001d4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	08da      	lsrs	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3208      	adds	r2, #8
 8001d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	08da      	lsrs	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3208      	adds	r2, #8
 8001d44:	69b9      	ldr	r1, [r7, #24]
 8001d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	2203      	movs	r2, #3
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0203 	and.w	r2, r3, #3
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 80e0 	beq.w	8001f4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <HAL_GPIO_Init+0x238>)
 8001d8e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d92:	4a2e      	ldr	r2, [pc, #184]	; (8001e4c <HAL_GPIO_Init+0x238>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <HAL_GPIO_Init+0x238>)
 8001d9e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001daa:	4a29      	ldr	r2, [pc, #164]	; (8001e50 <HAL_GPIO_Init+0x23c>)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a20      	ldr	r2, [pc, #128]	; (8001e54 <HAL_GPIO_Init+0x240>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d052      	beq.n	8001e7c <HAL_GPIO_Init+0x268>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_GPIO_Init+0x244>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d031      	beq.n	8001e42 <HAL_GPIO_Init+0x22e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <HAL_GPIO_Init+0x248>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d02b      	beq.n	8001e3e <HAL_GPIO_Init+0x22a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <HAL_GPIO_Init+0x24c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d025      	beq.n	8001e3a <HAL_GPIO_Init+0x226>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_GPIO_Init+0x250>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01f      	beq.n	8001e36 <HAL_GPIO_Init+0x222>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_GPIO_Init+0x254>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d019      	beq.n	8001e32 <HAL_GPIO_Init+0x21e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a1a      	ldr	r2, [pc, #104]	; (8001e6c <HAL_GPIO_Init+0x258>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0x21a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <HAL_GPIO_Init+0x25c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00d      	beq.n	8001e2a <HAL_GPIO_Init+0x216>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a18      	ldr	r2, [pc, #96]	; (8001e74 <HAL_GPIO_Init+0x260>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <HAL_GPIO_Init+0x212>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a17      	ldr	r2, [pc, #92]	; (8001e78 <HAL_GPIO_Init+0x264>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_GPIO_Init+0x20e>
 8001e1e:	2309      	movs	r3, #9
 8001e20:	e02d      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e22:	230a      	movs	r3, #10
 8001e24:	e02b      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e26:	2308      	movs	r3, #8
 8001e28:	e029      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	e027      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e2e:	2306      	movs	r3, #6
 8001e30:	e025      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e32:	2305      	movs	r3, #5
 8001e34:	e023      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e36:	2304      	movs	r3, #4
 8001e38:	e021      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e01f      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e01d      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e01b      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e46:	bf00      	nop
 8001e48:	58000080 	.word	0x58000080
 8001e4c:	58024400 	.word	0x58024400
 8001e50:	58000400 	.word	0x58000400
 8001e54:	58020000 	.word	0x58020000
 8001e58:	58020400 	.word	0x58020400
 8001e5c:	58020800 	.word	0x58020800
 8001e60:	58020c00 	.word	0x58020c00
 8001e64:	58021000 	.word	0x58021000
 8001e68:	58021400 	.word	0x58021400
 8001e6c:	58021800 	.word	0x58021800
 8001e70:	58021c00 	.word	0x58021c00
 8001e74:	58022000 	.word	0x58022000
 8001e78:	58022400 	.word	0x58022400
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	f002 0203 	and.w	r2, r2, #3
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	4093      	lsls	r3, r2
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e8e:	4938      	ldr	r1, [pc, #224]	; (8001f70 <HAL_GPIO_Init+0x35c>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f47f ae63 	bne.w	8001c28 <HAL_GPIO_Init+0x14>
  }
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	3724      	adds	r7, #36	; 0x24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	58000400 	.word	0x58000400

08001f74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e07f      	b.n	8002086 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fd26 	bl	80009ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2224      	movs	r2, #36	; 0x24
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0201 	bic.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d107      	bne.n	8001fee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	e006      	b.n	8001ffc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ffa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d104      	bne.n	800200e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800200c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_I2C_Init+0x11c>)
 800201a:	430b      	orrs	r3, r1
 800201c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800202c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69d9      	ldr	r1, [r3, #28]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1a      	ldr	r2, [r3, #32]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	02008000 	.word	0x02008000

08002094 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	460b      	mov	r3, r1
 80020a2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	f040 80ef 	bne.w	8002294 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c4:	d101      	bne.n	80020ca <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
 80020c8:	e0e5      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_I2C_IsDeviceReady+0x44>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e0de      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x202>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2224      	movs	r2, #36	; 0x24
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d105      	bne.n	8002102 <HAL_I2C_IsDeviceReady+0x6e>
 80020f6:	897b      	ldrh	r3, [r7, #10]
 80020f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020fc:	4b68      	ldr	r3, [pc, #416]	; (80022a0 <HAL_I2C_IsDeviceReady+0x20c>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	e004      	b.n	800210c <HAL_I2C_IsDeviceReady+0x78>
 8002102:	897b      	ldrh	r3, [r7, #10]
 8002104:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002108:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002112:	f7fe feff 	bl	8000f14 <HAL_GetTick>
 8002116:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b20      	cmp	r3, #32
 8002124:	bf0c      	ite	eq
 8002126:	2301      	moveq	r3, #1
 8002128:	2300      	movne	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b10      	cmp	r3, #16
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002144:	e034      	b.n	80021b0 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d01a      	beq.n	8002184 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800214e:	f7fe fee1 	bl	8000f14 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d302      	bcc.n	8002164 <HAL_I2C_IsDeviceReady+0xd0>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10f      	bne.n	8002184 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	f043 0220 	orr.w	r2, r3, #32
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e088      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b20      	cmp	r3, #32
 8002190:	bf0c      	ite	eq
 8002192:	2301      	moveq	r3, #1
 8002194:	2300      	movne	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b10      	cmp	r3, #16
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80021b0:	7ffb      	ldrb	r3, [r7, #31]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d102      	bne.n	80021bc <HAL_I2C_IsDeviceReady+0x128>
 80021b6:	7fbb      	ldrb	r3, [r7, #30]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0c4      	beq.n	8002146 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b10      	cmp	r3, #16
 80021c8:	d01a      	beq.n	8002200 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2200      	movs	r2, #0
 80021d2:	2120      	movs	r1, #32
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f865 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e058      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2220      	movs	r2, #32
 80021ea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e04a      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2200      	movs	r2, #0
 8002208:	2120      	movs	r1, #32
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f84a 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e03d      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2210      	movs	r2, #16
 8002220:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2220      	movs	r2, #32
 8002228:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	d118      	bne.n	8002264 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002240:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2200      	movs	r2, #0
 800224a:	2120      	movs	r1, #32
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f829 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e01c      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2220      	movs	r2, #32
 8002262:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	f63f af3d 	bhi.w	80020ee <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3720      	adds	r7, #32
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	02002000 	.word	0x02002000

080022a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b4:	e031      	b.n	800231a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d02d      	beq.n	800231a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022be:	f7fe fe29 	bl	8000f14 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d302      	bcc.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d122      	bne.n	800231a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	4013      	ands	r3, r2
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d113      	bne.n	800231a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f043 0220 	orr.w	r2, r3, #32
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e00f      	b.n	800233a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699a      	ldr	r2, [r3, #24]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4013      	ands	r3, r2
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	429a      	cmp	r2, r3
 8002328:	bf0c      	ite	eq
 800232a:	2301      	moveq	r3, #1
 800232c:	2300      	movne	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	429a      	cmp	r2, r3
 8002336:	d0be      	beq.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b20      	cmp	r3, #32
 8002356:	d138      	bne.n	80023ca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002362:	2302      	movs	r3, #2
 8002364:	e032      	b.n	80023cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2224      	movs	r2, #36	; 0x24
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002394:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6819      	ldr	r1, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0201 	orr.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
  }
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	d139      	bne.n	8002462 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e033      	b.n	8002464 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2224      	movs	r2, #36	; 0x24
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800242a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0201 	orr.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e000      	b.n	8002464 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002462:	2302      	movs	r3, #2
  }
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_PWREx_ConfigSupply+0x70>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b04      	cmp	r3, #4
 8002482:	d00a      	beq.n	800249a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002484:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <HAL_PWREx_ConfigSupply+0x70>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	d001      	beq.n	8002496 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e01f      	b.n	80024d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e01d      	b.n	80024d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800249a:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_PWREx_ConfigSupply+0x70>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	490f      	ldr	r1, [pc, #60]	; (80024e0 <HAL_PWREx_ConfigSupply+0x70>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024aa:	f7fe fd33 	bl	8000f14 <HAL_GetTick>
 80024ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024b0:	e009      	b.n	80024c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024b2:	f7fe fd2f 	bl	8000f14 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c0:	d901      	bls.n	80024c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e007      	b.n	80024d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_PWREx_ConfigSupply+0x70>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d2:	d1ee      	bne.n	80024b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	58024800 	.word	0x58024800

080024e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	; 0x30
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d102      	bne.n	80024f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f000 bc1f 	b.w	8002d36 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80b3 	beq.w	800266c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002506:	4b95      	ldr	r3, [pc, #596]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002510:	4b92      	ldr	r3, [pc, #584]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	2b10      	cmp	r3, #16
 800251a:	d007      	beq.n	800252c <HAL_RCC_OscConfig+0x48>
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	2b18      	cmp	r3, #24
 8002520:	d112      	bne.n	8002548 <HAL_RCC_OscConfig+0x64>
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d10d      	bne.n	8002548 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	4b8b      	ldr	r3, [pc, #556]	; (800275c <HAL_RCC_OscConfig+0x278>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8098 	beq.w	800266a <HAL_RCC_OscConfig+0x186>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 8093 	bne.w	800266a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e3f6      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002550:	d106      	bne.n	8002560 <HAL_RCC_OscConfig+0x7c>
 8002552:	4b82      	ldr	r3, [pc, #520]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a81      	ldr	r2, [pc, #516]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e058      	b.n	8002612 <HAL_RCC_OscConfig+0x12e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d112      	bne.n	800258e <HAL_RCC_OscConfig+0xaa>
 8002568:	4b7c      	ldr	r3, [pc, #496]	; (800275c <HAL_RCC_OscConfig+0x278>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a7b      	ldr	r2, [pc, #492]	; (800275c <HAL_RCC_OscConfig+0x278>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b79      	ldr	r3, [pc, #484]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a78      	ldr	r2, [pc, #480]	; (800275c <HAL_RCC_OscConfig+0x278>)
 800257a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b76      	ldr	r3, [pc, #472]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a75      	ldr	r2, [pc, #468]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e041      	b.n	8002612 <HAL_RCC_OscConfig+0x12e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002596:	d112      	bne.n	80025be <HAL_RCC_OscConfig+0xda>
 8002598:	4b70      	ldr	r3, [pc, #448]	; (800275c <HAL_RCC_OscConfig+0x278>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a6f      	ldr	r2, [pc, #444]	; (800275c <HAL_RCC_OscConfig+0x278>)
 800259e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b6d      	ldr	r3, [pc, #436]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6c      	ldr	r2, [pc, #432]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80025aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b6a      	ldr	r3, [pc, #424]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a69      	ldr	r2, [pc, #420]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e029      	b.n	8002612 <HAL_RCC_OscConfig+0x12e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80025c6:	d112      	bne.n	80025ee <HAL_RCC_OscConfig+0x10a>
 80025c8:	4b64      	ldr	r3, [pc, #400]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a63      	ldr	r2, [pc, #396]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80025ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b61      	ldr	r3, [pc, #388]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a60      	ldr	r2, [pc, #384]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80025da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b5e      	ldr	r3, [pc, #376]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a5d      	ldr	r2, [pc, #372]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80025e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	e011      	b.n	8002612 <HAL_RCC_OscConfig+0x12e>
 80025ee:	4b5b      	ldr	r3, [pc, #364]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a5a      	ldr	r2, [pc, #360]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80025f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b58      	ldr	r3, [pc, #352]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a57      	ldr	r2, [pc, #348]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002600:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b55      	ldr	r3, [pc, #340]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a54      	ldr	r2, [pc, #336]	; (800275c <HAL_RCC_OscConfig+0x278>)
 800260c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002610:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d013      	beq.n	8002642 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7fe fc7b 	bl	8000f14 <HAL_GetTick>
 800261e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002622:	f7fe fc77 	bl	8000f14 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b64      	cmp	r3, #100	; 0x64
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e380      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002634:	4b49      	ldr	r3, [pc, #292]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x13e>
 8002640:	e014      	b.n	800266c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7fe fc67 	bl	8000f14 <HAL_GetTick>
 8002646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264a:	f7fe fc63 	bl	8000f14 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b64      	cmp	r3, #100	; 0x64
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e36c      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800265c:	4b3f      	ldr	r3, [pc, #252]	; (800275c <HAL_RCC_OscConfig+0x278>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x166>
 8002668:	e000      	b.n	800266c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 808c 	beq.w	8002792 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267a:	4b38      	ldr	r3, [pc, #224]	; (800275c <HAL_RCC_OscConfig+0x278>)
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002682:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002684:	4b35      	ldr	r3, [pc, #212]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <HAL_RCC_OscConfig+0x1bc>
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	2b18      	cmp	r3, #24
 8002694:	d137      	bne.n	8002706 <HAL_RCC_OscConfig+0x222>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d132      	bne.n	8002706 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a0:	4b2e      	ldr	r3, [pc, #184]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_OscConfig+0x1d4>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e33e      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026b8:	4b28      	ldr	r3, [pc, #160]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 0219 	bic.w	r2, r3, #25
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4925      	ldr	r1, [pc, #148]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe fc23 	bl	8000f14 <HAL_GetTick>
 80026ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d2:	f7fe fc1f 	bl	8000f14 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e328      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <HAL_RCC_OscConfig+0x278>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	061b      	lsls	r3, r3, #24
 80026fe:	4917      	ldr	r1, [pc, #92]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002704:	e045      	b.n	8002792 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d028      	beq.n	8002760 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 0219 	bic.w	r2, r3, #25
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	4910      	ldr	r1, [pc, #64]	; (800275c <HAL_RCC_OscConfig+0x278>)
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fbf8 	bl	8000f14 <HAL_GetTick>
 8002724:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002728:	f7fe fbf4 	bl	8000f14 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e2fd      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_RCC_OscConfig+0x278>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	061b      	lsls	r3, r3, #24
 8002754:	4901      	ldr	r1, [pc, #4]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
 800275a:	e01a      	b.n	8002792 <HAL_RCC_OscConfig+0x2ae>
 800275c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002760:	4b97      	ldr	r3, [pc, #604]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a96      	ldr	r2, [pc, #600]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fbd2 	bl	8000f14 <HAL_GetTick>
 8002770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002774:	f7fe fbce 	bl	8000f14 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e2d7      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002786:	4b8e      	ldr	r3, [pc, #568]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	d06a      	beq.n	8002874 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800279e:	4b88      	ldr	r3, [pc, #544]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027a8:	4b85      	ldr	r3, [pc, #532]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d007      	beq.n	80027c4 <HAL_RCC_OscConfig+0x2e0>
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b18      	cmp	r3, #24
 80027b8:	d11b      	bne.n	80027f2 <HAL_RCC_OscConfig+0x30e>
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d116      	bne.n	80027f2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027c4:	4b7e      	ldr	r3, [pc, #504]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_OscConfig+0x2f8>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	2b80      	cmp	r3, #128	; 0x80
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e2ac      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027dc:	4b78      	ldr	r3, [pc, #480]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	4975      	ldr	r1, [pc, #468]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027f0:	e040      	b.n	8002874 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d023      	beq.n	8002842 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027fa:	4b71      	ldr	r3, [pc, #452]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a70      	ldr	r2, [pc, #448]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 8002800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe fb85 	bl	8000f14 <HAL_GetTick>
 800280a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800280e:	f7fe fb81 	bl	8000f14 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e28a      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002820:	4b67      	ldr	r3, [pc, #412]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800282c:	4b64      	ldr	r3, [pc, #400]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	061b      	lsls	r3, r3, #24
 800283a:	4961      	ldr	r1, [pc, #388]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 800283c:	4313      	orrs	r3, r2
 800283e:	60cb      	str	r3, [r1, #12]
 8002840:	e018      	b.n	8002874 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002842:	4b5f      	ldr	r3, [pc, #380]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a5e      	ldr	r2, [pc, #376]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 8002848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800284c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe fb61 	bl	8000f14 <HAL_GetTick>
 8002852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002856:	f7fe fb5d 	bl	8000f14 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e266      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002868:	4b55      	ldr	r3, [pc, #340]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d036      	beq.n	80028ee <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d019      	beq.n	80028bc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002888:	4b4d      	ldr	r3, [pc, #308]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 800288a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288c:	4a4c      	ldr	r2, [pc, #304]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7fe fb3e 	bl	8000f14 <HAL_GetTick>
 8002898:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289c:	f7fe fb3a 	bl	8000f14 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e243      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028ae:	4b44      	ldr	r3, [pc, #272]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 80028b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x3b8>
 80028ba:	e018      	b.n	80028ee <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028bc:	4b40      	ldr	r3, [pc, #256]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 80028be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c0:	4a3f      	ldr	r2, [pc, #252]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7fe fb24 	bl	8000f14 <HAL_GetTick>
 80028cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d0:	f7fe fb20 	bl	8000f14 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e229      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028e2:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 80028e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d036      	beq.n	8002968 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d019      	beq.n	8002936 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002902:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2e      	ldr	r2, [pc, #184]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 8002908:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800290c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800290e:	f7fe fb01 	bl	8000f14 <HAL_GetTick>
 8002912:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002916:	f7fe fafd 	bl	8000f14 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e206      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002928:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x432>
 8002934:	e018      	b.n	8002968 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002936:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a21      	ldr	r2, [pc, #132]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 800293c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002940:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002942:	f7fe fae7 	bl	8000f14 <HAL_GetTick>
 8002946:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800294a:	f7fe fae3 	bl	8000f14 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e1ec      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f0      	bne.n	800294a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80af 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_RCC_OscConfig+0x4e0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <HAL_RCC_OscConfig+0x4e0>)
 800297c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002980:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002982:	f7fe fac7 	bl	8000f14 <HAL_GetTick>
 8002986:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298a:	f7fe fac3 	bl	8000f14 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b64      	cmp	r3, #100	; 0x64
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1cc      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_OscConfig+0x4e0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10b      	bne.n	80029c8 <HAL_RCC_OscConfig+0x4e4>
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	4a02      	ldr	r2, [pc, #8]	; (80029c0 <HAL_RCC_OscConfig+0x4dc>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6713      	str	r3, [r2, #112]	; 0x70
 80029bc:	e05b      	b.n	8002a76 <HAL_RCC_OscConfig+0x592>
 80029be:	bf00      	nop
 80029c0:	58024400 	.word	0x58024400
 80029c4:	58024800 	.word	0x58024800
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d112      	bne.n	80029f6 <HAL_RCC_OscConfig+0x512>
 80029d0:	4b9d      	ldr	r3, [pc, #628]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	4a9c      	ldr	r2, [pc, #624]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	6713      	str	r3, [r2, #112]	; 0x70
 80029dc:	4b9a      	ldr	r3, [pc, #616]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a99      	ldr	r2, [pc, #612]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 80029e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	4b97      	ldr	r3, [pc, #604]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a96      	ldr	r2, [pc, #600]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 80029ee:	f023 0304 	bic.w	r3, r3, #4
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
 80029f4:	e03f      	b.n	8002a76 <HAL_RCC_OscConfig+0x592>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d112      	bne.n	8002a24 <HAL_RCC_OscConfig+0x540>
 80029fe:	4b92      	ldr	r3, [pc, #584]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	4a91      	ldr	r2, [pc, #580]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0a:	4b8f      	ldr	r3, [pc, #572]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a8e      	ldr	r2, [pc, #568]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a14:	6713      	str	r3, [r2, #112]	; 0x70
 8002a16:	4b8c      	ldr	r3, [pc, #560]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	4a8b      	ldr	r2, [pc, #556]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6713      	str	r3, [r2, #112]	; 0x70
 8002a22:	e028      	b.n	8002a76 <HAL_RCC_OscConfig+0x592>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b85      	cmp	r3, #133	; 0x85
 8002a2a:	d112      	bne.n	8002a52 <HAL_RCC_OscConfig+0x56e>
 8002a2c:	4b86      	ldr	r3, [pc, #536]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	4a85      	ldr	r2, [pc, #532]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a32:	f043 0304 	orr.w	r3, r3, #4
 8002a36:	6713      	str	r3, [r2, #112]	; 0x70
 8002a38:	4b83      	ldr	r3, [pc, #524]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	4a82      	ldr	r2, [pc, #520]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a42:	6713      	str	r3, [r2, #112]	; 0x70
 8002a44:	4b80      	ldr	r3, [pc, #512]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	4a7f      	ldr	r2, [pc, #508]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a50:	e011      	b.n	8002a76 <HAL_RCC_OscConfig+0x592>
 8002a52:	4b7d      	ldr	r3, [pc, #500]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	4a7c      	ldr	r2, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5e:	4b7a      	ldr	r3, [pc, #488]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	4a79      	ldr	r2, [pc, #484]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a64:	f023 0304 	bic.w	r3, r3, #4
 8002a68:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6a:	4b77      	ldr	r3, [pc, #476]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	4a76      	ldr	r2, [pc, #472]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d015      	beq.n	8002aaa <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7e:	f7fe fa49 	bl	8000f14 <HAL_GetTick>
 8002a82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fe fa45 	bl	8000f14 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e14c      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a9c:	4b6a      	ldr	r3, [pc, #424]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ee      	beq.n	8002a86 <HAL_RCC_OscConfig+0x5a2>
 8002aa8:	e014      	b.n	8002ad4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fa33 	bl	8000f14 <HAL_GetTick>
 8002aae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fe fa2f 	bl	8000f14 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e136      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ac8:	4b5f      	ldr	r3, [pc, #380]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ee      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 812b 	beq.w	8002d34 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ade:	4b5a      	ldr	r3, [pc, #360]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ae6:	2b18      	cmp	r3, #24
 8002ae8:	f000 80bb 	beq.w	8002c62 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	f040 8095 	bne.w	8002c20 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af6:	4b54      	ldr	r3, [pc, #336]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a53      	ldr	r2, [pc, #332]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002afc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7fe fa07 	bl	8000f14 <HAL_GetTick>
 8002b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0a:	f7fe fa03 	bl	8000f14 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e10c      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b1c:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f0      	bne.n	8002b0a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b28:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b2c:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <HAL_RCC_OscConfig+0x768>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b38:	0112      	lsls	r2, r2, #4
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	4942      	ldr	r1, [pc, #264]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	628b      	str	r3, [r1, #40]	; 0x28
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	3b01      	subs	r3, #1
 8002b48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b50:	3b01      	subs	r3, #1
 8002b52:	025b      	lsls	r3, r3, #9
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b72:	4935      	ldr	r1, [pc, #212]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b78:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	4a32      	ldr	r2, [pc, #200]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b84:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b88:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <HAL_RCC_OscConfig+0x76c>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b90:	00d2      	lsls	r2, r2, #3
 8002b92:	492d      	ldr	r1, [pc, #180]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	f023 020c 	bic.w	r2, r3, #12
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	4928      	ldr	r1, [pc, #160]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002baa:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	f023 0202 	bic.w	r2, r3, #2
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	4924      	ldr	r1, [pc, #144]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bbc:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	4a21      	ldr	r2, [pc, #132]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	4a1e      	ldr	r2, [pc, #120]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bd4:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002bda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	4a18      	ldr	r2, [pc, #96]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe f98c 	bl	8000f14 <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe f988 	bl	8000f14 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e091      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x71c>
 8002c1e:	e089      	b.n	8002d34 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <HAL_RCC_OscConfig+0x764>)
 8002c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe f972 	bl	8000f14 <HAL_GetTick>
 8002c30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c32:	e00f      	b.n	8002c54 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe f96e 	bl	8000f14 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d908      	bls.n	8002c54 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e077      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
 8002c46:	bf00      	nop
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	fffffc0c 	.word	0xfffffc0c
 8002c50:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c54:	4b3a      	ldr	r3, [pc, #232]	; (8002d40 <HAL_RCC_OscConfig+0x85c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e9      	bne.n	8002c34 <HAL_RCC_OscConfig+0x750>
 8002c60:	e068      	b.n	8002d34 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c62:	4b37      	ldr	r3, [pc, #220]	; (8002d40 <HAL_RCC_OscConfig+0x85c>)
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c68:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <HAL_RCC_OscConfig+0x85c>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d031      	beq.n	8002cda <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f003 0203 	and.w	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d12a      	bne.n	8002cda <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d122      	bne.n	8002cda <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d11a      	bne.n	8002cda <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	0a5b      	lsrs	r3, r3, #9
 8002ca8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d111      	bne.n	8002cda <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d108      	bne.n	8002cda <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	0e1b      	lsrs	r3, r3, #24
 8002ccc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d001      	beq.n	8002cde <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e02b      	b.n	8002d36 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_RCC_OscConfig+0x85c>)
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	08db      	lsrs	r3, r3, #3
 8002ce4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ce8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d01f      	beq.n	8002d34 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_RCC_OscConfig+0x85c>)
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	4a11      	ldr	r2, [pc, #68]	; (8002d40 <HAL_RCC_OscConfig+0x85c>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d00:	f7fe f908 	bl	8000f14 <HAL_GetTick>
 8002d04:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d06:	bf00      	nop
 8002d08:	f7fe f904 	bl	8000f14 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d0f9      	beq.n	8002d08 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d14:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_RCC_OscConfig+0x85c>)
 8002d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_RCC_OscConfig+0x860>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d20:	00d2      	lsls	r2, r2, #3
 8002d22:	4907      	ldr	r1, [pc, #28]	; (8002d40 <HAL_RCC_OscConfig+0x85c>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_OscConfig+0x85c>)
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_RCC_OscConfig+0x85c>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3730      	adds	r7, #48	; 0x30
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	58024400 	.word	0x58024400
 8002d44:	ffff0007 	.word	0xffff0007

08002d48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e19c      	b.n	8003096 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b8a      	ldr	r3, [pc, #552]	; (8002f88 <HAL_RCC_ClockConfig+0x240>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d910      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b87      	ldr	r3, [pc, #540]	; (8002f88 <HAL_RCC_ClockConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 020f 	bic.w	r2, r3, #15
 8002d72:	4985      	ldr	r1, [pc, #532]	; (8002f88 <HAL_RCC_ClockConfig+0x240>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b83      	ldr	r3, [pc, #524]	; (8002f88 <HAL_RCC_ClockConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e184      	b.n	8003096 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d010      	beq.n	8002dba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	4b7b      	ldr	r3, [pc, #492]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d908      	bls.n	8002dba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002da8:	4b78      	ldr	r3, [pc, #480]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	4975      	ldr	r1, [pc, #468]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d010      	beq.n	8002de8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	4b70      	ldr	r3, [pc, #448]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d908      	bls.n	8002de8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dd6:	4b6d      	ldr	r3, [pc, #436]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	496a      	ldr	r1, [pc, #424]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	4b64      	ldr	r3, [pc, #400]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d908      	bls.n	8002e16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e04:	4b61      	ldr	r3, [pc, #388]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	495e      	ldr	r1, [pc, #376]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d010      	beq.n	8002e44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	4b59      	ldr	r3, [pc, #356]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d908      	bls.n	8002e44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e32:	4b56      	ldr	r3, [pc, #344]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4953      	ldr	r1, [pc, #332]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d010      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	4b4d      	ldr	r3, [pc, #308]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d908      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e60:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f023 020f 	bic.w	r2, r3, #15
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4947      	ldr	r1, [pc, #284]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d055      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e7e:	4b43      	ldr	r3, [pc, #268]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	4940      	ldr	r1, [pc, #256]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d107      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e98:	4b3c      	ldr	r3, [pc, #240]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d121      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0f6      	b.n	8003096 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eb0:	4b36      	ldr	r3, [pc, #216]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d115      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0ea      	b.n	8003096 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ec8:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0de      	b.n	8003096 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ed8:	4b2c      	ldr	r3, [pc, #176]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0d6      	b.n	8003096 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ee8:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f023 0207 	bic.w	r2, r3, #7
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4925      	ldr	r1, [pc, #148]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002efa:	f7fe f80b 	bl	8000f14 <HAL_GetTick>
 8002efe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f02:	f7fe f807 	bl	8000f14 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0be      	b.n	8003096 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f18:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d1eb      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d010      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d208      	bcs.n	8002f58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f46:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f023 020f 	bic.w	r2, r3, #15
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	490e      	ldr	r1, [pc, #56]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_ClockConfig+0x240>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d214      	bcs.n	8002f90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_RCC_ClockConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 020f 	bic.w	r2, r3, #15
 8002f6e:	4906      	ldr	r1, [pc, #24]	; (8002f88 <HAL_RCC_ClockConfig+0x240>)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <HAL_RCC_ClockConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e086      	b.n	8003096 <HAL_RCC_ClockConfig+0x34e>
 8002f88:	52002000 	.word	0x52002000
 8002f8c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d010      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	4b3f      	ldr	r3, [pc, #252]	; (80030a0 <HAL_RCC_ClockConfig+0x358>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d208      	bcs.n	8002fbe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fac:	4b3c      	ldr	r3, [pc, #240]	; (80030a0 <HAL_RCC_ClockConfig+0x358>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	4939      	ldr	r1, [pc, #228]	; (80030a0 <HAL_RCC_ClockConfig+0x358>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d010      	beq.n	8002fec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	4b34      	ldr	r3, [pc, #208]	; (80030a0 <HAL_RCC_ClockConfig+0x358>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d208      	bcs.n	8002fec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fda:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <HAL_RCC_ClockConfig+0x358>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	492e      	ldr	r1, [pc, #184]	; (80030a0 <HAL_RCC_ClockConfig+0x358>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d010      	beq.n	800301a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <HAL_RCC_ClockConfig+0x358>)
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003004:	429a      	cmp	r2, r3
 8003006:	d208      	bcs.n	800301a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003008:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <HAL_RCC_ClockConfig+0x358>)
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	4922      	ldr	r1, [pc, #136]	; (80030a0 <HAL_RCC_ClockConfig+0x358>)
 8003016:	4313      	orrs	r3, r2
 8003018:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d010      	beq.n	8003048 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69da      	ldr	r2, [r3, #28]
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_RCC_ClockConfig+0x358>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003032:	429a      	cmp	r2, r3
 8003034:	d208      	bcs.n	8003048 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003036:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <HAL_RCC_ClockConfig+0x358>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	4917      	ldr	r1, [pc, #92]	; (80030a0 <HAL_RCC_ClockConfig+0x358>)
 8003044:	4313      	orrs	r3, r2
 8003046:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003048:	f000 f834 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <HAL_RCC_ClockConfig+0x358>)
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	4912      	ldr	r1, [pc, #72]	; (80030a4 <HAL_RCC_ClockConfig+0x35c>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
 8003064:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003066:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <HAL_RCC_ClockConfig+0x358>)
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <HAL_RCC_ClockConfig+0x35c>)
 8003070:	5cd3      	ldrb	r3, [r2, r3]
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
 800307c:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <HAL_RCC_ClockConfig+0x360>)
 800307e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003080:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <HAL_RCC_ClockConfig+0x364>)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_RCC_ClockConfig+0x368>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fef8 	bl	8000e80 <HAL_InitTick>
 8003090:	4603      	mov	r3, r0
 8003092:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	58024400 	.word	0x58024400
 80030a4:	080076c8 	.word	0x080076c8
 80030a8:	24000054 	.word	0x24000054
 80030ac:	24000050 	.word	0x24000050
 80030b0:	24000058 	.word	0x24000058

080030b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ba:	4bb3      	ldr	r3, [pc, #716]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030c2:	2b18      	cmp	r3, #24
 80030c4:	f200 8155 	bhi.w	8003372 <HAL_RCC_GetSysClockFreq+0x2be>
 80030c8:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	08003135 	.word	0x08003135
 80030d4:	08003373 	.word	0x08003373
 80030d8:	08003373 	.word	0x08003373
 80030dc:	08003373 	.word	0x08003373
 80030e0:	08003373 	.word	0x08003373
 80030e4:	08003373 	.word	0x08003373
 80030e8:	08003373 	.word	0x08003373
 80030ec:	08003373 	.word	0x08003373
 80030f0:	0800315b 	.word	0x0800315b
 80030f4:	08003373 	.word	0x08003373
 80030f8:	08003373 	.word	0x08003373
 80030fc:	08003373 	.word	0x08003373
 8003100:	08003373 	.word	0x08003373
 8003104:	08003373 	.word	0x08003373
 8003108:	08003373 	.word	0x08003373
 800310c:	08003373 	.word	0x08003373
 8003110:	08003161 	.word	0x08003161
 8003114:	08003373 	.word	0x08003373
 8003118:	08003373 	.word	0x08003373
 800311c:	08003373 	.word	0x08003373
 8003120:	08003373 	.word	0x08003373
 8003124:	08003373 	.word	0x08003373
 8003128:	08003373 	.word	0x08003373
 800312c:	08003373 	.word	0x08003373
 8003130:	08003167 	.word	0x08003167
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003134:	4b94      	ldr	r3, [pc, #592]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d009      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003140:	4b91      	ldr	r3, [pc, #580]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	08db      	lsrs	r3, r3, #3
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	4a90      	ldr	r2, [pc, #576]	; (800338c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
 8003150:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003152:	e111      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003154:	4b8d      	ldr	r3, [pc, #564]	; (800338c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003156:	61bb      	str	r3, [r7, #24]
      break;
 8003158:	e10e      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800315a:	4b8d      	ldr	r3, [pc, #564]	; (8003390 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800315c:	61bb      	str	r3, [r7, #24]
      break;
 800315e:	e10b      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003160:	4b8c      	ldr	r3, [pc, #560]	; (8003394 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003162:	61bb      	str	r3, [r7, #24]
      break;
 8003164:	e108      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003166:	4b88      	ldr	r3, [pc, #544]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003170:	4b85      	ldr	r3, [pc, #532]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800317a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800317c:	4b82      	ldr	r3, [pc, #520]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003186:	4b80      	ldr	r3, [pc, #512]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318a:	08db      	lsrs	r3, r3, #3
 800318c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80e1 	beq.w	800336c <HAL_RCC_GetSysClockFreq+0x2b8>
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	f000 8083 	beq.w	80032b8 <HAL_RCC_GetSysClockFreq+0x204>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	f200 80a1 	bhi.w	80032fc <HAL_RCC_GetSysClockFreq+0x248>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x114>
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d056      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x1c0>
 80031c6:	e099      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031c8:	4b6f      	ldr	r3, [pc, #444]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d02d      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031d4:	4b6c      	ldr	r3, [pc, #432]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	08db      	lsrs	r3, r3, #3
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	4a6b      	ldr	r2, [pc, #428]	; (800338c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
 80031e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031fe:	4b62      	ldr	r3, [pc, #392]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800320e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003212:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003398 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800321a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800321e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800322e:	e087      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800339c <HAL_RCC_GetSysClockFreq+0x2e8>
 800323e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003242:	4b51      	ldr	r3, [pc, #324]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003252:	ed97 6a02 	vldr	s12, [r7, #8]
 8003256:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003398 <HAL_RCC_GetSysClockFreq+0x2e4>
 800325a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800325e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800326a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800326e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003272:	e065      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80033a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003286:	4b40      	ldr	r3, [pc, #256]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003296:	ed97 6a02 	vldr	s12, [r7, #8]
 800329a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003398 <HAL_RCC_GetSysClockFreq+0x2e4>
 800329e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032b6:	e043      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80032c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ca:	4b2f      	ldr	r3, [pc, #188]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032da:	ed97 6a02 	vldr	s12, [r7, #8]
 80032de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003398 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032fa:	e021      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003306:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800330a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800330e:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800331e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003322:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003398 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800332a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800332e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800333e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	0a5b      	lsrs	r3, r3, #9
 8003346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800334a:	3301      	adds	r3, #1
 800334c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	ee07 3a90 	vmov	s15, r3
 8003354:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003358:	edd7 6a07 	vldr	s13, [r7, #28]
 800335c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003364:	ee17 3a90 	vmov	r3, s15
 8003368:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800336a:	e005      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	61bb      	str	r3, [r7, #24]
      break;
 8003370:	e002      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003372:	4b07      	ldr	r3, [pc, #28]	; (8003390 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003374:	61bb      	str	r3, [r7, #24]
      break;
 8003376:	bf00      	nop
  }

  return sysclockfreq;
 8003378:	69bb      	ldr	r3, [r7, #24]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3724      	adds	r7, #36	; 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	58024400 	.word	0x58024400
 800338c:	03d09000 	.word	0x03d09000
 8003390:	003d0900 	.word	0x003d0900
 8003394:	016e3600 	.word	0x016e3600
 8003398:	46000000 	.word	0x46000000
 800339c:	4c742400 	.word	0x4c742400
 80033a0:	4a742400 	.word	0x4a742400
 80033a4:	4bb71b00 	.word	0x4bb71b00

080033a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80033ae:	f7ff fe81 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 80033b2:	4602      	mov	r2, r0
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	0a1b      	lsrs	r3, r3, #8
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	490f      	ldr	r1, [pc, #60]	; (80033fc <HAL_RCC_GetHCLKFreq+0x54>)
 80033c0:	5ccb      	ldrb	r3, [r1, r3]
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80033cc:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	4a09      	ldr	r2, [pc, #36]	; (80033fc <HAL_RCC_GetHCLKFreq+0x54>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	fa22 f303 	lsr.w	r3, r2, r3
 80033e2:	4a07      	ldr	r2, [pc, #28]	; (8003400 <HAL_RCC_GetHCLKFreq+0x58>)
 80033e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033e6:	4a07      	ldr	r2, [pc, #28]	; (8003404 <HAL_RCC_GetHCLKFreq+0x5c>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <HAL_RCC_GetHCLKFreq+0x58>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	58024400 	.word	0x58024400
 80033fc:	080076c8 	.word	0x080076c8
 8003400:	24000054 	.word	0x24000054
 8003404:	24000050 	.word	0x24000050

08003408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800340c:	f7ff ffcc 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4904      	ldr	r1, [pc, #16]	; (8003430 <HAL_RCC_GetPCLK1Freq+0x28>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	58024400 	.word	0x58024400
 8003430:	080076c8 	.word	0x080076c8

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003438:	f7ff ffb6 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4904      	ldr	r1, [pc, #16]	; (800345c <HAL_RCC_GetPCLK2Freq+0x28>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	58024400 	.word	0x58024400
 800345c:	080076c8 	.word	0x080076c8

08003460 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003464:	b0c8      	sub	sp, #288	; 0x120
 8003466:	af00      	add	r7, sp, #0
 8003468:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800346c:	2300      	movs	r3, #0
 800346e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003472:	2300      	movs	r3, #0
 8003474:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003484:	2500      	movs	r5, #0
 8003486:	ea54 0305 	orrs.w	r3, r4, r5
 800348a:	d049      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800348c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003492:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003496:	d02f      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003498:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800349c:	d828      	bhi.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800349e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034a2:	d01a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034a8:	d822      	bhi.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b2:	d007      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034b4:	e01c      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b6:	4ba7      	ldr	r3, [pc, #668]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	4aa6      	ldr	r2, [pc, #664]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034c2:	e01a      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c8:	3308      	adds	r3, #8
 80034ca:	2102      	movs	r1, #2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f001 fc43 	bl	8004d58 <RCCEx_PLL2_Config>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034d8:	e00f      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034de:	3328      	adds	r3, #40	; 0x28
 80034e0:	2102      	movs	r1, #2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 fcea 	bl	8004ebc <RCCEx_PLL3_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034ee:	e004      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034f6:	e000      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80034f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003502:	4b94      	ldr	r3, [pc, #592]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003506:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800350a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003510:	4a90      	ldr	r2, [pc, #576]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003512:	430b      	orrs	r3, r1
 8003514:	6513      	str	r3, [r2, #80]	; 0x50
 8003516:	e003      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003518:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800351c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800352c:	f04f 0900 	mov.w	r9, #0
 8003530:	ea58 0309 	orrs.w	r3, r8, r9
 8003534:	d047      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	2b04      	cmp	r3, #4
 800353e:	d82a      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003540:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	0800355d 	.word	0x0800355d
 800354c:	0800356b 	.word	0x0800356b
 8003550:	08003581 	.word	0x08003581
 8003554:	0800359f 	.word	0x0800359f
 8003558:	0800359f 	.word	0x0800359f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355c:	4b7d      	ldr	r3, [pc, #500]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	4a7c      	ldr	r2, [pc, #496]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003568:	e01a      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800356a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800356e:	3308      	adds	r3, #8
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f001 fbf0 	bl	8004d58 <RCCEx_PLL2_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800357e:	e00f      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003584:	3328      	adds	r3, #40	; 0x28
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f001 fc97 	bl	8004ebc <RCCEx_PLL3_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003594:	e004      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800359c:	e000      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800359e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035a8:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ac:	f023 0107 	bic.w	r1, r3, #7
 80035b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b6:	4a67      	ldr	r2, [pc, #412]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6513      	str	r3, [r2, #80]	; 0x50
 80035bc:	e003      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80035c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80035d2:	f04f 0b00 	mov.w	fp, #0
 80035d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80035da:	d054      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80035dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80035e6:	d036      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80035e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80035ec:	d82f      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80035ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f2:	d032      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80035f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f8:	d829      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80035fa:	2bc0      	cmp	r3, #192	; 0xc0
 80035fc:	d02f      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80035fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003600:	d825      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003602:	2b80      	cmp	r3, #128	; 0x80
 8003604:	d018      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003606:	2b80      	cmp	r3, #128	; 0x80
 8003608:	d821      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d007      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003612:	e01c      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003614:	4b4f      	ldr	r3, [pc, #316]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	4a4e      	ldr	r2, [pc, #312]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800361a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003620:	e01e      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003626:	3308      	adds	r3, #8
 8003628:	2100      	movs	r1, #0
 800362a:	4618      	mov	r0, r3
 800362c:	f001 fb94 	bl	8004d58 <RCCEx_PLL2_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003636:	e013      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800363c:	3328      	adds	r3, #40	; 0x28
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f001 fc3b 	bl	8004ebc <RCCEx_PLL3_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800364c:	e008      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003654:	e004      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003656:	bf00      	nop
 8003658:	e002      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800365a:	bf00      	nop
 800365c:	e000      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800365e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003660:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003668:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800366a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	4a37      	ldr	r2, [pc, #220]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003678:	430b      	orrs	r3, r1
 800367a:	6513      	str	r3, [r2, #80]	; 0x50
 800367c:	e003      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003682:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003692:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800369c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80036a0:	460b      	mov	r3, r1
 80036a2:	4313      	orrs	r3, r2
 80036a4:	d05c      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80036a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80036b0:	d03b      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036b2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80036b6:	d834      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80036b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036bc:	d037      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80036be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c2:	d82e      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80036c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036c8:	d033      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036ca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036ce:	d828      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80036d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d4:	d01a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80036d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036da:	d822      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80036e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e4:	d007      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80036e6:	e01c      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e8:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	4a19      	ldr	r2, [pc, #100]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80036f4:	e01e      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036fa:	3308      	adds	r3, #8
 80036fc:	2100      	movs	r1, #0
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 fb2a 	bl	8004d58 <RCCEx_PLL2_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800370a:	e013      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800370c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003710:	3328      	adds	r3, #40	; 0x28
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f001 fbd1 	bl	8004ebc <RCCEx_PLL3_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003720:	e008      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003728:	e004      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800372a:	bf00      	nop
 800372c:	e002      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003734:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10d      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374a:	4a02      	ldr	r2, [pc, #8]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800374c:	430b      	orrs	r3, r1
 800374e:	6513      	str	r3, [r2, #80]	; 0x50
 8003750:	e006      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003752:	bf00      	nop
 8003754:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800375c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800376c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003770:	2300      	movs	r3, #0
 8003772:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003776:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800377a:	460b      	mov	r3, r1
 800377c:	4313      	orrs	r3, r2
 800377e:	d03a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003786:	2b30      	cmp	r3, #48	; 0x30
 8003788:	d01f      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800378a:	2b30      	cmp	r3, #48	; 0x30
 800378c:	d819      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800378e:	2b20      	cmp	r3, #32
 8003790:	d00c      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003792:	2b20      	cmp	r3, #32
 8003794:	d815      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d019      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800379a:	2b10      	cmp	r3, #16
 800379c:	d111      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800379e:	4bae      	ldr	r3, [pc, #696]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	4aad      	ldr	r2, [pc, #692]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80037aa:	e011      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b0:	3308      	adds	r3, #8
 80037b2:	2102      	movs	r1, #2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 facf 	bl	8004d58 <RCCEx_PLL2_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80037c0:	e006      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80037ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80037d8:	4b9f      	ldr	r3, [pc, #636]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037dc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80037e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e6:	4a9c      	ldr	r2, [pc, #624]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037e8:	430b      	orrs	r3, r1
 80037ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037ec:	e003      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003802:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800380c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003810:	460b      	mov	r3, r1
 8003812:	4313      	orrs	r3, r2
 8003814:	d051      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800381a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800381c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003820:	d035      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003822:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003826:	d82e      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003828:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800382c:	d031      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800382e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003832:	d828      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003838:	d01a      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800383a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800383e:	d822      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003848:	d007      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800384a:	e01c      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800384c:	4b82      	ldr	r3, [pc, #520]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	4a81      	ldr	r2, [pc, #516]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003856:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003858:	e01c      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800385a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800385e:	3308      	adds	r3, #8
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f001 fa78 	bl	8004d58 <RCCEx_PLL2_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800386e:	e011      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003874:	3328      	adds	r3, #40	; 0x28
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f001 fb1f 	bl	8004ebc <RCCEx_PLL3_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003884:	e006      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800388c:	e002      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003894:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800389c:	4b6e      	ldr	r3, [pc, #440]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80038a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038aa:	4a6b      	ldr	r2, [pc, #428]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6513      	str	r3, [r2, #80]	; 0x50
 80038b0:	e003      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80038c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038ca:	2300      	movs	r3, #0
 80038cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80038d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80038d4:	460b      	mov	r3, r1
 80038d6:	4313      	orrs	r3, r2
 80038d8:	d053      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e4:	d033      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80038e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ea:	d82c      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80038ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038f0:	d02f      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80038f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038f6:	d826      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80038f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038fc:	d02b      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80038fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003902:	d820      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003908:	d012      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800390a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800390e:	d81a      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d022      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003918:	d115      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800391a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800391e:	3308      	adds	r3, #8
 8003920:	2101      	movs	r1, #1
 8003922:	4618      	mov	r0, r3
 8003924:	f001 fa18 	bl	8004d58 <RCCEx_PLL2_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800392e:	e015      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003934:	3328      	adds	r3, #40	; 0x28
 8003936:	2101      	movs	r1, #1
 8003938:	4618      	mov	r0, r3
 800393a:	f001 fabf 	bl	8004ebc <RCCEx_PLL3_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003944:	e00a      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800394c:	e006      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800394e:	bf00      	nop
 8003950:	e004      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003952:	bf00      	nop
 8003954:	e002      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003956:	bf00      	nop
 8003958:	e000      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800395a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800395c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003964:	4b3c      	ldr	r3, [pc, #240]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800396c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003972:	4a39      	ldr	r2, [pc, #228]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003974:	430b      	orrs	r3, r1
 8003976:	6513      	str	r3, [r2, #80]	; 0x50
 8003978:	e003      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800397e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800398e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003992:	2300      	movs	r3, #0
 8003994:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003998:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800399c:	460b      	mov	r3, r1
 800399e:	4313      	orrs	r3, r2
 80039a0:	d060      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80039a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039aa:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80039ae:	d039      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80039b0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80039b4:	d832      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ba:	d035      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80039bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c0:	d82c      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c6:	d031      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039cc:	d826      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039d2:	d02d      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80039d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039d8:	d820      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039de:	d012      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80039e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e4:	d81a      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d024      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80039ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ee:	d115      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f4:	3308      	adds	r3, #8
 80039f6:	2101      	movs	r1, #1
 80039f8:	4618      	mov	r0, r3
 80039fa:	f001 f9ad 	bl	8004d58 <RCCEx_PLL2_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a04:	e017      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a0a:	3328      	adds	r3, #40	; 0x28
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 fa54 	bl	8004ebc <RCCEx_PLL3_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a1a:	e00c      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a22:	e008      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a24:	bf00      	nop
 8003a26:	e006      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a28:	bf00      	nop
 8003a2a:	e004      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a2c:	bf00      	nop
 8003a2e:	e002      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a30:	bf00      	nop
 8003a32:	e000      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10e      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a42:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a4e:	4a02      	ldr	r2, [pc, #8]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6593      	str	r3, [r2, #88]	; 0x58
 8003a54:	e006      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003a56:	bf00      	nop
 8003a58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a60:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003a70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4313      	orrs	r3, r2
 8003a82:	d037      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a8e:	d00e      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a94:	d816      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d018      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003a9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a9e:	d111      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa0:	4bc4      	ldr	r3, [pc, #784]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	4ac3      	ldr	r2, [pc, #780]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003aac:	e00f      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 f94e 	bl	8004d58 <RCCEx_PLL2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ac2:	e004      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003aca:	e000      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ace:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ad6:	4bb7      	ldr	r3, [pc, #732]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ada:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ae4:	4ab3      	ldr	r2, [pc, #716]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	6513      	str	r3, [r2, #80]	; 0x50
 8003aea:	e003      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003af0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b04:	2300      	movs	r3, #0
 8003b06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b0a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4313      	orrs	r3, r2
 8003b12:	d039      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d81c      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003b1e:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b24:	08003b61 	.word	0x08003b61
 8003b28:	08003b35 	.word	0x08003b35
 8003b2c:	08003b43 	.word	0x08003b43
 8003b30:	08003b61 	.word	0x08003b61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b34:	4b9f      	ldr	r3, [pc, #636]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	4a9e      	ldr	r2, [pc, #632]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b40:	e00f      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b46:	3308      	adds	r3, #8
 8003b48:	2102      	movs	r1, #2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 f904 	bl	8004d58 <RCCEx_PLL2_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b56:	e004      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10a      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b6a:	4b92      	ldr	r3, [pc, #584]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6e:	f023 0103 	bic.w	r1, r3, #3
 8003b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b78:	4a8e      	ldr	r2, [pc, #568]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b7e:	e003      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b90:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003b94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f000 8099 	beq.w	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003baa:	4b83      	ldr	r3, [pc, #524]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a82      	ldr	r2, [pc, #520]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bb6:	f7fd f9ad 	bl	8000f14 <HAL_GetTick>
 8003bba:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc0:	f7fd f9a8 	bl	8000f14 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b64      	cmp	r3, #100	; 0x64
 8003bce:	d903      	bls.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bd6:	e005      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bd8:	4b77      	ldr	r3, [pc, #476]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0ed      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003be4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d173      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bec:	4b71      	ldr	r3, [pc, #452]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bf8:	4053      	eors	r3, r2
 8003bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d015      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c02:	4b6c      	ldr	r3, [pc, #432]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c0e:	4b69      	ldr	r3, [pc, #420]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	4a68      	ldr	r2, [pc, #416]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c1a:	4b66      	ldr	r3, [pc, #408]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a65      	ldr	r2, [pc, #404]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c26:	4a63      	ldr	r2, [pc, #396]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3a:	d118      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fd f96a 	bl	8000f14 <HAL_GetTick>
 8003c40:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c44:	e00d      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fd f965 	bl	8000f14 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003c50:	1ad2      	subs	r2, r2, r3
 8003c52:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d903      	bls.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003c60:	e005      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c62:	4b54      	ldr	r3, [pc, #336]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0eb      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003c6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d129      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c86:	d10e      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003c88:	4b4a      	ldr	r3, [pc, #296]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c98:	091a      	lsrs	r2, r3, #4
 8003c9a:	4b48      	ldr	r3, [pc, #288]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	4a45      	ldr	r2, [pc, #276]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6113      	str	r3, [r2, #16]
 8003ca4:	e005      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003ca6:	4b43      	ldr	r3, [pc, #268]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	4a42      	ldr	r2, [pc, #264]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cb0:	6113      	str	r3, [r2, #16]
 8003cb2:	4b40      	ldr	r3, [pc, #256]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cb4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc2:	4a3c      	ldr	r2, [pc, #240]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc8:	e008      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003cd2:	e003      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	f002 0301 	and.w	r3, r2, #1
 8003ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cf2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f000 8090 	beq.w	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d06:	2b28      	cmp	r3, #40	; 0x28
 8003d08:	d870      	bhi.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003df5 	.word	0x08003df5
 8003d14:	08003ded 	.word	0x08003ded
 8003d18:	08003ded 	.word	0x08003ded
 8003d1c:	08003ded 	.word	0x08003ded
 8003d20:	08003ded 	.word	0x08003ded
 8003d24:	08003ded 	.word	0x08003ded
 8003d28:	08003ded 	.word	0x08003ded
 8003d2c:	08003ded 	.word	0x08003ded
 8003d30:	08003dc1 	.word	0x08003dc1
 8003d34:	08003ded 	.word	0x08003ded
 8003d38:	08003ded 	.word	0x08003ded
 8003d3c:	08003ded 	.word	0x08003ded
 8003d40:	08003ded 	.word	0x08003ded
 8003d44:	08003ded 	.word	0x08003ded
 8003d48:	08003ded 	.word	0x08003ded
 8003d4c:	08003ded 	.word	0x08003ded
 8003d50:	08003dd7 	.word	0x08003dd7
 8003d54:	08003ded 	.word	0x08003ded
 8003d58:	08003ded 	.word	0x08003ded
 8003d5c:	08003ded 	.word	0x08003ded
 8003d60:	08003ded 	.word	0x08003ded
 8003d64:	08003ded 	.word	0x08003ded
 8003d68:	08003ded 	.word	0x08003ded
 8003d6c:	08003ded 	.word	0x08003ded
 8003d70:	08003df5 	.word	0x08003df5
 8003d74:	08003ded 	.word	0x08003ded
 8003d78:	08003ded 	.word	0x08003ded
 8003d7c:	08003ded 	.word	0x08003ded
 8003d80:	08003ded 	.word	0x08003ded
 8003d84:	08003ded 	.word	0x08003ded
 8003d88:	08003ded 	.word	0x08003ded
 8003d8c:	08003ded 	.word	0x08003ded
 8003d90:	08003df5 	.word	0x08003df5
 8003d94:	08003ded 	.word	0x08003ded
 8003d98:	08003ded 	.word	0x08003ded
 8003d9c:	08003ded 	.word	0x08003ded
 8003da0:	08003ded 	.word	0x08003ded
 8003da4:	08003ded 	.word	0x08003ded
 8003da8:	08003ded 	.word	0x08003ded
 8003dac:	08003ded 	.word	0x08003ded
 8003db0:	08003df5 	.word	0x08003df5
 8003db4:	58024400 	.word	0x58024400
 8003db8:	58024800 	.word	0x58024800
 8003dbc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 ffc5 	bl	8004d58 <RCCEx_PLL2_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003dd4:	e00f      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dda:	3328      	adds	r3, #40	; 0x28
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 f86c 	bl	8004ebc <RCCEx_PLL3_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003dea:	e004      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003df2:	e000      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dfe:	4bc0      	ldr	r3, [pc, #768]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0e:	4abc      	ldr	r2, [pc, #752]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e10:	430b      	orrs	r3, r1
 8003e12:	6553      	str	r3, [r2, #84]	; 0x54
 8003e14:	e003      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e1a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f002 0302 	and.w	r3, r2, #2
 8003e2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003e34:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	d043      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e46:	2b05      	cmp	r3, #5
 8003e48:	d824      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e9d 	.word	0x08003e9d
 8003e54:	08003e69 	.word	0x08003e69
 8003e58:	08003e7f 	.word	0x08003e7f
 8003e5c:	08003e9d 	.word	0x08003e9d
 8003e60:	08003e9d 	.word	0x08003e9d
 8003e64:	08003e9d 	.word	0x08003e9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	2101      	movs	r1, #1
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 ff71 	bl	8004d58 <RCCEx_PLL2_Config>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e7c:	e00f      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e82:	3328      	adds	r3, #40	; 0x28
 8003e84:	2101      	movs	r1, #1
 8003e86:	4618      	mov	r0, r3
 8003e88:	f001 f818 	bl	8004ebc <RCCEx_PLL3_Config>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e92:	e004      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e9a:	e000      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10b      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ea6:	4b96      	ldr	r3, [pc, #600]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	f023 0107 	bic.w	r1, r3, #7
 8003eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eb6:	4a92      	ldr	r2, [pc, #584]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6553      	str	r3, [r2, #84]	; 0x54
 8003ebc:	e003      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ec2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ece:	f002 0304 	and.w	r3, r2, #4
 8003ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003edc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	d043      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d824      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003ef2:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef8:	08003f45 	.word	0x08003f45
 8003efc:	08003f11 	.word	0x08003f11
 8003f00:	08003f27 	.word	0x08003f27
 8003f04:	08003f45 	.word	0x08003f45
 8003f08:	08003f45 	.word	0x08003f45
 8003f0c:	08003f45 	.word	0x08003f45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f14:	3308      	adds	r3, #8
 8003f16:	2101      	movs	r1, #1
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 ff1d 	bl	8004d58 <RCCEx_PLL2_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f24:	e00f      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f2a:	3328      	adds	r3, #40	; 0x28
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 ffc4 	bl	8004ebc <RCCEx_PLL3_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f3a:	e004      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f42:	e000      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10b      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f4e:	4b6c      	ldr	r3, [pc, #432]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	f023 0107 	bic.w	r1, r3, #7
 8003f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f5e:	4a68      	ldr	r2, [pc, #416]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6593      	str	r3, [r2, #88]	; 0x58
 8003f64:	e003      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f66:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f6a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	f002 0320 	and.w	r3, r2, #32
 8003f7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	d055      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f9a:	d033      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fa0:	d82c      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa6:	d02f      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fac:	d826      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fb2:	d02b      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003fb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fb8:	d820      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fbe:	d012      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fc4:	d81a      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d022      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003fca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fce:	d115      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 febd 	bl	8004d58 <RCCEx_PLL2_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fe4:	e015      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fea:	3328      	adds	r3, #40	; 0x28
 8003fec:	2102      	movs	r1, #2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 ff64 	bl	8004ebc <RCCEx_PLL3_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ffa:	e00a      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004002:	e006      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004004:	bf00      	nop
 8004006:	e004      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004008:	bf00      	nop
 800400a:	e002      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800400c:	bf00      	nop
 800400e:	e000      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004012:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800401a:	4b39      	ldr	r3, [pc, #228]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004026:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800402a:	4a35      	ldr	r2, [pc, #212]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800402c:	430b      	orrs	r3, r1
 800402e:	6553      	str	r3, [r2, #84]	; 0x54
 8004030:	e003      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004032:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004036:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800403a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800404a:	2300      	movs	r3, #0
 800404c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004050:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004054:	460b      	mov	r3, r1
 8004056:	4313      	orrs	r3, r2
 8004058:	d058      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800405a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800405e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004062:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004066:	d033      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004068:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800406c:	d82c      	bhi.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800406e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004072:	d02f      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004078:	d826      	bhi.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800407a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800407e:	d02b      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004080:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004084:	d820      	bhi.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408a:	d012      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800408c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004090:	d81a      	bhi.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004092:	2b00      	cmp	r3, #0
 8004094:	d022      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409a:	d115      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800409c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a0:	3308      	adds	r3, #8
 80040a2:	2100      	movs	r1, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fe57 	bl	8004d58 <RCCEx_PLL2_Config>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040b0:	e015      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b6:	3328      	adds	r3, #40	; 0x28
 80040b8:	2102      	movs	r1, #2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fefe 	bl	8004ebc <RCCEx_PLL3_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040c6:	e00a      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040ce:	e006      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80040d0:	bf00      	nop
 80040d2:	e004      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80040d4:	bf00      	nop
 80040d6:	e002      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80040d8:	bf00      	nop
 80040da:	e000      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80040dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10e      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80040e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80040ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040f6:	4a02      	ldr	r2, [pc, #8]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6593      	str	r3, [r2, #88]	; 0x58
 80040fc:	e006      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80040fe:	bf00      	nop
 8004100:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004104:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004108:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800410c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800411c:	2300      	movs	r3, #0
 800411e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004122:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004126:	460b      	mov	r3, r1
 8004128:	4313      	orrs	r3, r2
 800412a:	d055      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800412c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004130:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004134:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004138:	d033      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800413a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800413e:	d82c      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004144:	d02f      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414a:	d826      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800414c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004150:	d02b      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004152:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004156:	d820      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800415c:	d012      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800415e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004162:	d81a      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d022      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416c:	d115      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800416e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004172:	3308      	adds	r3, #8
 8004174:	2100      	movs	r1, #0
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fdee 	bl	8004d58 <RCCEx_PLL2_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004182:	e015      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004188:	3328      	adds	r3, #40	; 0x28
 800418a:	2102      	movs	r1, #2
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fe95 	bl	8004ebc <RCCEx_PLL3_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004198:	e00a      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041a0:	e006      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80041a2:	bf00      	nop
 80041a4:	e004      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80041a6:	bf00      	nop
 80041a8:	e002      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80041aa:	bf00      	nop
 80041ac:	e000      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80041ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10b      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041b8:	4ba1      	ldr	r3, [pc, #644]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80041c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041c8:	4a9d      	ldr	r2, [pc, #628]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041ca:	430b      	orrs	r3, r1
 80041cc:	6593      	str	r3, [r2, #88]	; 0x58
 80041ce:	e003      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f002 0308 	and.w	r3, r2, #8
 80041e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041e8:	2300      	movs	r3, #0
 80041ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80041f2:	460b      	mov	r3, r1
 80041f4:	4313      	orrs	r3, r2
 80041f6:	d01e      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80041f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004204:	d10c      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420a:	3328      	adds	r3, #40	; 0x28
 800420c:	2102      	movs	r1, #2
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fe54 	bl	8004ebc <RCCEx_PLL3_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004220:	4b87      	ldr	r3, [pc, #540]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800422c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004230:	4a83      	ldr	r2, [pc, #524]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004232:	430b      	orrs	r3, r1
 8004234:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	f002 0310 	and.w	r3, r2, #16
 8004242:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004246:	2300      	movs	r3, #0
 8004248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800424c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004250:	460b      	mov	r3, r1
 8004252:	4313      	orrs	r3, r2
 8004254:	d01e      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800425a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800425e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004262:	d10c      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004268:	3328      	adds	r3, #40	; 0x28
 800426a:	2102      	movs	r1, #2
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fe25 	bl	8004ebc <RCCEx_PLL3_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800427e:	4b70      	ldr	r3, [pc, #448]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800428a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800428e:	4a6c      	ldr	r2, [pc, #432]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004290:	430b      	orrs	r3, r1
 8004292:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80042a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042a4:	2300      	movs	r3, #0
 80042a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80042ae:	460b      	mov	r3, r1
 80042b0:	4313      	orrs	r3, r2
 80042b2:	d03e      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80042b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042c0:	d022      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80042c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042c6:	d81b      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80042cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d0:	d00b      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80042d2:	e015      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d8:	3308      	adds	r3, #8
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fd3b 	bl	8004d58 <RCCEx_PLL2_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042e8:	e00f      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ee:	3328      	adds	r3, #40	; 0x28
 80042f0:	2102      	movs	r1, #2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fde2 	bl	8004ebc <RCCEx_PLL3_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042fe:	e004      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004306:	e000      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10b      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004312:	4b4b      	ldr	r3, [pc, #300]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800431a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004322:	4a47      	ldr	r2, [pc, #284]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004324:	430b      	orrs	r3, r1
 8004326:	6593      	str	r3, [r2, #88]	; 0x58
 8004328:	e003      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800432e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800433e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004340:	2300      	movs	r3, #0
 8004342:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004344:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004348:	460b      	mov	r3, r1
 800434a:	4313      	orrs	r3, r2
 800434c:	d03b      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800434e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800435a:	d01f      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800435c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004360:	d818      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004366:	d003      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004368:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800436c:	d007      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800436e:	e011      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004370:	4b33      	ldr	r3, [pc, #204]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	4a32      	ldr	r2, [pc, #200]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800437a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800437c:	e00f      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800437e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004382:	3328      	adds	r3, #40	; 0x28
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fd98 	bl	8004ebc <RCCEx_PLL3_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004392:	e004      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800439a:	e000      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800439c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10b      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043a6:	4b26      	ldr	r3, [pc, #152]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80043ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	4a22      	ldr	r2, [pc, #136]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6553      	str	r3, [r2, #84]	; 0x54
 80043bc:	e003      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80043d2:	673b      	str	r3, [r7, #112]	; 0x70
 80043d4:	2300      	movs	r3, #0
 80043d6:	677b      	str	r3, [r7, #116]	; 0x74
 80043d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80043dc:	460b      	mov	r3, r1
 80043de:	4313      	orrs	r3, r2
 80043e0:	d034      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80043ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f0:	d007      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80043f2:	e011      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f4:	4b12      	ldr	r3, [pc, #72]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	4a11      	ldr	r2, [pc, #68]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004400:	e00e      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004406:	3308      	adds	r3, #8
 8004408:	2102      	movs	r1, #2
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fca4 	bl	8004d58 <RCCEx_PLL2_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004416:	e003      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800441e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004420:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10d      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800442a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004436:	4a02      	ldr	r2, [pc, #8]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004438:	430b      	orrs	r3, r1
 800443a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800443c:	e006      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800443e:	bf00      	nop
 8004440:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004448:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800444c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004458:	66bb      	str	r3, [r7, #104]	; 0x68
 800445a:	2300      	movs	r3, #0
 800445c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800445e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004462:	460b      	mov	r3, r1
 8004464:	4313      	orrs	r3, r2
 8004466:	d00c      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800446c:	3328      	adds	r3, #40	; 0x28
 800446e:	2102      	movs	r1, #2
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fd23 	bl	8004ebc <RCCEx_PLL3_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800448e:	663b      	str	r3, [r7, #96]	; 0x60
 8004490:	2300      	movs	r3, #0
 8004492:	667b      	str	r3, [r7, #100]	; 0x64
 8004494:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004498:	460b      	mov	r3, r1
 800449a:	4313      	orrs	r3, r2
 800449c:	d038      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800449e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044aa:	d018      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80044ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b0:	d811      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80044b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b6:	d014      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80044b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044bc:	d80b      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d011      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80044c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c6:	d106      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c8:	4bc3      	ldr	r3, [pc, #780]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	4ac2      	ldr	r2, [pc, #776]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80044d4:	e008      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044dc:	e004      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80044de:	bf00      	nop
 80044e0:	e002      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80044e2:	bf00      	nop
 80044e4:	e000      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80044e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10b      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044f0:	4bb9      	ldr	r3, [pc, #740]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	4ab5      	ldr	r2, [pc, #724]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004502:	430b      	orrs	r3, r1
 8004504:	6553      	str	r3, [r2, #84]	; 0x54
 8004506:	e003      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004508:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800450c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800451c:	65bb      	str	r3, [r7, #88]	; 0x58
 800451e:	2300      	movs	r3, #0
 8004520:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004522:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	d009      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800452c:	4baa      	ldr	r3, [pc, #680]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800452e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004530:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800453a:	4aa7      	ldr	r2, [pc, #668]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800453c:	430b      	orrs	r3, r1
 800453e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800454c:	653b      	str	r3, [r7, #80]	; 0x50
 800454e:	2300      	movs	r3, #0
 8004550:	657b      	str	r3, [r7, #84]	; 0x54
 8004552:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004556:	460b      	mov	r3, r1
 8004558:	4313      	orrs	r3, r2
 800455a:	d009      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800455c:	4b9e      	ldr	r3, [pc, #632]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800455e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004560:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	4a9b      	ldr	r2, [pc, #620]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800456c:	430b      	orrs	r3, r1
 800456e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800457c:	64bb      	str	r3, [r7, #72]	; 0x48
 800457e:	2300      	movs	r3, #0
 8004580:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004582:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004586:	460b      	mov	r3, r1
 8004588:	4313      	orrs	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800458c:	4b92      	ldr	r3, [pc, #584]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459a:	4a8f      	ldr	r2, [pc, #572]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800459c:	430b      	orrs	r3, r1
 800459e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80045ac:	643b      	str	r3, [r7, #64]	; 0x40
 80045ae:	2300      	movs	r3, #0
 80045b0:	647b      	str	r3, [r7, #68]	; 0x44
 80045b2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80045b6:	460b      	mov	r3, r1
 80045b8:	4313      	orrs	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045bc:	4b86      	ldr	r3, [pc, #536]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	4a85      	ldr	r2, [pc, #532]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045c6:	6113      	str	r3, [r2, #16]
 80045c8:	4b83      	ldr	r3, [pc, #524]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045ca:	6919      	ldr	r1, [r3, #16]
 80045cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045d4:	4a80      	ldr	r2, [pc, #512]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045d6:	430b      	orrs	r3, r1
 80045d8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80045e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e8:	2300      	movs	r3, #0
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80045f0:	460b      	mov	r3, r1
 80045f2:	4313      	orrs	r3, r2
 80045f4:	d009      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045f6:	4b78      	ldr	r3, [pc, #480]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80045fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004604:	4a74      	ldr	r2, [pc, #464]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004606:	430b      	orrs	r3, r1
 8004608:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800460a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004616:	633b      	str	r3, [r7, #48]	; 0x30
 8004618:	2300      	movs	r3, #0
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
 800461c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004620:	460b      	mov	r3, r1
 8004622:	4313      	orrs	r3, r2
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004626:	4b6c      	ldr	r3, [pc, #432]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800462e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004636:	4a68      	ldr	r2, [pc, #416]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004638:	430b      	orrs	r3, r1
 800463a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800463c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	2100      	movs	r1, #0
 8004646:	62b9      	str	r1, [r7, #40]	; 0x28
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800464e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004652:	460b      	mov	r3, r1
 8004654:	4313      	orrs	r3, r2
 8004656:	d011      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800465c:	3308      	adds	r3, #8
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fb79 	bl	8004d58 <RCCEx_PLL2_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800466c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004674:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004678:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800467c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	2100      	movs	r1, #0
 8004686:	6239      	str	r1, [r7, #32]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
 800468e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004692:	460b      	mov	r3, r1
 8004694:	4313      	orrs	r3, r2
 8004696:	d011      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800469c:	3308      	adds	r3, #8
 800469e:	2101      	movs	r1, #1
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fb59 	bl	8004d58 <RCCEx_PLL2_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80046ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80046bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	2100      	movs	r1, #0
 80046c6:	61b9      	str	r1, [r7, #24]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	61fb      	str	r3, [r7, #28]
 80046ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046d2:	460b      	mov	r3, r1
 80046d4:	4313      	orrs	r3, r2
 80046d6:	d011      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046dc:	3308      	adds	r3, #8
 80046de:	2102      	movs	r1, #2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fb39 	bl	8004d58 <RCCEx_PLL2_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80046ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	2100      	movs	r1, #0
 8004706:	6139      	str	r1, [r7, #16]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004712:	460b      	mov	r3, r1
 8004714:	4313      	orrs	r3, r2
 8004716:	d011      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800471c:	3328      	adds	r3, #40	; 0x28
 800471e:	2100      	movs	r1, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fbcb 	bl	8004ebc <RCCEx_PLL3_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800472c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004738:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800473c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	2100      	movs	r1, #0
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004752:	460b      	mov	r3, r1
 8004754:	4313      	orrs	r3, r2
 8004756:	d011      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800475c:	3328      	adds	r3, #40	; 0x28
 800475e:	2101      	movs	r1, #1
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fbab 	bl	8004ebc <RCCEx_PLL3_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800476c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004774:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004778:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800477c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	2100      	movs	r1, #0
 8004786:	6039      	str	r1, [r7, #0]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	607b      	str	r3, [r7, #4]
 800478e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004792:	460b      	mov	r3, r1
 8004794:	4313      	orrs	r3, r2
 8004796:	d011      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800479c:	3328      	adds	r3, #40	; 0x28
 800479e:	2102      	movs	r1, #2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fb8b 	bl	8004ebc <RCCEx_PLL3_Config>
 80047a6:	4603      	mov	r3, r0
 80047a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80047ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80047bc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e000      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80047d0:	46bd      	mov	sp, r7
 80047d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047d6:	bf00      	nop
 80047d8:	58024400 	.word	0x58024400

080047dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80047e0:	f7fe fde2 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80047e4:	4602      	mov	r2, r0
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	091b      	lsrs	r3, r3, #4
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	4904      	ldr	r1, [pc, #16]	; (8004804 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047f2:	5ccb      	ldrb	r3, [r1, r3]
 80047f4:	f003 031f 	and.w	r3, r3, #31
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	58024400 	.word	0x58024400
 8004804:	080076c8 	.word	0x080076c8

08004808 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004808:	b480      	push	{r7}
 800480a:	b089      	sub	sp, #36	; 0x24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004810:	4ba1      	ldr	r3, [pc, #644]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800481a:	4b9f      	ldr	r3, [pc, #636]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	0b1b      	lsrs	r3, r3, #12
 8004820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004824:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004826:	4b9c      	ldr	r3, [pc, #624]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004832:	4b99      	ldr	r3, [pc, #612]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	08db      	lsrs	r3, r3, #3
 8004838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	fb02 f303 	mul.w	r3, r2, r3
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8111 	beq.w	8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b02      	cmp	r3, #2
 800485a:	f000 8083 	beq.w	8004964 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b02      	cmp	r3, #2
 8004862:	f200 80a1 	bhi.w	80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d056      	beq.n	8004920 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004872:	e099      	b.n	80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004874:	4b88      	ldr	r3, [pc, #544]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02d      	beq.n	80048dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004880:	4b85      	ldr	r3, [pc, #532]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	08db      	lsrs	r3, r3, #3
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	4a84      	ldr	r2, [pc, #528]	; (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
 8004890:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	ee07 3a90 	vmov	s15, r3
 8004898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048aa:	4b7b      	ldr	r3, [pc, #492]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80048be:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048da:	e087      	b.n	80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ee:	4b6a      	ldr	r3, [pc, #424]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004902:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800491e:	e065      	b.n	80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800492e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004932:	4b59      	ldr	r3, [pc, #356]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004942:	ed97 6a03 	vldr	s12, [r7, #12]
 8004946:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800494a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800494e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004962:	e043      	b.n	80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004976:	4b48      	ldr	r3, [pc, #288]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004986:	ed97 6a03 	vldr	s12, [r7, #12]
 800498a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800498e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800499a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800499e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049a6:	e021      	b.n	80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ba:	4b37      	ldr	r3, [pc, #220]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049ec:	4b2a      	ldr	r3, [pc, #168]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	0a5b      	lsrs	r3, r3, #9
 80049f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a12:	ee17 2a90 	vmov	r2, s15
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004a1a:	4b1f      	ldr	r3, [pc, #124]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	0c1b      	lsrs	r3, r3, #16
 8004a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a24:	ee07 3a90 	vmov	s15, r3
 8004a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a40:	ee17 2a90 	vmov	r2, s15
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	0e1b      	lsrs	r3, r3, #24
 8004a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a6e:	ee17 2a90 	vmov	r2, s15
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a76:	e008      	b.n	8004a8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	609a      	str	r2, [r3, #8]
}
 8004a8a:	bf00      	nop
 8004a8c:	3724      	adds	r7, #36	; 0x24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	58024400 	.word	0x58024400
 8004a9c:	03d09000 	.word	0x03d09000
 8004aa0:	46000000 	.word	0x46000000
 8004aa4:	4c742400 	.word	0x4c742400
 8004aa8:	4a742400 	.word	0x4a742400
 8004aac:	4bb71b00 	.word	0x4bb71b00

08004ab0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b089      	sub	sp, #36	; 0x24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ab8:	4ba1      	ldr	r3, [pc, #644]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ac2:	4b9f      	ldr	r3, [pc, #636]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	0d1b      	lsrs	r3, r3, #20
 8004ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004acc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ace:	4b9c      	ldr	r3, [pc, #624]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	0a1b      	lsrs	r3, r3, #8
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004ada:	4b99      	ldr	r3, [pc, #612]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	08db      	lsrs	r3, r3, #3
 8004ae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8111 	beq.w	8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	f000 8083 	beq.w	8004c0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	f200 80a1 	bhi.w	8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d056      	beq.n	8004bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b1a:	e099      	b.n	8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b1c:	4b88      	ldr	r3, [pc, #544]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02d      	beq.n	8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b28:	4b85      	ldr	r3, [pc, #532]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	08db      	lsrs	r3, r3, #3
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	4a84      	ldr	r2, [pc, #528]	; (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
 8004b38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	ee07 3a90 	vmov	s15, r3
 8004b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b52:	4b7b      	ldr	r3, [pc, #492]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b82:	e087      	b.n	8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b96:	4b6a      	ldr	r3, [pc, #424]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004baa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bc6:	e065      	b.n	8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bda:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c0a:	e043      	b.n	8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1e:	4b48      	ldr	r3, [pc, #288]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c4e:	e021      	b.n	8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c62:	4b37      	ldr	r3, [pc, #220]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c94:	4b2a      	ldr	r3, [pc, #168]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	0a5b      	lsrs	r3, r3, #9
 8004c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cba:	ee17 2a90 	vmov	r2, s15
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004cc2:	4b1f      	ldr	r3, [pc, #124]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	0c1b      	lsrs	r3, r3, #16
 8004cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ccc:	ee07 3a90 	vmov	s15, r3
 8004cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce8:	ee17 2a90 	vmov	r2, s15
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cf0:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	0e1b      	lsrs	r3, r3, #24
 8004cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d16:	ee17 2a90 	vmov	r2, s15
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d1e:	e008      	b.n	8004d32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	609a      	str	r2, [r3, #8]
}
 8004d32:	bf00      	nop
 8004d34:	3724      	adds	r7, #36	; 0x24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	58024400 	.word	0x58024400
 8004d44:	03d09000 	.word	0x03d09000
 8004d48:	46000000 	.word	0x46000000
 8004d4c:	4c742400 	.word	0x4c742400
 8004d50:	4a742400 	.word	0x4a742400
 8004d54:	4bb71b00 	.word	0x4bb71b00

08004d58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d66:	4b53      	ldr	r3, [pc, #332]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d101      	bne.n	8004d76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e099      	b.n	8004eaa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d76:	4b4f      	ldr	r3, [pc, #316]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a4e      	ldr	r2, [pc, #312]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004d7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d82:	f7fc f8c7 	bl	8000f14 <HAL_GetTick>
 8004d86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d88:	e008      	b.n	8004d9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d8a:	f7fc f8c3 	bl	8000f14 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e086      	b.n	8004eaa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d9c:	4b45      	ldr	r3, [pc, #276]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1f0      	bne.n	8004d8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004da8:	4b42      	ldr	r3, [pc, #264]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	031b      	lsls	r3, r3, #12
 8004db6:	493f      	ldr	r1, [pc, #252]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	628b      	str	r3, [r1, #40]	; 0x28
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	025b      	lsls	r3, r3, #9
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	041b      	lsls	r3, r3, #16
 8004dda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	061b      	lsls	r3, r3, #24
 8004de8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004dec:	4931      	ldr	r1, [pc, #196]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004df2:	4b30      	ldr	r3, [pc, #192]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	492d      	ldr	r1, [pc, #180]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e04:	4b2b      	ldr	r3, [pc, #172]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	f023 0220 	bic.w	r2, r3, #32
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	4928      	ldr	r1, [pc, #160]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e16:	4b27      	ldr	r3, [pc, #156]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	4a26      	ldr	r2, [pc, #152]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e1c:	f023 0310 	bic.w	r3, r3, #16
 8004e20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e22:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e26:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <RCCEx_PLL2_Config+0x160>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	69d2      	ldr	r2, [r2, #28]
 8004e2e:	00d2      	lsls	r2, r2, #3
 8004e30:	4920      	ldr	r1, [pc, #128]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e36:	4b1f      	ldr	r3, [pc, #124]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	4a1e      	ldr	r2, [pc, #120]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e3c:	f043 0310 	orr.w	r3, r3, #16
 8004e40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e48:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e54:	e00f      	b.n	8004e76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d106      	bne.n	8004e6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e5c:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e68:	e005      	b.n	8004e76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	4a11      	ldr	r2, [pc, #68]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e76:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a0e      	ldr	r2, [pc, #56]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e82:	f7fc f847 	bl	8000f14 <HAL_GetTick>
 8004e86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e88:	e008      	b.n	8004e9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e8a:	f7fc f843 	bl	8000f14 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e006      	b.n	8004eaa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <RCCEx_PLL2_Config+0x15c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	58024400 	.word	0x58024400
 8004eb8:	ffff0007 	.word	0xffff0007

08004ebc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004eca:	4b53      	ldr	r3, [pc, #332]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d101      	bne.n	8004eda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e099      	b.n	800500e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004eda:	4b4f      	ldr	r3, [pc, #316]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a4e      	ldr	r2, [pc, #312]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee6:	f7fc f815 	bl	8000f14 <HAL_GetTick>
 8004eea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004eec:	e008      	b.n	8004f00 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004eee:	f7fc f811 	bl	8000f14 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e086      	b.n	800500e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f00:	4b45      	ldr	r3, [pc, #276]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f0      	bne.n	8004eee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f0c:	4b42      	ldr	r3, [pc, #264]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	051b      	lsls	r3, r3, #20
 8004f1a:	493f      	ldr	r1, [pc, #252]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	628b      	str	r3, [r1, #40]	; 0x28
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	025b      	lsls	r3, r3, #9
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	041b      	lsls	r3, r3, #16
 8004f3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	061b      	lsls	r3, r3, #24
 8004f4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f50:	4931      	ldr	r1, [pc, #196]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f56:	4b30      	ldr	r3, [pc, #192]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	492d      	ldr	r1, [pc, #180]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f68:	4b2b      	ldr	r3, [pc, #172]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	4928      	ldr	r1, [pc, #160]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f7a:	4b27      	ldr	r3, [pc, #156]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	4a26      	ldr	r2, [pc, #152]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f8a:	4b24      	ldr	r3, [pc, #144]	; (800501c <RCCEx_PLL3_Config+0x160>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	69d2      	ldr	r2, [r2, #28]
 8004f92:	00d2      	lsls	r2, r2, #3
 8004f94:	4920      	ldr	r1, [pc, #128]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f9a:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	4a1e      	ldr	r2, [pc, #120]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004fac:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	4a19      	ldr	r2, [pc, #100]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fb8:	e00f      	b.n	8004fda <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d106      	bne.n	8004fce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fc0:	4b15      	ldr	r3, [pc, #84]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	4a14      	ldr	r2, [pc, #80]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fcc:	e005      	b.n	8004fda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fce:	4b12      	ldr	r3, [pc, #72]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	4a11      	ldr	r2, [pc, #68]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fda:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a0e      	ldr	r2, [pc, #56]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8004fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe6:	f7fb ff95 	bl	8000f14 <HAL_GetTick>
 8004fea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fec:	e008      	b.n	8005000 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fee:	f7fb ff91 	bl	8000f14 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e006      	b.n	800500e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <RCCEx_PLL3_Config+0x15c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f0      	beq.n	8004fee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	58024400 	.word	0x58024400
 800501c:	ffff0007 	.word	0xffff0007

08005020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e042      	b.n	80050b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005038:	2b00      	cmp	r3, #0
 800503a:	d106      	bne.n	800504a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7fb fd61 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2224      	movs	r2, #36	; 0x24
 800504e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fc94 	bl	8005990 <UART_SetConfig>
 8005068:	4603      	mov	r3, r0
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e022      	b.n	80050b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f001 faf4 	bl	8006668 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800508e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800509e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f001 fb7b 	bl	80067ac <UART_CheckIdleState>
 80050b6:	4603      	mov	r3, r0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	4613      	mov	r3, r2
 80050ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d17b      	bne.n	80051d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <HAL_UART_Transmit+0x26>
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e074      	b.n	80051d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2221      	movs	r2, #33	; 0x21
 80050f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050fa:	f7fb ff0b 	bl	8000f14 <HAL_GetTick>
 80050fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	88fa      	ldrh	r2, [r7, #6]
 8005104:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	88fa      	ldrh	r2, [r7, #6]
 800510c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005118:	d108      	bne.n	800512c <HAL_UART_Transmit+0x6c>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	e003      	b.n	8005134 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005134:	e030      	b.n	8005198 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2200      	movs	r2, #0
 800513e:	2180      	movs	r1, #128	; 0x80
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f001 fbdd 	bl	8006900 <UART_WaitOnFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e03d      	b.n	80051d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10b      	bne.n	8005176 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800516c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	3302      	adds	r3, #2
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	e007      	b.n	8005186 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	781a      	ldrb	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	3301      	adds	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1c8      	bne.n	8005136 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2200      	movs	r2, #0
 80051ac:	2140      	movs	r1, #64	; 0x40
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f001 fba6 	bl	8006900 <UART_WaitOnFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e006      	b.n	80051d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e000      	b.n	80051d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80051d2:	2302      	movs	r3, #2
  }
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3720      	adds	r7, #32
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b0ba      	sub	sp, #232	; 0xe8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005202:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005206:	f640 030f 	movw	r3, #2063	; 0x80f
 800520a:	4013      	ands	r3, r2
 800520c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005214:	2b00      	cmp	r3, #0
 8005216:	d11b      	bne.n	8005250 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d015      	beq.n	8005250 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	d105      	bne.n	800523c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d009      	beq.n	8005250 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8377 	beq.w	8005934 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	4798      	blx	r3
      }
      return;
 800524e:	e371      	b.n	8005934 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005250:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8123 	beq.w	80054a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800525a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800525e:	4b8d      	ldr	r3, [pc, #564]	; (8005494 <HAL_UART_IRQHandler+0x2b8>)
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005266:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800526a:	4b8b      	ldr	r3, [pc, #556]	; (8005498 <HAL_UART_IRQHandler+0x2bc>)
 800526c:	4013      	ands	r3, r2
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8116 	beq.w	80054a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d011      	beq.n	80052a4 <HAL_UART_IRQHandler+0xc8>
 8005280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00b      	beq.n	80052a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2201      	movs	r2, #1
 8005292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	f043 0201 	orr.w	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d011      	beq.n	80052d4 <HAL_UART_IRQHandler+0xf8>
 80052b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00b      	beq.n	80052d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2202      	movs	r2, #2
 80052c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f043 0204 	orr.w	r2, r3, #4
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d011      	beq.n	8005304 <HAL_UART_IRQHandler+0x128>
 80052e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2204      	movs	r2, #4
 80052f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fa:	f043 0202 	orr.w	r2, r3, #2
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d017      	beq.n	8005340 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d105      	bne.n	8005328 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800531c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005320:	4b5c      	ldr	r3, [pc, #368]	; (8005494 <HAL_UART_IRQHandler+0x2b8>)
 8005322:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2208      	movs	r2, #8
 800532e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005336:	f043 0208 	orr.w	r2, r3, #8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005348:	2b00      	cmp	r3, #0
 800534a:	d012      	beq.n	8005372 <HAL_UART_IRQHandler+0x196>
 800534c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00c      	beq.n	8005372 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005360:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005368:	f043 0220 	orr.w	r2, r3, #32
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 82dd 	beq.w	8005938 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800537e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b00      	cmp	r3, #0
 8005388:	d013      	beq.n	80053b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800538a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d105      	bne.n	80053a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800539a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d005      	beq.n	80053d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d054      	beq.n	8005480 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f001 fafa 	bl	80069d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e6:	2b40      	cmp	r3, #64	; 0x40
 80053e8:	d146      	bne.n	8005478 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3308      	adds	r3, #8
 80053f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3308      	adds	r3, #8
 8005412:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005416:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800541a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005422:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800542e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1d9      	bne.n	80053ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800543c:	2b00      	cmp	r3, #0
 800543e:	d017      	beq.n	8005470 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005446:	4a15      	ldr	r2, [pc, #84]	; (800549c <HAL_UART_IRQHandler+0x2c0>)
 8005448:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005450:	4618      	mov	r0, r3
 8005452:	f7fc f999 	bl	8001788 <HAL_DMA_Abort_IT>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d019      	beq.n	8005490 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800546a:	4610      	mov	r0, r2
 800546c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546e:	e00f      	b.n	8005490 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fa77 	bl	8005964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005476:	e00b      	b.n	8005490 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fa73 	bl	8005964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547e:	e007      	b.n	8005490 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fa6f 	bl	8005964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800548e:	e253      	b.n	8005938 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005490:	bf00      	nop
    return;
 8005492:	e251      	b.n	8005938 <HAL_UART_IRQHandler+0x75c>
 8005494:	10000001 	.word	0x10000001
 8005498:	04000120 	.word	0x04000120
 800549c:	08006a9d 	.word	0x08006a9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	f040 81e7 	bne.w	8005878 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 81e0 	beq.w	8005878 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 81d9 	beq.w	8005878 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2210      	movs	r2, #16
 80054cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	f040 8151 	bne.w	8005780 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a96      	ldr	r2, [pc, #600]	; (8005740 <HAL_UART_IRQHandler+0x564>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d068      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a93      	ldr	r2, [pc, #588]	; (8005744 <HAL_UART_IRQHandler+0x568>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d061      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a91      	ldr	r2, [pc, #580]	; (8005748 <HAL_UART_IRQHandler+0x56c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d05a      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a8e      	ldr	r2, [pc, #568]	; (800574c <HAL_UART_IRQHandler+0x570>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d053      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a8c      	ldr	r2, [pc, #560]	; (8005750 <HAL_UART_IRQHandler+0x574>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d04c      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a89      	ldr	r2, [pc, #548]	; (8005754 <HAL_UART_IRQHandler+0x578>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d045      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a87      	ldr	r2, [pc, #540]	; (8005758 <HAL_UART_IRQHandler+0x57c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d03e      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a84      	ldr	r2, [pc, #528]	; (800575c <HAL_UART_IRQHandler+0x580>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d037      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a82      	ldr	r2, [pc, #520]	; (8005760 <HAL_UART_IRQHandler+0x584>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d030      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a7f      	ldr	r2, [pc, #508]	; (8005764 <HAL_UART_IRQHandler+0x588>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d029      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a7d      	ldr	r2, [pc, #500]	; (8005768 <HAL_UART_IRQHandler+0x58c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d022      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a7a      	ldr	r2, [pc, #488]	; (800576c <HAL_UART_IRQHandler+0x590>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d01b      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a78      	ldr	r2, [pc, #480]	; (8005770 <HAL_UART_IRQHandler+0x594>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d014      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a75      	ldr	r2, [pc, #468]	; (8005774 <HAL_UART_IRQHandler+0x598>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00d      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a73      	ldr	r2, [pc, #460]	; (8005778 <HAL_UART_IRQHandler+0x59c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d006      	beq.n	80055be <HAL_UART_IRQHandler+0x3e2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a70      	ldr	r2, [pc, #448]	; (800577c <HAL_UART_IRQHandler+0x5a0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d106      	bne.n	80055cc <HAL_UART_IRQHandler+0x3f0>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	e005      	b.n	80055d8 <HAL_UART_IRQHandler+0x3fc>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 81ab 	beq.w	800593c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055f0:	429a      	cmp	r2, r3
 80055f2:	f080 81a3 	bcs.w	800593c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560c:	f000 8087 	beq.w	800571e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800562c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800563a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800563e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005646:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1da      	bne.n	8005610 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3308      	adds	r3, #8
 8005660:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800566a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3308      	adds	r3, #8
 800567a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800567e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005682:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005686:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e1      	bne.n	800565a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3308      	adds	r3, #8
 800569c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3308      	adds	r3, #8
 80056b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e3      	bne.n	8005696 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ec:	f023 0310 	bic.w	r3, r3, #16
 80056f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005700:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005704:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800570c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e4      	bne.n	80056dc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005718:	4618      	mov	r0, r3
 800571a:	f7fb fd17 	bl	800114c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005730:	b29b      	uxth	r3, r3
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	b29b      	uxth	r3, r3
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f91d 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800573e:	e0fd      	b.n	800593c <HAL_UART_IRQHandler+0x760>
 8005740:	40020010 	.word	0x40020010
 8005744:	40020028 	.word	0x40020028
 8005748:	40020040 	.word	0x40020040
 800574c:	40020058 	.word	0x40020058
 8005750:	40020070 	.word	0x40020070
 8005754:	40020088 	.word	0x40020088
 8005758:	400200a0 	.word	0x400200a0
 800575c:	400200b8 	.word	0x400200b8
 8005760:	40020410 	.word	0x40020410
 8005764:	40020428 	.word	0x40020428
 8005768:	40020440 	.word	0x40020440
 800576c:	40020458 	.word	0x40020458
 8005770:	40020470 	.word	0x40020470
 8005774:	40020488 	.word	0x40020488
 8005778:	400204a0 	.word	0x400204a0
 800577c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800578c:	b29b      	uxth	r3, r3
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 80cf 	beq.w	8005940 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80057a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80ca 	beq.w	8005940 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057ce:	647b      	str	r3, [r7, #68]	; 0x44
 80057d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e4      	bne.n	80057ac <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3308      	adds	r3, #8
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	623b      	str	r3, [r7, #32]
   return(result);
 80057f2:	6a3a      	ldr	r2, [r7, #32]
 80057f4:	4b55      	ldr	r3, [pc, #340]	; (800594c <HAL_UART_IRQHandler+0x770>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3308      	adds	r3, #8
 8005802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005806:	633a      	str	r2, [r7, #48]	; 0x30
 8005808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800580c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e3      	bne.n	80057e2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	e853 3f00 	ldrex	r3, [r3]
 800583a:	60fb      	str	r3, [r7, #12]
   return(result);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0310 	bic.w	r3, r3, #16
 8005842:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005850:	61fb      	str	r3, [r7, #28]
 8005852:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	69b9      	ldr	r1, [r7, #24]
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	617b      	str	r3, [r7, #20]
   return(result);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e4      	bne.n	800582e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800586a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f881 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005876:	e063      	b.n	8005940 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00e      	beq.n	80058a2 <HAL_UART_IRQHandler+0x6c6>
 8005884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005898:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 f93f 	bl	8006b1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058a0:	e051      	b.n	8005946 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80058a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d014      	beq.n	80058d8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80058ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d105      	bne.n	80058c6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80058ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d008      	beq.n	80058d8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d03a      	beq.n	8005944 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
    }
    return;
 80058d6:	e035      	b.n	8005944 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d009      	beq.n	80058f8 <HAL_UART_IRQHandler+0x71c>
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 f8e9 	bl	8006ac8 <UART_EndTransmit_IT>
    return;
 80058f6:	e026      	b.n	8005946 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80058f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d009      	beq.n	8005918 <HAL_UART_IRQHandler+0x73c>
 8005904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005908:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f001 f918 	bl	8006b46 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005916:	e016      	b.n	8005946 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d010      	beq.n	8005946 <HAL_UART_IRQHandler+0x76a>
 8005924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005928:	2b00      	cmp	r3, #0
 800592a:	da0c      	bge.n	8005946 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f001 f900 	bl	8006b32 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005932:	e008      	b.n	8005946 <HAL_UART_IRQHandler+0x76a>
      return;
 8005934:	bf00      	nop
 8005936:	e006      	b.n	8005946 <HAL_UART_IRQHandler+0x76a>
    return;
 8005938:	bf00      	nop
 800593a:	e004      	b.n	8005946 <HAL_UART_IRQHandler+0x76a>
      return;
 800593c:	bf00      	nop
 800593e:	e002      	b.n	8005946 <HAL_UART_IRQHandler+0x76a>
      return;
 8005940:	bf00      	nop
 8005942:	e000      	b.n	8005946 <HAL_UART_IRQHandler+0x76a>
    return;
 8005944:	bf00      	nop
  }
}
 8005946:	37e8      	adds	r7, #232	; 0xe8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	effffffe 	.word	0xeffffffe

08005950 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005994:	b092      	sub	sp, #72	; 0x48
 8005996:	af00      	add	r7, sp, #0
 8005998:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	431a      	orrs	r2, r3
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	4bbe      	ldr	r3, [pc, #760]	; (8005cb8 <UART_SetConfig+0x328>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4ab3      	ldr	r2, [pc, #716]	; (8005cbc <UART_SetConfig+0x32c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059f8:	4313      	orrs	r3, r2
 80059fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	4baf      	ldr	r3, [pc, #700]	; (8005cc0 <UART_SetConfig+0x330>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	f023 010f 	bic.w	r1, r3, #15
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4aa6      	ldr	r2, [pc, #664]	; (8005cc4 <UART_SetConfig+0x334>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d177      	bne.n	8005b20 <UART_SetConfig+0x190>
 8005a30:	4ba5      	ldr	r3, [pc, #660]	; (8005cc8 <UART_SetConfig+0x338>)
 8005a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a38:	2b28      	cmp	r3, #40	; 0x28
 8005a3a:	d86d      	bhi.n	8005b18 <UART_SetConfig+0x188>
 8005a3c:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <UART_SetConfig+0xb4>)
 8005a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a42:	bf00      	nop
 8005a44:	08005ae9 	.word	0x08005ae9
 8005a48:	08005b19 	.word	0x08005b19
 8005a4c:	08005b19 	.word	0x08005b19
 8005a50:	08005b19 	.word	0x08005b19
 8005a54:	08005b19 	.word	0x08005b19
 8005a58:	08005b19 	.word	0x08005b19
 8005a5c:	08005b19 	.word	0x08005b19
 8005a60:	08005b19 	.word	0x08005b19
 8005a64:	08005af1 	.word	0x08005af1
 8005a68:	08005b19 	.word	0x08005b19
 8005a6c:	08005b19 	.word	0x08005b19
 8005a70:	08005b19 	.word	0x08005b19
 8005a74:	08005b19 	.word	0x08005b19
 8005a78:	08005b19 	.word	0x08005b19
 8005a7c:	08005b19 	.word	0x08005b19
 8005a80:	08005b19 	.word	0x08005b19
 8005a84:	08005af9 	.word	0x08005af9
 8005a88:	08005b19 	.word	0x08005b19
 8005a8c:	08005b19 	.word	0x08005b19
 8005a90:	08005b19 	.word	0x08005b19
 8005a94:	08005b19 	.word	0x08005b19
 8005a98:	08005b19 	.word	0x08005b19
 8005a9c:	08005b19 	.word	0x08005b19
 8005aa0:	08005b19 	.word	0x08005b19
 8005aa4:	08005b01 	.word	0x08005b01
 8005aa8:	08005b19 	.word	0x08005b19
 8005aac:	08005b19 	.word	0x08005b19
 8005ab0:	08005b19 	.word	0x08005b19
 8005ab4:	08005b19 	.word	0x08005b19
 8005ab8:	08005b19 	.word	0x08005b19
 8005abc:	08005b19 	.word	0x08005b19
 8005ac0:	08005b19 	.word	0x08005b19
 8005ac4:	08005b09 	.word	0x08005b09
 8005ac8:	08005b19 	.word	0x08005b19
 8005acc:	08005b19 	.word	0x08005b19
 8005ad0:	08005b19 	.word	0x08005b19
 8005ad4:	08005b19 	.word	0x08005b19
 8005ad8:	08005b19 	.word	0x08005b19
 8005adc:	08005b19 	.word	0x08005b19
 8005ae0:	08005b19 	.word	0x08005b19
 8005ae4:	08005b11 	.word	0x08005b11
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aee:	e326      	b.n	800613e <UART_SetConfig+0x7ae>
 8005af0:	2304      	movs	r3, #4
 8005af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005af6:	e322      	b.n	800613e <UART_SetConfig+0x7ae>
 8005af8:	2308      	movs	r3, #8
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005afe:	e31e      	b.n	800613e <UART_SetConfig+0x7ae>
 8005b00:	2310      	movs	r3, #16
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b06:	e31a      	b.n	800613e <UART_SetConfig+0x7ae>
 8005b08:	2320      	movs	r3, #32
 8005b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b0e:	e316      	b.n	800613e <UART_SetConfig+0x7ae>
 8005b10:	2340      	movs	r3, #64	; 0x40
 8005b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b16:	e312      	b.n	800613e <UART_SetConfig+0x7ae>
 8005b18:	2380      	movs	r3, #128	; 0x80
 8005b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1e:	e30e      	b.n	800613e <UART_SetConfig+0x7ae>
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a69      	ldr	r2, [pc, #420]	; (8005ccc <UART_SetConfig+0x33c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d130      	bne.n	8005b8c <UART_SetConfig+0x1fc>
 8005b2a:	4b67      	ldr	r3, [pc, #412]	; (8005cc8 <UART_SetConfig+0x338>)
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	2b05      	cmp	r3, #5
 8005b34:	d826      	bhi.n	8005b84 <UART_SetConfig+0x1f4>
 8005b36:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <UART_SetConfig+0x1ac>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b55 	.word	0x08005b55
 8005b40:	08005b5d 	.word	0x08005b5d
 8005b44:	08005b65 	.word	0x08005b65
 8005b48:	08005b6d 	.word	0x08005b6d
 8005b4c:	08005b75 	.word	0x08005b75
 8005b50:	08005b7d 	.word	0x08005b7d
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5a:	e2f0      	b.n	800613e <UART_SetConfig+0x7ae>
 8005b5c:	2304      	movs	r3, #4
 8005b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b62:	e2ec      	b.n	800613e <UART_SetConfig+0x7ae>
 8005b64:	2308      	movs	r3, #8
 8005b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6a:	e2e8      	b.n	800613e <UART_SetConfig+0x7ae>
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b72:	e2e4      	b.n	800613e <UART_SetConfig+0x7ae>
 8005b74:	2320      	movs	r3, #32
 8005b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7a:	e2e0      	b.n	800613e <UART_SetConfig+0x7ae>
 8005b7c:	2340      	movs	r3, #64	; 0x40
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b82:	e2dc      	b.n	800613e <UART_SetConfig+0x7ae>
 8005b84:	2380      	movs	r3, #128	; 0x80
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8a:	e2d8      	b.n	800613e <UART_SetConfig+0x7ae>
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a4f      	ldr	r2, [pc, #316]	; (8005cd0 <UART_SetConfig+0x340>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d130      	bne.n	8005bf8 <UART_SetConfig+0x268>
 8005b96:	4b4c      	ldr	r3, [pc, #304]	; (8005cc8 <UART_SetConfig+0x338>)
 8005b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	2b05      	cmp	r3, #5
 8005ba0:	d826      	bhi.n	8005bf0 <UART_SetConfig+0x260>
 8005ba2:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <UART_SetConfig+0x218>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005bc1 	.word	0x08005bc1
 8005bac:	08005bc9 	.word	0x08005bc9
 8005bb0:	08005bd1 	.word	0x08005bd1
 8005bb4:	08005bd9 	.word	0x08005bd9
 8005bb8:	08005be1 	.word	0x08005be1
 8005bbc:	08005be9 	.word	0x08005be9
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc6:	e2ba      	b.n	800613e <UART_SetConfig+0x7ae>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bce:	e2b6      	b.n	800613e <UART_SetConfig+0x7ae>
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd6:	e2b2      	b.n	800613e <UART_SetConfig+0x7ae>
 8005bd8:	2310      	movs	r3, #16
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bde:	e2ae      	b.n	800613e <UART_SetConfig+0x7ae>
 8005be0:	2320      	movs	r3, #32
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be6:	e2aa      	b.n	800613e <UART_SetConfig+0x7ae>
 8005be8:	2340      	movs	r3, #64	; 0x40
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bee:	e2a6      	b.n	800613e <UART_SetConfig+0x7ae>
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf6:	e2a2      	b.n	800613e <UART_SetConfig+0x7ae>
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a35      	ldr	r2, [pc, #212]	; (8005cd4 <UART_SetConfig+0x344>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d130      	bne.n	8005c64 <UART_SetConfig+0x2d4>
 8005c02:	4b31      	ldr	r3, [pc, #196]	; (8005cc8 <UART_SetConfig+0x338>)
 8005c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	2b05      	cmp	r3, #5
 8005c0c:	d826      	bhi.n	8005c5c <UART_SetConfig+0x2cc>
 8005c0e:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <UART_SetConfig+0x284>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005c2d 	.word	0x08005c2d
 8005c18:	08005c35 	.word	0x08005c35
 8005c1c:	08005c3d 	.word	0x08005c3d
 8005c20:	08005c45 	.word	0x08005c45
 8005c24:	08005c4d 	.word	0x08005c4d
 8005c28:	08005c55 	.word	0x08005c55
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c32:	e284      	b.n	800613e <UART_SetConfig+0x7ae>
 8005c34:	2304      	movs	r3, #4
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c3a:	e280      	b.n	800613e <UART_SetConfig+0x7ae>
 8005c3c:	2308      	movs	r3, #8
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c42:	e27c      	b.n	800613e <UART_SetConfig+0x7ae>
 8005c44:	2310      	movs	r3, #16
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c4a:	e278      	b.n	800613e <UART_SetConfig+0x7ae>
 8005c4c:	2320      	movs	r3, #32
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c52:	e274      	b.n	800613e <UART_SetConfig+0x7ae>
 8005c54:	2340      	movs	r3, #64	; 0x40
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5a:	e270      	b.n	800613e <UART_SetConfig+0x7ae>
 8005c5c:	2380      	movs	r3, #128	; 0x80
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c62:	e26c      	b.n	800613e <UART_SetConfig+0x7ae>
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a1b      	ldr	r2, [pc, #108]	; (8005cd8 <UART_SetConfig+0x348>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d142      	bne.n	8005cf4 <UART_SetConfig+0x364>
 8005c6e:	4b16      	ldr	r3, [pc, #88]	; (8005cc8 <UART_SetConfig+0x338>)
 8005c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	2b05      	cmp	r3, #5
 8005c78:	d838      	bhi.n	8005cec <UART_SetConfig+0x35c>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <UART_SetConfig+0x2f0>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005c99 	.word	0x08005c99
 8005c84:	08005ca1 	.word	0x08005ca1
 8005c88:	08005ca9 	.word	0x08005ca9
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005cdd 	.word	0x08005cdd
 8005c94:	08005ce5 	.word	0x08005ce5
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c9e:	e24e      	b.n	800613e <UART_SetConfig+0x7ae>
 8005ca0:	2304      	movs	r3, #4
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ca6:	e24a      	b.n	800613e <UART_SetConfig+0x7ae>
 8005ca8:	2308      	movs	r3, #8
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cae:	e246      	b.n	800613e <UART_SetConfig+0x7ae>
 8005cb0:	2310      	movs	r3, #16
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cb6:	e242      	b.n	800613e <UART_SetConfig+0x7ae>
 8005cb8:	cfff69f3 	.word	0xcfff69f3
 8005cbc:	58000c00 	.word	0x58000c00
 8005cc0:	11fff4ff 	.word	0x11fff4ff
 8005cc4:	40011000 	.word	0x40011000
 8005cc8:	58024400 	.word	0x58024400
 8005ccc:	40004400 	.word	0x40004400
 8005cd0:	40004800 	.word	0x40004800
 8005cd4:	40004c00 	.word	0x40004c00
 8005cd8:	40005000 	.word	0x40005000
 8005cdc:	2320      	movs	r3, #32
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce2:	e22c      	b.n	800613e <UART_SetConfig+0x7ae>
 8005ce4:	2340      	movs	r3, #64	; 0x40
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cea:	e228      	b.n	800613e <UART_SetConfig+0x7ae>
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf2:	e224      	b.n	800613e <UART_SetConfig+0x7ae>
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4ab1      	ldr	r2, [pc, #708]	; (8005fc0 <UART_SetConfig+0x630>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d176      	bne.n	8005dec <UART_SetConfig+0x45c>
 8005cfe:	4bb1      	ldr	r3, [pc, #708]	; (8005fc4 <UART_SetConfig+0x634>)
 8005d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d06:	2b28      	cmp	r3, #40	; 0x28
 8005d08:	d86c      	bhi.n	8005de4 <UART_SetConfig+0x454>
 8005d0a:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <UART_SetConfig+0x380>)
 8005d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d10:	08005db5 	.word	0x08005db5
 8005d14:	08005de5 	.word	0x08005de5
 8005d18:	08005de5 	.word	0x08005de5
 8005d1c:	08005de5 	.word	0x08005de5
 8005d20:	08005de5 	.word	0x08005de5
 8005d24:	08005de5 	.word	0x08005de5
 8005d28:	08005de5 	.word	0x08005de5
 8005d2c:	08005de5 	.word	0x08005de5
 8005d30:	08005dbd 	.word	0x08005dbd
 8005d34:	08005de5 	.word	0x08005de5
 8005d38:	08005de5 	.word	0x08005de5
 8005d3c:	08005de5 	.word	0x08005de5
 8005d40:	08005de5 	.word	0x08005de5
 8005d44:	08005de5 	.word	0x08005de5
 8005d48:	08005de5 	.word	0x08005de5
 8005d4c:	08005de5 	.word	0x08005de5
 8005d50:	08005dc5 	.word	0x08005dc5
 8005d54:	08005de5 	.word	0x08005de5
 8005d58:	08005de5 	.word	0x08005de5
 8005d5c:	08005de5 	.word	0x08005de5
 8005d60:	08005de5 	.word	0x08005de5
 8005d64:	08005de5 	.word	0x08005de5
 8005d68:	08005de5 	.word	0x08005de5
 8005d6c:	08005de5 	.word	0x08005de5
 8005d70:	08005dcd 	.word	0x08005dcd
 8005d74:	08005de5 	.word	0x08005de5
 8005d78:	08005de5 	.word	0x08005de5
 8005d7c:	08005de5 	.word	0x08005de5
 8005d80:	08005de5 	.word	0x08005de5
 8005d84:	08005de5 	.word	0x08005de5
 8005d88:	08005de5 	.word	0x08005de5
 8005d8c:	08005de5 	.word	0x08005de5
 8005d90:	08005dd5 	.word	0x08005dd5
 8005d94:	08005de5 	.word	0x08005de5
 8005d98:	08005de5 	.word	0x08005de5
 8005d9c:	08005de5 	.word	0x08005de5
 8005da0:	08005de5 	.word	0x08005de5
 8005da4:	08005de5 	.word	0x08005de5
 8005da8:	08005de5 	.word	0x08005de5
 8005dac:	08005de5 	.word	0x08005de5
 8005db0:	08005ddd 	.word	0x08005ddd
 8005db4:	2301      	movs	r3, #1
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dba:	e1c0      	b.n	800613e <UART_SetConfig+0x7ae>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc2:	e1bc      	b.n	800613e <UART_SetConfig+0x7ae>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dca:	e1b8      	b.n	800613e <UART_SetConfig+0x7ae>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd2:	e1b4      	b.n	800613e <UART_SetConfig+0x7ae>
 8005dd4:	2320      	movs	r3, #32
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dda:	e1b0      	b.n	800613e <UART_SetConfig+0x7ae>
 8005ddc:	2340      	movs	r3, #64	; 0x40
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de2:	e1ac      	b.n	800613e <UART_SetConfig+0x7ae>
 8005de4:	2380      	movs	r3, #128	; 0x80
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dea:	e1a8      	b.n	800613e <UART_SetConfig+0x7ae>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a75      	ldr	r2, [pc, #468]	; (8005fc8 <UART_SetConfig+0x638>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d130      	bne.n	8005e58 <UART_SetConfig+0x4c8>
 8005df6:	4b73      	ldr	r3, [pc, #460]	; (8005fc4 <UART_SetConfig+0x634>)
 8005df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	2b05      	cmp	r3, #5
 8005e00:	d826      	bhi.n	8005e50 <UART_SetConfig+0x4c0>
 8005e02:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <UART_SetConfig+0x478>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e21 	.word	0x08005e21
 8005e0c:	08005e29 	.word	0x08005e29
 8005e10:	08005e31 	.word	0x08005e31
 8005e14:	08005e39 	.word	0x08005e39
 8005e18:	08005e41 	.word	0x08005e41
 8005e1c:	08005e49 	.word	0x08005e49
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e26:	e18a      	b.n	800613e <UART_SetConfig+0x7ae>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e2e:	e186      	b.n	800613e <UART_SetConfig+0x7ae>
 8005e30:	2308      	movs	r3, #8
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e36:	e182      	b.n	800613e <UART_SetConfig+0x7ae>
 8005e38:	2310      	movs	r3, #16
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e3e:	e17e      	b.n	800613e <UART_SetConfig+0x7ae>
 8005e40:	2320      	movs	r3, #32
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e46:	e17a      	b.n	800613e <UART_SetConfig+0x7ae>
 8005e48:	2340      	movs	r3, #64	; 0x40
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4e:	e176      	b.n	800613e <UART_SetConfig+0x7ae>
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e56:	e172      	b.n	800613e <UART_SetConfig+0x7ae>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a5b      	ldr	r2, [pc, #364]	; (8005fcc <UART_SetConfig+0x63c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d130      	bne.n	8005ec4 <UART_SetConfig+0x534>
 8005e62:	4b58      	ldr	r3, [pc, #352]	; (8005fc4 <UART_SetConfig+0x634>)
 8005e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	2b05      	cmp	r3, #5
 8005e6c:	d826      	bhi.n	8005ebc <UART_SetConfig+0x52c>
 8005e6e:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <UART_SetConfig+0x4e4>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005e8d 	.word	0x08005e8d
 8005e78:	08005e95 	.word	0x08005e95
 8005e7c:	08005e9d 	.word	0x08005e9d
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005ead 	.word	0x08005ead
 8005e88:	08005eb5 	.word	0x08005eb5
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e92:	e154      	b.n	800613e <UART_SetConfig+0x7ae>
 8005e94:	2304      	movs	r3, #4
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9a:	e150      	b.n	800613e <UART_SetConfig+0x7ae>
 8005e9c:	2308      	movs	r3, #8
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea2:	e14c      	b.n	800613e <UART_SetConfig+0x7ae>
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eaa:	e148      	b.n	800613e <UART_SetConfig+0x7ae>
 8005eac:	2320      	movs	r3, #32
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb2:	e144      	b.n	800613e <UART_SetConfig+0x7ae>
 8005eb4:	2340      	movs	r3, #64	; 0x40
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eba:	e140      	b.n	800613e <UART_SetConfig+0x7ae>
 8005ebc:	2380      	movs	r3, #128	; 0x80
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec2:	e13c      	b.n	800613e <UART_SetConfig+0x7ae>
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a41      	ldr	r2, [pc, #260]	; (8005fd0 <UART_SetConfig+0x640>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	f040 8082 	bne.w	8005fd4 <UART_SetConfig+0x644>
 8005ed0:	4b3c      	ldr	r3, [pc, #240]	; (8005fc4 <UART_SetConfig+0x634>)
 8005ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ed8:	2b28      	cmp	r3, #40	; 0x28
 8005eda:	d86d      	bhi.n	8005fb8 <UART_SetConfig+0x628>
 8005edc:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <UART_SetConfig+0x554>)
 8005ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee2:	bf00      	nop
 8005ee4:	08005f89 	.word	0x08005f89
 8005ee8:	08005fb9 	.word	0x08005fb9
 8005eec:	08005fb9 	.word	0x08005fb9
 8005ef0:	08005fb9 	.word	0x08005fb9
 8005ef4:	08005fb9 	.word	0x08005fb9
 8005ef8:	08005fb9 	.word	0x08005fb9
 8005efc:	08005fb9 	.word	0x08005fb9
 8005f00:	08005fb9 	.word	0x08005fb9
 8005f04:	08005f91 	.word	0x08005f91
 8005f08:	08005fb9 	.word	0x08005fb9
 8005f0c:	08005fb9 	.word	0x08005fb9
 8005f10:	08005fb9 	.word	0x08005fb9
 8005f14:	08005fb9 	.word	0x08005fb9
 8005f18:	08005fb9 	.word	0x08005fb9
 8005f1c:	08005fb9 	.word	0x08005fb9
 8005f20:	08005fb9 	.word	0x08005fb9
 8005f24:	08005f99 	.word	0x08005f99
 8005f28:	08005fb9 	.word	0x08005fb9
 8005f2c:	08005fb9 	.word	0x08005fb9
 8005f30:	08005fb9 	.word	0x08005fb9
 8005f34:	08005fb9 	.word	0x08005fb9
 8005f38:	08005fb9 	.word	0x08005fb9
 8005f3c:	08005fb9 	.word	0x08005fb9
 8005f40:	08005fb9 	.word	0x08005fb9
 8005f44:	08005fa1 	.word	0x08005fa1
 8005f48:	08005fb9 	.word	0x08005fb9
 8005f4c:	08005fb9 	.word	0x08005fb9
 8005f50:	08005fb9 	.word	0x08005fb9
 8005f54:	08005fb9 	.word	0x08005fb9
 8005f58:	08005fb9 	.word	0x08005fb9
 8005f5c:	08005fb9 	.word	0x08005fb9
 8005f60:	08005fb9 	.word	0x08005fb9
 8005f64:	08005fa9 	.word	0x08005fa9
 8005f68:	08005fb9 	.word	0x08005fb9
 8005f6c:	08005fb9 	.word	0x08005fb9
 8005f70:	08005fb9 	.word	0x08005fb9
 8005f74:	08005fb9 	.word	0x08005fb9
 8005f78:	08005fb9 	.word	0x08005fb9
 8005f7c:	08005fb9 	.word	0x08005fb9
 8005f80:	08005fb9 	.word	0x08005fb9
 8005f84:	08005fb1 	.word	0x08005fb1
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8e:	e0d6      	b.n	800613e <UART_SetConfig+0x7ae>
 8005f90:	2304      	movs	r3, #4
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f96:	e0d2      	b.n	800613e <UART_SetConfig+0x7ae>
 8005f98:	2308      	movs	r3, #8
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9e:	e0ce      	b.n	800613e <UART_SetConfig+0x7ae>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa6:	e0ca      	b.n	800613e <UART_SetConfig+0x7ae>
 8005fa8:	2320      	movs	r3, #32
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fae:	e0c6      	b.n	800613e <UART_SetConfig+0x7ae>
 8005fb0:	2340      	movs	r3, #64	; 0x40
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb6:	e0c2      	b.n	800613e <UART_SetConfig+0x7ae>
 8005fb8:	2380      	movs	r3, #128	; 0x80
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fbe:	e0be      	b.n	800613e <UART_SetConfig+0x7ae>
 8005fc0:	40011400 	.word	0x40011400
 8005fc4:	58024400 	.word	0x58024400
 8005fc8:	40007800 	.word	0x40007800
 8005fcc:	40007c00 	.word	0x40007c00
 8005fd0:	40011800 	.word	0x40011800
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4aad      	ldr	r2, [pc, #692]	; (8006290 <UART_SetConfig+0x900>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d176      	bne.n	80060cc <UART_SetConfig+0x73c>
 8005fde:	4bad      	ldr	r3, [pc, #692]	; (8006294 <UART_SetConfig+0x904>)
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fe6:	2b28      	cmp	r3, #40	; 0x28
 8005fe8:	d86c      	bhi.n	80060c4 <UART_SetConfig+0x734>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <UART_SetConfig+0x660>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	08006095 	.word	0x08006095
 8005ff4:	080060c5 	.word	0x080060c5
 8005ff8:	080060c5 	.word	0x080060c5
 8005ffc:	080060c5 	.word	0x080060c5
 8006000:	080060c5 	.word	0x080060c5
 8006004:	080060c5 	.word	0x080060c5
 8006008:	080060c5 	.word	0x080060c5
 800600c:	080060c5 	.word	0x080060c5
 8006010:	0800609d 	.word	0x0800609d
 8006014:	080060c5 	.word	0x080060c5
 8006018:	080060c5 	.word	0x080060c5
 800601c:	080060c5 	.word	0x080060c5
 8006020:	080060c5 	.word	0x080060c5
 8006024:	080060c5 	.word	0x080060c5
 8006028:	080060c5 	.word	0x080060c5
 800602c:	080060c5 	.word	0x080060c5
 8006030:	080060a5 	.word	0x080060a5
 8006034:	080060c5 	.word	0x080060c5
 8006038:	080060c5 	.word	0x080060c5
 800603c:	080060c5 	.word	0x080060c5
 8006040:	080060c5 	.word	0x080060c5
 8006044:	080060c5 	.word	0x080060c5
 8006048:	080060c5 	.word	0x080060c5
 800604c:	080060c5 	.word	0x080060c5
 8006050:	080060ad 	.word	0x080060ad
 8006054:	080060c5 	.word	0x080060c5
 8006058:	080060c5 	.word	0x080060c5
 800605c:	080060c5 	.word	0x080060c5
 8006060:	080060c5 	.word	0x080060c5
 8006064:	080060c5 	.word	0x080060c5
 8006068:	080060c5 	.word	0x080060c5
 800606c:	080060c5 	.word	0x080060c5
 8006070:	080060b5 	.word	0x080060b5
 8006074:	080060c5 	.word	0x080060c5
 8006078:	080060c5 	.word	0x080060c5
 800607c:	080060c5 	.word	0x080060c5
 8006080:	080060c5 	.word	0x080060c5
 8006084:	080060c5 	.word	0x080060c5
 8006088:	080060c5 	.word	0x080060c5
 800608c:	080060c5 	.word	0x080060c5
 8006090:	080060bd 	.word	0x080060bd
 8006094:	2301      	movs	r3, #1
 8006096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609a:	e050      	b.n	800613e <UART_SetConfig+0x7ae>
 800609c:	2304      	movs	r3, #4
 800609e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a2:	e04c      	b.n	800613e <UART_SetConfig+0x7ae>
 80060a4:	2308      	movs	r3, #8
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060aa:	e048      	b.n	800613e <UART_SetConfig+0x7ae>
 80060ac:	2310      	movs	r3, #16
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b2:	e044      	b.n	800613e <UART_SetConfig+0x7ae>
 80060b4:	2320      	movs	r3, #32
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ba:	e040      	b.n	800613e <UART_SetConfig+0x7ae>
 80060bc:	2340      	movs	r3, #64	; 0x40
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c2:	e03c      	b.n	800613e <UART_SetConfig+0x7ae>
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ca:	e038      	b.n	800613e <UART_SetConfig+0x7ae>
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a71      	ldr	r2, [pc, #452]	; (8006298 <UART_SetConfig+0x908>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d130      	bne.n	8006138 <UART_SetConfig+0x7a8>
 80060d6:	4b6f      	ldr	r3, [pc, #444]	; (8006294 <UART_SetConfig+0x904>)
 80060d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	2b05      	cmp	r3, #5
 80060e0:	d826      	bhi.n	8006130 <UART_SetConfig+0x7a0>
 80060e2:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <UART_SetConfig+0x758>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	08006101 	.word	0x08006101
 80060ec:	08006109 	.word	0x08006109
 80060f0:	08006111 	.word	0x08006111
 80060f4:	08006119 	.word	0x08006119
 80060f8:	08006121 	.word	0x08006121
 80060fc:	08006129 	.word	0x08006129
 8006100:	2302      	movs	r3, #2
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006106:	e01a      	b.n	800613e <UART_SetConfig+0x7ae>
 8006108:	2304      	movs	r3, #4
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610e:	e016      	b.n	800613e <UART_SetConfig+0x7ae>
 8006110:	2308      	movs	r3, #8
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006116:	e012      	b.n	800613e <UART_SetConfig+0x7ae>
 8006118:	2310      	movs	r3, #16
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611e:	e00e      	b.n	800613e <UART_SetConfig+0x7ae>
 8006120:	2320      	movs	r3, #32
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006126:	e00a      	b.n	800613e <UART_SetConfig+0x7ae>
 8006128:	2340      	movs	r3, #64	; 0x40
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612e:	e006      	b.n	800613e <UART_SetConfig+0x7ae>
 8006130:	2380      	movs	r3, #128	; 0x80
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006136:	e002      	b.n	800613e <UART_SetConfig+0x7ae>
 8006138:	2380      	movs	r3, #128	; 0x80
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a55      	ldr	r2, [pc, #340]	; (8006298 <UART_SetConfig+0x908>)
 8006144:	4293      	cmp	r3, r2
 8006146:	f040 80f8 	bne.w	800633a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800614a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800614e:	2b20      	cmp	r3, #32
 8006150:	dc46      	bgt.n	80061e0 <UART_SetConfig+0x850>
 8006152:	2b02      	cmp	r3, #2
 8006154:	db75      	blt.n	8006242 <UART_SetConfig+0x8b2>
 8006156:	3b02      	subs	r3, #2
 8006158:	2b1e      	cmp	r3, #30
 800615a:	d872      	bhi.n	8006242 <UART_SetConfig+0x8b2>
 800615c:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <UART_SetConfig+0x7d4>)
 800615e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006162:	bf00      	nop
 8006164:	080061e7 	.word	0x080061e7
 8006168:	08006243 	.word	0x08006243
 800616c:	080061ef 	.word	0x080061ef
 8006170:	08006243 	.word	0x08006243
 8006174:	08006243 	.word	0x08006243
 8006178:	08006243 	.word	0x08006243
 800617c:	080061ff 	.word	0x080061ff
 8006180:	08006243 	.word	0x08006243
 8006184:	08006243 	.word	0x08006243
 8006188:	08006243 	.word	0x08006243
 800618c:	08006243 	.word	0x08006243
 8006190:	08006243 	.word	0x08006243
 8006194:	08006243 	.word	0x08006243
 8006198:	08006243 	.word	0x08006243
 800619c:	0800620f 	.word	0x0800620f
 80061a0:	08006243 	.word	0x08006243
 80061a4:	08006243 	.word	0x08006243
 80061a8:	08006243 	.word	0x08006243
 80061ac:	08006243 	.word	0x08006243
 80061b0:	08006243 	.word	0x08006243
 80061b4:	08006243 	.word	0x08006243
 80061b8:	08006243 	.word	0x08006243
 80061bc:	08006243 	.word	0x08006243
 80061c0:	08006243 	.word	0x08006243
 80061c4:	08006243 	.word	0x08006243
 80061c8:	08006243 	.word	0x08006243
 80061cc:	08006243 	.word	0x08006243
 80061d0:	08006243 	.word	0x08006243
 80061d4:	08006243 	.word	0x08006243
 80061d8:	08006243 	.word	0x08006243
 80061dc:	08006235 	.word	0x08006235
 80061e0:	2b40      	cmp	r3, #64	; 0x40
 80061e2:	d02a      	beq.n	800623a <UART_SetConfig+0x8aa>
 80061e4:	e02d      	b.n	8006242 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80061e6:	f7fe faf9 	bl	80047dc <HAL_RCCEx_GetD3PCLK1Freq>
 80061ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80061ec:	e02f      	b.n	800624e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe fb08 	bl	8004808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061fc:	e027      	b.n	800624e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061fe:	f107 0318 	add.w	r3, r7, #24
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe fc54 	bl	8004ab0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800620c:	e01f      	b.n	800624e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800620e:	4b21      	ldr	r3, [pc, #132]	; (8006294 <UART_SetConfig+0x904>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b00      	cmp	r3, #0
 8006218:	d009      	beq.n	800622e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800621a:	4b1e      	ldr	r3, [pc, #120]	; (8006294 <UART_SetConfig+0x904>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	08db      	lsrs	r3, r3, #3
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	4a1d      	ldr	r2, [pc, #116]	; (800629c <UART_SetConfig+0x90c>)
 8006226:	fa22 f303 	lsr.w	r3, r2, r3
 800622a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800622c:	e00f      	b.n	800624e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800622e:	4b1b      	ldr	r3, [pc, #108]	; (800629c <UART_SetConfig+0x90c>)
 8006230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006232:	e00c      	b.n	800624e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006234:	4b1a      	ldr	r3, [pc, #104]	; (80062a0 <UART_SetConfig+0x910>)
 8006236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006238:	e009      	b.n	800624e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800623a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006240:	e005      	b.n	800624e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800624c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800624e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 81ee 	beq.w	8006632 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	4a12      	ldr	r2, [pc, #72]	; (80062a4 <UART_SetConfig+0x914>)
 800625c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006260:	461a      	mov	r2, r3
 8006262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006264:	fbb3 f3f2 	udiv	r3, r3, r2
 8006268:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	4413      	add	r3, r2
 8006274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006276:	429a      	cmp	r2, r3
 8006278:	d305      	bcc.n	8006286 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006282:	429a      	cmp	r2, r3
 8006284:	d910      	bls.n	80062a8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800628c:	e1d1      	b.n	8006632 <UART_SetConfig+0xca2>
 800628e:	bf00      	nop
 8006290:	40011c00 	.word	0x40011c00
 8006294:	58024400 	.word	0x58024400
 8006298:	58000c00 	.word	0x58000c00
 800629c:	03d09000 	.word	0x03d09000
 80062a0:	003d0900 	.word	0x003d0900
 80062a4:	080076d8 	.word	0x080076d8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062aa:	2200      	movs	r2, #0
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	60fa      	str	r2, [r7, #12]
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	4ac0      	ldr	r2, [pc, #768]	; (80065b8 <UART_SetConfig+0xc28>)
 80062b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2200      	movs	r2, #0
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	607a      	str	r2, [r7, #4]
 80062c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062ca:	f7fa f861 	bl	8000390 <__aeabi_uldivmod>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4610      	mov	r0, r2
 80062d4:	4619      	mov	r1, r3
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	020b      	lsls	r3, r1, #8
 80062e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062e4:	0202      	lsls	r2, r0, #8
 80062e6:	6979      	ldr	r1, [r7, #20]
 80062e8:	6849      	ldr	r1, [r1, #4]
 80062ea:	0849      	lsrs	r1, r1, #1
 80062ec:	2000      	movs	r0, #0
 80062ee:	460c      	mov	r4, r1
 80062f0:	4605      	mov	r5, r0
 80062f2:	eb12 0804 	adds.w	r8, r2, r4
 80062f6:	eb43 0905 	adc.w	r9, r3, r5
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	469a      	mov	sl, r3
 8006302:	4693      	mov	fp, r2
 8006304:	4652      	mov	r2, sl
 8006306:	465b      	mov	r3, fp
 8006308:	4640      	mov	r0, r8
 800630a:	4649      	mov	r1, r9
 800630c:	f7fa f840 	bl	8000390 <__aeabi_uldivmod>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4613      	mov	r3, r2
 8006316:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800631e:	d308      	bcc.n	8006332 <UART_SetConfig+0x9a2>
 8006320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006326:	d204      	bcs.n	8006332 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800632e:	60da      	str	r2, [r3, #12]
 8006330:	e17f      	b.n	8006632 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006338:	e17b      	b.n	8006632 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006342:	f040 80bd 	bne.w	80064c0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006346:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800634a:	2b20      	cmp	r3, #32
 800634c:	dc48      	bgt.n	80063e0 <UART_SetConfig+0xa50>
 800634e:	2b00      	cmp	r3, #0
 8006350:	db7b      	blt.n	800644a <UART_SetConfig+0xaba>
 8006352:	2b20      	cmp	r3, #32
 8006354:	d879      	bhi.n	800644a <UART_SetConfig+0xaba>
 8006356:	a201      	add	r2, pc, #4	; (adr r2, 800635c <UART_SetConfig+0x9cc>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	080063e7 	.word	0x080063e7
 8006360:	080063ef 	.word	0x080063ef
 8006364:	0800644b 	.word	0x0800644b
 8006368:	0800644b 	.word	0x0800644b
 800636c:	080063f7 	.word	0x080063f7
 8006370:	0800644b 	.word	0x0800644b
 8006374:	0800644b 	.word	0x0800644b
 8006378:	0800644b 	.word	0x0800644b
 800637c:	08006407 	.word	0x08006407
 8006380:	0800644b 	.word	0x0800644b
 8006384:	0800644b 	.word	0x0800644b
 8006388:	0800644b 	.word	0x0800644b
 800638c:	0800644b 	.word	0x0800644b
 8006390:	0800644b 	.word	0x0800644b
 8006394:	0800644b 	.word	0x0800644b
 8006398:	0800644b 	.word	0x0800644b
 800639c:	08006417 	.word	0x08006417
 80063a0:	0800644b 	.word	0x0800644b
 80063a4:	0800644b 	.word	0x0800644b
 80063a8:	0800644b 	.word	0x0800644b
 80063ac:	0800644b 	.word	0x0800644b
 80063b0:	0800644b 	.word	0x0800644b
 80063b4:	0800644b 	.word	0x0800644b
 80063b8:	0800644b 	.word	0x0800644b
 80063bc:	0800644b 	.word	0x0800644b
 80063c0:	0800644b 	.word	0x0800644b
 80063c4:	0800644b 	.word	0x0800644b
 80063c8:	0800644b 	.word	0x0800644b
 80063cc:	0800644b 	.word	0x0800644b
 80063d0:	0800644b 	.word	0x0800644b
 80063d4:	0800644b 	.word	0x0800644b
 80063d8:	0800644b 	.word	0x0800644b
 80063dc:	0800643d 	.word	0x0800643d
 80063e0:	2b40      	cmp	r3, #64	; 0x40
 80063e2:	d02e      	beq.n	8006442 <UART_SetConfig+0xab2>
 80063e4:	e031      	b.n	800644a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063e6:	f7fd f80f 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 80063ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063ec:	e033      	b.n	8006456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063ee:	f7fd f821 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 80063f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063f4:	e02f      	b.n	8006456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fa04 	bl	8004808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006404:	e027      	b.n	8006456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006406:	f107 0318 	add.w	r3, r7, #24
 800640a:	4618      	mov	r0, r3
 800640c:	f7fe fb50 	bl	8004ab0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006414:	e01f      	b.n	8006456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006416:	4b69      	ldr	r3, [pc, #420]	; (80065bc <UART_SetConfig+0xc2c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d009      	beq.n	8006436 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006422:	4b66      	ldr	r3, [pc, #408]	; (80065bc <UART_SetConfig+0xc2c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	08db      	lsrs	r3, r3, #3
 8006428:	f003 0303 	and.w	r3, r3, #3
 800642c:	4a64      	ldr	r2, [pc, #400]	; (80065c0 <UART_SetConfig+0xc30>)
 800642e:	fa22 f303 	lsr.w	r3, r2, r3
 8006432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006434:	e00f      	b.n	8006456 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006436:	4b62      	ldr	r3, [pc, #392]	; (80065c0 <UART_SetConfig+0xc30>)
 8006438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800643a:	e00c      	b.n	8006456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800643c:	4b61      	ldr	r3, [pc, #388]	; (80065c4 <UART_SetConfig+0xc34>)
 800643e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006440:	e009      	b.n	8006456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006448:	e005      	b.n	8006456 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006454:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 80ea 	beq.w	8006632 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	4a55      	ldr	r2, [pc, #340]	; (80065b8 <UART_SetConfig+0xc28>)
 8006464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006468:	461a      	mov	r2, r3
 800646a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006470:	005a      	lsls	r2, r3, #1
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	441a      	add	r2, r3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006482:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	2b0f      	cmp	r3, #15
 8006488:	d916      	bls.n	80064b8 <UART_SetConfig+0xb28>
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006490:	d212      	bcs.n	80064b8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006494:	b29b      	uxth	r3, r3
 8006496:	f023 030f 	bic.w	r3, r3, #15
 800649a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649e:	085b      	lsrs	r3, r3, #1
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064aa:	4313      	orrs	r3, r2
 80064ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80064b4:	60da      	str	r2, [r3, #12]
 80064b6:	e0bc      	b.n	8006632 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064be:	e0b8      	b.n	8006632 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	dc4b      	bgt.n	8006560 <UART_SetConfig+0xbd0>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f2c0 8087 	blt.w	80065dc <UART_SetConfig+0xc4c>
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	f200 8084 	bhi.w	80065dc <UART_SetConfig+0xc4c>
 80064d4:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <UART_SetConfig+0xb4c>)
 80064d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064da:	bf00      	nop
 80064dc:	08006567 	.word	0x08006567
 80064e0:	0800656f 	.word	0x0800656f
 80064e4:	080065dd 	.word	0x080065dd
 80064e8:	080065dd 	.word	0x080065dd
 80064ec:	08006577 	.word	0x08006577
 80064f0:	080065dd 	.word	0x080065dd
 80064f4:	080065dd 	.word	0x080065dd
 80064f8:	080065dd 	.word	0x080065dd
 80064fc:	08006587 	.word	0x08006587
 8006500:	080065dd 	.word	0x080065dd
 8006504:	080065dd 	.word	0x080065dd
 8006508:	080065dd 	.word	0x080065dd
 800650c:	080065dd 	.word	0x080065dd
 8006510:	080065dd 	.word	0x080065dd
 8006514:	080065dd 	.word	0x080065dd
 8006518:	080065dd 	.word	0x080065dd
 800651c:	08006597 	.word	0x08006597
 8006520:	080065dd 	.word	0x080065dd
 8006524:	080065dd 	.word	0x080065dd
 8006528:	080065dd 	.word	0x080065dd
 800652c:	080065dd 	.word	0x080065dd
 8006530:	080065dd 	.word	0x080065dd
 8006534:	080065dd 	.word	0x080065dd
 8006538:	080065dd 	.word	0x080065dd
 800653c:	080065dd 	.word	0x080065dd
 8006540:	080065dd 	.word	0x080065dd
 8006544:	080065dd 	.word	0x080065dd
 8006548:	080065dd 	.word	0x080065dd
 800654c:	080065dd 	.word	0x080065dd
 8006550:	080065dd 	.word	0x080065dd
 8006554:	080065dd 	.word	0x080065dd
 8006558:	080065dd 	.word	0x080065dd
 800655c:	080065cf 	.word	0x080065cf
 8006560:	2b40      	cmp	r3, #64	; 0x40
 8006562:	d037      	beq.n	80065d4 <UART_SetConfig+0xc44>
 8006564:	e03a      	b.n	80065dc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006566:	f7fc ff4f 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 800656a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800656c:	e03c      	b.n	80065e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800656e:	f7fc ff61 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8006572:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006574:	e038      	b.n	80065e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800657a:	4618      	mov	r0, r3
 800657c:	f7fe f944 	bl	8004808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006584:	e030      	b.n	80065e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006586:	f107 0318 	add.w	r3, r7, #24
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe fa90 	bl	8004ab0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006594:	e028      	b.n	80065e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006596:	4b09      	ldr	r3, [pc, #36]	; (80065bc <UART_SetConfig+0xc2c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d012      	beq.n	80065c8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065a2:	4b06      	ldr	r3, [pc, #24]	; (80065bc <UART_SetConfig+0xc2c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	08db      	lsrs	r3, r3, #3
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	4a04      	ldr	r2, [pc, #16]	; (80065c0 <UART_SetConfig+0xc30>)
 80065ae:	fa22 f303 	lsr.w	r3, r2, r3
 80065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065b4:	e018      	b.n	80065e8 <UART_SetConfig+0xc58>
 80065b6:	bf00      	nop
 80065b8:	080076d8 	.word	0x080076d8
 80065bc:	58024400 	.word	0x58024400
 80065c0:	03d09000 	.word	0x03d09000
 80065c4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80065c8:	4b24      	ldr	r3, [pc, #144]	; (800665c <UART_SetConfig+0xccc>)
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065cc:	e00c      	b.n	80065e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065ce:	4b24      	ldr	r3, [pc, #144]	; (8006660 <UART_SetConfig+0xcd0>)
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d2:	e009      	b.n	80065e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065da:	e005      	b.n	80065e8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80065e6:	bf00      	nop
    }

    if (pclk != 0U)
 80065e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d021      	beq.n	8006632 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	4a1c      	ldr	r2, [pc, #112]	; (8006664 <UART_SetConfig+0xcd4>)
 80065f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065f8:	461a      	mov	r2, r3
 80065fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	085b      	lsrs	r3, r3, #1
 8006606:	441a      	add	r2, r3
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006610:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006614:	2b0f      	cmp	r3, #15
 8006616:	d909      	bls.n	800662c <UART_SetConfig+0xc9c>
 8006618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800661e:	d205      	bcs.n	800662c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006622:	b29a      	uxth	r2, r3
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	60da      	str	r2, [r3, #12]
 800662a:	e002      	b.n	8006632 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2201      	movs	r2, #1
 8006636:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2201      	movs	r2, #1
 800663e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2200      	movs	r2, #0
 8006646:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2200      	movs	r2, #0
 800664c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800664e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006652:	4618      	mov	r0, r3
 8006654:	3748      	adds	r7, #72	; 0x48
 8006656:	46bd      	mov	sp, r7
 8006658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800665c:	03d09000 	.word	0x03d09000
 8006660:	003d0900 	.word	0x003d0900
 8006664:	080076d8 	.word	0x080076d8

08006668 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671e:	f003 0320 	and.w	r3, r3, #32
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01a      	beq.n	800677e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006766:	d10a      	bne.n	800677e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	605a      	str	r2, [r3, #4]
  }
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b098      	sub	sp, #96	; 0x60
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067bc:	f7fa fbaa 	bl	8000f14 <HAL_GetTick>
 80067c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0308 	and.w	r3, r3, #8
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d12f      	bne.n	8006830 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067d8:	2200      	movs	r2, #0
 80067da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f88e 	bl	8006900 <UART_WaitOnFlagUntilTimeout>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d022      	beq.n	8006830 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006808:	647b      	str	r3, [r7, #68]	; 0x44
 800680a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800680e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e6      	bne.n	80067ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2220      	movs	r2, #32
 8006820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e063      	b.n	80068f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	2b04      	cmp	r3, #4
 800683c:	d149      	bne.n	80068d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800683e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006846:	2200      	movs	r2, #0
 8006848:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f857 	bl	8006900 <UART_WaitOnFlagUntilTimeout>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d03c      	beq.n	80068d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	623b      	str	r3, [r7, #32]
   return(result);
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800686c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006876:	633b      	str	r3, [r7, #48]	; 0x30
 8006878:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800687c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e6      	bne.n	8006858 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	60fb      	str	r3, [r7, #12]
   return(result);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f023 0301 	bic.w	r3, r3, #1
 80068a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068aa:	61fa      	str	r2, [r7, #28]
 80068ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	69b9      	ldr	r1, [r7, #24]
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	617b      	str	r3, [r7, #20]
   return(result);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e5      	bne.n	800688a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e012      	b.n	80068f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2220      	movs	r2, #32
 80068d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3758      	adds	r7, #88	; 0x58
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	4613      	mov	r3, r2
 800690e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006910:	e049      	b.n	80069a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d045      	beq.n	80069a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800691a:	f7fa fafb 	bl	8000f14 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	429a      	cmp	r2, r3
 8006928:	d302      	bcc.n	8006930 <UART_WaitOnFlagUntilTimeout+0x30>
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e048      	b.n	80069c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	d031      	beq.n	80069a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	f003 0308 	and.w	r3, r3, #8
 800694c:	2b08      	cmp	r3, #8
 800694e:	d110      	bne.n	8006972 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2208      	movs	r2, #8
 8006956:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 f839 	bl	80069d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2208      	movs	r2, #8
 8006962:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e029      	b.n	80069c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800697c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006980:	d111      	bne.n	80069a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800698a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 f81f 	bl	80069d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2220      	movs	r2, #32
 8006996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e00f      	b.n	80069c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69da      	ldr	r2, [r3, #28]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	4013      	ands	r3, r2
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	bf0c      	ite	eq
 80069b6:	2301      	moveq	r3, #1
 80069b8:	2300      	movne	r3, #0
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	461a      	mov	r2, r3
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d0a6      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b095      	sub	sp, #84	; 0x54
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f6:	643b      	str	r3, [r7, #64]	; 0x40
 80069f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e6      	bne.n	80069d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	4b1e      	ldr	r3, [pc, #120]	; (8006a98 <UART_EndRxTransfer+0xc8>)
 8006a1e:	4013      	ands	r3, r2
 8006a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3308      	adds	r3, #8
 8006a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e5      	bne.n	8006a0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d118      	bne.n	8006a78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f023 0310 	bic.w	r3, r3, #16
 8006a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	461a      	mov	r2, r3
 8006a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a64:	61bb      	str	r3, [r7, #24]
 8006a66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	6979      	ldr	r1, [r7, #20]
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	613b      	str	r3, [r7, #16]
   return(result);
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e6      	bne.n	8006a46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006a8c:	bf00      	nop
 8006a8e:	3754      	adds	r7, #84	; 0x54
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	effffffe 	.word	0xeffffffe

08006a9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f7fe ff52 	bl	8005964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ac0:	bf00      	nop
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	e853 3f00 	ldrex	r3, [r3]
 8006adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	6979      	ldr	r1, [r7, #20]
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	613b      	str	r3, [r7, #16]
   return(result);
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e6      	bne.n	8006ad0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7fe ff1d 	bl	8005950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b16:	bf00      	nop
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e027      	b.n	8006bc0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2224      	movs	r2, #36	; 0x24
 8006b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0201 	bic.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d101      	bne.n	8006be4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006be0:	2302      	movs	r3, #2
 8006be2:	e02d      	b.n	8006c40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2224      	movs	r2, #36	; 0x24
 8006bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0201 	bic.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f84f 	bl	8006cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d101      	bne.n	8006c60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	e02d      	b.n	8006cbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2224      	movs	r2, #36	; 0x24
 8006c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f811 	bl	8006cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d108      	bne.n	8006ce6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ce4:	e031      	b.n	8006d4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ce6:	2310      	movs	r3, #16
 8006ce8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cea:	2310      	movs	r3, #16
 8006cec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	0e5b      	lsrs	r3, r3, #25
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	f003 0307 	and.w	r3, r3, #7
 8006cfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	0f5b      	lsrs	r3, r3, #29
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	7b3a      	ldrb	r2, [r7, #12]
 8006d12:	4911      	ldr	r1, [pc, #68]	; (8006d58 <UARTEx_SetNbDataToProcess+0x94>)
 8006d14:	5c8a      	ldrb	r2, [r1, r2]
 8006d16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d1a:	7b3a      	ldrb	r2, [r7, #12]
 8006d1c:	490f      	ldr	r1, [pc, #60]	; (8006d5c <UARTEx_SetNbDataToProcess+0x98>)
 8006d1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d20:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	7b7a      	ldrb	r2, [r7, #13]
 8006d30:	4909      	ldr	r1, [pc, #36]	; (8006d58 <UARTEx_SetNbDataToProcess+0x94>)
 8006d32:	5c8a      	ldrb	r2, [r1, r2]
 8006d34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d38:	7b7a      	ldrb	r2, [r7, #13]
 8006d3a:	4908      	ldr	r1, [pc, #32]	; (8006d5c <UARTEx_SetNbDataToProcess+0x98>)
 8006d3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d4a:	bf00      	nop
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	080076f0 	.word	0x080076f0
 8006d5c:	080076f8 	.word	0x080076f8

08006d60 <siprintf>:
 8006d60:	b40e      	push	{r1, r2, r3}
 8006d62:	b500      	push	{lr}
 8006d64:	b09c      	sub	sp, #112	; 0x70
 8006d66:	ab1d      	add	r3, sp, #116	; 0x74
 8006d68:	9002      	str	r0, [sp, #8]
 8006d6a:	9006      	str	r0, [sp, #24]
 8006d6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d70:	4809      	ldr	r0, [pc, #36]	; (8006d98 <siprintf+0x38>)
 8006d72:	9107      	str	r1, [sp, #28]
 8006d74:	9104      	str	r1, [sp, #16]
 8006d76:	4909      	ldr	r1, [pc, #36]	; (8006d9c <siprintf+0x3c>)
 8006d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d7c:	9105      	str	r1, [sp, #20]
 8006d7e:	6800      	ldr	r0, [r0, #0]
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	a902      	add	r1, sp, #8
 8006d84:	f000 f992 	bl	80070ac <_svfiprintf_r>
 8006d88:	9b02      	ldr	r3, [sp, #8]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	b01c      	add	sp, #112	; 0x70
 8006d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d94:	b003      	add	sp, #12
 8006d96:	4770      	bx	lr
 8006d98:	240000ac 	.word	0x240000ac
 8006d9c:	ffff0208 	.word	0xffff0208

08006da0 <memset>:
 8006da0:	4402      	add	r2, r0
 8006da2:	4603      	mov	r3, r0
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d100      	bne.n	8006daa <memset+0xa>
 8006da8:	4770      	bx	lr
 8006daa:	f803 1b01 	strb.w	r1, [r3], #1
 8006dae:	e7f9      	b.n	8006da4 <memset+0x4>

08006db0 <__errno>:
 8006db0:	4b01      	ldr	r3, [pc, #4]	; (8006db8 <__errno+0x8>)
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	240000ac 	.word	0x240000ac

08006dbc <__libc_init_array>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	4d0d      	ldr	r5, [pc, #52]	; (8006df4 <__libc_init_array+0x38>)
 8006dc0:	4c0d      	ldr	r4, [pc, #52]	; (8006df8 <__libc_init_array+0x3c>)
 8006dc2:	1b64      	subs	r4, r4, r5
 8006dc4:	10a4      	asrs	r4, r4, #2
 8006dc6:	2600      	movs	r6, #0
 8006dc8:	42a6      	cmp	r6, r4
 8006dca:	d109      	bne.n	8006de0 <__libc_init_array+0x24>
 8006dcc:	4d0b      	ldr	r5, [pc, #44]	; (8006dfc <__libc_init_array+0x40>)
 8006dce:	4c0c      	ldr	r4, [pc, #48]	; (8006e00 <__libc_init_array+0x44>)
 8006dd0:	f000 fc6a 	bl	80076a8 <_init>
 8006dd4:	1b64      	subs	r4, r4, r5
 8006dd6:	10a4      	asrs	r4, r4, #2
 8006dd8:	2600      	movs	r6, #0
 8006dda:	42a6      	cmp	r6, r4
 8006ddc:	d105      	bne.n	8006dea <__libc_init_array+0x2e>
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de4:	4798      	blx	r3
 8006de6:	3601      	adds	r6, #1
 8006de8:	e7ee      	b.n	8006dc8 <__libc_init_array+0xc>
 8006dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dee:	4798      	blx	r3
 8006df0:	3601      	adds	r6, #1
 8006df2:	e7f2      	b.n	8006dda <__libc_init_array+0x1e>
 8006df4:	0800773c 	.word	0x0800773c
 8006df8:	0800773c 	.word	0x0800773c
 8006dfc:	0800773c 	.word	0x0800773c
 8006e00:	08007740 	.word	0x08007740

08006e04 <__retarget_lock_acquire_recursive>:
 8006e04:	4770      	bx	lr

08006e06 <__retarget_lock_release_recursive>:
 8006e06:	4770      	bx	lr

08006e08 <_free_r>:
 8006e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e0a:	2900      	cmp	r1, #0
 8006e0c:	d044      	beq.n	8006e98 <_free_r+0x90>
 8006e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e12:	9001      	str	r0, [sp, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f1a1 0404 	sub.w	r4, r1, #4
 8006e1a:	bfb8      	it	lt
 8006e1c:	18e4      	addlt	r4, r4, r3
 8006e1e:	f000 f8df 	bl	8006fe0 <__malloc_lock>
 8006e22:	4a1e      	ldr	r2, [pc, #120]	; (8006e9c <_free_r+0x94>)
 8006e24:	9801      	ldr	r0, [sp, #4]
 8006e26:	6813      	ldr	r3, [r2, #0]
 8006e28:	b933      	cbnz	r3, 8006e38 <_free_r+0x30>
 8006e2a:	6063      	str	r3, [r4, #4]
 8006e2c:	6014      	str	r4, [r2, #0]
 8006e2e:	b003      	add	sp, #12
 8006e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e34:	f000 b8da 	b.w	8006fec <__malloc_unlock>
 8006e38:	42a3      	cmp	r3, r4
 8006e3a:	d908      	bls.n	8006e4e <_free_r+0x46>
 8006e3c:	6825      	ldr	r5, [r4, #0]
 8006e3e:	1961      	adds	r1, r4, r5
 8006e40:	428b      	cmp	r3, r1
 8006e42:	bf01      	itttt	eq
 8006e44:	6819      	ldreq	r1, [r3, #0]
 8006e46:	685b      	ldreq	r3, [r3, #4]
 8006e48:	1949      	addeq	r1, r1, r5
 8006e4a:	6021      	streq	r1, [r4, #0]
 8006e4c:	e7ed      	b.n	8006e2a <_free_r+0x22>
 8006e4e:	461a      	mov	r2, r3
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	b10b      	cbz	r3, 8006e58 <_free_r+0x50>
 8006e54:	42a3      	cmp	r3, r4
 8006e56:	d9fa      	bls.n	8006e4e <_free_r+0x46>
 8006e58:	6811      	ldr	r1, [r2, #0]
 8006e5a:	1855      	adds	r5, r2, r1
 8006e5c:	42a5      	cmp	r5, r4
 8006e5e:	d10b      	bne.n	8006e78 <_free_r+0x70>
 8006e60:	6824      	ldr	r4, [r4, #0]
 8006e62:	4421      	add	r1, r4
 8006e64:	1854      	adds	r4, r2, r1
 8006e66:	42a3      	cmp	r3, r4
 8006e68:	6011      	str	r1, [r2, #0]
 8006e6a:	d1e0      	bne.n	8006e2e <_free_r+0x26>
 8006e6c:	681c      	ldr	r4, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	6053      	str	r3, [r2, #4]
 8006e72:	440c      	add	r4, r1
 8006e74:	6014      	str	r4, [r2, #0]
 8006e76:	e7da      	b.n	8006e2e <_free_r+0x26>
 8006e78:	d902      	bls.n	8006e80 <_free_r+0x78>
 8006e7a:	230c      	movs	r3, #12
 8006e7c:	6003      	str	r3, [r0, #0]
 8006e7e:	e7d6      	b.n	8006e2e <_free_r+0x26>
 8006e80:	6825      	ldr	r5, [r4, #0]
 8006e82:	1961      	adds	r1, r4, r5
 8006e84:	428b      	cmp	r3, r1
 8006e86:	bf04      	itt	eq
 8006e88:	6819      	ldreq	r1, [r3, #0]
 8006e8a:	685b      	ldreq	r3, [r3, #4]
 8006e8c:	6063      	str	r3, [r4, #4]
 8006e8e:	bf04      	itt	eq
 8006e90:	1949      	addeq	r1, r1, r5
 8006e92:	6021      	streq	r1, [r4, #0]
 8006e94:	6054      	str	r4, [r2, #4]
 8006e96:	e7ca      	b.n	8006e2e <_free_r+0x26>
 8006e98:	b003      	add	sp, #12
 8006e9a:	bd30      	pop	{r4, r5, pc}
 8006e9c:	2400031c 	.word	0x2400031c

08006ea0 <sbrk_aligned>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	4e0e      	ldr	r6, [pc, #56]	; (8006edc <sbrk_aligned+0x3c>)
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	6831      	ldr	r1, [r6, #0]
 8006ea8:	4605      	mov	r5, r0
 8006eaa:	b911      	cbnz	r1, 8006eb2 <sbrk_aligned+0x12>
 8006eac:	f000 fba6 	bl	80075fc <_sbrk_r>
 8006eb0:	6030      	str	r0, [r6, #0]
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	f000 fba1 	bl	80075fc <_sbrk_r>
 8006eba:	1c43      	adds	r3, r0, #1
 8006ebc:	d00a      	beq.n	8006ed4 <sbrk_aligned+0x34>
 8006ebe:	1cc4      	adds	r4, r0, #3
 8006ec0:	f024 0403 	bic.w	r4, r4, #3
 8006ec4:	42a0      	cmp	r0, r4
 8006ec6:	d007      	beq.n	8006ed8 <sbrk_aligned+0x38>
 8006ec8:	1a21      	subs	r1, r4, r0
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f000 fb96 	bl	80075fc <_sbrk_r>
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d101      	bne.n	8006ed8 <sbrk_aligned+0x38>
 8006ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ed8:	4620      	mov	r0, r4
 8006eda:	bd70      	pop	{r4, r5, r6, pc}
 8006edc:	24000320 	.word	0x24000320

08006ee0 <_malloc_r>:
 8006ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee4:	1ccd      	adds	r5, r1, #3
 8006ee6:	f025 0503 	bic.w	r5, r5, #3
 8006eea:	3508      	adds	r5, #8
 8006eec:	2d0c      	cmp	r5, #12
 8006eee:	bf38      	it	cc
 8006ef0:	250c      	movcc	r5, #12
 8006ef2:	2d00      	cmp	r5, #0
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	db01      	blt.n	8006efc <_malloc_r+0x1c>
 8006ef8:	42a9      	cmp	r1, r5
 8006efa:	d905      	bls.n	8006f08 <_malloc_r+0x28>
 8006efc:	230c      	movs	r3, #12
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	2600      	movs	r6, #0
 8006f02:	4630      	mov	r0, r6
 8006f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006fdc <_malloc_r+0xfc>
 8006f0c:	f000 f868 	bl	8006fe0 <__malloc_lock>
 8006f10:	f8d8 3000 	ldr.w	r3, [r8]
 8006f14:	461c      	mov	r4, r3
 8006f16:	bb5c      	cbnz	r4, 8006f70 <_malloc_r+0x90>
 8006f18:	4629      	mov	r1, r5
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	f7ff ffc0 	bl	8006ea0 <sbrk_aligned>
 8006f20:	1c43      	adds	r3, r0, #1
 8006f22:	4604      	mov	r4, r0
 8006f24:	d155      	bne.n	8006fd2 <_malloc_r+0xf2>
 8006f26:	f8d8 4000 	ldr.w	r4, [r8]
 8006f2a:	4626      	mov	r6, r4
 8006f2c:	2e00      	cmp	r6, #0
 8006f2e:	d145      	bne.n	8006fbc <_malloc_r+0xdc>
 8006f30:	2c00      	cmp	r4, #0
 8006f32:	d048      	beq.n	8006fc6 <_malloc_r+0xe6>
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	4631      	mov	r1, r6
 8006f38:	4638      	mov	r0, r7
 8006f3a:	eb04 0903 	add.w	r9, r4, r3
 8006f3e:	f000 fb5d 	bl	80075fc <_sbrk_r>
 8006f42:	4581      	cmp	r9, r0
 8006f44:	d13f      	bne.n	8006fc6 <_malloc_r+0xe6>
 8006f46:	6821      	ldr	r1, [r4, #0]
 8006f48:	1a6d      	subs	r5, r5, r1
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	4638      	mov	r0, r7
 8006f4e:	f7ff ffa7 	bl	8006ea0 <sbrk_aligned>
 8006f52:	3001      	adds	r0, #1
 8006f54:	d037      	beq.n	8006fc6 <_malloc_r+0xe6>
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	442b      	add	r3, r5
 8006f5a:	6023      	str	r3, [r4, #0]
 8006f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d038      	beq.n	8006fd6 <_malloc_r+0xf6>
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	42a2      	cmp	r2, r4
 8006f68:	d12b      	bne.n	8006fc2 <_malloc_r+0xe2>
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	605a      	str	r2, [r3, #4]
 8006f6e:	e00f      	b.n	8006f90 <_malloc_r+0xb0>
 8006f70:	6822      	ldr	r2, [r4, #0]
 8006f72:	1b52      	subs	r2, r2, r5
 8006f74:	d41f      	bmi.n	8006fb6 <_malloc_r+0xd6>
 8006f76:	2a0b      	cmp	r2, #11
 8006f78:	d917      	bls.n	8006faa <_malloc_r+0xca>
 8006f7a:	1961      	adds	r1, r4, r5
 8006f7c:	42a3      	cmp	r3, r4
 8006f7e:	6025      	str	r5, [r4, #0]
 8006f80:	bf18      	it	ne
 8006f82:	6059      	strne	r1, [r3, #4]
 8006f84:	6863      	ldr	r3, [r4, #4]
 8006f86:	bf08      	it	eq
 8006f88:	f8c8 1000 	streq.w	r1, [r8]
 8006f8c:	5162      	str	r2, [r4, r5]
 8006f8e:	604b      	str	r3, [r1, #4]
 8006f90:	4638      	mov	r0, r7
 8006f92:	f104 060b 	add.w	r6, r4, #11
 8006f96:	f000 f829 	bl	8006fec <__malloc_unlock>
 8006f9a:	f026 0607 	bic.w	r6, r6, #7
 8006f9e:	1d23      	adds	r3, r4, #4
 8006fa0:	1af2      	subs	r2, r6, r3
 8006fa2:	d0ae      	beq.n	8006f02 <_malloc_r+0x22>
 8006fa4:	1b9b      	subs	r3, r3, r6
 8006fa6:	50a3      	str	r3, [r4, r2]
 8006fa8:	e7ab      	b.n	8006f02 <_malloc_r+0x22>
 8006faa:	42a3      	cmp	r3, r4
 8006fac:	6862      	ldr	r2, [r4, #4]
 8006fae:	d1dd      	bne.n	8006f6c <_malloc_r+0x8c>
 8006fb0:	f8c8 2000 	str.w	r2, [r8]
 8006fb4:	e7ec      	b.n	8006f90 <_malloc_r+0xb0>
 8006fb6:	4623      	mov	r3, r4
 8006fb8:	6864      	ldr	r4, [r4, #4]
 8006fba:	e7ac      	b.n	8006f16 <_malloc_r+0x36>
 8006fbc:	4634      	mov	r4, r6
 8006fbe:	6876      	ldr	r6, [r6, #4]
 8006fc0:	e7b4      	b.n	8006f2c <_malloc_r+0x4c>
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	e7cc      	b.n	8006f60 <_malloc_r+0x80>
 8006fc6:	230c      	movs	r3, #12
 8006fc8:	603b      	str	r3, [r7, #0]
 8006fca:	4638      	mov	r0, r7
 8006fcc:	f000 f80e 	bl	8006fec <__malloc_unlock>
 8006fd0:	e797      	b.n	8006f02 <_malloc_r+0x22>
 8006fd2:	6025      	str	r5, [r4, #0]
 8006fd4:	e7dc      	b.n	8006f90 <_malloc_r+0xb0>
 8006fd6:	605b      	str	r3, [r3, #4]
 8006fd8:	deff      	udf	#255	; 0xff
 8006fda:	bf00      	nop
 8006fdc:	2400031c 	.word	0x2400031c

08006fe0 <__malloc_lock>:
 8006fe0:	4801      	ldr	r0, [pc, #4]	; (8006fe8 <__malloc_lock+0x8>)
 8006fe2:	f7ff bf0f 	b.w	8006e04 <__retarget_lock_acquire_recursive>
 8006fe6:	bf00      	nop
 8006fe8:	24000318 	.word	0x24000318

08006fec <__malloc_unlock>:
 8006fec:	4801      	ldr	r0, [pc, #4]	; (8006ff4 <__malloc_unlock+0x8>)
 8006fee:	f7ff bf0a 	b.w	8006e06 <__retarget_lock_release_recursive>
 8006ff2:	bf00      	nop
 8006ff4:	24000318 	.word	0x24000318

08006ff8 <__ssputs_r>:
 8006ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ffc:	688e      	ldr	r6, [r1, #8]
 8006ffe:	461f      	mov	r7, r3
 8007000:	42be      	cmp	r6, r7
 8007002:	680b      	ldr	r3, [r1, #0]
 8007004:	4682      	mov	sl, r0
 8007006:	460c      	mov	r4, r1
 8007008:	4690      	mov	r8, r2
 800700a:	d82c      	bhi.n	8007066 <__ssputs_r+0x6e>
 800700c:	898a      	ldrh	r2, [r1, #12]
 800700e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007012:	d026      	beq.n	8007062 <__ssputs_r+0x6a>
 8007014:	6965      	ldr	r5, [r4, #20]
 8007016:	6909      	ldr	r1, [r1, #16]
 8007018:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800701c:	eba3 0901 	sub.w	r9, r3, r1
 8007020:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007024:	1c7b      	adds	r3, r7, #1
 8007026:	444b      	add	r3, r9
 8007028:	106d      	asrs	r5, r5, #1
 800702a:	429d      	cmp	r5, r3
 800702c:	bf38      	it	cc
 800702e:	461d      	movcc	r5, r3
 8007030:	0553      	lsls	r3, r2, #21
 8007032:	d527      	bpl.n	8007084 <__ssputs_r+0x8c>
 8007034:	4629      	mov	r1, r5
 8007036:	f7ff ff53 	bl	8006ee0 <_malloc_r>
 800703a:	4606      	mov	r6, r0
 800703c:	b360      	cbz	r0, 8007098 <__ssputs_r+0xa0>
 800703e:	6921      	ldr	r1, [r4, #16]
 8007040:	464a      	mov	r2, r9
 8007042:	f000 faeb 	bl	800761c <memcpy>
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800704c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007050:	81a3      	strh	r3, [r4, #12]
 8007052:	6126      	str	r6, [r4, #16]
 8007054:	6165      	str	r5, [r4, #20]
 8007056:	444e      	add	r6, r9
 8007058:	eba5 0509 	sub.w	r5, r5, r9
 800705c:	6026      	str	r6, [r4, #0]
 800705e:	60a5      	str	r5, [r4, #8]
 8007060:	463e      	mov	r6, r7
 8007062:	42be      	cmp	r6, r7
 8007064:	d900      	bls.n	8007068 <__ssputs_r+0x70>
 8007066:	463e      	mov	r6, r7
 8007068:	6820      	ldr	r0, [r4, #0]
 800706a:	4632      	mov	r2, r6
 800706c:	4641      	mov	r1, r8
 800706e:	f000 faab 	bl	80075c8 <memmove>
 8007072:	68a3      	ldr	r3, [r4, #8]
 8007074:	1b9b      	subs	r3, r3, r6
 8007076:	60a3      	str	r3, [r4, #8]
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	4433      	add	r3, r6
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	2000      	movs	r0, #0
 8007080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007084:	462a      	mov	r2, r5
 8007086:	f000 fad7 	bl	8007638 <_realloc_r>
 800708a:	4606      	mov	r6, r0
 800708c:	2800      	cmp	r0, #0
 800708e:	d1e0      	bne.n	8007052 <__ssputs_r+0x5a>
 8007090:	6921      	ldr	r1, [r4, #16]
 8007092:	4650      	mov	r0, sl
 8007094:	f7ff feb8 	bl	8006e08 <_free_r>
 8007098:	230c      	movs	r3, #12
 800709a:	f8ca 3000 	str.w	r3, [sl]
 800709e:	89a3      	ldrh	r3, [r4, #12]
 80070a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a4:	81a3      	strh	r3, [r4, #12]
 80070a6:	f04f 30ff 	mov.w	r0, #4294967295
 80070aa:	e7e9      	b.n	8007080 <__ssputs_r+0x88>

080070ac <_svfiprintf_r>:
 80070ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b0:	4698      	mov	r8, r3
 80070b2:	898b      	ldrh	r3, [r1, #12]
 80070b4:	061b      	lsls	r3, r3, #24
 80070b6:	b09d      	sub	sp, #116	; 0x74
 80070b8:	4607      	mov	r7, r0
 80070ba:	460d      	mov	r5, r1
 80070bc:	4614      	mov	r4, r2
 80070be:	d50e      	bpl.n	80070de <_svfiprintf_r+0x32>
 80070c0:	690b      	ldr	r3, [r1, #16]
 80070c2:	b963      	cbnz	r3, 80070de <_svfiprintf_r+0x32>
 80070c4:	2140      	movs	r1, #64	; 0x40
 80070c6:	f7ff ff0b 	bl	8006ee0 <_malloc_r>
 80070ca:	6028      	str	r0, [r5, #0]
 80070cc:	6128      	str	r0, [r5, #16]
 80070ce:	b920      	cbnz	r0, 80070da <_svfiprintf_r+0x2e>
 80070d0:	230c      	movs	r3, #12
 80070d2:	603b      	str	r3, [r7, #0]
 80070d4:	f04f 30ff 	mov.w	r0, #4294967295
 80070d8:	e0d0      	b.n	800727c <_svfiprintf_r+0x1d0>
 80070da:	2340      	movs	r3, #64	; 0x40
 80070dc:	616b      	str	r3, [r5, #20]
 80070de:	2300      	movs	r3, #0
 80070e0:	9309      	str	r3, [sp, #36]	; 0x24
 80070e2:	2320      	movs	r3, #32
 80070e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ec:	2330      	movs	r3, #48	; 0x30
 80070ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007294 <_svfiprintf_r+0x1e8>
 80070f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070f6:	f04f 0901 	mov.w	r9, #1
 80070fa:	4623      	mov	r3, r4
 80070fc:	469a      	mov	sl, r3
 80070fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007102:	b10a      	cbz	r2, 8007108 <_svfiprintf_r+0x5c>
 8007104:	2a25      	cmp	r2, #37	; 0x25
 8007106:	d1f9      	bne.n	80070fc <_svfiprintf_r+0x50>
 8007108:	ebba 0b04 	subs.w	fp, sl, r4
 800710c:	d00b      	beq.n	8007126 <_svfiprintf_r+0x7a>
 800710e:	465b      	mov	r3, fp
 8007110:	4622      	mov	r2, r4
 8007112:	4629      	mov	r1, r5
 8007114:	4638      	mov	r0, r7
 8007116:	f7ff ff6f 	bl	8006ff8 <__ssputs_r>
 800711a:	3001      	adds	r0, #1
 800711c:	f000 80a9 	beq.w	8007272 <_svfiprintf_r+0x1c6>
 8007120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007122:	445a      	add	r2, fp
 8007124:	9209      	str	r2, [sp, #36]	; 0x24
 8007126:	f89a 3000 	ldrb.w	r3, [sl]
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 80a1 	beq.w	8007272 <_svfiprintf_r+0x1c6>
 8007130:	2300      	movs	r3, #0
 8007132:	f04f 32ff 	mov.w	r2, #4294967295
 8007136:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800713a:	f10a 0a01 	add.w	sl, sl, #1
 800713e:	9304      	str	r3, [sp, #16]
 8007140:	9307      	str	r3, [sp, #28]
 8007142:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007146:	931a      	str	r3, [sp, #104]	; 0x68
 8007148:	4654      	mov	r4, sl
 800714a:	2205      	movs	r2, #5
 800714c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007150:	4850      	ldr	r0, [pc, #320]	; (8007294 <_svfiprintf_r+0x1e8>)
 8007152:	f7f9 f8cd 	bl	80002f0 <memchr>
 8007156:	9a04      	ldr	r2, [sp, #16]
 8007158:	b9d8      	cbnz	r0, 8007192 <_svfiprintf_r+0xe6>
 800715a:	06d0      	lsls	r0, r2, #27
 800715c:	bf44      	itt	mi
 800715e:	2320      	movmi	r3, #32
 8007160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007164:	0711      	lsls	r1, r2, #28
 8007166:	bf44      	itt	mi
 8007168:	232b      	movmi	r3, #43	; 0x2b
 800716a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800716e:	f89a 3000 	ldrb.w	r3, [sl]
 8007172:	2b2a      	cmp	r3, #42	; 0x2a
 8007174:	d015      	beq.n	80071a2 <_svfiprintf_r+0xf6>
 8007176:	9a07      	ldr	r2, [sp, #28]
 8007178:	4654      	mov	r4, sl
 800717a:	2000      	movs	r0, #0
 800717c:	f04f 0c0a 	mov.w	ip, #10
 8007180:	4621      	mov	r1, r4
 8007182:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007186:	3b30      	subs	r3, #48	; 0x30
 8007188:	2b09      	cmp	r3, #9
 800718a:	d94d      	bls.n	8007228 <_svfiprintf_r+0x17c>
 800718c:	b1b0      	cbz	r0, 80071bc <_svfiprintf_r+0x110>
 800718e:	9207      	str	r2, [sp, #28]
 8007190:	e014      	b.n	80071bc <_svfiprintf_r+0x110>
 8007192:	eba0 0308 	sub.w	r3, r0, r8
 8007196:	fa09 f303 	lsl.w	r3, r9, r3
 800719a:	4313      	orrs	r3, r2
 800719c:	9304      	str	r3, [sp, #16]
 800719e:	46a2      	mov	sl, r4
 80071a0:	e7d2      	b.n	8007148 <_svfiprintf_r+0x9c>
 80071a2:	9b03      	ldr	r3, [sp, #12]
 80071a4:	1d19      	adds	r1, r3, #4
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	9103      	str	r1, [sp, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	bfbb      	ittet	lt
 80071ae:	425b      	neglt	r3, r3
 80071b0:	f042 0202 	orrlt.w	r2, r2, #2
 80071b4:	9307      	strge	r3, [sp, #28]
 80071b6:	9307      	strlt	r3, [sp, #28]
 80071b8:	bfb8      	it	lt
 80071ba:	9204      	strlt	r2, [sp, #16]
 80071bc:	7823      	ldrb	r3, [r4, #0]
 80071be:	2b2e      	cmp	r3, #46	; 0x2e
 80071c0:	d10c      	bne.n	80071dc <_svfiprintf_r+0x130>
 80071c2:	7863      	ldrb	r3, [r4, #1]
 80071c4:	2b2a      	cmp	r3, #42	; 0x2a
 80071c6:	d134      	bne.n	8007232 <_svfiprintf_r+0x186>
 80071c8:	9b03      	ldr	r3, [sp, #12]
 80071ca:	1d1a      	adds	r2, r3, #4
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	9203      	str	r2, [sp, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	bfb8      	it	lt
 80071d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80071d8:	3402      	adds	r4, #2
 80071da:	9305      	str	r3, [sp, #20]
 80071dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80072a4 <_svfiprintf_r+0x1f8>
 80071e0:	7821      	ldrb	r1, [r4, #0]
 80071e2:	2203      	movs	r2, #3
 80071e4:	4650      	mov	r0, sl
 80071e6:	f7f9 f883 	bl	80002f0 <memchr>
 80071ea:	b138      	cbz	r0, 80071fc <_svfiprintf_r+0x150>
 80071ec:	9b04      	ldr	r3, [sp, #16]
 80071ee:	eba0 000a 	sub.w	r0, r0, sl
 80071f2:	2240      	movs	r2, #64	; 0x40
 80071f4:	4082      	lsls	r2, r0
 80071f6:	4313      	orrs	r3, r2
 80071f8:	3401      	adds	r4, #1
 80071fa:	9304      	str	r3, [sp, #16]
 80071fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007200:	4825      	ldr	r0, [pc, #148]	; (8007298 <_svfiprintf_r+0x1ec>)
 8007202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007206:	2206      	movs	r2, #6
 8007208:	f7f9 f872 	bl	80002f0 <memchr>
 800720c:	2800      	cmp	r0, #0
 800720e:	d038      	beq.n	8007282 <_svfiprintf_r+0x1d6>
 8007210:	4b22      	ldr	r3, [pc, #136]	; (800729c <_svfiprintf_r+0x1f0>)
 8007212:	bb1b      	cbnz	r3, 800725c <_svfiprintf_r+0x1b0>
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	3307      	adds	r3, #7
 8007218:	f023 0307 	bic.w	r3, r3, #7
 800721c:	3308      	adds	r3, #8
 800721e:	9303      	str	r3, [sp, #12]
 8007220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007222:	4433      	add	r3, r6
 8007224:	9309      	str	r3, [sp, #36]	; 0x24
 8007226:	e768      	b.n	80070fa <_svfiprintf_r+0x4e>
 8007228:	fb0c 3202 	mla	r2, ip, r2, r3
 800722c:	460c      	mov	r4, r1
 800722e:	2001      	movs	r0, #1
 8007230:	e7a6      	b.n	8007180 <_svfiprintf_r+0xd4>
 8007232:	2300      	movs	r3, #0
 8007234:	3401      	adds	r4, #1
 8007236:	9305      	str	r3, [sp, #20]
 8007238:	4619      	mov	r1, r3
 800723a:	f04f 0c0a 	mov.w	ip, #10
 800723e:	4620      	mov	r0, r4
 8007240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007244:	3a30      	subs	r2, #48	; 0x30
 8007246:	2a09      	cmp	r2, #9
 8007248:	d903      	bls.n	8007252 <_svfiprintf_r+0x1a6>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0c6      	beq.n	80071dc <_svfiprintf_r+0x130>
 800724e:	9105      	str	r1, [sp, #20]
 8007250:	e7c4      	b.n	80071dc <_svfiprintf_r+0x130>
 8007252:	fb0c 2101 	mla	r1, ip, r1, r2
 8007256:	4604      	mov	r4, r0
 8007258:	2301      	movs	r3, #1
 800725a:	e7f0      	b.n	800723e <_svfiprintf_r+0x192>
 800725c:	ab03      	add	r3, sp, #12
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	462a      	mov	r2, r5
 8007262:	4b0f      	ldr	r3, [pc, #60]	; (80072a0 <_svfiprintf_r+0x1f4>)
 8007264:	a904      	add	r1, sp, #16
 8007266:	4638      	mov	r0, r7
 8007268:	f3af 8000 	nop.w
 800726c:	1c42      	adds	r2, r0, #1
 800726e:	4606      	mov	r6, r0
 8007270:	d1d6      	bne.n	8007220 <_svfiprintf_r+0x174>
 8007272:	89ab      	ldrh	r3, [r5, #12]
 8007274:	065b      	lsls	r3, r3, #25
 8007276:	f53f af2d 	bmi.w	80070d4 <_svfiprintf_r+0x28>
 800727a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800727c:	b01d      	add	sp, #116	; 0x74
 800727e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007282:	ab03      	add	r3, sp, #12
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	462a      	mov	r2, r5
 8007288:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <_svfiprintf_r+0x1f4>)
 800728a:	a904      	add	r1, sp, #16
 800728c:	4638      	mov	r0, r7
 800728e:	f000 f879 	bl	8007384 <_printf_i>
 8007292:	e7eb      	b.n	800726c <_svfiprintf_r+0x1c0>
 8007294:	08007700 	.word	0x08007700
 8007298:	0800770a 	.word	0x0800770a
 800729c:	00000000 	.word	0x00000000
 80072a0:	08006ff9 	.word	0x08006ff9
 80072a4:	08007706 	.word	0x08007706

080072a8 <_printf_common>:
 80072a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ac:	4616      	mov	r6, r2
 80072ae:	4699      	mov	r9, r3
 80072b0:	688a      	ldr	r2, [r1, #8]
 80072b2:	690b      	ldr	r3, [r1, #16]
 80072b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072b8:	4293      	cmp	r3, r2
 80072ba:	bfb8      	it	lt
 80072bc:	4613      	movlt	r3, r2
 80072be:	6033      	str	r3, [r6, #0]
 80072c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072c4:	4607      	mov	r7, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	b10a      	cbz	r2, 80072ce <_printf_common+0x26>
 80072ca:	3301      	adds	r3, #1
 80072cc:	6033      	str	r3, [r6, #0]
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	0699      	lsls	r1, r3, #26
 80072d2:	bf42      	ittt	mi
 80072d4:	6833      	ldrmi	r3, [r6, #0]
 80072d6:	3302      	addmi	r3, #2
 80072d8:	6033      	strmi	r3, [r6, #0]
 80072da:	6825      	ldr	r5, [r4, #0]
 80072dc:	f015 0506 	ands.w	r5, r5, #6
 80072e0:	d106      	bne.n	80072f0 <_printf_common+0x48>
 80072e2:	f104 0a19 	add.w	sl, r4, #25
 80072e6:	68e3      	ldr	r3, [r4, #12]
 80072e8:	6832      	ldr	r2, [r6, #0]
 80072ea:	1a9b      	subs	r3, r3, r2
 80072ec:	42ab      	cmp	r3, r5
 80072ee:	dc26      	bgt.n	800733e <_printf_common+0x96>
 80072f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072f4:	1e13      	subs	r3, r2, #0
 80072f6:	6822      	ldr	r2, [r4, #0]
 80072f8:	bf18      	it	ne
 80072fa:	2301      	movne	r3, #1
 80072fc:	0692      	lsls	r2, r2, #26
 80072fe:	d42b      	bmi.n	8007358 <_printf_common+0xb0>
 8007300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007304:	4649      	mov	r1, r9
 8007306:	4638      	mov	r0, r7
 8007308:	47c0      	blx	r8
 800730a:	3001      	adds	r0, #1
 800730c:	d01e      	beq.n	800734c <_printf_common+0xa4>
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	6922      	ldr	r2, [r4, #16]
 8007312:	f003 0306 	and.w	r3, r3, #6
 8007316:	2b04      	cmp	r3, #4
 8007318:	bf02      	ittt	eq
 800731a:	68e5      	ldreq	r5, [r4, #12]
 800731c:	6833      	ldreq	r3, [r6, #0]
 800731e:	1aed      	subeq	r5, r5, r3
 8007320:	68a3      	ldr	r3, [r4, #8]
 8007322:	bf0c      	ite	eq
 8007324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007328:	2500      	movne	r5, #0
 800732a:	4293      	cmp	r3, r2
 800732c:	bfc4      	itt	gt
 800732e:	1a9b      	subgt	r3, r3, r2
 8007330:	18ed      	addgt	r5, r5, r3
 8007332:	2600      	movs	r6, #0
 8007334:	341a      	adds	r4, #26
 8007336:	42b5      	cmp	r5, r6
 8007338:	d11a      	bne.n	8007370 <_printf_common+0xc8>
 800733a:	2000      	movs	r0, #0
 800733c:	e008      	b.n	8007350 <_printf_common+0xa8>
 800733e:	2301      	movs	r3, #1
 8007340:	4652      	mov	r2, sl
 8007342:	4649      	mov	r1, r9
 8007344:	4638      	mov	r0, r7
 8007346:	47c0      	blx	r8
 8007348:	3001      	adds	r0, #1
 800734a:	d103      	bne.n	8007354 <_printf_common+0xac>
 800734c:	f04f 30ff 	mov.w	r0, #4294967295
 8007350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007354:	3501      	adds	r5, #1
 8007356:	e7c6      	b.n	80072e6 <_printf_common+0x3e>
 8007358:	18e1      	adds	r1, r4, r3
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	2030      	movs	r0, #48	; 0x30
 800735e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007362:	4422      	add	r2, r4
 8007364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800736c:	3302      	adds	r3, #2
 800736e:	e7c7      	b.n	8007300 <_printf_common+0x58>
 8007370:	2301      	movs	r3, #1
 8007372:	4622      	mov	r2, r4
 8007374:	4649      	mov	r1, r9
 8007376:	4638      	mov	r0, r7
 8007378:	47c0      	blx	r8
 800737a:	3001      	adds	r0, #1
 800737c:	d0e6      	beq.n	800734c <_printf_common+0xa4>
 800737e:	3601      	adds	r6, #1
 8007380:	e7d9      	b.n	8007336 <_printf_common+0x8e>
	...

08007384 <_printf_i>:
 8007384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007388:	7e0f      	ldrb	r7, [r1, #24]
 800738a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800738c:	2f78      	cmp	r7, #120	; 0x78
 800738e:	4691      	mov	r9, r2
 8007390:	4680      	mov	r8, r0
 8007392:	460c      	mov	r4, r1
 8007394:	469a      	mov	sl, r3
 8007396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800739a:	d807      	bhi.n	80073ac <_printf_i+0x28>
 800739c:	2f62      	cmp	r7, #98	; 0x62
 800739e:	d80a      	bhi.n	80073b6 <_printf_i+0x32>
 80073a0:	2f00      	cmp	r7, #0
 80073a2:	f000 80d4 	beq.w	800754e <_printf_i+0x1ca>
 80073a6:	2f58      	cmp	r7, #88	; 0x58
 80073a8:	f000 80c0 	beq.w	800752c <_printf_i+0x1a8>
 80073ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073b4:	e03a      	b.n	800742c <_printf_i+0xa8>
 80073b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ba:	2b15      	cmp	r3, #21
 80073bc:	d8f6      	bhi.n	80073ac <_printf_i+0x28>
 80073be:	a101      	add	r1, pc, #4	; (adr r1, 80073c4 <_printf_i+0x40>)
 80073c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073c4:	0800741d 	.word	0x0800741d
 80073c8:	08007431 	.word	0x08007431
 80073cc:	080073ad 	.word	0x080073ad
 80073d0:	080073ad 	.word	0x080073ad
 80073d4:	080073ad 	.word	0x080073ad
 80073d8:	080073ad 	.word	0x080073ad
 80073dc:	08007431 	.word	0x08007431
 80073e0:	080073ad 	.word	0x080073ad
 80073e4:	080073ad 	.word	0x080073ad
 80073e8:	080073ad 	.word	0x080073ad
 80073ec:	080073ad 	.word	0x080073ad
 80073f0:	08007535 	.word	0x08007535
 80073f4:	0800745d 	.word	0x0800745d
 80073f8:	080074ef 	.word	0x080074ef
 80073fc:	080073ad 	.word	0x080073ad
 8007400:	080073ad 	.word	0x080073ad
 8007404:	08007557 	.word	0x08007557
 8007408:	080073ad 	.word	0x080073ad
 800740c:	0800745d 	.word	0x0800745d
 8007410:	080073ad 	.word	0x080073ad
 8007414:	080073ad 	.word	0x080073ad
 8007418:	080074f7 	.word	0x080074f7
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	1d1a      	adds	r2, r3, #4
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	602a      	str	r2, [r5, #0]
 8007424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800742c:	2301      	movs	r3, #1
 800742e:	e09f      	b.n	8007570 <_printf_i+0x1ec>
 8007430:	6820      	ldr	r0, [r4, #0]
 8007432:	682b      	ldr	r3, [r5, #0]
 8007434:	0607      	lsls	r7, r0, #24
 8007436:	f103 0104 	add.w	r1, r3, #4
 800743a:	6029      	str	r1, [r5, #0]
 800743c:	d501      	bpl.n	8007442 <_printf_i+0xbe>
 800743e:	681e      	ldr	r6, [r3, #0]
 8007440:	e003      	b.n	800744a <_printf_i+0xc6>
 8007442:	0646      	lsls	r6, r0, #25
 8007444:	d5fb      	bpl.n	800743e <_printf_i+0xba>
 8007446:	f9b3 6000 	ldrsh.w	r6, [r3]
 800744a:	2e00      	cmp	r6, #0
 800744c:	da03      	bge.n	8007456 <_printf_i+0xd2>
 800744e:	232d      	movs	r3, #45	; 0x2d
 8007450:	4276      	negs	r6, r6
 8007452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007456:	485a      	ldr	r0, [pc, #360]	; (80075c0 <_printf_i+0x23c>)
 8007458:	230a      	movs	r3, #10
 800745a:	e012      	b.n	8007482 <_printf_i+0xfe>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	6820      	ldr	r0, [r4, #0]
 8007460:	1d19      	adds	r1, r3, #4
 8007462:	6029      	str	r1, [r5, #0]
 8007464:	0605      	lsls	r5, r0, #24
 8007466:	d501      	bpl.n	800746c <_printf_i+0xe8>
 8007468:	681e      	ldr	r6, [r3, #0]
 800746a:	e002      	b.n	8007472 <_printf_i+0xee>
 800746c:	0641      	lsls	r1, r0, #25
 800746e:	d5fb      	bpl.n	8007468 <_printf_i+0xe4>
 8007470:	881e      	ldrh	r6, [r3, #0]
 8007472:	4853      	ldr	r0, [pc, #332]	; (80075c0 <_printf_i+0x23c>)
 8007474:	2f6f      	cmp	r7, #111	; 0x6f
 8007476:	bf0c      	ite	eq
 8007478:	2308      	moveq	r3, #8
 800747a:	230a      	movne	r3, #10
 800747c:	2100      	movs	r1, #0
 800747e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007482:	6865      	ldr	r5, [r4, #4]
 8007484:	60a5      	str	r5, [r4, #8]
 8007486:	2d00      	cmp	r5, #0
 8007488:	bfa2      	ittt	ge
 800748a:	6821      	ldrge	r1, [r4, #0]
 800748c:	f021 0104 	bicge.w	r1, r1, #4
 8007490:	6021      	strge	r1, [r4, #0]
 8007492:	b90e      	cbnz	r6, 8007498 <_printf_i+0x114>
 8007494:	2d00      	cmp	r5, #0
 8007496:	d04b      	beq.n	8007530 <_printf_i+0x1ac>
 8007498:	4615      	mov	r5, r2
 800749a:	fbb6 f1f3 	udiv	r1, r6, r3
 800749e:	fb03 6711 	mls	r7, r3, r1, r6
 80074a2:	5dc7      	ldrb	r7, [r0, r7]
 80074a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074a8:	4637      	mov	r7, r6
 80074aa:	42bb      	cmp	r3, r7
 80074ac:	460e      	mov	r6, r1
 80074ae:	d9f4      	bls.n	800749a <_printf_i+0x116>
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	d10b      	bne.n	80074cc <_printf_i+0x148>
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	07de      	lsls	r6, r3, #31
 80074b8:	d508      	bpl.n	80074cc <_printf_i+0x148>
 80074ba:	6923      	ldr	r3, [r4, #16]
 80074bc:	6861      	ldr	r1, [r4, #4]
 80074be:	4299      	cmp	r1, r3
 80074c0:	bfde      	ittt	le
 80074c2:	2330      	movle	r3, #48	; 0x30
 80074c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074cc:	1b52      	subs	r2, r2, r5
 80074ce:	6122      	str	r2, [r4, #16]
 80074d0:	f8cd a000 	str.w	sl, [sp]
 80074d4:	464b      	mov	r3, r9
 80074d6:	aa03      	add	r2, sp, #12
 80074d8:	4621      	mov	r1, r4
 80074da:	4640      	mov	r0, r8
 80074dc:	f7ff fee4 	bl	80072a8 <_printf_common>
 80074e0:	3001      	adds	r0, #1
 80074e2:	d14a      	bne.n	800757a <_printf_i+0x1f6>
 80074e4:	f04f 30ff 	mov.w	r0, #4294967295
 80074e8:	b004      	add	sp, #16
 80074ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	f043 0320 	orr.w	r3, r3, #32
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	4833      	ldr	r0, [pc, #204]	; (80075c4 <_printf_i+0x240>)
 80074f8:	2778      	movs	r7, #120	; 0x78
 80074fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	6829      	ldr	r1, [r5, #0]
 8007502:	061f      	lsls	r7, r3, #24
 8007504:	f851 6b04 	ldr.w	r6, [r1], #4
 8007508:	d402      	bmi.n	8007510 <_printf_i+0x18c>
 800750a:	065f      	lsls	r7, r3, #25
 800750c:	bf48      	it	mi
 800750e:	b2b6      	uxthmi	r6, r6
 8007510:	07df      	lsls	r7, r3, #31
 8007512:	bf48      	it	mi
 8007514:	f043 0320 	orrmi.w	r3, r3, #32
 8007518:	6029      	str	r1, [r5, #0]
 800751a:	bf48      	it	mi
 800751c:	6023      	strmi	r3, [r4, #0]
 800751e:	b91e      	cbnz	r6, 8007528 <_printf_i+0x1a4>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	f023 0320 	bic.w	r3, r3, #32
 8007526:	6023      	str	r3, [r4, #0]
 8007528:	2310      	movs	r3, #16
 800752a:	e7a7      	b.n	800747c <_printf_i+0xf8>
 800752c:	4824      	ldr	r0, [pc, #144]	; (80075c0 <_printf_i+0x23c>)
 800752e:	e7e4      	b.n	80074fa <_printf_i+0x176>
 8007530:	4615      	mov	r5, r2
 8007532:	e7bd      	b.n	80074b0 <_printf_i+0x12c>
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	6826      	ldr	r6, [r4, #0]
 8007538:	6961      	ldr	r1, [r4, #20]
 800753a:	1d18      	adds	r0, r3, #4
 800753c:	6028      	str	r0, [r5, #0]
 800753e:	0635      	lsls	r5, r6, #24
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	d501      	bpl.n	8007548 <_printf_i+0x1c4>
 8007544:	6019      	str	r1, [r3, #0]
 8007546:	e002      	b.n	800754e <_printf_i+0x1ca>
 8007548:	0670      	lsls	r0, r6, #25
 800754a:	d5fb      	bpl.n	8007544 <_printf_i+0x1c0>
 800754c:	8019      	strh	r1, [r3, #0]
 800754e:	2300      	movs	r3, #0
 8007550:	6123      	str	r3, [r4, #16]
 8007552:	4615      	mov	r5, r2
 8007554:	e7bc      	b.n	80074d0 <_printf_i+0x14c>
 8007556:	682b      	ldr	r3, [r5, #0]
 8007558:	1d1a      	adds	r2, r3, #4
 800755a:	602a      	str	r2, [r5, #0]
 800755c:	681d      	ldr	r5, [r3, #0]
 800755e:	6862      	ldr	r2, [r4, #4]
 8007560:	2100      	movs	r1, #0
 8007562:	4628      	mov	r0, r5
 8007564:	f7f8 fec4 	bl	80002f0 <memchr>
 8007568:	b108      	cbz	r0, 800756e <_printf_i+0x1ea>
 800756a:	1b40      	subs	r0, r0, r5
 800756c:	6060      	str	r0, [r4, #4]
 800756e:	6863      	ldr	r3, [r4, #4]
 8007570:	6123      	str	r3, [r4, #16]
 8007572:	2300      	movs	r3, #0
 8007574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007578:	e7aa      	b.n	80074d0 <_printf_i+0x14c>
 800757a:	6923      	ldr	r3, [r4, #16]
 800757c:	462a      	mov	r2, r5
 800757e:	4649      	mov	r1, r9
 8007580:	4640      	mov	r0, r8
 8007582:	47d0      	blx	sl
 8007584:	3001      	adds	r0, #1
 8007586:	d0ad      	beq.n	80074e4 <_printf_i+0x160>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	079b      	lsls	r3, r3, #30
 800758c:	d413      	bmi.n	80075b6 <_printf_i+0x232>
 800758e:	68e0      	ldr	r0, [r4, #12]
 8007590:	9b03      	ldr	r3, [sp, #12]
 8007592:	4298      	cmp	r0, r3
 8007594:	bfb8      	it	lt
 8007596:	4618      	movlt	r0, r3
 8007598:	e7a6      	b.n	80074e8 <_printf_i+0x164>
 800759a:	2301      	movs	r3, #1
 800759c:	4632      	mov	r2, r6
 800759e:	4649      	mov	r1, r9
 80075a0:	4640      	mov	r0, r8
 80075a2:	47d0      	blx	sl
 80075a4:	3001      	adds	r0, #1
 80075a6:	d09d      	beq.n	80074e4 <_printf_i+0x160>
 80075a8:	3501      	adds	r5, #1
 80075aa:	68e3      	ldr	r3, [r4, #12]
 80075ac:	9903      	ldr	r1, [sp, #12]
 80075ae:	1a5b      	subs	r3, r3, r1
 80075b0:	42ab      	cmp	r3, r5
 80075b2:	dcf2      	bgt.n	800759a <_printf_i+0x216>
 80075b4:	e7eb      	b.n	800758e <_printf_i+0x20a>
 80075b6:	2500      	movs	r5, #0
 80075b8:	f104 0619 	add.w	r6, r4, #25
 80075bc:	e7f5      	b.n	80075aa <_printf_i+0x226>
 80075be:	bf00      	nop
 80075c0:	08007711 	.word	0x08007711
 80075c4:	08007722 	.word	0x08007722

080075c8 <memmove>:
 80075c8:	4288      	cmp	r0, r1
 80075ca:	b510      	push	{r4, lr}
 80075cc:	eb01 0402 	add.w	r4, r1, r2
 80075d0:	d902      	bls.n	80075d8 <memmove+0x10>
 80075d2:	4284      	cmp	r4, r0
 80075d4:	4623      	mov	r3, r4
 80075d6:	d807      	bhi.n	80075e8 <memmove+0x20>
 80075d8:	1e43      	subs	r3, r0, #1
 80075da:	42a1      	cmp	r1, r4
 80075dc:	d008      	beq.n	80075f0 <memmove+0x28>
 80075de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075e6:	e7f8      	b.n	80075da <memmove+0x12>
 80075e8:	4402      	add	r2, r0
 80075ea:	4601      	mov	r1, r0
 80075ec:	428a      	cmp	r2, r1
 80075ee:	d100      	bne.n	80075f2 <memmove+0x2a>
 80075f0:	bd10      	pop	{r4, pc}
 80075f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075fa:	e7f7      	b.n	80075ec <memmove+0x24>

080075fc <_sbrk_r>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	4d06      	ldr	r5, [pc, #24]	; (8007618 <_sbrk_r+0x1c>)
 8007600:	2300      	movs	r3, #0
 8007602:	4604      	mov	r4, r0
 8007604:	4608      	mov	r0, r1
 8007606:	602b      	str	r3, [r5, #0]
 8007608:	f7f9 fb26 	bl	8000c58 <_sbrk>
 800760c:	1c43      	adds	r3, r0, #1
 800760e:	d102      	bne.n	8007616 <_sbrk_r+0x1a>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	b103      	cbz	r3, 8007616 <_sbrk_r+0x1a>
 8007614:	6023      	str	r3, [r4, #0]
 8007616:	bd38      	pop	{r3, r4, r5, pc}
 8007618:	24000314 	.word	0x24000314

0800761c <memcpy>:
 800761c:	440a      	add	r2, r1
 800761e:	4291      	cmp	r1, r2
 8007620:	f100 33ff 	add.w	r3, r0, #4294967295
 8007624:	d100      	bne.n	8007628 <memcpy+0xc>
 8007626:	4770      	bx	lr
 8007628:	b510      	push	{r4, lr}
 800762a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800762e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007632:	4291      	cmp	r1, r2
 8007634:	d1f9      	bne.n	800762a <memcpy+0xe>
 8007636:	bd10      	pop	{r4, pc}

08007638 <_realloc_r>:
 8007638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800763c:	4680      	mov	r8, r0
 800763e:	4614      	mov	r4, r2
 8007640:	460e      	mov	r6, r1
 8007642:	b921      	cbnz	r1, 800764e <_realloc_r+0x16>
 8007644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007648:	4611      	mov	r1, r2
 800764a:	f7ff bc49 	b.w	8006ee0 <_malloc_r>
 800764e:	b92a      	cbnz	r2, 800765c <_realloc_r+0x24>
 8007650:	f7ff fbda 	bl	8006e08 <_free_r>
 8007654:	4625      	mov	r5, r4
 8007656:	4628      	mov	r0, r5
 8007658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800765c:	f000 f81b 	bl	8007696 <_malloc_usable_size_r>
 8007660:	4284      	cmp	r4, r0
 8007662:	4607      	mov	r7, r0
 8007664:	d802      	bhi.n	800766c <_realloc_r+0x34>
 8007666:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800766a:	d812      	bhi.n	8007692 <_realloc_r+0x5a>
 800766c:	4621      	mov	r1, r4
 800766e:	4640      	mov	r0, r8
 8007670:	f7ff fc36 	bl	8006ee0 <_malloc_r>
 8007674:	4605      	mov	r5, r0
 8007676:	2800      	cmp	r0, #0
 8007678:	d0ed      	beq.n	8007656 <_realloc_r+0x1e>
 800767a:	42bc      	cmp	r4, r7
 800767c:	4622      	mov	r2, r4
 800767e:	4631      	mov	r1, r6
 8007680:	bf28      	it	cs
 8007682:	463a      	movcs	r2, r7
 8007684:	f7ff ffca 	bl	800761c <memcpy>
 8007688:	4631      	mov	r1, r6
 800768a:	4640      	mov	r0, r8
 800768c:	f7ff fbbc 	bl	8006e08 <_free_r>
 8007690:	e7e1      	b.n	8007656 <_realloc_r+0x1e>
 8007692:	4635      	mov	r5, r6
 8007694:	e7df      	b.n	8007656 <_realloc_r+0x1e>

08007696 <_malloc_usable_size_r>:
 8007696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800769a:	1f18      	subs	r0, r3, #4
 800769c:	2b00      	cmp	r3, #0
 800769e:	bfbc      	itt	lt
 80076a0:	580b      	ldrlt	r3, [r1, r0]
 80076a2:	18c0      	addlt	r0, r0, r3
 80076a4:	4770      	bx	lr
	...

080076a8 <_init>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	bf00      	nop
 80076ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ae:	bc08      	pop	{r3}
 80076b0:	469e      	mov	lr, r3
 80076b2:	4770      	bx	lr

080076b4 <_fini>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	bf00      	nop
 80076b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ba:	bc08      	pop	{r3}
 80076bc:	469e      	mov	lr, r3
 80076be:	4770      	bx	lr
