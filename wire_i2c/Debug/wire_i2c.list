
wire_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e1c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080060cc  080060cc  000160cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800613c  0800613c  0001613c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006140  08006140  00016140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000060  24000000  08006144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002a8  24000060  080061a4  00020060  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000308  080061a4  00020308  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d020  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ec2  00000000  00000000  0002d0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ae8  00000000  00000000  0002efb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000084e  00000000  00000000  0002faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f079  00000000  00000000  000302ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f9dc  00000000  00000000  0005f367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012fd4a  00000000  00000000  0006ed43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003118  00000000  00000000  0019ea90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000050  00000000  00000000  001a1ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080060b4 	.word	0x080060b4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	080060b4 	.word	0x080060b4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000396:	f000 fbab 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039a:	f000 f89b 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039e:	f000 f965 	bl	800066c <MX_GPIO_Init>
  MX_I2C1_Init();
 80003a2:	f000 f8fb 	bl	800059c <MX_I2C1_Init>
  MX_DMA_Init();
 80003a6:	f000 f939 	bl	800061c <MX_DMA_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    // Tell TMP102 that we want to read from the temperature register
	    buf[0] = REG_TEMP;
 80003aa:	2300      	movs	r3, #0
 80003ac:	713b      	strb	r3, [r7, #4]
	    ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 80003ae:	2390      	movs	r3, #144	; 0x90
 80003b0:	b299      	uxth	r1, r3
 80003b2:	1d3a      	adds	r2, r7, #4
 80003b4:	f04f 33ff 	mov.w	r3, #4294967295
 80003b8:	9300      	str	r3, [sp, #0]
 80003ba:	2301      	movs	r3, #1
 80003bc:	483e      	ldr	r0, [pc, #248]	; (80004b8 <main+0x128>)
 80003be:	f002 fcfd 	bl	8002dbc <HAL_I2C_Master_Transmit>
 80003c2:	4603      	mov	r3, r0
 80003c4:	757b      	strb	r3, [r7, #21]
	    if ( ret != HAL_OK ) {
 80003c6:	7d7b      	ldrb	r3, [r7, #21]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d008      	beq.n	80003de <main+0x4e>
	      strcpy((char*)buf, "Error Tx\r\n");
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	4a3b      	ldr	r2, [pc, #236]	; (80004bc <main+0x12c>)
 80003d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80003d2:	c303      	stmia	r3!, {r0, r1}
 80003d4:	801a      	strh	r2, [r3, #0]
 80003d6:	3302      	adds	r3, #2
 80003d8:	0c12      	lsrs	r2, r2, #16
 80003da:	701a      	strb	r2, [r3, #0]
 80003dc:	e05d      	b.n	800049a <main+0x10a>
	    } else {

	      // Read 2 bytes from the temperature register
	      ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 80003de:	2390      	movs	r3, #144	; 0x90
 80003e0:	b299      	uxth	r1, r3
 80003e2:	1d3a      	adds	r2, r7, #4
 80003e4:	f04f 33ff 	mov.w	r3, #4294967295
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	2302      	movs	r3, #2
 80003ec:	4832      	ldr	r0, [pc, #200]	; (80004b8 <main+0x128>)
 80003ee:	f002 fdd9 	bl	8002fa4 <HAL_I2C_Master_Receive>
 80003f2:	4603      	mov	r3, r0
 80003f4:	757b      	strb	r3, [r7, #21]
	      if ( ret != HAL_OK ) {
 80003f6:	7d7b      	ldrb	r3, [r7, #21]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d008      	beq.n	800040e <main+0x7e>
	        strcpy((char*)buf, "Error Rx\r\n");
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	4a30      	ldr	r2, [pc, #192]	; (80004c0 <main+0x130>)
 8000400:	ca07      	ldmia	r2, {r0, r1, r2}
 8000402:	c303      	stmia	r3!, {r0, r1}
 8000404:	801a      	strh	r2, [r3, #0]
 8000406:	3302      	adds	r3, #2
 8000408:	0c12      	lsrs	r2, r2, #16
 800040a:	701a      	strb	r2, [r3, #0]
 800040c:	e045      	b.n	800049a <main+0x10a>
	      } else {

	        //Combine the bytes
	        val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 800040e:	793b      	ldrb	r3, [r7, #4]
 8000410:	011b      	lsls	r3, r3, #4
 8000412:	b21a      	sxth	r2, r3
 8000414:	797b      	ldrb	r3, [r7, #5]
 8000416:	091b      	lsrs	r3, r3, #4
 8000418:	b2db      	uxtb	r3, r3
 800041a:	b21b      	sxth	r3, r3
 800041c:	4313      	orrs	r3, r2
 800041e:	82fb      	strh	r3, [r7, #22]

	        // Convert to 2's complement, since temperature can be negative
	        if ( val > 0x7FF ) {
 8000420:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000428:	db05      	blt.n	8000436 <main+0xa6>
	          val |= 0xF000;
 800042a:	8afb      	ldrh	r3, [r7, #22]
 800042c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000430:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000434:	82fb      	strh	r3, [r7, #22]
	        }

	        // Convert to float temperature value (Celsius)
	        temp_c = val * 0.0625;
 8000436:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800043a:	ee07 3a90 	vmov	s15, r3
 800043e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000442:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 80004b0 <main+0x120>
 8000446:	ee27 7b06 	vmul.f64	d7, d7, d6
 800044a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800044e:	edc7 7a04 	vstr	s15, [r7, #16]

	        // Convert temperature to decimal format
	        temp_c *= 100;
 8000452:	edd7 7a04 	vldr	s15, [r7, #16]
 8000456:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80004c4 <main+0x134>
 800045a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800045e:	edc7 7a04 	vstr	s15, [r7, #16]
	        sprintf((char*)buf,
	              "%u.%u C\r\n",
	              ((unsigned int)temp_c / 100),
 8000462:	edd7 7a04 	vldr	s15, [r7, #16]
 8000466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800046a:	ee17 2a90 	vmov	r2, s15
	        sprintf((char*)buf,
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <main+0x138>)
 8000470:	fba3 2302 	umull	r2, r3, r3, r2
 8000474:	095a      	lsrs	r2, r3, #5
	              ((unsigned int)temp_c % 100));
 8000476:	edd7 7a04 	vldr	s15, [r7, #16]
 800047a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800047e:	ee17 1a90 	vmov	r1, s15
	        sprintf((char*)buf,
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <main+0x138>)
 8000484:	fba3 0301 	umull	r0, r3, r3, r1
 8000488:	095b      	lsrs	r3, r3, #5
 800048a:	2064      	movs	r0, #100	; 0x64
 800048c:	fb00 f303 	mul.w	r3, r0, r3
 8000490:	1acb      	subs	r3, r1, r3
 8000492:	1d38      	adds	r0, r7, #4
 8000494:	490d      	ldr	r1, [pc, #52]	; (80004cc <main+0x13c>)
 8000496:	f005 f969 	bl	800576c <siprintf>
	      }
	    }


	    // Wait
	    HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_1);
 800049a:	2102      	movs	r1, #2
 800049c:	480c      	ldr	r0, [pc, #48]	; (80004d0 <main+0x140>)
 800049e:	f002 fbe2 	bl	8002c66 <HAL_GPIO_TogglePin>
		    HAL_Delay(500);
 80004a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a6:	f000 fbb5 	bl	8000c14 <HAL_Delay>
	    buf[0] = REG_TEMP;
 80004aa:	e77e      	b.n	80003aa <main+0x1a>
 80004ac:	f3af 8000 	nop.w
 80004b0:	00000000 	.word	0x00000000
 80004b4:	3fb00000 	.word	0x3fb00000
 80004b8:	2400007c 	.word	0x2400007c
 80004bc:	080060cc 	.word	0x080060cc
 80004c0:	080060d8 	.word	0x080060d8
 80004c4:	42c80000 	.word	0x42c80000
 80004c8:	51eb851f 	.word	0x51eb851f
 80004cc:	080060e4 	.word	0x080060e4
 80004d0:	58020800 	.word	0x58020800

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b09c      	sub	sp, #112	; 0x70
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004de:	224c      	movs	r2, #76	; 0x4c
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f005 f962 	bl	80057ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2220      	movs	r2, #32
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f005 f95c 	bl	80057ac <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80004f4:	4b27      	ldr	r3, [pc, #156]	; (8000594 <SystemClock_Config+0xc0>)
 80004f6:	f04f 32ff 	mov.w	r2, #4294967295
 80004fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004fe:	2002      	movs	r0, #2
 8000500:	f003 f956 	bl	80037b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000504:	2300      	movs	r3, #0
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	4b23      	ldr	r3, [pc, #140]	; (8000598 <SystemClock_Config+0xc4>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a22      	ldr	r2, [pc, #136]	; (8000598 <SystemClock_Config+0xc4>)
 800050e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b20      	ldr	r3, [pc, #128]	; (8000598 <SystemClock_Config+0xc4>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800051c:	603b      	str	r3, [r7, #0]
 800051e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000520:	bf00      	nop
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <SystemClock_Config+0xc4>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800052a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800052e:	d1f8      	bne.n	8000522 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000530:	2302      	movs	r3, #2
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000534:	2301      	movs	r3, #1
 8000536:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000538:	2340      	movs	r3, #64	; 0x40
 800053a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800053c:	2300      	movs	r3, #0
 800053e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000544:	4618      	mov	r0, r3
 8000546:	f003 f96d 	bl	8003824 <HAL_RCC_OscConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000550:	f000 f8d0 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000554:	233f      	movs	r3, #63	; 0x3f
 8000556:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000564:	2340      	movs	r3, #64	; 0x40
 8000566:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000568:	2340      	movs	r3, #64	; 0x40
 800056a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800056c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000570:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000572:	2340      	movs	r3, #64	; 0x40
 8000574:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2102      	movs	r1, #2
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fd56 	bl	800402c <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000586:	f000 f8b5 	bl	80006f4 <Error_Handler>
  }
}
 800058a:	bf00      	nop
 800058c:	3770      	adds	r7, #112	; 0x70
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	58024400 	.word	0x58024400
 8000598:	58024800 	.word	0x58024800

0800059c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005a0:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <MX_I2C1_Init+0x74>)
 80005a2:	4a1c      	ldr	r2, [pc, #112]	; (8000614 <MX_I2C1_Init+0x78>)
 80005a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80005a6:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <MX_I2C1_Init+0x74>)
 80005a8:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <MX_I2C1_Init+0x7c>)
 80005aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <MX_I2C1_Init+0x74>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <MX_I2C1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_I2C1_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_I2C1_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_I2C1_Init+0x74>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_I2C1_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d6:	480e      	ldr	r0, [pc, #56]	; (8000610 <MX_I2C1_Init+0x74>)
 80005d8:	f002 fb60 	bl	8002c9c <HAL_I2C_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005e2:	f000 f887 	bl	80006f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <MX_I2C1_Init+0x74>)
 80005ea:	f003 f849 	bl	8003680 <HAL_I2CEx_ConfigAnalogFilter>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005f4:	f000 f87e 	bl	80006f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005f8:	2100      	movs	r1, #0
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_I2C1_Init+0x74>)
 80005fc:	f003 f88b 	bl	8003716 <HAL_I2CEx_ConfigDigitalFilter>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000606:	f000 f875 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	2400007c 	.word	0x2400007c
 8000614:	40005400 	.word	0x40005400
 8000618:	00707cbb 	.word	0x00707cbb

0800061c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_DMA_Init+0x4c>)
 8000624:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000628:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <MX_DMA_Init+0x4c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <MX_DMA_Init+0x4c>)
 8000634:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	200b      	movs	r0, #11
 8000646:	f000 fbe4 	bl	8000e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800064a:	200b      	movs	r0, #11
 800064c:	f000 fbfb 	bl	8000e46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	200c      	movs	r0, #12
 8000656:	f000 fbdc 	bl	8000e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800065a:	200c      	movs	r0, #12
 800065c:	f000 fbf3 	bl	8000e46 <HAL_NVIC_EnableIRQ>

}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	58024400 	.word	0x58024400

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_GPIO_Init+0x80>)
 8000684:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000688:	4a18      	ldr	r2, [pc, #96]	; (80006ec <MX_GPIO_Init+0x80>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_GPIO_Init+0x80>)
 8000694:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_GPIO_Init+0x80>)
 80006a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a6:	4a11      	ldr	r2, [pc, #68]	; (80006ec <MX_GPIO_Init+0x80>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_GPIO_Init+0x80>)
 80006b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2102      	movs	r1, #2
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006c4:	f002 fab6 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006c8:	2302      	movs	r3, #2
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006e0:	f002 f8f8 	bl	80028d4 <HAL_GPIO_Init>

}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	58024400 	.word	0x58024400
 80006f0:	58020800 	.word	0x58020800

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_MspInit+0x30>)
 8000708:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800070c:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_MspInit+0x30>)
 800070e:	f043 0302 	orr.w	r3, r3, #2
 8000712:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_MspInit+0x30>)
 8000718:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800071c:	f003 0302 	and.w	r3, r3, #2
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	58024400 	.word	0x58024400

08000734 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b0b8      	sub	sp, #224	; 0xe0
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	22b8      	movs	r2, #184	; 0xb8
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f005 f829 	bl	80057ac <memset>
  if(hi2c->Instance==I2C1)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a52      	ldr	r2, [pc, #328]	; (80008a8 <HAL_I2C_MspInit+0x174>)
 8000760:	4293      	cmp	r3, r2
 8000762:	f040 809c 	bne.w	800089e <HAL_I2C_MspInit+0x16a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000766:	2308      	movs	r3, #8
 8000768:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4618      	mov	r0, r3
 8000776:	f003 ff89 	bl	800468c <HAL_RCCEx_PeriphCLKConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000780:	f7ff ffb8 	bl	80006f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	4b49      	ldr	r3, [pc, #292]	; (80008ac <HAL_I2C_MspInit+0x178>)
 8000786:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800078a:	4a48      	ldr	r2, [pc, #288]	; (80008ac <HAL_I2C_MspInit+0x178>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000794:	4b45      	ldr	r3, [pc, #276]	; (80008ac <HAL_I2C_MspInit+0x178>)
 8000796:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007a2:	23c0      	movs	r3, #192	; 0xc0
 80007a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a8:	2312      	movs	r3, #18
 80007aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ba:	2304      	movs	r3, #4
 80007bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007c4:	4619      	mov	r1, r3
 80007c6:	483a      	ldr	r0, [pc, #232]	; (80008b0 <HAL_I2C_MspInit+0x17c>)
 80007c8:	f002 f884 	bl	80028d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007cc:	4b37      	ldr	r3, [pc, #220]	; (80008ac <HAL_I2C_MspInit+0x178>)
 80007ce:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80007d2:	4a36      	ldr	r2, [pc, #216]	; (80008ac <HAL_I2C_MspInit+0x178>)
 80007d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80007dc:	4b33      	ldr	r3, [pc, #204]	; (80008ac <HAL_I2C_MspInit+0x178>)
 80007de:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80007e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80007ea:	4b32      	ldr	r3, [pc, #200]	; (80008b4 <HAL_I2C_MspInit+0x180>)
 80007ec:	4a32      	ldr	r2, [pc, #200]	; (80008b8 <HAL_I2C_MspInit+0x184>)
 80007ee:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80007f0:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <HAL_I2C_MspInit+0x180>)
 80007f2:	2221      	movs	r2, #33	; 0x21
 80007f4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f6:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <HAL_I2C_MspInit+0x180>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fc:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <HAL_I2C_MspInit+0x180>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000802:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <HAL_I2C_MspInit+0x180>)
 8000804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000808:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800080a:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <HAL_I2C_MspInit+0x180>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <HAL_I2C_MspInit+0x180>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000816:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <HAL_I2C_MspInit+0x180>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <HAL_I2C_MspInit+0x180>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <HAL_I2C_MspInit+0x180>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000828:	4822      	ldr	r0, [pc, #136]	; (80008b4 <HAL_I2C_MspInit+0x180>)
 800082a:	f000 fb27 	bl	8000e7c <HAL_DMA_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8000834:	f7ff ff5e 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a1e      	ldr	r2, [pc, #120]	; (80008b4 <HAL_I2C_MspInit+0x180>)
 800083c:	63da      	str	r2, [r3, #60]	; 0x3c
 800083e:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <HAL_I2C_MspInit+0x180>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <HAL_I2C_MspInit+0x188>)
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <HAL_I2C_MspInit+0x18c>)
 8000848:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <HAL_I2C_MspInit+0x188>)
 800084c:	2222      	movs	r2, #34	; 0x22
 800084e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <HAL_I2C_MspInit+0x188>)
 8000852:	2240      	movs	r2, #64	; 0x40
 8000854:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <HAL_I2C_MspInit+0x188>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <HAL_I2C_MspInit+0x188>)
 800085e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000862:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_I2C_MspInit+0x188>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_I2C_MspInit+0x188>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_I2C_MspInit+0x188>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_I2C_MspInit+0x188>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_I2C_MspInit+0x188>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <HAL_I2C_MspInit+0x188>)
 8000884:	f000 fafa 	bl	8000e7c <HAL_DMA_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_I2C_MspInit+0x15e>
    {
      Error_Handler();
 800088e:	f7ff ff31 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a09      	ldr	r2, [pc, #36]	; (80008bc <HAL_I2C_MspInit+0x188>)
 8000896:	639a      	str	r2, [r3, #56]	; 0x38
 8000898:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_I2C_MspInit+0x188>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	37e0      	adds	r7, #224	; 0xe0
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40005400 	.word	0x40005400
 80008ac:	58024400 	.word	0x58024400
 80008b0:	58020400 	.word	0x58020400
 80008b4:	240000c8 	.word	0x240000c8
 80008b8:	40020010 	.word	0x40020010
 80008bc:	24000140 	.word	0x24000140
 80008c0:	40020028 	.word	0x40020028

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f960 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <DMA1_Stream0_IRQHandler+0x10>)
 800091e:	f000 fe3b 	bl	8001598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	240000c8 	.word	0x240000c8

0800092c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <DMA1_Stream1_IRQHandler+0x10>)
 8000932:	f000 fe31 	bl	8001598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	24000140 	.word	0x24000140

08000940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000948:	4a14      	ldr	r2, [pc, #80]	; (800099c <_sbrk+0x5c>)
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <_sbrk+0x60>)
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <_sbrk+0x64>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <_sbrk+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	d207      	bcs.n	8000980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000970:	f004 ff24 	bl	80057bc <__errno>
 8000974:	4603      	mov	r3, r0
 8000976:	220c      	movs	r2, #12
 8000978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	e009      	b.n	8000994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <_sbrk+0x64>)
 8000990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	24100000 	.word	0x24100000
 80009a0:	00000400 	.word	0x00000400
 80009a4:	240001b8 	.word	0x240001b8
 80009a8:	24000308 	.word	0x24000308

080009ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009b0:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <SystemInit+0xd0>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a31      	ldr	r2, [pc, #196]	; (8000a7c <SystemInit+0xd0>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009c0:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <SystemInit+0xd4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f003 030f 	and.w	r3, r3, #15
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d807      	bhi.n	80009dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009cc:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <SystemInit+0xd4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f023 030f 	bic.w	r3, r3, #15
 80009d4:	4a2a      	ldr	r2, [pc, #168]	; (8000a80 <SystemInit+0xd4>)
 80009d6:	f043 0303 	orr.w	r3, r3, #3
 80009da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <SystemInit+0xd8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a28      	ldr	r2, [pc, #160]	; (8000a84 <SystemInit+0xd8>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <SystemInit+0xd8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009ee:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <SystemInit+0xd8>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	4924      	ldr	r1, [pc, #144]	; (8000a84 <SystemInit+0xd8>)
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <SystemInit+0xdc>)
 80009f6:	4013      	ands	r3, r2
 80009f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <SystemInit+0xd4>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 030c 	and.w	r3, r3, #12
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d007      	beq.n	8000a16 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a06:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <SystemInit+0xd4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f023 030f 	bic.w	r3, r3, #15
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <SystemInit+0xd4>)
 8000a10:	f043 0303 	orr.w	r3, r3, #3
 8000a14:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <SystemInit+0xd8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <SystemInit+0xd8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <SystemInit+0xd8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <SystemInit+0xd8>)
 8000a2a:	4a18      	ldr	r2, [pc, #96]	; (8000a8c <SystemInit+0xe0>)
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <SystemInit+0xd8>)
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <SystemInit+0xe4>)
 8000a32:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <SystemInit+0xd8>)
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <SystemInit+0xe8>)
 8000a38:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <SystemInit+0xd8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <SystemInit+0xd8>)
 8000a42:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <SystemInit+0xe8>)
 8000a44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <SystemInit+0xd8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <SystemInit+0xd8>)
 8000a4e:	4a11      	ldr	r2, [pc, #68]	; (8000a94 <SystemInit+0xe8>)
 8000a50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <SystemInit+0xd8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <SystemInit+0xd8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <SystemInit+0xd8>)
 8000a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <SystemInit+0xd8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <SystemInit+0xec>)
 8000a6c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a70:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00
 8000a80:	52002000 	.word	0x52002000
 8000a84:	58024400 	.word	0x58024400
 8000a88:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a8c:	02020200 	.word	0x02020200
 8000a90:	01ff0000 	.word	0x01ff0000
 8000a94:	01010280 	.word	0x01010280
 8000a98:	52004000 	.word	0x52004000

08000a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa0:	f7ff ff84 	bl	80009ac <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aa6:	490d      	ldr	r1, [pc, #52]	; (8000adc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000abc:	4c0a      	ldr	r4, [pc, #40]	; (8000ae8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f004 fe7d 	bl	80057c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ace:	f7ff fc5f 	bl	8000390 <main>
  bx  lr
 8000ad2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000ad8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000adc:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000ae0:	08006144 	.word	0x08006144
  ldr r2, =_sbss
 8000ae4:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000ae8:	24000308 	.word	0x24000308

08000aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af6:	2003      	movs	r0, #3
 8000af8:	f000 f980 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000afc:	f003 fc4c 	bl	8004398 <HAL_RCC_GetSysClockFreq>
 8000b00:	4602      	mov	r2, r0
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_Init+0x68>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	0a1b      	lsrs	r3, r3, #8
 8000b08:	f003 030f 	and.w	r3, r3, #15
 8000b0c:	4913      	ldr	r1, [pc, #76]	; (8000b5c <HAL_Init+0x6c>)
 8000b0e:	5ccb      	ldrb	r3, [r1, r3]
 8000b10:	f003 031f 	and.w	r3, r3, #31
 8000b14:	fa22 f303 	lsr.w	r3, r2, r3
 8000b18:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_Init+0x68>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <HAL_Init+0x6c>)
 8000b24:	5cd3      	ldrb	r3, [r2, r3]
 8000b26:	f003 031f 	and.w	r3, r3, #31
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <HAL_Init+0x70>)
 8000b32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b34:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <HAL_Init+0x74>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f000 f814 	bl	8000b68 <HAL_InitTick>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e002      	b.n	8000b50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4a:	f7ff fdd9 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	080060f0 	.word	0x080060f0
 8000b60:	24000004 	.word	0x24000004
 8000b64:	24000000 	.word	0x24000000

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_InitTick+0x60>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d101      	bne.n	8000b7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e021      	b.n	8000bc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <HAL_InitTick+0x64>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_InitTick+0x60>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f965 	bl	8000e62 <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00e      	b.n	8000bc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d80a      	bhi.n	8000bbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f000 f92f 	bl	8000e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <HAL_InitTick+0x68>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2400000c 	.word	0x2400000c
 8000bcc:	24000000 	.word	0x24000000
 8000bd0:	24000008 	.word	0x24000008

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	2400000c 	.word	0x2400000c
 8000bf8:	240001bc 	.word	0x240001bc

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	240001bc 	.word	0x240001bc

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff ffee 	bl	8000bfc <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffde 	bl	8000bfc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2400000c 	.word	0x2400000c

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <__NVIC_SetPriorityGrouping+0x40>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	4313      	orrs	r3, r2
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x40>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	05fa0000 	.word	0x05fa0000

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <__NVIC_EnableIRQ+0x38>)
 8000cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f7ff ff8e 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff29 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff40 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff90 	bl	8000d50 <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5f 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff33 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa4 	bl	8000db8 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff feba 	bl	8000bfc <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e37d      	b.n	8001590 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a66      	ldr	r2, [pc, #408]	; (8001034 <HAL_DMA_Init+0x1b8>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d04a      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a65      	ldr	r2, [pc, #404]	; (8001038 <HAL_DMA_Init+0x1bc>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d045      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a63      	ldr	r2, [pc, #396]	; (800103c <HAL_DMA_Init+0x1c0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d040      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a62      	ldr	r2, [pc, #392]	; (8001040 <HAL_DMA_Init+0x1c4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d03b      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a60      	ldr	r2, [pc, #384]	; (8001044 <HAL_DMA_Init+0x1c8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d036      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a5f      	ldr	r2, [pc, #380]	; (8001048 <HAL_DMA_Init+0x1cc>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d031      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a5d      	ldr	r2, [pc, #372]	; (800104c <HAL_DMA_Init+0x1d0>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d02c      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a5c      	ldr	r2, [pc, #368]	; (8001050 <HAL_DMA_Init+0x1d4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d027      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a5a      	ldr	r2, [pc, #360]	; (8001054 <HAL_DMA_Init+0x1d8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d022      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a59      	ldr	r2, [pc, #356]	; (8001058 <HAL_DMA_Init+0x1dc>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d01d      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a57      	ldr	r2, [pc, #348]	; (800105c <HAL_DMA_Init+0x1e0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d018      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a56      	ldr	r2, [pc, #344]	; (8001060 <HAL_DMA_Init+0x1e4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d013      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a54      	ldr	r2, [pc, #336]	; (8001064 <HAL_DMA_Init+0x1e8>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00e      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a53      	ldr	r2, [pc, #332]	; (8001068 <HAL_DMA_Init+0x1ec>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d009      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a51      	ldr	r2, [pc, #324]	; (800106c <HAL_DMA_Init+0x1f0>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d004      	beq.n	8000f34 <HAL_DMA_Init+0xb8>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a50      	ldr	r2, [pc, #320]	; (8001070 <HAL_DMA_Init+0x1f4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d101      	bne.n	8000f38 <HAL_DMA_Init+0xbc>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <HAL_DMA_Init+0xbe>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 813c 	beq.w	80011b8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2202      	movs	r2, #2
 8000f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a37      	ldr	r2, [pc, #220]	; (8001034 <HAL_DMA_Init+0x1b8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d04a      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a36      	ldr	r2, [pc, #216]	; (8001038 <HAL_DMA_Init+0x1bc>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d045      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a34      	ldr	r2, [pc, #208]	; (800103c <HAL_DMA_Init+0x1c0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d040      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a33      	ldr	r2, [pc, #204]	; (8001040 <HAL_DMA_Init+0x1c4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d03b      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a31      	ldr	r2, [pc, #196]	; (8001044 <HAL_DMA_Init+0x1c8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d036      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a30      	ldr	r2, [pc, #192]	; (8001048 <HAL_DMA_Init+0x1cc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d031      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a2e      	ldr	r2, [pc, #184]	; (800104c <HAL_DMA_Init+0x1d0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d02c      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a2d      	ldr	r2, [pc, #180]	; (8001050 <HAL_DMA_Init+0x1d4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d027      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a2b      	ldr	r2, [pc, #172]	; (8001054 <HAL_DMA_Init+0x1d8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d022      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a2a      	ldr	r2, [pc, #168]	; (8001058 <HAL_DMA_Init+0x1dc>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d01d      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a28      	ldr	r2, [pc, #160]	; (800105c <HAL_DMA_Init+0x1e0>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d018      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a27      	ldr	r2, [pc, #156]	; (8001060 <HAL_DMA_Init+0x1e4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d013      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a25      	ldr	r2, [pc, #148]	; (8001064 <HAL_DMA_Init+0x1e8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00e      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a24      	ldr	r2, [pc, #144]	; (8001068 <HAL_DMA_Init+0x1ec>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d009      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a22      	ldr	r2, [pc, #136]	; (800106c <HAL_DMA_Init+0x1f0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d004      	beq.n	8000ff0 <HAL_DMA_Init+0x174>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a21      	ldr	r2, [pc, #132]	; (8001070 <HAL_DMA_Init+0x1f4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d108      	bne.n	8001002 <HAL_DMA_Init+0x186>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0201 	bic.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	e007      	b.n	8001012 <HAL_DMA_Init+0x196>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0201 	bic.w	r2, r2, #1
 8001010:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001012:	e02f      	b.n	8001074 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001014:	f7ff fdf2 	bl	8000bfc <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b05      	cmp	r3, #5
 8001020:	d928      	bls.n	8001074 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2220      	movs	r2, #32
 8001026:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e2ad      	b.n	8001590 <HAL_DMA_Init+0x714>
 8001034:	40020010 	.word	0x40020010
 8001038:	40020028 	.word	0x40020028
 800103c:	40020040 	.word	0x40020040
 8001040:	40020058 	.word	0x40020058
 8001044:	40020070 	.word	0x40020070
 8001048:	40020088 	.word	0x40020088
 800104c:	400200a0 	.word	0x400200a0
 8001050:	400200b8 	.word	0x400200b8
 8001054:	40020410 	.word	0x40020410
 8001058:	40020428 	.word	0x40020428
 800105c:	40020440 	.word	0x40020440
 8001060:	40020458 	.word	0x40020458
 8001064:	40020470 	.word	0x40020470
 8001068:	40020488 	.word	0x40020488
 800106c:	400204a0 	.word	0x400204a0
 8001070:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1c8      	bne.n	8001014 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4b73      	ldr	r3, [pc, #460]	; (800125c <HAL_DMA_Init+0x3e0>)
 800108e:	4013      	ands	r3, r2
 8001090:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800109a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4313      	orrs	r3, r2
 80010be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d107      	bne.n	80010d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	4313      	orrs	r3, r2
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b28      	cmp	r3, #40	; 0x28
 80010de:	d903      	bls.n	80010e8 <HAL_DMA_Init+0x26c>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b2e      	cmp	r3, #46	; 0x2e
 80010e6:	d91f      	bls.n	8001128 <HAL_DMA_Init+0x2ac>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b3e      	cmp	r3, #62	; 0x3e
 80010ee:	d903      	bls.n	80010f8 <HAL_DMA_Init+0x27c>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b42      	cmp	r3, #66	; 0x42
 80010f6:	d917      	bls.n	8001128 <HAL_DMA_Init+0x2ac>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b46      	cmp	r3, #70	; 0x46
 80010fe:	d903      	bls.n	8001108 <HAL_DMA_Init+0x28c>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b48      	cmp	r3, #72	; 0x48
 8001106:	d90f      	bls.n	8001128 <HAL_DMA_Init+0x2ac>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b4e      	cmp	r3, #78	; 0x4e
 800110e:	d903      	bls.n	8001118 <HAL_DMA_Init+0x29c>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b52      	cmp	r3, #82	; 0x52
 8001116:	d907      	bls.n	8001128 <HAL_DMA_Init+0x2ac>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b73      	cmp	r3, #115	; 0x73
 800111e:	d905      	bls.n	800112c <HAL_DMA_Init+0x2b0>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b77      	cmp	r3, #119	; 0x77
 8001126:	d801      	bhi.n	800112c <HAL_DMA_Init+0x2b0>
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <HAL_DMA_Init+0x2b2>
 800112c:	2300      	movs	r3, #0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001138:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f023 0307 	bic.w	r3, r3, #7
 8001150:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4313      	orrs	r3, r2
 800115a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	2b04      	cmp	r3, #4
 8001162:	d117      	bne.n	8001194 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	4313      	orrs	r3, r2
 800116c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00e      	beq.n	8001194 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f001 fa22 	bl	80025c0 <DMA_CheckFifoParam>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d008      	beq.n	8001194 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2240      	movs	r2, #64	; 0x40
 8001186:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e1fd      	b.n	8001590 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f001 f95d 	bl	800245c <DMA_CalcBaseAndBitshift>
 80011a2:	4603      	mov	r3, r0
 80011a4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	223f      	movs	r2, #63	; 0x3f
 80011b0:	409a      	lsls	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	e0fd      	b.n	80013b4 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a28      	ldr	r2, [pc, #160]	; (8001260 <HAL_DMA_Init+0x3e4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d04a      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a27      	ldr	r2, [pc, #156]	; (8001264 <HAL_DMA_Init+0x3e8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d045      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_DMA_Init+0x3ec>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d040      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a24      	ldr	r2, [pc, #144]	; (800126c <HAL_DMA_Init+0x3f0>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d03b      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a22      	ldr	r2, [pc, #136]	; (8001270 <HAL_DMA_Init+0x3f4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d036      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a21      	ldr	r2, [pc, #132]	; (8001274 <HAL_DMA_Init+0x3f8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d031      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <HAL_DMA_Init+0x3fc>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d02c      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1e      	ldr	r2, [pc, #120]	; (800127c <HAL_DMA_Init+0x400>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d027      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <HAL_DMA_Init+0x404>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d022      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <HAL_DMA_Init+0x408>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d01d      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a19      	ldr	r2, [pc, #100]	; (8001288 <HAL_DMA_Init+0x40c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d018      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a18      	ldr	r2, [pc, #96]	; (800128c <HAL_DMA_Init+0x410>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d013      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a16      	ldr	r2, [pc, #88]	; (8001290 <HAL_DMA_Init+0x414>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00e      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <HAL_DMA_Init+0x418>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d009      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a13      	ldr	r2, [pc, #76]	; (8001298 <HAL_DMA_Init+0x41c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d004      	beq.n	8001258 <HAL_DMA_Init+0x3dc>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <HAL_DMA_Init+0x420>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d123      	bne.n	80012a0 <HAL_DMA_Init+0x424>
 8001258:	2301      	movs	r3, #1
 800125a:	e022      	b.n	80012a2 <HAL_DMA_Init+0x426>
 800125c:	fe10803f 	.word	0xfe10803f
 8001260:	48022c08 	.word	0x48022c08
 8001264:	48022c1c 	.word	0x48022c1c
 8001268:	48022c30 	.word	0x48022c30
 800126c:	48022c44 	.word	0x48022c44
 8001270:	48022c58 	.word	0x48022c58
 8001274:	48022c6c 	.word	0x48022c6c
 8001278:	48022c80 	.word	0x48022c80
 800127c:	48022c94 	.word	0x48022c94
 8001280:	58025408 	.word	0x58025408
 8001284:	5802541c 	.word	0x5802541c
 8001288:	58025430 	.word	0x58025430
 800128c:	58025444 	.word	0x58025444
 8001290:	58025458 	.word	0x58025458
 8001294:	5802546c 	.word	0x5802546c
 8001298:	58025480 	.word	0x58025480
 800129c:	58025494 	.word	0x58025494
 80012a0:	2300      	movs	r3, #0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d07d      	beq.n	80013a2 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a7f      	ldr	r2, [pc, #508]	; (80014a8 <HAL_DMA_Init+0x62c>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d021      	beq.n	80012f4 <HAL_DMA_Init+0x478>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a7d      	ldr	r2, [pc, #500]	; (80014ac <HAL_DMA_Init+0x630>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d01c      	beq.n	80012f4 <HAL_DMA_Init+0x478>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a7c      	ldr	r2, [pc, #496]	; (80014b0 <HAL_DMA_Init+0x634>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d017      	beq.n	80012f4 <HAL_DMA_Init+0x478>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a7a      	ldr	r2, [pc, #488]	; (80014b4 <HAL_DMA_Init+0x638>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d012      	beq.n	80012f4 <HAL_DMA_Init+0x478>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a79      	ldr	r2, [pc, #484]	; (80014b8 <HAL_DMA_Init+0x63c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d00d      	beq.n	80012f4 <HAL_DMA_Init+0x478>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a77      	ldr	r2, [pc, #476]	; (80014bc <HAL_DMA_Init+0x640>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d008      	beq.n	80012f4 <HAL_DMA_Init+0x478>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a76      	ldr	r2, [pc, #472]	; (80014c0 <HAL_DMA_Init+0x644>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d003      	beq.n	80012f4 <HAL_DMA_Init+0x478>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a74      	ldr	r2, [pc, #464]	; (80014c4 <HAL_DMA_Init+0x648>)
 80012f2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2202      	movs	r2, #2
 80012f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <HAL_DMA_Init+0x64c>)
 8001310:	4013      	ands	r3, r2
 8001312:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2b40      	cmp	r3, #64	; 0x40
 800131a:	d008      	beq.n	800132e <HAL_DMA_Init+0x4b2>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b80      	cmp	r3, #128	; 0x80
 8001322:	d102      	bne.n	800132a <HAL_DMA_Init+0x4ae>
 8001324:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001328:	e002      	b.n	8001330 <HAL_DMA_Init+0x4b4>
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_DMA_Init+0x4b4>
 800132e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	68d2      	ldr	r2, [r2, #12]
 8001334:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001336:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800133e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001346:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800134e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001356:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800135e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	4313      	orrs	r3, r2
 8001364:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	4b55      	ldr	r3, [pc, #340]	; (80014cc <HAL_DMA_Init+0x650>)
 8001376:	4413      	add	r3, r2
 8001378:	4a55      	ldr	r2, [pc, #340]	; (80014d0 <HAL_DMA_Init+0x654>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	009a      	lsls	r2, r3, #2
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f001 f868 	bl	800245c <DMA_CalcBaseAndBitshift>
 800138c:	4603      	mov	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	2201      	movs	r2, #1
 800139a:	409a      	lsls	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	e008      	b.n	80013b4 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2240      	movs	r2, #64	; 0x40
 80013a6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2203      	movs	r2, #3
 80013ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0ed      	b.n	8001590 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a46      	ldr	r2, [pc, #280]	; (80014d4 <HAL_DMA_Init+0x658>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d072      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a45      	ldr	r2, [pc, #276]	; (80014d8 <HAL_DMA_Init+0x65c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d06d      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a43      	ldr	r2, [pc, #268]	; (80014dc <HAL_DMA_Init+0x660>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d068      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a42      	ldr	r2, [pc, #264]	; (80014e0 <HAL_DMA_Init+0x664>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d063      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a40      	ldr	r2, [pc, #256]	; (80014e4 <HAL_DMA_Init+0x668>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d05e      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a3f      	ldr	r2, [pc, #252]	; (80014e8 <HAL_DMA_Init+0x66c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d059      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a3d      	ldr	r2, [pc, #244]	; (80014ec <HAL_DMA_Init+0x670>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d054      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a3c      	ldr	r2, [pc, #240]	; (80014f0 <HAL_DMA_Init+0x674>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d04f      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a3a      	ldr	r2, [pc, #232]	; (80014f4 <HAL_DMA_Init+0x678>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d04a      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a39      	ldr	r2, [pc, #228]	; (80014f8 <HAL_DMA_Init+0x67c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d045      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a37      	ldr	r2, [pc, #220]	; (80014fc <HAL_DMA_Init+0x680>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d040      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a36      	ldr	r2, [pc, #216]	; (8001500 <HAL_DMA_Init+0x684>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d03b      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a34      	ldr	r2, [pc, #208]	; (8001504 <HAL_DMA_Init+0x688>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d036      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a33      	ldr	r2, [pc, #204]	; (8001508 <HAL_DMA_Init+0x68c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d031      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a31      	ldr	r2, [pc, #196]	; (800150c <HAL_DMA_Init+0x690>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d02c      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a30      	ldr	r2, [pc, #192]	; (8001510 <HAL_DMA_Init+0x694>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d027      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <HAL_DMA_Init+0x62c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d022      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <HAL_DMA_Init+0x630>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d01d      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <HAL_DMA_Init+0x634>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d018      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <HAL_DMA_Init+0x638>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d013      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <HAL_DMA_Init+0x63c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d00e      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <HAL_DMA_Init+0x640>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d009      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <HAL_DMA_Init+0x644>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d004      	beq.n	80014a4 <HAL_DMA_Init+0x628>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <HAL_DMA_Init+0x648>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d137      	bne.n	8001514 <HAL_DMA_Init+0x698>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e036      	b.n	8001516 <HAL_DMA_Init+0x69a>
 80014a8:	58025408 	.word	0x58025408
 80014ac:	5802541c 	.word	0x5802541c
 80014b0:	58025430 	.word	0x58025430
 80014b4:	58025444 	.word	0x58025444
 80014b8:	58025458 	.word	0x58025458
 80014bc:	5802546c 	.word	0x5802546c
 80014c0:	58025480 	.word	0x58025480
 80014c4:	58025494 	.word	0x58025494
 80014c8:	fffe000f 	.word	0xfffe000f
 80014cc:	a7fdabf8 	.word	0xa7fdabf8
 80014d0:	cccccccd 	.word	0xcccccccd
 80014d4:	40020010 	.word	0x40020010
 80014d8:	40020028 	.word	0x40020028
 80014dc:	40020040 	.word	0x40020040
 80014e0:	40020058 	.word	0x40020058
 80014e4:	40020070 	.word	0x40020070
 80014e8:	40020088 	.word	0x40020088
 80014ec:	400200a0 	.word	0x400200a0
 80014f0:	400200b8 	.word	0x400200b8
 80014f4:	40020410 	.word	0x40020410
 80014f8:	40020428 	.word	0x40020428
 80014fc:	40020440 	.word	0x40020440
 8001500:	40020458 	.word	0x40020458
 8001504:	40020470 	.word	0x40020470
 8001508:	40020488 	.word	0x40020488
 800150c:	400204a0 	.word	0x400204a0
 8001510:	400204b8 	.word	0x400204b8
 8001514:	2300      	movs	r3, #0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d032      	beq.n	8001580 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f001 f8cc 	bl	80026b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b80      	cmp	r3, #128	; 0x80
 8001526:	d102      	bne.n	800152e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001542:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d010      	beq.n	800156e <HAL_DMA_Init+0x6f2>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d80c      	bhi.n	800156e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f001 f949 	bl	80027ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	e008      	b.n	8001580 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015a4:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_DMA_IRQHandler+0x1ac>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a67      	ldr	r2, [pc, #412]	; (8001748 <HAL_DMA_IRQHandler+0x1b0>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	0a9b      	lsrs	r3, r3, #10
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a5f      	ldr	r2, [pc, #380]	; (800174c <HAL_DMA_IRQHandler+0x1b4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d04a      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a5d      	ldr	r2, [pc, #372]	; (8001750 <HAL_DMA_IRQHandler+0x1b8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d045      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a5c      	ldr	r2, [pc, #368]	; (8001754 <HAL_DMA_IRQHandler+0x1bc>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d040      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a5a      	ldr	r2, [pc, #360]	; (8001758 <HAL_DMA_IRQHandler+0x1c0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d03b      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a59      	ldr	r2, [pc, #356]	; (800175c <HAL_DMA_IRQHandler+0x1c4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d036      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a57      	ldr	r2, [pc, #348]	; (8001760 <HAL_DMA_IRQHandler+0x1c8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d031      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a56      	ldr	r2, [pc, #344]	; (8001764 <HAL_DMA_IRQHandler+0x1cc>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d02c      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a54      	ldr	r2, [pc, #336]	; (8001768 <HAL_DMA_IRQHandler+0x1d0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d027      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a53      	ldr	r2, [pc, #332]	; (800176c <HAL_DMA_IRQHandler+0x1d4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d022      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a51      	ldr	r2, [pc, #324]	; (8001770 <HAL_DMA_IRQHandler+0x1d8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d01d      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a50      	ldr	r2, [pc, #320]	; (8001774 <HAL_DMA_IRQHandler+0x1dc>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d018      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a4e      	ldr	r2, [pc, #312]	; (8001778 <HAL_DMA_IRQHandler+0x1e0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d013      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a4d      	ldr	r2, [pc, #308]	; (800177c <HAL_DMA_IRQHandler+0x1e4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d00e      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a4b      	ldr	r2, [pc, #300]	; (8001780 <HAL_DMA_IRQHandler+0x1e8>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d009      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a4a      	ldr	r2, [pc, #296]	; (8001784 <HAL_DMA_IRQHandler+0x1ec>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d004      	beq.n	800166a <HAL_DMA_IRQHandler+0xd2>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a48      	ldr	r2, [pc, #288]	; (8001788 <HAL_DMA_IRQHandler+0x1f0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_DMA_IRQHandler+0xd6>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_DMA_IRQHandler+0xd8>
 800166e:	2300      	movs	r3, #0
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 842b 	beq.w	8001ecc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	2208      	movs	r2, #8
 8001680:	409a      	lsls	r2, r3
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80a2 	beq.w	80017d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a2e      	ldr	r2, [pc, #184]	; (800174c <HAL_DMA_IRQHandler+0x1b4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d04a      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <HAL_DMA_IRQHandler+0x1b8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d045      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a2b      	ldr	r2, [pc, #172]	; (8001754 <HAL_DMA_IRQHandler+0x1bc>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d040      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a2a      	ldr	r2, [pc, #168]	; (8001758 <HAL_DMA_IRQHandler+0x1c0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d03b      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a28      	ldr	r2, [pc, #160]	; (800175c <HAL_DMA_IRQHandler+0x1c4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d036      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a27      	ldr	r2, [pc, #156]	; (8001760 <HAL_DMA_IRQHandler+0x1c8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d031      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a25      	ldr	r2, [pc, #148]	; (8001764 <HAL_DMA_IRQHandler+0x1cc>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d02c      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a24      	ldr	r2, [pc, #144]	; (8001768 <HAL_DMA_IRQHandler+0x1d0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d027      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a22      	ldr	r2, [pc, #136]	; (800176c <HAL_DMA_IRQHandler+0x1d4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d022      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a21      	ldr	r2, [pc, #132]	; (8001770 <HAL_DMA_IRQHandler+0x1d8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d01d      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <HAL_DMA_IRQHandler+0x1dc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d018      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <HAL_DMA_IRQHandler+0x1e0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d013      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1c      	ldr	r2, [pc, #112]	; (800177c <HAL_DMA_IRQHandler+0x1e4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00e      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <HAL_DMA_IRQHandler+0x1e8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d009      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a19      	ldr	r2, [pc, #100]	; (8001784 <HAL_DMA_IRQHandler+0x1ec>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d004      	beq.n	800172c <HAL_DMA_IRQHandler+0x194>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <HAL_DMA_IRQHandler+0x1f0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d12f      	bne.n	800178c <HAL_DMA_IRQHandler+0x1f4>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	b2db      	uxtb	r3, r3
 8001740:	e02e      	b.n	80017a0 <HAL_DMA_IRQHandler+0x208>
 8001742:	bf00      	nop
 8001744:	24000000 	.word	0x24000000
 8001748:	1b4e81b5 	.word	0x1b4e81b5
 800174c:	40020010 	.word	0x40020010
 8001750:	40020028 	.word	0x40020028
 8001754:	40020040 	.word	0x40020040
 8001758:	40020058 	.word	0x40020058
 800175c:	40020070 	.word	0x40020070
 8001760:	40020088 	.word	0x40020088
 8001764:	400200a0 	.word	0x400200a0
 8001768:	400200b8 	.word	0x400200b8
 800176c:	40020410 	.word	0x40020410
 8001770:	40020428 	.word	0x40020428
 8001774:	40020440 	.word	0x40020440
 8001778:	40020458 	.word	0x40020458
 800177c:	40020470 	.word	0x40020470
 8001780:	40020488 	.word	0x40020488
 8001784:	400204a0 	.word	0x400204a0
 8001788:	400204b8 	.word	0x400204b8
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	bf14      	ite	ne
 800179a:	2301      	movne	r3, #1
 800179c:	2300      	moveq	r3, #0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d015      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0204 	bic.w	r2, r2, #4
 80017b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	2208      	movs	r2, #8
 80017be:	409a      	lsls	r2, r3
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	fa22 f303 	lsr.w	r3, r2, r3
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d06e      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a69      	ldr	r2, [pc, #420]	; (8001990 <HAL_DMA_IRQHandler+0x3f8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d04a      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a67      	ldr	r2, [pc, #412]	; (8001994 <HAL_DMA_IRQHandler+0x3fc>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d045      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a66      	ldr	r2, [pc, #408]	; (8001998 <HAL_DMA_IRQHandler+0x400>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d040      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a64      	ldr	r2, [pc, #400]	; (800199c <HAL_DMA_IRQHandler+0x404>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d03b      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a63      	ldr	r2, [pc, #396]	; (80019a0 <HAL_DMA_IRQHandler+0x408>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d036      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a61      	ldr	r2, [pc, #388]	; (80019a4 <HAL_DMA_IRQHandler+0x40c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d031      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a60      	ldr	r2, [pc, #384]	; (80019a8 <HAL_DMA_IRQHandler+0x410>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d02c      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a5e      	ldr	r2, [pc, #376]	; (80019ac <HAL_DMA_IRQHandler+0x414>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d027      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a5d      	ldr	r2, [pc, #372]	; (80019b0 <HAL_DMA_IRQHandler+0x418>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d022      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a5b      	ldr	r2, [pc, #364]	; (80019b4 <HAL_DMA_IRQHandler+0x41c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d01d      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a5a      	ldr	r2, [pc, #360]	; (80019b8 <HAL_DMA_IRQHandler+0x420>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d018      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a58      	ldr	r2, [pc, #352]	; (80019bc <HAL_DMA_IRQHandler+0x424>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a57      	ldr	r2, [pc, #348]	; (80019c0 <HAL_DMA_IRQHandler+0x428>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00e      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a55      	ldr	r2, [pc, #340]	; (80019c4 <HAL_DMA_IRQHandler+0x42c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d009      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a54      	ldr	r2, [pc, #336]	; (80019c8 <HAL_DMA_IRQHandler+0x430>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d004      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2ee>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a52      	ldr	r2, [pc, #328]	; (80019cc <HAL_DMA_IRQHandler+0x434>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d10a      	bne.n	800189c <HAL_DMA_IRQHandler+0x304>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	e003      	b.n	80018a4 <HAL_DMA_IRQHandler+0x30c>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2300      	movs	r3, #0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00d      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ac:	f003 031f 	and.w	r3, r3, #31
 80018b0:	2201      	movs	r2, #1
 80018b2:	409a      	lsls	r2, r3
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018bc:	f043 0202 	orr.w	r2, r3, #2
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2204      	movs	r2, #4
 80018ce:	409a      	lsls	r2, r3
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 808f 	beq.w	80019f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a2c      	ldr	r2, [pc, #176]	; (8001990 <HAL_DMA_IRQHandler+0x3f8>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d04a      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2a      	ldr	r2, [pc, #168]	; (8001994 <HAL_DMA_IRQHandler+0x3fc>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d045      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a29      	ldr	r2, [pc, #164]	; (8001998 <HAL_DMA_IRQHandler+0x400>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d040      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a27      	ldr	r2, [pc, #156]	; (800199c <HAL_DMA_IRQHandler+0x404>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d03b      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <HAL_DMA_IRQHandler+0x408>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d036      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a24      	ldr	r2, [pc, #144]	; (80019a4 <HAL_DMA_IRQHandler+0x40c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d031      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a23      	ldr	r2, [pc, #140]	; (80019a8 <HAL_DMA_IRQHandler+0x410>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d02c      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a21      	ldr	r2, [pc, #132]	; (80019ac <HAL_DMA_IRQHandler+0x414>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d027      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a20      	ldr	r2, [pc, #128]	; (80019b0 <HAL_DMA_IRQHandler+0x418>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d022      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <HAL_DMA_IRQHandler+0x41c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d01d      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <HAL_DMA_IRQHandler+0x420>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d018      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1b      	ldr	r2, [pc, #108]	; (80019bc <HAL_DMA_IRQHandler+0x424>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1a      	ldr	r2, [pc, #104]	; (80019c0 <HAL_DMA_IRQHandler+0x428>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d00e      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <HAL_DMA_IRQHandler+0x42c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d009      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <HAL_DMA_IRQHandler+0x430>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d004      	beq.n	800197a <HAL_DMA_IRQHandler+0x3e2>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a15      	ldr	r2, [pc, #84]	; (80019cc <HAL_DMA_IRQHandler+0x434>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d12a      	bne.n	80019d0 <HAL_DMA_IRQHandler+0x438>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	e023      	b.n	80019d8 <HAL_DMA_IRQHandler+0x440>
 8001990:	40020010 	.word	0x40020010
 8001994:	40020028 	.word	0x40020028
 8001998:	40020040 	.word	0x40020040
 800199c:	40020058 	.word	0x40020058
 80019a0:	40020070 	.word	0x40020070
 80019a4:	40020088 	.word	0x40020088
 80019a8:	400200a0 	.word	0x400200a0
 80019ac:	400200b8 	.word	0x400200b8
 80019b0:	40020410 	.word	0x40020410
 80019b4:	40020428 	.word	0x40020428
 80019b8:	40020440 	.word	0x40020440
 80019bc:	40020458 	.word	0x40020458
 80019c0:	40020470 	.word	0x40020470
 80019c4:	40020488 	.word	0x40020488
 80019c8:	400204a0 	.word	0x400204a0
 80019cc:	400204b8 	.word	0x400204b8
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2300      	movs	r3, #0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00d      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2204      	movs	r2, #4
 80019e6:	409a      	lsls	r2, r3
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f0:	f043 0204 	orr.w	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	2210      	movs	r2, #16
 8001a02:	409a      	lsls	r2, r3
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80a6 	beq.w	8001b5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a85      	ldr	r2, [pc, #532]	; (8001c28 <HAL_DMA_IRQHandler+0x690>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d04a      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a83      	ldr	r2, [pc, #524]	; (8001c2c <HAL_DMA_IRQHandler+0x694>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d045      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a82      	ldr	r2, [pc, #520]	; (8001c30 <HAL_DMA_IRQHandler+0x698>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d040      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a80      	ldr	r2, [pc, #512]	; (8001c34 <HAL_DMA_IRQHandler+0x69c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d03b      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a7f      	ldr	r2, [pc, #508]	; (8001c38 <HAL_DMA_IRQHandler+0x6a0>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d036      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a7d      	ldr	r2, [pc, #500]	; (8001c3c <HAL_DMA_IRQHandler+0x6a4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d031      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a7c      	ldr	r2, [pc, #496]	; (8001c40 <HAL_DMA_IRQHandler+0x6a8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d02c      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a7a      	ldr	r2, [pc, #488]	; (8001c44 <HAL_DMA_IRQHandler+0x6ac>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d027      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a79      	ldr	r2, [pc, #484]	; (8001c48 <HAL_DMA_IRQHandler+0x6b0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d022      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a77      	ldr	r2, [pc, #476]	; (8001c4c <HAL_DMA_IRQHandler+0x6b4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01d      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a76      	ldr	r2, [pc, #472]	; (8001c50 <HAL_DMA_IRQHandler+0x6b8>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d018      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a74      	ldr	r2, [pc, #464]	; (8001c54 <HAL_DMA_IRQHandler+0x6bc>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a73      	ldr	r2, [pc, #460]	; (8001c58 <HAL_DMA_IRQHandler+0x6c0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d00e      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a71      	ldr	r2, [pc, #452]	; (8001c5c <HAL_DMA_IRQHandler+0x6c4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d009      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a70      	ldr	r2, [pc, #448]	; (8001c60 <HAL_DMA_IRQHandler+0x6c8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d004      	beq.n	8001aae <HAL_DMA_IRQHandler+0x516>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a6e      	ldr	r2, [pc, #440]	; (8001c64 <HAL_DMA_IRQHandler+0x6cc>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d10a      	bne.n	8001ac4 <HAL_DMA_IRQHandler+0x52c>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf14      	ite	ne
 8001abc:	2301      	movne	r3, #1
 8001abe:	2300      	moveq	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	e009      	b.n	8001ad8 <HAL_DMA_IRQHandler+0x540>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf14      	ite	ne
 8001ad2:	2301      	movne	r3, #1
 8001ad4:	2300      	moveq	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d03e      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	2210      	movs	r2, #16
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d018      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d108      	bne.n	8001b1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d024      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	4798      	blx	r3
 8001b18:	e01f      	b.n	8001b5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d01b      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	4798      	blx	r3
 8001b2a:	e016      	b.n	8001b5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d107      	bne.n	8001b4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0208 	bic.w	r2, r2, #8
 8001b48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	2220      	movs	r2, #32
 8001b64:	409a      	lsls	r2, r3
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8110 	beq.w	8001d90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a2c      	ldr	r2, [pc, #176]	; (8001c28 <HAL_DMA_IRQHandler+0x690>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d04a      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a2b      	ldr	r2, [pc, #172]	; (8001c2c <HAL_DMA_IRQHandler+0x694>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d045      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <HAL_DMA_IRQHandler+0x698>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d040      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <HAL_DMA_IRQHandler+0x69c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d03b      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a26      	ldr	r2, [pc, #152]	; (8001c38 <HAL_DMA_IRQHandler+0x6a0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d036      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a25      	ldr	r2, [pc, #148]	; (8001c3c <HAL_DMA_IRQHandler+0x6a4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d031      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a23      	ldr	r2, [pc, #140]	; (8001c40 <HAL_DMA_IRQHandler+0x6a8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d02c      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a22      	ldr	r2, [pc, #136]	; (8001c44 <HAL_DMA_IRQHandler+0x6ac>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d027      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a20      	ldr	r2, [pc, #128]	; (8001c48 <HAL_DMA_IRQHandler+0x6b0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d022      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1f      	ldr	r2, [pc, #124]	; (8001c4c <HAL_DMA_IRQHandler+0x6b4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d01d      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <HAL_DMA_IRQHandler+0x6b8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d018      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a1c      	ldr	r2, [pc, #112]	; (8001c54 <HAL_DMA_IRQHandler+0x6bc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d013      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <HAL_DMA_IRQHandler+0x6c0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00e      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_DMA_IRQHandler+0x6c4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d009      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_DMA_IRQHandler+0x6c8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d004      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x678>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a16      	ldr	r2, [pc, #88]	; (8001c64 <HAL_DMA_IRQHandler+0x6cc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d12b      	bne.n	8001c68 <HAL_DMA_IRQHandler+0x6d0>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bf14      	ite	ne
 8001c1e:	2301      	movne	r3, #1
 8001c20:	2300      	moveq	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	e02a      	b.n	8001c7c <HAL_DMA_IRQHandler+0x6e4>
 8001c26:	bf00      	nop
 8001c28:	40020010 	.word	0x40020010
 8001c2c:	40020028 	.word	0x40020028
 8001c30:	40020040 	.word	0x40020040
 8001c34:	40020058 	.word	0x40020058
 8001c38:	40020070 	.word	0x40020070
 8001c3c:	40020088 	.word	0x40020088
 8001c40:	400200a0 	.word	0x400200a0
 8001c44:	400200b8 	.word	0x400200b8
 8001c48:	40020410 	.word	0x40020410
 8001c4c:	40020428 	.word	0x40020428
 8001c50:	40020440 	.word	0x40020440
 8001c54:	40020458 	.word	0x40020458
 8001c58:	40020470 	.word	0x40020470
 8001c5c:	40020488 	.word	0x40020488
 8001c60:	400204a0 	.word	0x400204a0
 8001c64:	400204b8 	.word	0x400204b8
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf14      	ite	ne
 8001c76:	2301      	movne	r3, #1
 8001c78:	2300      	moveq	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8087 	beq.w	8001d90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d139      	bne.n	8001d12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0216 	bic.w	r2, r2, #22
 8001cac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cbc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d103      	bne.n	8001cce <HAL_DMA_IRQHandler+0x736>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0208 	bic.w	r2, r2, #8
 8001cdc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	223f      	movs	r2, #63	; 0x3f
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 8382 	beq.w	800240c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4798      	blx	r3
          }
          return;
 8001d10:	e37c      	b.n	800240c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d018      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d108      	bne.n	8001d40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d02c      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	4798      	blx	r3
 8001d3e:	e027      	b.n	8001d90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d023      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	4798      	blx	r3
 8001d50:	e01e      	b.n	8001d90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10f      	bne.n	8001d80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0210 	bic.w	r2, r2, #16
 8001d6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 833e 	beq.w	8002416 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8088 	beq.w	8001eb8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2204      	movs	r2, #4
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a89      	ldr	r2, [pc, #548]	; (8001fdc <HAL_DMA_IRQHandler+0xa44>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d04a      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a88      	ldr	r2, [pc, #544]	; (8001fe0 <HAL_DMA_IRQHandler+0xa48>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d045      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a86      	ldr	r2, [pc, #536]	; (8001fe4 <HAL_DMA_IRQHandler+0xa4c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d040      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a85      	ldr	r2, [pc, #532]	; (8001fe8 <HAL_DMA_IRQHandler+0xa50>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d03b      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a83      	ldr	r2, [pc, #524]	; (8001fec <HAL_DMA_IRQHandler+0xa54>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d036      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a82      	ldr	r2, [pc, #520]	; (8001ff0 <HAL_DMA_IRQHandler+0xa58>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d031      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a80      	ldr	r2, [pc, #512]	; (8001ff4 <HAL_DMA_IRQHandler+0xa5c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d02c      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a7f      	ldr	r2, [pc, #508]	; (8001ff8 <HAL_DMA_IRQHandler+0xa60>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d027      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a7d      	ldr	r2, [pc, #500]	; (8001ffc <HAL_DMA_IRQHandler+0xa64>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d022      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a7c      	ldr	r2, [pc, #496]	; (8002000 <HAL_DMA_IRQHandler+0xa68>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d01d      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a7a      	ldr	r2, [pc, #488]	; (8002004 <HAL_DMA_IRQHandler+0xa6c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d018      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a79      	ldr	r2, [pc, #484]	; (8002008 <HAL_DMA_IRQHandler+0xa70>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d013      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a77      	ldr	r2, [pc, #476]	; (800200c <HAL_DMA_IRQHandler+0xa74>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00e      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a76      	ldr	r2, [pc, #472]	; (8002010 <HAL_DMA_IRQHandler+0xa78>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d009      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a74      	ldr	r2, [pc, #464]	; (8002014 <HAL_DMA_IRQHandler+0xa7c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d004      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x8b8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a73      	ldr	r2, [pc, #460]	; (8002018 <HAL_DMA_IRQHandler+0xa80>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d108      	bne.n	8001e62 <HAL_DMA_IRQHandler+0x8ca>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	e007      	b.n	8001e72 <HAL_DMA_IRQHandler+0x8da>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0201 	bic.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3301      	adds	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d307      	bcc.n	8001e8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f2      	bne.n	8001e72 <HAL_DMA_IRQHandler+0x8da>
 8001e8c:	e000      	b.n	8001e90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001e8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001ea6:	e003      	b.n	8001eb0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 82aa 	beq.w	8002416 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	4798      	blx	r3
 8001eca:	e2a4      	b.n	8002416 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_DMA_IRQHandler+0xa84>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d04a      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a51      	ldr	r2, [pc, #324]	; (8002020 <HAL_DMA_IRQHandler+0xa88>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d045      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a4f      	ldr	r2, [pc, #316]	; (8002024 <HAL_DMA_IRQHandler+0xa8c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d040      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a4e      	ldr	r2, [pc, #312]	; (8002028 <HAL_DMA_IRQHandler+0xa90>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d03b      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a4c      	ldr	r2, [pc, #304]	; (800202c <HAL_DMA_IRQHandler+0xa94>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d036      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a4b      	ldr	r2, [pc, #300]	; (8002030 <HAL_DMA_IRQHandler+0xa98>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d031      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a49      	ldr	r2, [pc, #292]	; (8002034 <HAL_DMA_IRQHandler+0xa9c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d02c      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a48      	ldr	r2, [pc, #288]	; (8002038 <HAL_DMA_IRQHandler+0xaa0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d027      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a46      	ldr	r2, [pc, #280]	; (800203c <HAL_DMA_IRQHandler+0xaa4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d022      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a45      	ldr	r2, [pc, #276]	; (8002040 <HAL_DMA_IRQHandler+0xaa8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d01d      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a43      	ldr	r2, [pc, #268]	; (8002044 <HAL_DMA_IRQHandler+0xaac>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d018      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a42      	ldr	r2, [pc, #264]	; (8002048 <HAL_DMA_IRQHandler+0xab0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d013      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a40      	ldr	r2, [pc, #256]	; (800204c <HAL_DMA_IRQHandler+0xab4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00e      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a3f      	ldr	r2, [pc, #252]	; (8002050 <HAL_DMA_IRQHandler+0xab8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d009      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a3d      	ldr	r2, [pc, #244]	; (8002054 <HAL_DMA_IRQHandler+0xabc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d004      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x9d4>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a3c      	ldr	r2, [pc, #240]	; (8002058 <HAL_DMA_IRQHandler+0xac0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d101      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x9d8>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_DMA_IRQHandler+0x9da>
 8001f70:	2300      	movs	r3, #0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 824f 	beq.w	8002416 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	2204      	movs	r2, #4
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80dd 	beq.w	8002150 <HAL_DMA_IRQHandler+0xbb8>
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80d7 	beq.w	8002150 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	2204      	movs	r2, #4
 8001fac:	409a      	lsls	r2, r3
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d059      	beq.n	8002070 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d14a      	bne.n	800205c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8220 	beq.w	8002410 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001fd8:	e21a      	b.n	8002410 <HAL_DMA_IRQHandler+0xe78>
 8001fda:	bf00      	nop
 8001fdc:	40020010 	.word	0x40020010
 8001fe0:	40020028 	.word	0x40020028
 8001fe4:	40020040 	.word	0x40020040
 8001fe8:	40020058 	.word	0x40020058
 8001fec:	40020070 	.word	0x40020070
 8001ff0:	40020088 	.word	0x40020088
 8001ff4:	400200a0 	.word	0x400200a0
 8001ff8:	400200b8 	.word	0x400200b8
 8001ffc:	40020410 	.word	0x40020410
 8002000:	40020428 	.word	0x40020428
 8002004:	40020440 	.word	0x40020440
 8002008:	40020458 	.word	0x40020458
 800200c:	40020470 	.word	0x40020470
 8002010:	40020488 	.word	0x40020488
 8002014:	400204a0 	.word	0x400204a0
 8002018:	400204b8 	.word	0x400204b8
 800201c:	48022c08 	.word	0x48022c08
 8002020:	48022c1c 	.word	0x48022c1c
 8002024:	48022c30 	.word	0x48022c30
 8002028:	48022c44 	.word	0x48022c44
 800202c:	48022c58 	.word	0x48022c58
 8002030:	48022c6c 	.word	0x48022c6c
 8002034:	48022c80 	.word	0x48022c80
 8002038:	48022c94 	.word	0x48022c94
 800203c:	58025408 	.word	0x58025408
 8002040:	5802541c 	.word	0x5802541c
 8002044:	58025430 	.word	0x58025430
 8002048:	58025444 	.word	0x58025444
 800204c:	58025458 	.word	0x58025458
 8002050:	5802546c 	.word	0x5802546c
 8002054:	58025480 	.word	0x58025480
 8002058:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 81d5 	beq.w	8002410 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800206e:	e1cf      	b.n	8002410 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d160      	bne.n	800213c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a7f      	ldr	r2, [pc, #508]	; (800227c <HAL_DMA_IRQHandler+0xce4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d04a      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a7d      	ldr	r2, [pc, #500]	; (8002280 <HAL_DMA_IRQHandler+0xce8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d045      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a7c      	ldr	r2, [pc, #496]	; (8002284 <HAL_DMA_IRQHandler+0xcec>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d040      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a7a      	ldr	r2, [pc, #488]	; (8002288 <HAL_DMA_IRQHandler+0xcf0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d03b      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a79      	ldr	r2, [pc, #484]	; (800228c <HAL_DMA_IRQHandler+0xcf4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d036      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a77      	ldr	r2, [pc, #476]	; (8002290 <HAL_DMA_IRQHandler+0xcf8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d031      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a76      	ldr	r2, [pc, #472]	; (8002294 <HAL_DMA_IRQHandler+0xcfc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d02c      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a74      	ldr	r2, [pc, #464]	; (8002298 <HAL_DMA_IRQHandler+0xd00>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d027      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a73      	ldr	r2, [pc, #460]	; (800229c <HAL_DMA_IRQHandler+0xd04>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d022      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a71      	ldr	r2, [pc, #452]	; (80022a0 <HAL_DMA_IRQHandler+0xd08>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01d      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a70      	ldr	r2, [pc, #448]	; (80022a4 <HAL_DMA_IRQHandler+0xd0c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d018      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a6e      	ldr	r2, [pc, #440]	; (80022a8 <HAL_DMA_IRQHandler+0xd10>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a6d      	ldr	r2, [pc, #436]	; (80022ac <HAL_DMA_IRQHandler+0xd14>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00e      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a6b      	ldr	r2, [pc, #428]	; (80022b0 <HAL_DMA_IRQHandler+0xd18>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d009      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a6a      	ldr	r2, [pc, #424]	; (80022b4 <HAL_DMA_IRQHandler+0xd1c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d004      	beq.n	800211a <HAL_DMA_IRQHandler+0xb82>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a68      	ldr	r2, [pc, #416]	; (80022b8 <HAL_DMA_IRQHandler+0xd20>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d108      	bne.n	800212c <HAL_DMA_IRQHandler+0xb94>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0208 	bic.w	r2, r2, #8
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e007      	b.n	800213c <HAL_DMA_IRQHandler+0xba4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0204 	bic.w	r2, r2, #4
 800213a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 8165 	beq.w	8002410 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800214e:	e15f      	b.n	8002410 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	2202      	movs	r2, #2
 800215a:	409a      	lsls	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80c5 	beq.w	80022f0 <HAL_DMA_IRQHandler+0xd58>
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80bf 	beq.w	80022f0 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	2202      	movs	r2, #2
 800217c:	409a      	lsls	r2, r3
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d018      	beq.n	80021be <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 813a 	beq.w	8002414 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80021a8:	e134      	b.n	8002414 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8130 	beq.w	8002414 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80021bc:	e12a      	b.n	8002414 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f040 8089 	bne.w	80022dc <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a2b      	ldr	r2, [pc, #172]	; (800227c <HAL_DMA_IRQHandler+0xce4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d04a      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a29      	ldr	r2, [pc, #164]	; (8002280 <HAL_DMA_IRQHandler+0xce8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d045      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a28      	ldr	r2, [pc, #160]	; (8002284 <HAL_DMA_IRQHandler+0xcec>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d040      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a26      	ldr	r2, [pc, #152]	; (8002288 <HAL_DMA_IRQHandler+0xcf0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d03b      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a25      	ldr	r2, [pc, #148]	; (800228c <HAL_DMA_IRQHandler+0xcf4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d036      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a23      	ldr	r2, [pc, #140]	; (8002290 <HAL_DMA_IRQHandler+0xcf8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d031      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a22      	ldr	r2, [pc, #136]	; (8002294 <HAL_DMA_IRQHandler+0xcfc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d02c      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a20      	ldr	r2, [pc, #128]	; (8002298 <HAL_DMA_IRQHandler+0xd00>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d027      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a1f      	ldr	r2, [pc, #124]	; (800229c <HAL_DMA_IRQHandler+0xd04>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d022      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1d      	ldr	r2, [pc, #116]	; (80022a0 <HAL_DMA_IRQHandler+0xd08>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01d      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <HAL_DMA_IRQHandler+0xd0c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d018      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a1a      	ldr	r2, [pc, #104]	; (80022a8 <HAL_DMA_IRQHandler+0xd10>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a19      	ldr	r2, [pc, #100]	; (80022ac <HAL_DMA_IRQHandler+0xd14>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00e      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <HAL_DMA_IRQHandler+0xd18>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d009      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a16      	ldr	r2, [pc, #88]	; (80022b4 <HAL_DMA_IRQHandler+0xd1c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d004      	beq.n	800226a <HAL_DMA_IRQHandler+0xcd2>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <HAL_DMA_IRQHandler+0xd20>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d128      	bne.n	80022bc <HAL_DMA_IRQHandler+0xd24>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0214 	bic.w	r2, r2, #20
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e027      	b.n	80022cc <HAL_DMA_IRQHandler+0xd34>
 800227c:	40020010 	.word	0x40020010
 8002280:	40020028 	.word	0x40020028
 8002284:	40020040 	.word	0x40020040
 8002288:	40020058 	.word	0x40020058
 800228c:	40020070 	.word	0x40020070
 8002290:	40020088 	.word	0x40020088
 8002294:	400200a0 	.word	0x400200a0
 8002298:	400200b8 	.word	0x400200b8
 800229c:	40020410 	.word	0x40020410
 80022a0:	40020428 	.word	0x40020428
 80022a4:	40020440 	.word	0x40020440
 80022a8:	40020458 	.word	0x40020458
 80022ac:	40020470 	.word	0x40020470
 80022b0:	40020488 	.word	0x40020488
 80022b4:	400204a0 	.word	0x400204a0
 80022b8:	400204b8 	.word	0x400204b8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 020a 	bic.w	r2, r2, #10
 80022ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8097 	beq.w	8002414 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022ee:	e091      	b.n	8002414 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	2208      	movs	r2, #8
 80022fa:	409a      	lsls	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 8088 	beq.w	8002416 <HAL_DMA_IRQHandler+0xe7e>
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8082 	beq.w	8002416 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a41      	ldr	r2, [pc, #260]	; (800241c <HAL_DMA_IRQHandler+0xe84>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d04a      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a3f      	ldr	r2, [pc, #252]	; (8002420 <HAL_DMA_IRQHandler+0xe88>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d045      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a3e      	ldr	r2, [pc, #248]	; (8002424 <HAL_DMA_IRQHandler+0xe8c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d040      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a3c      	ldr	r2, [pc, #240]	; (8002428 <HAL_DMA_IRQHandler+0xe90>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d03b      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a3b      	ldr	r2, [pc, #236]	; (800242c <HAL_DMA_IRQHandler+0xe94>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d036      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a39      	ldr	r2, [pc, #228]	; (8002430 <HAL_DMA_IRQHandler+0xe98>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d031      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a38      	ldr	r2, [pc, #224]	; (8002434 <HAL_DMA_IRQHandler+0xe9c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d02c      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a36      	ldr	r2, [pc, #216]	; (8002438 <HAL_DMA_IRQHandler+0xea0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d027      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a35      	ldr	r2, [pc, #212]	; (800243c <HAL_DMA_IRQHandler+0xea4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d022      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a33      	ldr	r2, [pc, #204]	; (8002440 <HAL_DMA_IRQHandler+0xea8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01d      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a32      	ldr	r2, [pc, #200]	; (8002444 <HAL_DMA_IRQHandler+0xeac>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d018      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a30      	ldr	r2, [pc, #192]	; (8002448 <HAL_DMA_IRQHandler+0xeb0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2f      	ldr	r2, [pc, #188]	; (800244c <HAL_DMA_IRQHandler+0xeb4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00e      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a2d      	ldr	r2, [pc, #180]	; (8002450 <HAL_DMA_IRQHandler+0xeb8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d009      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a2c      	ldr	r2, [pc, #176]	; (8002454 <HAL_DMA_IRQHandler+0xebc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d004      	beq.n	80023b2 <HAL_DMA_IRQHandler+0xe1a>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a2a      	ldr	r2, [pc, #168]	; (8002458 <HAL_DMA_IRQHandler+0xec0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d108      	bne.n	80023c4 <HAL_DMA_IRQHandler+0xe2c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 021c 	bic.w	r2, r2, #28
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e007      	b.n	80023d4 <HAL_DMA_IRQHandler+0xe3c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 020e 	bic.w	r2, r2, #14
 80023d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	2201      	movs	r2, #1
 80023de:	409a      	lsls	r2, r3
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
 800240a:	e004      	b.n	8002416 <HAL_DMA_IRQHandler+0xe7e>
          return;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002414:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002416:	3728      	adds	r7, #40	; 0x28
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40020010 	.word	0x40020010
 8002420:	40020028 	.word	0x40020028
 8002424:	40020040 	.word	0x40020040
 8002428:	40020058 	.word	0x40020058
 800242c:	40020070 	.word	0x40020070
 8002430:	40020088 	.word	0x40020088
 8002434:	400200a0 	.word	0x400200a0
 8002438:	400200b8 	.word	0x400200b8
 800243c:	40020410 	.word	0x40020410
 8002440:	40020428 	.word	0x40020428
 8002444:	40020440 	.word	0x40020440
 8002448:	40020458 	.word	0x40020458
 800244c:	40020470 	.word	0x40020470
 8002450:	40020488 	.word	0x40020488
 8002454:	400204a0 	.word	0x400204a0
 8002458:	400204b8 	.word	0x400204b8

0800245c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a42      	ldr	r2, [pc, #264]	; (8002574 <DMA_CalcBaseAndBitshift+0x118>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d04a      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a41      	ldr	r2, [pc, #260]	; (8002578 <DMA_CalcBaseAndBitshift+0x11c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d045      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a3f      	ldr	r2, [pc, #252]	; (800257c <DMA_CalcBaseAndBitshift+0x120>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d040      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a3e      	ldr	r2, [pc, #248]	; (8002580 <DMA_CalcBaseAndBitshift+0x124>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d03b      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a3c      	ldr	r2, [pc, #240]	; (8002584 <DMA_CalcBaseAndBitshift+0x128>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d036      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a3b      	ldr	r2, [pc, #236]	; (8002588 <DMA_CalcBaseAndBitshift+0x12c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d031      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a39      	ldr	r2, [pc, #228]	; (800258c <DMA_CalcBaseAndBitshift+0x130>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d02c      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a38      	ldr	r2, [pc, #224]	; (8002590 <DMA_CalcBaseAndBitshift+0x134>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d027      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a36      	ldr	r2, [pc, #216]	; (8002594 <DMA_CalcBaseAndBitshift+0x138>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d022      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a35      	ldr	r2, [pc, #212]	; (8002598 <DMA_CalcBaseAndBitshift+0x13c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d01d      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a33      	ldr	r2, [pc, #204]	; (800259c <DMA_CalcBaseAndBitshift+0x140>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d018      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a32      	ldr	r2, [pc, #200]	; (80025a0 <DMA_CalcBaseAndBitshift+0x144>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d013      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a30      	ldr	r2, [pc, #192]	; (80025a4 <DMA_CalcBaseAndBitshift+0x148>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00e      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a2f      	ldr	r2, [pc, #188]	; (80025a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d009      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a2d      	ldr	r2, [pc, #180]	; (80025ac <DMA_CalcBaseAndBitshift+0x150>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d004      	beq.n	8002504 <DMA_CalcBaseAndBitshift+0xa8>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2c      	ldr	r2, [pc, #176]	; (80025b0 <DMA_CalcBaseAndBitshift+0x154>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d101      	bne.n	8002508 <DMA_CalcBaseAndBitshift+0xac>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <DMA_CalcBaseAndBitshift+0xae>
 8002508:	2300      	movs	r3, #0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d024      	beq.n	8002558 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3b10      	subs	r3, #16
 8002516:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <DMA_CalcBaseAndBitshift+0x158>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	4a24      	ldr	r2, [pc, #144]	; (80025b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8002528:	5cd3      	ldrb	r3, [r2, r3]
 800252a:	461a      	mov	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d908      	bls.n	8002548 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <DMA_CalcBaseAndBitshift+0x160>)
 800253e:	4013      	ands	r3, r2
 8002540:	1d1a      	adds	r2, r3, #4
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	659a      	str	r2, [r3, #88]	; 0x58
 8002546:	e00d      	b.n	8002564 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <DMA_CalcBaseAndBitshift+0x160>)
 8002550:	4013      	ands	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6593      	str	r3, [r2, #88]	; 0x58
 8002556:	e005      	b.n	8002564 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40020010 	.word	0x40020010
 8002578:	40020028 	.word	0x40020028
 800257c:	40020040 	.word	0x40020040
 8002580:	40020058 	.word	0x40020058
 8002584:	40020070 	.word	0x40020070
 8002588:	40020088 	.word	0x40020088
 800258c:	400200a0 	.word	0x400200a0
 8002590:	400200b8 	.word	0x400200b8
 8002594:	40020410 	.word	0x40020410
 8002598:	40020428 	.word	0x40020428
 800259c:	40020440 	.word	0x40020440
 80025a0:	40020458 	.word	0x40020458
 80025a4:	40020470 	.word	0x40020470
 80025a8:	40020488 	.word	0x40020488
 80025ac:	400204a0 	.word	0x400204a0
 80025b0:	400204b8 	.word	0x400204b8
 80025b4:	aaaaaaab 	.word	0xaaaaaaab
 80025b8:	08006100 	.word	0x08006100
 80025bc:	fffffc00 	.word	0xfffffc00

080025c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d120      	bne.n	8002616 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d858      	bhi.n	800268e <DMA_CheckFifoParam+0xce>
 80025dc:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <DMA_CheckFifoParam+0x24>)
 80025de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e2:	bf00      	nop
 80025e4:	080025f5 	.word	0x080025f5
 80025e8:	08002607 	.word	0x08002607
 80025ec:	080025f5 	.word	0x080025f5
 80025f0:	0800268f 	.word	0x0800268f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d048      	beq.n	8002692 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002604:	e045      	b.n	8002692 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800260e:	d142      	bne.n	8002696 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002614:	e03f      	b.n	8002696 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261e:	d123      	bne.n	8002668 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	2b03      	cmp	r3, #3
 8002626:	d838      	bhi.n	800269a <DMA_CheckFifoParam+0xda>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <DMA_CheckFifoParam+0x70>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002641 	.word	0x08002641
 8002634:	08002647 	.word	0x08002647
 8002638:	08002641 	.word	0x08002641
 800263c:	08002659 	.word	0x08002659
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
        break;
 8002644:	e030      	b.n	80026a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d025      	beq.n	800269e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002656:	e022      	b.n	800269e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002660:	d11f      	bne.n	80026a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002666:	e01c      	b.n	80026a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	2b02      	cmp	r3, #2
 800266e:	d902      	bls.n	8002676 <DMA_CheckFifoParam+0xb6>
 8002670:	2b03      	cmp	r3, #3
 8002672:	d003      	beq.n	800267c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002674:	e018      	b.n	80026a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
        break;
 800267a:	e015      	b.n	80026a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00e      	beq.n	80026a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
    break;
 800268c:	e00b      	b.n	80026a6 <DMA_CheckFifoParam+0xe6>
        break;
 800268e:	bf00      	nop
 8002690:	e00a      	b.n	80026a8 <DMA_CheckFifoParam+0xe8>
        break;
 8002692:	bf00      	nop
 8002694:	e008      	b.n	80026a8 <DMA_CheckFifoParam+0xe8>
        break;
 8002696:	bf00      	nop
 8002698:	e006      	b.n	80026a8 <DMA_CheckFifoParam+0xe8>
        break;
 800269a:	bf00      	nop
 800269c:	e004      	b.n	80026a8 <DMA_CheckFifoParam+0xe8>
        break;
 800269e:	bf00      	nop
 80026a0:	e002      	b.n	80026a8 <DMA_CheckFifoParam+0xe8>
        break;
 80026a2:	bf00      	nop
 80026a4:	e000      	b.n	80026a8 <DMA_CheckFifoParam+0xe8>
    break;
 80026a6:	bf00      	nop
    }
  }

  return status;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop

080026b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a38      	ldr	r2, [pc, #224]	; (80027ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d022      	beq.n	8002716 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a36      	ldr	r2, [pc, #216]	; (80027b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01d      	beq.n	8002716 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a35      	ldr	r2, [pc, #212]	; (80027b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d018      	beq.n	8002716 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a33      	ldr	r2, [pc, #204]	; (80027b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a32      	ldr	r2, [pc, #200]	; (80027bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00e      	beq.n	8002716 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a30      	ldr	r2, [pc, #192]	; (80027c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d009      	beq.n	8002716 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a2f      	ldr	r2, [pc, #188]	; (80027c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d004      	beq.n	8002716 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800271a:	2300      	movs	r3, #0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01a      	beq.n	8002756 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	3b08      	subs	r3, #8
 8002728:	4a28      	ldr	r2, [pc, #160]	; (80027cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	461a      	mov	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002744:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	2201      	movs	r2, #1
 800274e:	409a      	lsls	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002754:	e024      	b.n	80027a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	3b10      	subs	r3, #16
 800275e:	4a1e      	ldr	r2, [pc, #120]	; (80027d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d806      	bhi.n	800277e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4a1b      	ldr	r2, [pc, #108]	; (80027e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d902      	bls.n	800277e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3308      	adds	r3, #8
 800277c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	461a      	mov	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a16      	ldr	r2, [pc, #88]	; (80027e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002790:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	2201      	movs	r2, #1
 800279a:	409a      	lsls	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	669a      	str	r2, [r3, #104]	; 0x68
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	58025408 	.word	0x58025408
 80027b0:	5802541c 	.word	0x5802541c
 80027b4:	58025430 	.word	0x58025430
 80027b8:	58025444 	.word	0x58025444
 80027bc:	58025458 	.word	0x58025458
 80027c0:	5802546c 	.word	0x5802546c
 80027c4:	58025480 	.word	0x58025480
 80027c8:	58025494 	.word	0x58025494
 80027cc:	cccccccd 	.word	0xcccccccd
 80027d0:	16009600 	.word	0x16009600
 80027d4:	58025880 	.word	0x58025880
 80027d8:	aaaaaaab 	.word	0xaaaaaaab
 80027dc:	400204b8 	.word	0x400204b8
 80027e0:	4002040f 	.word	0x4002040f
 80027e4:	10008200 	.word	0x10008200
 80027e8:	40020880 	.word	0x40020880

080027ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d04a      	beq.n	8002898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d847      	bhi.n	8002898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a25      	ldr	r2, [pc, #148]	; (80028a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d022      	beq.n	8002858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d01d      	beq.n	8002858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a22      	ldr	r2, [pc, #136]	; (80028ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d018      	beq.n	8002858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d013      	beq.n	8002858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00e      	beq.n	8002858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d009      	beq.n	8002858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1c      	ldr	r2, [pc, #112]	; (80028bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d004      	beq.n	8002858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d101      	bne.n	800285c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800285c:	2300      	movs	r3, #0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	461a      	mov	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a15      	ldr	r2, [pc, #84]	; (80028c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002874:	671a      	str	r2, [r3, #112]	; 0x70
 8002876:	e009      	b.n	800288c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4b14      	ldr	r3, [pc, #80]	; (80028cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	461a      	mov	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800288a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3b01      	subs	r3, #1
 8002890:	2201      	movs	r2, #1
 8002892:	409a      	lsls	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	58025408 	.word	0x58025408
 80028a8:	5802541c 	.word	0x5802541c
 80028ac:	58025430 	.word	0x58025430
 80028b0:	58025444 	.word	0x58025444
 80028b4:	58025458 	.word	0x58025458
 80028b8:	5802546c 	.word	0x5802546c
 80028bc:	58025480 	.word	0x58025480
 80028c0:	58025494 	.word	0x58025494
 80028c4:	1600963f 	.word	0x1600963f
 80028c8:	58025940 	.word	0x58025940
 80028cc:	1000823f 	.word	0x1000823f
 80028d0:	40020940 	.word	0x40020940

080028d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80028e2:	4b89      	ldr	r3, [pc, #548]	; (8002b08 <HAL_GPIO_Init+0x234>)
 80028e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028e6:	e194      	b.n	8002c12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	2101      	movs	r1, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8186 	beq.w	8002c0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b01      	cmp	r3, #1
 800290a:	d005      	beq.n	8002918 <HAL_GPIO_Init+0x44>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d130      	bne.n	800297a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800294e:	2201      	movs	r2, #1
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	f003 0201 	and.w	r2, r3, #1
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b03      	cmp	r3, #3
 8002984:	d017      	beq.n	80029b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d123      	bne.n	8002a0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	08da      	lsrs	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3208      	adds	r2, #8
 80029ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	220f      	movs	r2, #15
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	69b9      	ldr	r1, [r7, #24]
 8002a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 0203 	and.w	r2, r3, #3
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80e0 	beq.w	8002c0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4c:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <HAL_GPIO_Init+0x238>)
 8002a4e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002a52:	4a2e      	ldr	r2, [pc, #184]	; (8002b0c <HAL_GPIO_Init+0x238>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <HAL_GPIO_Init+0x238>)
 8002a5e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a6a:	4a29      	ldr	r2, [pc, #164]	; (8002b10 <HAL_GPIO_Init+0x23c>)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	3302      	adds	r3, #2
 8002a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a20      	ldr	r2, [pc, #128]	; (8002b14 <HAL_GPIO_Init+0x240>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d052      	beq.n	8002b3c <HAL_GPIO_Init+0x268>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a1f      	ldr	r2, [pc, #124]	; (8002b18 <HAL_GPIO_Init+0x244>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d031      	beq.n	8002b02 <HAL_GPIO_Init+0x22e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a1e      	ldr	r2, [pc, #120]	; (8002b1c <HAL_GPIO_Init+0x248>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d02b      	beq.n	8002afe <HAL_GPIO_Init+0x22a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_GPIO_Init+0x24c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d025      	beq.n	8002afa <HAL_GPIO_Init+0x226>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <HAL_GPIO_Init+0x250>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01f      	beq.n	8002af6 <HAL_GPIO_Init+0x222>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a1b      	ldr	r2, [pc, #108]	; (8002b28 <HAL_GPIO_Init+0x254>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d019      	beq.n	8002af2 <HAL_GPIO_Init+0x21e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <HAL_GPIO_Init+0x258>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <HAL_GPIO_Init+0x21a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <HAL_GPIO_Init+0x25c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00d      	beq.n	8002aea <HAL_GPIO_Init+0x216>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_GPIO_Init+0x260>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <HAL_GPIO_Init+0x212>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_GPIO_Init+0x264>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d101      	bne.n	8002ae2 <HAL_GPIO_Init+0x20e>
 8002ade:	2309      	movs	r3, #9
 8002ae0:	e02d      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002ae2:	230a      	movs	r3, #10
 8002ae4:	e02b      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	e029      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002aea:	2307      	movs	r3, #7
 8002aec:	e027      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002aee:	2306      	movs	r3, #6
 8002af0:	e025      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002af2:	2305      	movs	r3, #5
 8002af4:	e023      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002af6:	2304      	movs	r3, #4
 8002af8:	e021      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002afa:	2303      	movs	r3, #3
 8002afc:	e01f      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e01d      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e01b      	b.n	8002b3e <HAL_GPIO_Init+0x26a>
 8002b06:	bf00      	nop
 8002b08:	58000080 	.word	0x58000080
 8002b0c:	58024400 	.word	0x58024400
 8002b10:	58000400 	.word	0x58000400
 8002b14:	58020000 	.word	0x58020000
 8002b18:	58020400 	.word	0x58020400
 8002b1c:	58020800 	.word	0x58020800
 8002b20:	58020c00 	.word	0x58020c00
 8002b24:	58021000 	.word	0x58021000
 8002b28:	58021400 	.word	0x58021400
 8002b2c:	58021800 	.word	0x58021800
 8002b30:	58021c00 	.word	0x58021c00
 8002b34:	58022000 	.word	0x58022000
 8002b38:	58022400 	.word	0x58022400
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	f002 0203 	and.w	r2, r2, #3
 8002b44:	0092      	lsls	r2, r2, #2
 8002b46:	4093      	lsls	r3, r2
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b4e:	4938      	ldr	r1, [pc, #224]	; (8002c30 <HAL_GPIO_Init+0x35c>)
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	089b      	lsrs	r3, r3, #2
 8002b54:	3302      	adds	r3, #2
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f47f ae63 	bne.w	80028e8 <HAL_GPIO_Init+0x14>
  }
}
 8002c22:	bf00      	nop
 8002c24:	bf00      	nop
 8002c26:	3724      	adds	r7, #36	; 0x24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	58000400 	.word	0x58000400

08002c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
 8002c40:	4613      	mov	r3, r2
 8002c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c44:	787b      	ldrb	r3, [r7, #1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c50:	e003      	b.n	8002c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c52:	887b      	ldrh	r3, [r7, #2]
 8002c54:	041a      	lsls	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	619a      	str	r2, [r3, #24]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c78:	887a      	ldrh	r2, [r7, #2]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	041a      	lsls	r2, r3, #16
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43d9      	mvns	r1, r3
 8002c84:	887b      	ldrh	r3, [r7, #2]
 8002c86:	400b      	ands	r3, r1
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	619a      	str	r2, [r3, #24]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e07f      	b.n	8002dae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fd fd36 	bl	8000734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2224      	movs	r2, #36	; 0x24
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d107      	bne.n	8002d16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	e006      	b.n	8002d24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d104      	bne.n	8002d36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <HAL_I2C_Init+0x11c>)
 8002d42:	430b      	orrs	r3, r1
 8002d44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69d9      	ldr	r1, [r3, #28]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1a      	ldr	r2, [r3, #32]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	02008000 	.word	0x02008000

08002dbc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	460b      	mov	r3, r1
 8002dca:	817b      	strh	r3, [r7, #10]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	f040 80da 	bne.w	8002f92 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_I2C_Master_Transmit+0x30>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e0d3      	b.n	8002f94 <HAL_I2C_Master_Transmit+0x1d8>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002df4:	f7fd ff02 	bl	8000bfc <HAL_GetTick>
 8002df8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	2319      	movs	r3, #25
 8002e00:	2201      	movs	r2, #1
 8002e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f9e6 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0be      	b.n	8002f94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2221      	movs	r2, #33	; 0x21
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2210      	movs	r2, #16
 8002e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	893a      	ldrh	r2, [r7, #8]
 8002e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2bff      	cmp	r3, #255	; 0xff
 8002e46:	d90e      	bls.n	8002e66 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	22ff      	movs	r2, #255	; 0xff
 8002e4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	8979      	ldrh	r1, [r7, #10]
 8002e56:	4b51      	ldr	r3, [pc, #324]	; (8002f9c <HAL_I2C_Master_Transmit+0x1e0>)
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fbdc 	bl	800361c <I2C_TransferConfig>
 8002e64:	e06c      	b.n	8002f40 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	8979      	ldrh	r1, [r7, #10]
 8002e78:	4b48      	ldr	r3, [pc, #288]	; (8002f9c <HAL_I2C_Master_Transmit+0x1e0>)
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fbcb 	bl	800361c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e86:	e05b      	b.n	8002f40 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	6a39      	ldr	r1, [r7, #32]
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f9e3 	bl	8003258 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e07b      	b.n	8002f94 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d034      	beq.n	8002f40 <HAL_I2C_Master_Transmit+0x184>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d130      	bne.n	8002f40 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f975 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e04d      	b.n	8002f94 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2bff      	cmp	r3, #255	; 0xff
 8002f00:	d90e      	bls.n	8002f20 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	22ff      	movs	r2, #255	; 0xff
 8002f06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	8979      	ldrh	r1, [r7, #10]
 8002f10:	2300      	movs	r3, #0
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fb7f 	bl	800361c <I2C_TransferConfig>
 8002f1e:	e00f      	b.n	8002f40 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	8979      	ldrh	r1, [r7, #10]
 8002f32:	2300      	movs	r3, #0
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fb6e 	bl	800361c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d19e      	bne.n	8002e88 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	6a39      	ldr	r1, [r7, #32]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f9c2 	bl	80032d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e01a      	b.n	8002f94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2220      	movs	r2, #32
 8002f64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_I2C_Master_Transmit+0x1e4>)
 8002f72:	400b      	ands	r3, r1
 8002f74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
  }
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	80002000 	.word	0x80002000
 8002fa0:	fe00e800 	.word	0xfe00e800

08002fa4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	817b      	strh	r3, [r7, #10]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	f040 80db 	bne.w	800317c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_I2C_Master_Receive+0x30>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e0d4      	b.n	800317e <HAL_I2C_Master_Receive+0x1da>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fdc:	f7fd fe0e 	bl	8000bfc <HAL_GetTick>
 8002fe0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	2319      	movs	r3, #25
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f8f2 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e0bf      	b.n	800317e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2222      	movs	r2, #34	; 0x22
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2210      	movs	r2, #16
 800300a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	893a      	ldrh	r2, [r7, #8]
 800301e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	2bff      	cmp	r3, #255	; 0xff
 800302e:	d90e      	bls.n	800304e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	22ff      	movs	r2, #255	; 0xff
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	b2da      	uxtb	r2, r3
 800303c:	8979      	ldrh	r1, [r7, #10]
 800303e:	4b52      	ldr	r3, [pc, #328]	; (8003188 <HAL_I2C_Master_Receive+0x1e4>)
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fae8 	bl	800361c <I2C_TransferConfig>
 800304c:	e06d      	b.n	800312a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	b2da      	uxtb	r2, r3
 800305e:	8979      	ldrh	r1, [r7, #10]
 8003060:	4b49      	ldr	r3, [pc, #292]	; (8003188 <HAL_I2C_Master_Receive+0x1e4>)
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fad7 	bl	800361c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800306e:	e05c      	b.n	800312a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	6a39      	ldr	r1, [r7, #32]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f96b 	bl	8003350 <I2C_WaitOnRXNEFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e07c      	b.n	800317e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d034      	beq.n	800312a <HAL_I2C_Master_Receive+0x186>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d130      	bne.n	800312a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	2200      	movs	r2, #0
 80030d0:	2180      	movs	r1, #128	; 0x80
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f880 	bl	80031d8 <I2C_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e04d      	b.n	800317e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2bff      	cmp	r3, #255	; 0xff
 80030ea:	d90e      	bls.n	800310a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	22ff      	movs	r2, #255	; 0xff
 80030f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	8979      	ldrh	r1, [r7, #10]
 80030fa:	2300      	movs	r3, #0
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fa8a 	bl	800361c <I2C_TransferConfig>
 8003108:	e00f      	b.n	800312a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003118:	b2da      	uxtb	r2, r3
 800311a:	8979      	ldrh	r1, [r7, #10]
 800311c:	2300      	movs	r3, #0
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fa79 	bl	800361c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d19d      	bne.n	8003070 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	6a39      	ldr	r1, [r7, #32]
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f8cd 	bl	80032d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e01a      	b.n	800317e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2220      	movs	r2, #32
 800314e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6859      	ldr	r1, [r3, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_I2C_Master_Receive+0x1e8>)
 800315c:	400b      	ands	r3, r1
 800315e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	80002400 	.word	0x80002400
 800318c:	fe00e800 	.word	0xfe00e800

08003190 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d103      	bne.n	80031ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2200      	movs	r2, #0
 80031ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d007      	beq.n	80031cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	619a      	str	r2, [r3, #24]
  }
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e8:	e022      	b.n	8003230 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d01e      	beq.n	8003230 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f2:	f7fd fd03 	bl	8000bfc <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d302      	bcc.n	8003208 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d113      	bne.n	8003230 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320c:	f043 0220 	orr.w	r2, r3, #32
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e00f      	b.n	8003250 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	429a      	cmp	r2, r3
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	429a      	cmp	r2, r3
 800324c:	d0cd      	beq.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003264:	e02c      	b.n	80032c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f8ea 	bl	8003444 <I2C_IsErrorOccurred>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e02a      	b.n	80032d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d01e      	beq.n	80032c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003282:	f7fd fcbb 	bl	8000bfc <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	d302      	bcc.n	8003298 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d113      	bne.n	80032c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	f043 0220 	orr.w	r2, r3, #32
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e007      	b.n	80032d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d1cb      	bne.n	8003266 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032e4:	e028      	b.n	8003338 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f8aa 	bl	8003444 <I2C_IsErrorOccurred>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e026      	b.n	8003348 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fa:	f7fd fc7f 	bl	8000bfc <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	429a      	cmp	r2, r3
 8003308:	d302      	bcc.n	8003310 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d113      	bne.n	8003338 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e007      	b.n	8003348 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b20      	cmp	r3, #32
 8003344:	d1cf      	bne.n	80032e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800335c:	e064      	b.n	8003428 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f86e 	bl	8003444 <I2C_IsErrorOccurred>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e062      	b.n	8003438 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b20      	cmp	r3, #32
 800337e:	d138      	bne.n	80033f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b04      	cmp	r3, #4
 800338c:	d105      	bne.n	800339a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	e04e      	b.n	8003438 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d107      	bne.n	80033b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2210      	movs	r2, #16
 80033ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2204      	movs	r2, #4
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
 80033b6:	e002      	b.n	80033be <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2220      	movs	r2, #32
 80033c4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80033d2:	400b      	ands	r3, r1
 80033d4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e022      	b.n	8003438 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f2:	f7fd fc03 	bl	8000bfc <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10f      	bne.n	8003428 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340c:	f043 0220 	orr.w	r2, r3, #32
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e007      	b.n	8003438 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b04      	cmp	r3, #4
 8003434:	d193      	bne.n	800335e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	fe00e800 	.word	0xfe00e800

08003444 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	; 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d075      	beq.n	800355c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2210      	movs	r2, #16
 8003476:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003478:	e056      	b.n	8003528 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d052      	beq.n	8003528 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003482:	f7fd fbbb 	bl	8000bfc <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d302      	bcc.n	8003498 <I2C_IsErrorOccurred+0x54>
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d147      	bne.n	8003528 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ba:	d12e      	bne.n	800351a <I2C_IsErrorOccurred+0xd6>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034c2:	d02a      	beq.n	800351a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d027      	beq.n	800351a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034d8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034da:	f7fd fb8f 	bl	8000bfc <HAL_GetTick>
 80034de:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e0:	e01b      	b.n	800351a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034e2:	f7fd fb8b 	bl	8000bfc <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b19      	cmp	r3, #25
 80034ee:	d914      	bls.n	800351a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	f043 0220 	orr.w	r2, r3, #32
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b20      	cmp	r3, #32
 8003526:	d1dc      	bne.n	80034e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b20      	cmp	r3, #32
 8003534:	d003      	beq.n	800353e <I2C_IsErrorOccurred+0xfa>
 8003536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800353a:	2b00      	cmp	r3, #0
 800353c:	d09d      	beq.n	800347a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800353e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2220      	movs	r2, #32
 800354c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800357e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00b      	beq.n	80035a8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	f043 0308 	orr.w	r3, r3, #8
 8003596:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00b      	beq.n	80035ca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	f043 0302 	orr.w	r3, r3, #2
 80035b8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80035ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01c      	beq.n	800360c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7ff fddc 	bl	8003190 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <I2C_IsErrorOccurred+0x1d4>)
 80035e4:	400b      	ands	r3, r1
 80035e6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800360c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003610:	4618      	mov	r0, r3
 8003612:	3728      	adds	r7, #40	; 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	fe00e800 	.word	0xfe00e800

0800361c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	460b      	mov	r3, r1
 8003628:	817b      	strh	r3, [r7, #10]
 800362a:	4613      	mov	r3, r2
 800362c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003634:	7a7b      	ldrb	r3, [r7, #9]
 8003636:	041b      	lsls	r3, r3, #16
 8003638:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800363c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	4313      	orrs	r3, r2
 8003646:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800364a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	0d5b      	lsrs	r3, r3, #21
 8003656:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <I2C_TransferConfig+0x60>)
 800365c:	430b      	orrs	r3, r1
 800365e:	43db      	mvns	r3, r3
 8003660:	ea02 0103 	and.w	r1, r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	03ff63ff 	.word	0x03ff63ff

08003680 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b20      	cmp	r3, #32
 8003694:	d138      	bne.n	8003708 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e032      	b.n	800370a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2224      	movs	r2, #36	; 0x24
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6819      	ldr	r1, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e000      	b.n	800370a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b20      	cmp	r3, #32
 800372a:	d139      	bne.n	80037a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003736:	2302      	movs	r3, #2
 8003738:	e033      	b.n	80037a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2224      	movs	r2, #36	; 0x24
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003768:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_PWREx_ConfigSupply+0x70>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d00a      	beq.n	80037da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037c4:	4b16      	ldr	r3, [pc, #88]	; (8003820 <HAL_PWREx_ConfigSupply+0x70>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d001      	beq.n	80037d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e01f      	b.n	8003816 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e01d      	b.n	8003816 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_PWREx_ConfigSupply+0x70>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f023 0207 	bic.w	r2, r3, #7
 80037e2:	490f      	ldr	r1, [pc, #60]	; (8003820 <HAL_PWREx_ConfigSupply+0x70>)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037ea:	f7fd fa07 	bl	8000bfc <HAL_GetTick>
 80037ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037f0:	e009      	b.n	8003806 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037f2:	f7fd fa03 	bl	8000bfc <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003800:	d901      	bls.n	8003806 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e007      	b.n	8003816 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_PWREx_ConfigSupply+0x70>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800380e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003812:	d1ee      	bne.n	80037f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	58024800 	.word	0x58024800

08003824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08c      	sub	sp, #48	; 0x30
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e3f4      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80b3 	beq.w	80039aa <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003844:	4b95      	ldr	r3, [pc, #596]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800384e:	4b93      	ldr	r3, [pc, #588]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	2b10      	cmp	r3, #16
 8003858:	d007      	beq.n	800386a <HAL_RCC_OscConfig+0x46>
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	2b18      	cmp	r3, #24
 800385e:	d112      	bne.n	8003886 <HAL_RCC_OscConfig+0x62>
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d10d      	bne.n	8003886 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386a:	4b8c      	ldr	r3, [pc, #560]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 8098 	beq.w	80039a8 <HAL_RCC_OscConfig+0x184>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f040 8093 	bne.w	80039a8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e3cc      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800388e:	d106      	bne.n	800389e <HAL_RCC_OscConfig+0x7a>
 8003890:	4b82      	ldr	r3, [pc, #520]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a81      	ldr	r2, [pc, #516]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	e058      	b.n	8003950 <HAL_RCC_OscConfig+0x12c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d112      	bne.n	80038cc <HAL_RCC_OscConfig+0xa8>
 80038a6:	4b7d      	ldr	r3, [pc, #500]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a7c      	ldr	r2, [pc, #496]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80038ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4b7a      	ldr	r3, [pc, #488]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a79      	ldr	r2, [pc, #484]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80038b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b77      	ldr	r3, [pc, #476]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a76      	ldr	r2, [pc, #472]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80038c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e041      	b.n	8003950 <HAL_RCC_OscConfig+0x12c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d4:	d112      	bne.n	80038fc <HAL_RCC_OscConfig+0xd8>
 80038d6:	4b71      	ldr	r3, [pc, #452]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a70      	ldr	r2, [pc, #448]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80038dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	4b6e      	ldr	r3, [pc, #440]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a6d      	ldr	r2, [pc, #436]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80038e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b6b      	ldr	r3, [pc, #428]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6a      	ldr	r2, [pc, #424]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e029      	b.n	8003950 <HAL_RCC_OscConfig+0x12c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003904:	d112      	bne.n	800392c <HAL_RCC_OscConfig+0x108>
 8003906:	4b65      	ldr	r3, [pc, #404]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a64      	ldr	r2, [pc, #400]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 800390c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	4b62      	ldr	r3, [pc, #392]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a61      	ldr	r2, [pc, #388]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003918:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b5f      	ldr	r3, [pc, #380]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5e      	ldr	r2, [pc, #376]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e011      	b.n	8003950 <HAL_RCC_OscConfig+0x12c>
 800392c:	4b5b      	ldr	r3, [pc, #364]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a5a      	ldr	r2, [pc, #360]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	4b58      	ldr	r3, [pc, #352]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a57      	ldr	r2, [pc, #348]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 800393e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b55      	ldr	r3, [pc, #340]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a54      	ldr	r2, [pc, #336]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 800394a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800394e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d013      	beq.n	8003980 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fd f950 	bl	8000bfc <HAL_GetTick>
 800395c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003960:	f7fd f94c 	bl	8000bfc <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	; 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e356      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003972:	4b4a      	ldr	r3, [pc, #296]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x13c>
 800397e:	e014      	b.n	80039aa <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fd f93c 	bl	8000bfc <HAL_GetTick>
 8003984:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003988:	f7fd f938 	bl	8000bfc <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e342      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800399a:	4b40      	ldr	r3, [pc, #256]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x164>
 80039a6:	e000      	b.n	80039aa <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 808d 	beq.w	8003ad2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039b8:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039c2:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <HAL_RCC_OscConfig+0x1ba>
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	2b18      	cmp	r3, #24
 80039d2:	d137      	bne.n	8003a44 <HAL_RCC_OscConfig+0x220>
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d132      	bne.n	8003a44 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039de:	4b2f      	ldr	r3, [pc, #188]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1d2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e314      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039f6:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 0219 	bic.w	r2, r3, #25
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	4926      	ldr	r1, [pc, #152]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a08:	f7fd f8f8 	bl	8000bfc <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a10:	f7fd f8f4 	bl	8000bfc <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e2fe      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a22:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2e:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	061b      	lsls	r3, r3, #24
 8003a3c:	4917      	ldr	r1, [pc, #92]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a42:	e046      	b.n	8003ad2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d029      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a4c:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 0219 	bic.w	r2, r3, #25
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4910      	ldr	r1, [pc, #64]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5e:	f7fd f8cd 	bl	8000bfc <HAL_GetTick>
 8003a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a66:	f7fd f8c9 	bl	8000bfc <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e2d3      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a78:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	061b      	lsls	r3, r3, #24
 8003a92:	4902      	ldr	r1, [pc, #8]	; (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
 8003a98:	e01b      	b.n	8003ad2 <HAL_RCC_OscConfig+0x2ae>
 8003a9a:	bf00      	nop
 8003a9c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa0:	4b97      	ldr	r3, [pc, #604]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a96      	ldr	r2, [pc, #600]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fd f8a6 	bl	8000bfc <HAL_GetTick>
 8003ab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab4:	f7fd f8a2 	bl	8000bfc <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e2ac      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ac6:	4b8e      	ldr	r3, [pc, #568]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d06a      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ade:	4b88      	ldr	r3, [pc, #544]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ae6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ae8:	4b85      	ldr	r3, [pc, #532]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d007      	beq.n	8003b04 <HAL_RCC_OscConfig+0x2e0>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b18      	cmp	r3, #24
 8003af8:	d11b      	bne.n	8003b32 <HAL_RCC_OscConfig+0x30e>
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d116      	bne.n	8003b32 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b04:	4b7e      	ldr	r3, [pc, #504]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_OscConfig+0x2f8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	2b80      	cmp	r3, #128	; 0x80
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e281      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b1c:	4b78      	ldr	r3, [pc, #480]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	4975      	ldr	r1, [pc, #468]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b30:	e040      	b.n	8003bb4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d023      	beq.n	8003b82 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b3a:	4b71      	ldr	r3, [pc, #452]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a70      	ldr	r2, [pc, #448]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b46:	f7fd f859 	bl	8000bfc <HAL_GetTick>
 8003b4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b4e:	f7fd f855 	bl	8000bfc <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e25f      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b60:	4b67      	ldr	r3, [pc, #412]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b6c:	4b64      	ldr	r3, [pc, #400]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	061b      	lsls	r3, r3, #24
 8003b7a:	4961      	ldr	r1, [pc, #388]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60cb      	str	r3, [r1, #12]
 8003b80:	e018      	b.n	8003bb4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b82:	4b5f      	ldr	r3, [pc, #380]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5e      	ldr	r2, [pc, #376]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8e:	f7fd f835 	bl	8000bfc <HAL_GetTick>
 8003b92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b96:	f7fd f831 	bl	8000bfc <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e23b      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ba8:	4b55      	ldr	r3, [pc, #340]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f0      	bne.n	8003b96 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d036      	beq.n	8003c2e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d019      	beq.n	8003bfc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc8:	4b4d      	ldr	r3, [pc, #308]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bcc:	4a4c      	ldr	r2, [pc, #304]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fd f812 	bl	8000bfc <HAL_GetTick>
 8003bd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bdc:	f7fd f80e 	bl	8000bfc <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e218      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bee:	4b44      	ldr	r3, [pc, #272]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x3b8>
 8003bfa:	e018      	b.n	8003c2e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfc:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c00:	4a3f      	ldr	r2, [pc, #252]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fc fff8 	bl	8000bfc <HAL_GetTick>
 8003c0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c10:	f7fc fff4 	bl	8000bfc <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e1fe      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c22:	4b37      	ldr	r3, [pc, #220]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d036      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d019      	beq.n	8003c76 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c42:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2e      	ldr	r2, [pc, #184]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003c48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c4e:	f7fc ffd5 	bl	8000bfc <HAL_GetTick>
 8003c52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c56:	f7fc ffd1 	bl	8000bfc <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e1db      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x432>
 8003c74:	e018      	b.n	8003ca8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c76:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a21      	ldr	r2, [pc, #132]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c82:	f7fc ffbb 	bl	8000bfc <HAL_GetTick>
 8003c86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c8a:	f7fc ffb7 	bl	8000bfc <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e1c1      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c9c:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f0      	bne.n	8003c8a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80af 	beq.w	8003e14 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cb6:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <HAL_RCC_OscConfig+0x4e0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a12      	ldr	r2, [pc, #72]	; (8003d04 <HAL_RCC_OscConfig+0x4e0>)
 8003cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cc2:	f7fc ff9b 	bl	8000bfc <HAL_GetTick>
 8003cc6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003cca:	f7fc ff97 	bl	8000bfc <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b64      	cmp	r3, #100	; 0x64
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e1a1      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cdc:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCC_OscConfig+0x4e0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d10b      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4e4>
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a02      	ldr	r2, [pc, #8]	; (8003d00 <HAL_RCC_OscConfig+0x4dc>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfc:	e05b      	b.n	8003db6 <HAL_RCC_OscConfig+0x592>
 8003cfe:	bf00      	nop
 8003d00:	58024400 	.word	0x58024400
 8003d04:	58024800 	.word	0x58024800
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d112      	bne.n	8003d36 <HAL_RCC_OscConfig+0x512>
 8003d10:	4b9d      	ldr	r3, [pc, #628]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	4a9c      	ldr	r2, [pc, #624]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1c:	4b9a      	ldr	r3, [pc, #616]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	4a99      	ldr	r2, [pc, #612]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d26:	6713      	str	r3, [r2, #112]	; 0x70
 8003d28:	4b97      	ldr	r3, [pc, #604]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	4a96      	ldr	r2, [pc, #600]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d2e:	f023 0304 	bic.w	r3, r3, #4
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
 8003d34:	e03f      	b.n	8003db6 <HAL_RCC_OscConfig+0x592>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b05      	cmp	r3, #5
 8003d3c:	d112      	bne.n	8003d64 <HAL_RCC_OscConfig+0x540>
 8003d3e:	4b92      	ldr	r3, [pc, #584]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	4a91      	ldr	r2, [pc, #580]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d44:	f043 0304 	orr.w	r3, r3, #4
 8003d48:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4a:	4b8f      	ldr	r3, [pc, #572]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	4a8e      	ldr	r2, [pc, #568]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d54:	6713      	str	r3, [r2, #112]	; 0x70
 8003d56:	4b8c      	ldr	r3, [pc, #560]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	4a8b      	ldr	r2, [pc, #556]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70
 8003d62:	e028      	b.n	8003db6 <HAL_RCC_OscConfig+0x592>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b85      	cmp	r3, #133	; 0x85
 8003d6a:	d112      	bne.n	8003d92 <HAL_RCC_OscConfig+0x56e>
 8003d6c:	4b86      	ldr	r3, [pc, #536]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	4a85      	ldr	r2, [pc, #532]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d72:	f043 0304 	orr.w	r3, r3, #4
 8003d76:	6713      	str	r3, [r2, #112]	; 0x70
 8003d78:	4b83      	ldr	r3, [pc, #524]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	4a82      	ldr	r2, [pc, #520]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d82:	6713      	str	r3, [r2, #112]	; 0x70
 8003d84:	4b80      	ldr	r3, [pc, #512]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	4a7f      	ldr	r2, [pc, #508]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d90:	e011      	b.n	8003db6 <HAL_RCC_OscConfig+0x592>
 8003d92:	4b7d      	ldr	r3, [pc, #500]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	4a7c      	ldr	r2, [pc, #496]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9e:	4b7a      	ldr	r3, [pc, #488]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	4a79      	ldr	r2, [pc, #484]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003da4:	f023 0304 	bic.w	r3, r3, #4
 8003da8:	6713      	str	r3, [r2, #112]	; 0x70
 8003daa:	4b77      	ldr	r3, [pc, #476]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	4a76      	ldr	r2, [pc, #472]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003db4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d015      	beq.n	8003dea <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbe:	f7fc ff1d 	bl	8000bfc <HAL_GetTick>
 8003dc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fc ff19 	bl	8000bfc <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e121      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ddc:	4b6a      	ldr	r3, [pc, #424]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ee      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x5a2>
 8003de8:	e014      	b.n	8003e14 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dea:	f7fc ff07 	bl	8000bfc <HAL_GetTick>
 8003dee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fc ff03 	bl	8000bfc <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e10b      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e08:	4b5f      	ldr	r3, [pc, #380]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1ee      	bne.n	8003df2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8100 	beq.w	800401e <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e1e:	4b5a      	ldr	r3, [pc, #360]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e26:	2b18      	cmp	r3, #24
 8003e28:	f000 80bb 	beq.w	8003fa2 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	f040 8095 	bne.w	8003f60 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e36:	4b54      	ldr	r3, [pc, #336]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a53      	ldr	r2, [pc, #332]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003e3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e42:	f7fc fedb 	bl	8000bfc <HAL_GetTick>
 8003e46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7fc fed7 	bl	8000bfc <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e0e1      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e5c:	4b4a      	ldr	r3, [pc, #296]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e68:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003e6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e6c:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_RCC_OscConfig+0x768>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e78:	0112      	lsls	r2, r2, #4
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	4942      	ldr	r1, [pc, #264]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	628b      	str	r3, [r1, #40]	; 0x28
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	3b01      	subs	r3, #1
 8003e88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	3b01      	subs	r3, #1
 8003e92:	025b      	lsls	r3, r3, #9
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	041b      	lsls	r3, r3, #16
 8003ea0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	061b      	lsls	r3, r3, #24
 8003eae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003eb2:	4935      	ldr	r1, [pc, #212]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003eb8:	4b33      	ldr	r3, [pc, #204]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	4a32      	ldr	r2, [pc, #200]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ec4:	4b30      	ldr	r3, [pc, #192]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec8:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <HAL_RCC_OscConfig+0x76c>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ed0:	00d2      	lsls	r2, r2, #3
 8003ed2:	492d      	ldr	r1, [pc, #180]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ed8:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	f023 020c 	bic.w	r2, r3, #12
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	4928      	ldr	r1, [pc, #160]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003eea:	4b27      	ldr	r3, [pc, #156]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	f023 0202 	bic.w	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	4924      	ldr	r1, [pc, #144]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003efc:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f08:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	4a1e      	ldr	r2, [pc, #120]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f14:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003f20:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	4a18      	ldr	r2, [pc, #96]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f2c:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fc fe60 	bl	8000bfc <HAL_GetTick>
 8003f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fc fe5c 	bl	8000bfc <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e066      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f52:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x71c>
 8003f5e:	e05e      	b.n	800401e <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a08      	ldr	r2, [pc, #32]	; (8003f88 <HAL_RCC_OscConfig+0x764>)
 8003f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fc fe46 	bl	8000bfc <HAL_GetTick>
 8003f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f72:	e00f      	b.n	8003f94 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f74:	f7fc fe42 	bl	8000bfc <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d908      	bls.n	8003f94 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e04c      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
 8003f86:	bf00      	nop
 8003f88:	58024400 	.word	0x58024400
 8003f8c:	fffffc0c 	.word	0xfffffc0c
 8003f90:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f94:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCC_OscConfig+0x804>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e9      	bne.n	8003f74 <HAL_RCC_OscConfig+0x750>
 8003fa0:	e03d      	b.n	800401e <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fa2:	4b21      	ldr	r3, [pc, #132]	; (8004028 <HAL_RCC_OscConfig+0x804>)
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fa8:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <HAL_RCC_OscConfig+0x804>)
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d031      	beq.n	800401a <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f003 0203 	and.w	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d12a      	bne.n	800401a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d122      	bne.n	800401a <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d11a      	bne.n	800401a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	0a5b      	lsrs	r3, r3, #9
 8003fe8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d111      	bne.n	800401a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	0c1b      	lsrs	r3, r3, #16
 8003ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d108      	bne.n	800401a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	0e1b      	lsrs	r3, r3, #24
 800400c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004014:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d001      	beq.n	800401e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3730      	adds	r7, #48	; 0x30
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	58024400 	.word	0x58024400

0800402c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e19c      	b.n	800437a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004040:	4b8a      	ldr	r3, [pc, #552]	; (800426c <HAL_RCC_ClockConfig+0x240>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d910      	bls.n	8004070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404e:	4b87      	ldr	r3, [pc, #540]	; (800426c <HAL_RCC_ClockConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 020f 	bic.w	r2, r3, #15
 8004056:	4985      	ldr	r1, [pc, #532]	; (800426c <HAL_RCC_ClockConfig+0x240>)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405e:	4b83      	ldr	r3, [pc, #524]	; (800426c <HAL_RCC_ClockConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e184      	b.n	800437a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d010      	beq.n	800409e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	4b7b      	ldr	r3, [pc, #492]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004088:	429a      	cmp	r2, r3
 800408a:	d908      	bls.n	800409e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800408c:	4b78      	ldr	r3, [pc, #480]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	4975      	ldr	r1, [pc, #468]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 800409a:	4313      	orrs	r3, r2
 800409c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d010      	beq.n	80040cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	4b70      	ldr	r3, [pc, #448]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d908      	bls.n	80040cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040ba:	4b6d      	ldr	r3, [pc, #436]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	496a      	ldr	r1, [pc, #424]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d010      	beq.n	80040fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	4b64      	ldr	r3, [pc, #400]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d908      	bls.n	80040fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040e8:	4b61      	ldr	r3, [pc, #388]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	495e      	ldr	r1, [pc, #376]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d010      	beq.n	8004128 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	4b59      	ldr	r3, [pc, #356]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004112:	429a      	cmp	r2, r3
 8004114:	d908      	bls.n	8004128 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004116:	4b56      	ldr	r3, [pc, #344]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	4953      	ldr	r1, [pc, #332]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 8004124:	4313      	orrs	r3, r2
 8004126:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d010      	beq.n	8004156 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	4b4d      	ldr	r3, [pc, #308]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	429a      	cmp	r2, r3
 8004142:	d908      	bls.n	8004156 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004144:	4b4a      	ldr	r3, [pc, #296]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	f023 020f 	bic.w	r2, r3, #15
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4947      	ldr	r1, [pc, #284]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 8004152:	4313      	orrs	r3, r2
 8004154:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d055      	beq.n	800420e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004162:	4b43      	ldr	r3, [pc, #268]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	4940      	ldr	r1, [pc, #256]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 8004170:	4313      	orrs	r3, r2
 8004172:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d107      	bne.n	800418c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800417c:	4b3c      	ldr	r3, [pc, #240]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d121      	bne.n	80041cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0f6      	b.n	800437a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004194:	4b36      	ldr	r3, [pc, #216]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d115      	bne.n	80041cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0ea      	b.n	800437a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041ac:	4b30      	ldr	r3, [pc, #192]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0de      	b.n	800437a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041bc:	4b2c      	ldr	r3, [pc, #176]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0d6      	b.n	800437a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041cc:	4b28      	ldr	r3, [pc, #160]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f023 0207 	bic.w	r2, r3, #7
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4925      	ldr	r1, [pc, #148]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041de:	f7fc fd0d 	bl	8000bfc <HAL_GetTick>
 80041e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e6:	f7fc fd09 	bl	8000bfc <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e0be      	b.n	800437a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fc:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	429a      	cmp	r2, r3
 800420c:	d1eb      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d010      	beq.n	800423c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	4b14      	ldr	r3, [pc, #80]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	429a      	cmp	r2, r3
 8004228:	d208      	bcs.n	800423c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422a:	4b11      	ldr	r3, [pc, #68]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	f023 020f 	bic.w	r2, r3, #15
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	490e      	ldr	r1, [pc, #56]	; (8004270 <HAL_RCC_ClockConfig+0x244>)
 8004238:	4313      	orrs	r3, r2
 800423a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_RCC_ClockConfig+0x240>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d214      	bcs.n	8004274 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424a:	4b08      	ldr	r3, [pc, #32]	; (800426c <HAL_RCC_ClockConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 020f 	bic.w	r2, r3, #15
 8004252:	4906      	ldr	r1, [pc, #24]	; (800426c <HAL_RCC_ClockConfig+0x240>)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	4313      	orrs	r3, r2
 8004258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425a:	4b04      	ldr	r3, [pc, #16]	; (800426c <HAL_RCC_ClockConfig+0x240>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e086      	b.n	800437a <HAL_RCC_ClockConfig+0x34e>
 800426c:	52002000 	.word	0x52002000
 8004270:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d010      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	4b3f      	ldr	r3, [pc, #252]	; (8004384 <HAL_RCC_ClockConfig+0x358>)
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800428c:	429a      	cmp	r2, r3
 800428e:	d208      	bcs.n	80042a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004290:	4b3c      	ldr	r3, [pc, #240]	; (8004384 <HAL_RCC_ClockConfig+0x358>)
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	4939      	ldr	r1, [pc, #228]	; (8004384 <HAL_RCC_ClockConfig+0x358>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d010      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	4b34      	ldr	r3, [pc, #208]	; (8004384 <HAL_RCC_ClockConfig+0x358>)
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d208      	bcs.n	80042d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042be:	4b31      	ldr	r3, [pc, #196]	; (8004384 <HAL_RCC_ClockConfig+0x358>)
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	492e      	ldr	r1, [pc, #184]	; (8004384 <HAL_RCC_ClockConfig+0x358>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d010      	beq.n	80042fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699a      	ldr	r2, [r3, #24]
 80042e0:	4b28      	ldr	r3, [pc, #160]	; (8004384 <HAL_RCC_ClockConfig+0x358>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d208      	bcs.n	80042fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042ec:	4b25      	ldr	r3, [pc, #148]	; (8004384 <HAL_RCC_ClockConfig+0x358>)
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	4922      	ldr	r1, [pc, #136]	; (8004384 <HAL_RCC_ClockConfig+0x358>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d010      	beq.n	800432c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <HAL_RCC_ClockConfig+0x358>)
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004316:	429a      	cmp	r2, r3
 8004318:	d208      	bcs.n	800432c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800431a:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <HAL_RCC_ClockConfig+0x358>)
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	4917      	ldr	r1, [pc, #92]	; (8004384 <HAL_RCC_ClockConfig+0x358>)
 8004328:	4313      	orrs	r3, r2
 800432a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800432c:	f000 f834 	bl	8004398 <HAL_RCC_GetSysClockFreq>
 8004330:	4602      	mov	r2, r0
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <HAL_RCC_ClockConfig+0x358>)
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	4912      	ldr	r1, [pc, #72]	; (8004388 <HAL_RCC_ClockConfig+0x35c>)
 800433e:	5ccb      	ldrb	r3, [r1, r3]
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
 8004348:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800434a:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <HAL_RCC_ClockConfig+0x358>)
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	4a0d      	ldr	r2, [pc, #52]	; (8004388 <HAL_RCC_ClockConfig+0x35c>)
 8004354:	5cd3      	ldrb	r3, [r2, r3]
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	4a0a      	ldr	r2, [pc, #40]	; (800438c <HAL_RCC_ClockConfig+0x360>)
 8004362:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004364:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <HAL_RCC_ClockConfig+0x364>)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <HAL_RCC_ClockConfig+0x368>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f7fc fbfa 	bl	8000b68 <HAL_InitTick>
 8004374:	4603      	mov	r3, r0
 8004376:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004378:	7bfb      	ldrb	r3, [r7, #15]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	58024400 	.word	0x58024400
 8004388:	080060f0 	.word	0x080060f0
 800438c:	24000004 	.word	0x24000004
 8004390:	24000000 	.word	0x24000000
 8004394:	24000008 	.word	0x24000008

08004398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004398:	b480      	push	{r7}
 800439a:	b089      	sub	sp, #36	; 0x24
 800439c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800439e:	4bb3      	ldr	r3, [pc, #716]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043a6:	2b18      	cmp	r3, #24
 80043a8:	f200 8155 	bhi.w	8004656 <HAL_RCC_GetSysClockFreq+0x2be>
 80043ac:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80043ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b2:	bf00      	nop
 80043b4:	08004419 	.word	0x08004419
 80043b8:	08004657 	.word	0x08004657
 80043bc:	08004657 	.word	0x08004657
 80043c0:	08004657 	.word	0x08004657
 80043c4:	08004657 	.word	0x08004657
 80043c8:	08004657 	.word	0x08004657
 80043cc:	08004657 	.word	0x08004657
 80043d0:	08004657 	.word	0x08004657
 80043d4:	0800443f 	.word	0x0800443f
 80043d8:	08004657 	.word	0x08004657
 80043dc:	08004657 	.word	0x08004657
 80043e0:	08004657 	.word	0x08004657
 80043e4:	08004657 	.word	0x08004657
 80043e8:	08004657 	.word	0x08004657
 80043ec:	08004657 	.word	0x08004657
 80043f0:	08004657 	.word	0x08004657
 80043f4:	08004445 	.word	0x08004445
 80043f8:	08004657 	.word	0x08004657
 80043fc:	08004657 	.word	0x08004657
 8004400:	08004657 	.word	0x08004657
 8004404:	08004657 	.word	0x08004657
 8004408:	08004657 	.word	0x08004657
 800440c:	08004657 	.word	0x08004657
 8004410:	08004657 	.word	0x08004657
 8004414:	0800444b 	.word	0x0800444b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004418:	4b94      	ldr	r3, [pc, #592]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004424:	4b91      	ldr	r3, [pc, #580]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	08db      	lsrs	r3, r3, #3
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	4a90      	ldr	r2, [pc, #576]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004436:	e111      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004438:	4b8d      	ldr	r3, [pc, #564]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800443a:	61bb      	str	r3, [r7, #24]
    break;
 800443c:	e10e      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800443e:	4b8d      	ldr	r3, [pc, #564]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004440:	61bb      	str	r3, [r7, #24]
    break;
 8004442:	e10b      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004444:	4b8c      	ldr	r3, [pc, #560]	; (8004678 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004446:	61bb      	str	r3, [r7, #24]
    break;
 8004448:	e108      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800444a:	4b88      	ldr	r3, [pc, #544]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004454:	4b85      	ldr	r3, [pc, #532]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	091b      	lsrs	r3, r3, #4
 800445a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800445e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004460:	4b82      	ldr	r3, [pc, #520]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800446a:	4b80      	ldr	r3, [pc, #512]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800446c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446e:	08db      	lsrs	r3, r3, #3
 8004470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	fb02 f303 	mul.w	r3, r2, r3
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004482:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80e1 	beq.w	8004650 <HAL_RCC_GetSysClockFreq+0x2b8>
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b02      	cmp	r3, #2
 8004492:	f000 8083 	beq.w	800459c <HAL_RCC_GetSysClockFreq+0x204>
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b02      	cmp	r3, #2
 800449a:	f200 80a1 	bhi.w	80045e0 <HAL_RCC_GetSysClockFreq+0x248>
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0x114>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d056      	beq.n	8004558 <HAL_RCC_GetSysClockFreq+0x1c0>
 80044aa:	e099      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044ac:	4b6f      	ldr	r3, [pc, #444]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d02d      	beq.n	8004514 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044b8:	4b6c      	ldr	r3, [pc, #432]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	08db      	lsrs	r3, r3, #3
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	4a6b      	ldr	r2, [pc, #428]	; (8004670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
 80044c8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	ee07 3a90 	vmov	s15, r3
 80044d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e2:	4b62      	ldr	r3, [pc, #392]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800467c <HAL_RCC_GetSysClockFreq+0x2e4>
 80044fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800450a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004512:	e087      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004680 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004526:	4b51      	ldr	r3, [pc, #324]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004536:	ed97 6a02 	vldr	s12, [r7, #8]
 800453a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800467c <HAL_RCC_GetSysClockFreq+0x2e4>
 800453e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800454a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800454e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004556:	e065      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004562:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004684 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800456a:	4b40      	ldr	r3, [pc, #256]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800457a:	ed97 6a02 	vldr	s12, [r7, #8]
 800457e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800467c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800458a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800458e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800459a:	e043      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004688 <HAL_RCC_GetSysClockFreq+0x2f0>
 80045aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ae:	4b2f      	ldr	r3, [pc, #188]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045be:	ed97 6a02 	vldr	s12, [r7, #8]
 80045c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800467c <HAL_RCC_GetSysClockFreq+0x2e4>
 80045c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045de:	e021      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004684 <HAL_RCC_GetSysClockFreq+0x2ec>
 80045ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045f2:	4b1e      	ldr	r3, [pc, #120]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fa:	ee07 3a90 	vmov	s15, r3
 80045fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004602:	ed97 6a02 	vldr	s12, [r7, #8]
 8004606:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800467c <HAL_RCC_GetSysClockFreq+0x2e4>
 800460a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800460e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800461a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004622:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	0a5b      	lsrs	r3, r3, #9
 800462a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800462e:	3301      	adds	r3, #1
 8004630:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800463c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004648:	ee17 3a90 	vmov	r3, s15
 800464c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800464e:	e005      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	61bb      	str	r3, [r7, #24]
    break;
 8004654:	e002      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004656:	4b07      	ldr	r3, [pc, #28]	; (8004674 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004658:	61bb      	str	r3, [r7, #24]
    break;
 800465a:	bf00      	nop
  }

  return sysclockfreq;
 800465c:	69bb      	ldr	r3, [r7, #24]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3724      	adds	r7, #36	; 0x24
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	58024400 	.word	0x58024400
 8004670:	03d09000 	.word	0x03d09000
 8004674:	003d0900 	.word	0x003d0900
 8004678:	016e3600 	.word	0x016e3600
 800467c:	46000000 	.word	0x46000000
 8004680:	4c742400 	.word	0x4c742400
 8004684:	4a742400 	.word	0x4a742400
 8004688:	4bb71b00 	.word	0x4bb71b00

0800468c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004694:	2300      	movs	r3, #0
 8004696:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004698:	2300      	movs	r3, #0
 800469a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d03f      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046b0:	d02a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046b6:	d824      	bhi.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046bc:	d018      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046c2:	d81e      	bhi.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046cc:	d007      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046ce:	e018      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d0:	4b9f      	ldr	r3, [pc, #636]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4a9e      	ldr	r2, [pc, #632]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046dc:	e015      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2102      	movs	r1, #2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fedd 	bl	80054a4 <RCCEx_PLL2_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046ee:	e00c      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3324      	adds	r3, #36	; 0x24
 80046f4:	2102      	movs	r1, #2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 ff86 	bl	8005608 <RCCEx_PLL3_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004700:	e003      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	75fb      	strb	r3, [r7, #23]
      break;
 8004706:	e000      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800470a:	7dfb      	ldrb	r3, [r7, #23]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004710:	4b8f      	ldr	r3, [pc, #572]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004714:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471c:	498c      	ldr	r1, [pc, #560]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800471e:	4313      	orrs	r3, r2
 8004720:	650b      	str	r3, [r1, #80]	; 0x50
 8004722:	e001      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d03d      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004738:	2b04      	cmp	r3, #4
 800473a:	d826      	bhi.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800473c:	a201      	add	r2, pc, #4	; (adr r2, 8004744 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004742:	bf00      	nop
 8004744:	08004759 	.word	0x08004759
 8004748:	08004767 	.word	0x08004767
 800474c:	08004779 	.word	0x08004779
 8004750:	08004791 	.word	0x08004791
 8004754:	08004791 	.word	0x08004791
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004758:	4b7d      	ldr	r3, [pc, #500]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	4a7c      	ldr	r2, [pc, #496]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800475e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004764:	e015      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3304      	adds	r3, #4
 800476a:	2100      	movs	r1, #0
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fe99 	bl	80054a4 <RCCEx_PLL2_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004776:	e00c      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3324      	adds	r3, #36	; 0x24
 800477c:	2100      	movs	r1, #0
 800477e:	4618      	mov	r0, r3
 8004780:	f000 ff42 	bl	8005608 <RCCEx_PLL3_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004788:	e003      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
      break;
 800478e:	e000      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004792:	7dfb      	ldrb	r3, [r7, #23]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d109      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004798:	4b6d      	ldr	r3, [pc, #436]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800479a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479c:	f023 0207 	bic.w	r2, r3, #7
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	496a      	ldr	r1, [pc, #424]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	650b      	str	r3, [r1, #80]	; 0x50
 80047aa:	e001      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ac:	7dfb      	ldrb	r3, [r7, #23]
 80047ae:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d04a      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80047c4:	d031      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80047c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80047ca:	d82b      	bhi.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d0:	d02d      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80047d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d6:	d825      	bhi.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047d8:	2bc0      	cmp	r3, #192	; 0xc0
 80047da:	d02a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80047dc:	2bc0      	cmp	r3, #192	; 0xc0
 80047de:	d821      	bhi.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047e0:	2b80      	cmp	r3, #128	; 0x80
 80047e2:	d016      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80047e4:	2b80      	cmp	r3, #128	; 0x80
 80047e6:	d81d      	bhi.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	d007      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80047f0:	e018      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f2:	4b57      	ldr	r3, [pc, #348]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	4a56      	ldr	r2, [pc, #344]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80047fe:	e019      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3304      	adds	r3, #4
 8004804:	2100      	movs	r1, #0
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fe4c 	bl	80054a4 <RCCEx_PLL2_Config>
 800480c:	4603      	mov	r3, r0
 800480e:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004810:	e010      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3324      	adds	r3, #36	; 0x24
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fef5 	bl	8005608 <RCCEx_PLL3_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004822:	e007      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	75fb      	strb	r3, [r7, #23]
      break;
 8004828:	e004      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800482a:	bf00      	nop
 800482c:	e002      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800482e:	bf00      	nop
 8004830:	e000      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800483a:	4b45      	ldr	r3, [pc, #276]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800483c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004846:	4942      	ldr	r1, [pc, #264]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004848:	4313      	orrs	r3, r2
 800484a:	650b      	str	r3, [r1, #80]	; 0x50
 800484c:	e001      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485a:	2b00      	cmp	r3, #0
 800485c:	d04f      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004862:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004866:	d036      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004868:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800486c:	d830      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800486e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004872:	d032      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004878:	d82a      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800487a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800487e:	d02e      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004880:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004884:	d824      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800488a:	d018      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x232>
 800488c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004890:	d81e      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489a:	d007      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x220>
 800489c:	e018      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800489e:	4b2c      	ldr	r3, [pc, #176]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	4a2b      	ldr	r2, [pc, #172]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80048aa:	e019      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3304      	adds	r3, #4
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fdf6 	bl	80054a4 <RCCEx_PLL2_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80048bc:	e010      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3324      	adds	r3, #36	; 0x24
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fe9f 	bl	8005608 <RCCEx_PLL3_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80048ce:	e007      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	75fb      	strb	r3, [r7, #23]
      break;
 80048d4:	e004      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80048de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80048e6:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ea:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f2:	4917      	ldr	r1, [pc, #92]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	650b      	str	r3, [r1, #80]	; 0x50
 80048f8:	e001      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
 80048fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d034      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490e:	2b30      	cmp	r3, #48	; 0x30
 8004910:	d01c      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004912:	2b30      	cmp	r3, #48	; 0x30
 8004914:	d817      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004916:	2b20      	cmp	r3, #32
 8004918:	d00c      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800491a:	2b20      	cmp	r3, #32
 800491c:	d813      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d018      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004922:	2b10      	cmp	r3, #16
 8004924:	d10f      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	4a09      	ldr	r2, [pc, #36]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800492c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004932:	e010      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3304      	adds	r3, #4
 8004938:	2102      	movs	r1, #2
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fdb2 	bl	80054a4 <RCCEx_PLL2_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004944:	e007      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	75fb      	strb	r3, [r7, #23]
      break;
 800494a:	e004      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 800494c:	bf00      	nop
 800494e:	e002      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004950:	58024400 	.word	0x58024400
      break;
 8004954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004956:	7dfb      	ldrb	r3, [r7, #23]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800495c:	4b9b      	ldr	r3, [pc, #620]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800495e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004960:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004968:	4998      	ldr	r1, [pc, #608]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800496a:	4313      	orrs	r3, r2
 800496c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800496e:	e001      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d047      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004988:	d030      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x360>
 800498a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800498e:	d82a      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004990:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004994:	d02c      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004996:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800499a:	d824      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800499c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a0:	d018      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a6:	d81e      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80049ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b0:	d007      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80049b2:	e018      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b4:	4b85      	ldr	r3, [pc, #532]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	4a84      	ldr	r2, [pc, #528]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80049ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049c0:	e017      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3304      	adds	r3, #4
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fd6b 	bl	80054a4 <RCCEx_PLL2_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049d2:	e00e      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3324      	adds	r3, #36	; 0x24
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fe14 	bl	8005608 <RCCEx_PLL3_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049e4:	e005      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	75fb      	strb	r3, [r7, #23]
      break;
 80049ea:	e002      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80049ec:	bf00      	nop
 80049ee:	e000      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80049f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049f8:	4b74      	ldr	r3, [pc, #464]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80049fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a04:	4971      	ldr	r1, [pc, #452]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	650b      	str	r3, [r1, #80]	; 0x50
 8004a0a:	e001      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d049      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a24:	d02e      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004a26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a2a:	d828      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004a2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a30:	d02a      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004a32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a36:	d822      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004a38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a3c:	d026      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004a3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a42:	d81c      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a48:	d010      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004a4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a4e:	d816      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01d      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a58:	d111      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	2101      	movs	r1, #1
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fd1f 	bl	80054a4 <RCCEx_PLL2_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a6a:	e012      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3324      	adds	r3, #36	; 0x24
 8004a70:	2101      	movs	r1, #1
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fdc8 	bl	8005608 <RCCEx_PLL3_Config>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a7c:	e009      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	75fb      	strb	r3, [r7, #23]
      break;
 8004a82:	e006      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004a84:	bf00      	nop
 8004a86:	e004      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004a88:	bf00      	nop
 8004a8a:	e002      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004a8c:	bf00      	nop
 8004a8e:	e000      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a98:	4b4c      	ldr	r3, [pc, #304]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa4:	4949      	ldr	r1, [pc, #292]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	650b      	str	r3, [r1, #80]	; 0x50
 8004aaa:	e001      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d053      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ac2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004ac6:	d034      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004ac8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004acc:	d82e      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ad2:	d030      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ad8:	d828      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ade:	d02c      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae4:	d822      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004ae6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004aea:	d028      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004aec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004af0:	d81c      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af6:	d010      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004afc:	d816      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d01f      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b06:	d111      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fcc8 	bl	80054a4 <RCCEx_PLL2_Config>
 8004b14:	4603      	mov	r3, r0
 8004b16:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b18:	e014      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3324      	adds	r3, #36	; 0x24
 8004b1e:	2101      	movs	r1, #1
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fd71 	bl	8005608 <RCCEx_PLL3_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b2a:	e00b      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b30:	e008      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b32:	bf00      	nop
 8004b34:	e006      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b36:	bf00      	nop
 8004b38:	e004      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b3a:	bf00      	nop
 8004b3c:	e002      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b3e:	bf00      	nop
 8004b40:	e000      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b44:	7dfb      	ldrb	r3, [r7, #23]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b4a:	4b20      	ldr	r3, [pc, #128]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b58:	491c      	ldr	r1, [pc, #112]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b5e:	e001      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b60:	7dfb      	ldrb	r3, [r7, #23]
 8004b62:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d031      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b78:	d00e      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b7e:	d814      	bhi.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d015      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004b84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b88:	d10f      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b8a:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	4a0f      	ldr	r2, [pc, #60]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b96:	e00c      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fc80 	bl	80054a4 <RCCEx_PLL2_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ba8:	e003      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	75fb      	strb	r3, [r7, #23]
      break;
 8004bae:	e000      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10b      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bb8:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bbc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc4:	4901      	ldr	r1, [pc, #4]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	650b      	str	r3, [r1, #80]	; 0x50
 8004bca:	e003      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004bcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d032      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d81b      	bhi.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004be8:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bee:	bf00      	nop
 8004bf0:	08004c27 	.word	0x08004c27
 8004bf4:	08004c01 	.word	0x08004c01
 8004bf8:	08004c0f 	.word	0x08004c0f
 8004bfc:	08004c27 	.word	0x08004c27
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c00:	4bb2      	ldr	r3, [pc, #712]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	4ab1      	ldr	r2, [pc, #708]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c0c:	e00c      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3304      	adds	r3, #4
 8004c12:	2102      	movs	r1, #2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fc45 	bl	80054a4 <RCCEx_PLL2_Config>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c1e:	e003      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	75fb      	strb	r3, [r7, #23]
      break;
 8004c24:	e000      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c2e:	4ba7      	ldr	r3, [pc, #668]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c32:	f023 0203 	bic.w	r2, r3, #3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	49a4      	ldr	r1, [pc, #656]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c40:	e001      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
 8004c44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8086 	beq.w	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c54:	4b9e      	ldr	r3, [pc, #632]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a9d      	ldr	r2, [pc, #628]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c60:	f7fb ffcc 	bl	8000bfc <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c66:	e009      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c68:	f7fb ffc8 	bl	8000bfc <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b64      	cmp	r3, #100	; 0x64
 8004c74:	d902      	bls.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	75fb      	strb	r3, [r7, #23]
        break;
 8004c7a:	e005      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c7c:	4b94      	ldr	r3, [pc, #592]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0ef      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004c88:	7dfb      	ldrb	r3, [r7, #23]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d166      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c8e:	4b8f      	ldr	r3, [pc, #572]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c98:	4053      	eors	r3, r2
 8004c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d013      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ca2:	4b8a      	ldr	r3, [pc, #552]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004caa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cac:	4b87      	ldr	r3, [pc, #540]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	4a86      	ldr	r2, [pc, #536]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cb8:	4b84      	ldr	r3, [pc, #528]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	4a83      	ldr	r2, [pc, #524]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004cc4:	4a81      	ldr	r2, [pc, #516]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd4:	d115      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd6:	f7fb ff91 	bl	8000bfc <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cdc:	e00b      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cde:	f7fb ff8d 	bl	8000bfc <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d902      	bls.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	75fb      	strb	r3, [r7, #23]
            break;
 8004cf4:	e005      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cf6:	4b75      	ldr	r3, [pc, #468]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0ed      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d126      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d16:	d10d      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8004d18:	4b6c      	ldr	r3, [pc, #432]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d26:	0919      	lsrs	r1, r3, #4
 8004d28:	4b6a      	ldr	r3, [pc, #424]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004d2a:	400b      	ands	r3, r1
 8004d2c:	4967      	ldr	r1, [pc, #412]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	610b      	str	r3, [r1, #16]
 8004d32:	e005      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8004d34:	4b65      	ldr	r3, [pc, #404]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	4a64      	ldr	r2, [pc, #400]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d3e:	6113      	str	r3, [r2, #16]
 8004d40:	4b62      	ldr	r3, [pc, #392]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4e:	495f      	ldr	r1, [pc, #380]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	670b      	str	r3, [r1, #112]	; 0x70
 8004d54:	e004      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
 8004d58:	75bb      	strb	r3, [r7, #22]
 8004d5a:	e001      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5c:	7dfb      	ldrb	r3, [r7, #23]
 8004d5e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d07f      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d72:	2b28      	cmp	r3, #40	; 0x28
 8004d74:	d866      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8004d76:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004e4b 	.word	0x08004e4b
 8004d80:	08004e45 	.word	0x08004e45
 8004d84:	08004e45 	.word	0x08004e45
 8004d88:	08004e45 	.word	0x08004e45
 8004d8c:	08004e45 	.word	0x08004e45
 8004d90:	08004e45 	.word	0x08004e45
 8004d94:	08004e45 	.word	0x08004e45
 8004d98:	08004e45 	.word	0x08004e45
 8004d9c:	08004e21 	.word	0x08004e21
 8004da0:	08004e45 	.word	0x08004e45
 8004da4:	08004e45 	.word	0x08004e45
 8004da8:	08004e45 	.word	0x08004e45
 8004dac:	08004e45 	.word	0x08004e45
 8004db0:	08004e45 	.word	0x08004e45
 8004db4:	08004e45 	.word	0x08004e45
 8004db8:	08004e45 	.word	0x08004e45
 8004dbc:	08004e33 	.word	0x08004e33
 8004dc0:	08004e45 	.word	0x08004e45
 8004dc4:	08004e45 	.word	0x08004e45
 8004dc8:	08004e45 	.word	0x08004e45
 8004dcc:	08004e45 	.word	0x08004e45
 8004dd0:	08004e45 	.word	0x08004e45
 8004dd4:	08004e45 	.word	0x08004e45
 8004dd8:	08004e45 	.word	0x08004e45
 8004ddc:	08004e4b 	.word	0x08004e4b
 8004de0:	08004e45 	.word	0x08004e45
 8004de4:	08004e45 	.word	0x08004e45
 8004de8:	08004e45 	.word	0x08004e45
 8004dec:	08004e45 	.word	0x08004e45
 8004df0:	08004e45 	.word	0x08004e45
 8004df4:	08004e45 	.word	0x08004e45
 8004df8:	08004e45 	.word	0x08004e45
 8004dfc:	08004e4b 	.word	0x08004e4b
 8004e00:	08004e45 	.word	0x08004e45
 8004e04:	08004e45 	.word	0x08004e45
 8004e08:	08004e45 	.word	0x08004e45
 8004e0c:	08004e45 	.word	0x08004e45
 8004e10:	08004e45 	.word	0x08004e45
 8004e14:	08004e45 	.word	0x08004e45
 8004e18:	08004e45 	.word	0x08004e45
 8004e1c:	08004e4b 	.word	0x08004e4b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	2101      	movs	r1, #1
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fb3c 	bl	80054a4 <RCCEx_PLL2_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e30:	e00c      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3324      	adds	r3, #36	; 0x24
 8004e36:	2101      	movs	r1, #1
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 fbe5 	bl	8005608 <RCCEx_PLL3_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e42:	e003      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	75fb      	strb	r3, [r7, #23]
      break;
 8004e48:	e000      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8004e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e52:	4b1e      	ldr	r3, [pc, #120]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e60:	491a      	ldr	r1, [pc, #104]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	654b      	str	r3, [r1, #84]	; 0x54
 8004e66:	e001      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
 8004e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d03f      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e7c:	2b05      	cmp	r3, #5
 8004e7e:	d821      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004e80:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004ed9 	.word	0x08004ed9
 8004e8c:	08004ea1 	.word	0x08004ea1
 8004e90:	08004eb3 	.word	0x08004eb3
 8004e94:	08004ed9 	.word	0x08004ed9
 8004e98:	08004ed9 	.word	0x08004ed9
 8004e9c:	08004ed9 	.word	0x08004ed9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fafc 	bl	80054a4 <RCCEx_PLL2_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004eb0:	e013      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3324      	adds	r3, #36	; 0x24
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fba5 	bl	8005608 <RCCEx_PLL3_Config>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ec2:	e00a      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec8:	e007      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004eca:	bf00      	nop
 8004ecc:	58024400 	.word	0x58024400
 8004ed0:	58024800 	.word	0x58024800
 8004ed4:	00ffffcf 	.word	0x00ffffcf
      break;
 8004ed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eda:	7dfb      	ldrb	r3, [r7, #23]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d109      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ee0:	4b9f      	ldr	r3, [pc, #636]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee4:	f023 0207 	bic.w	r2, r3, #7
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eec:	499c      	ldr	r1, [pc, #624]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	654b      	str	r3, [r1, #84]	; 0x54
 8004ef2:	e001      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
 8004ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d039      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f0a:	2b05      	cmp	r3, #5
 8004f0c:	d820      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8004f0e:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f57 	.word	0x08004f57
 8004f18:	08004f2d 	.word	0x08004f2d
 8004f1c:	08004f3f 	.word	0x08004f3f
 8004f20:	08004f57 	.word	0x08004f57
 8004f24:	08004f57 	.word	0x08004f57
 8004f28:	08004f57 	.word	0x08004f57
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	2101      	movs	r1, #1
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fab6 	bl	80054a4 <RCCEx_PLL2_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f3c:	e00c      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3324      	adds	r3, #36	; 0x24
 8004f42:	2101      	movs	r1, #1
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fb5f 	bl	8005608 <RCCEx_PLL3_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f4e:	e003      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	75fb      	strb	r3, [r7, #23]
      break;
 8004f54:	e000      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8004f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f5e:	4b80      	ldr	r3, [pc, #512]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f62:	f023 0207 	bic.w	r2, r3, #7
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f6c:	497c      	ldr	r1, [pc, #496]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	658b      	str	r3, [r1, #88]	; 0x58
 8004f72:	e001      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d04b      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f8e:	d02e      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f94:	d828      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9a:	d02a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa0:	d822      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fa6:	d026      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004fa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fac:	d81c      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb2:	d010      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8004fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb8:	d816      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d01d      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fc2:	d111      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	2100      	movs	r1, #0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fa6a 	bl	80054a4 <RCCEx_PLL2_Config>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fd4:	e012      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3324      	adds	r3, #36	; 0x24
 8004fda:	2102      	movs	r1, #2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fb13 	bl	8005608 <RCCEx_PLL3_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fe6:	e009      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	75fb      	strb	r3, [r7, #23]
      break;
 8004fec:	e006      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004fee:	bf00      	nop
 8004ff0:	e004      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004ff2:	bf00      	nop
 8004ff4:	e002      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004ff6:	bf00      	nop
 8004ff8:	e000      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10a      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005002:	4b57      	ldr	r3, [pc, #348]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005006:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005010:	4953      	ldr	r1, [pc, #332]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005012:	4313      	orrs	r3, r2
 8005014:	654b      	str	r3, [r1, #84]	; 0x54
 8005016:	e001      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005018:	7dfb      	ldrb	r3, [r7, #23]
 800501a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b00      	cmp	r3, #0
 8005026:	d04b      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800502e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005032:	d02e      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005034:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005038:	d828      	bhi.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503e:	d02a      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005044:	d822      	bhi.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800504a:	d026      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800504c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005050:	d81c      	bhi.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005056:	d010      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800505c:	d816      	bhi.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01d      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005066:	d111      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	2100      	movs	r1, #0
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fa18 	bl	80054a4 <RCCEx_PLL2_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005078:	e012      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3324      	adds	r3, #36	; 0x24
 800507e:	2102      	movs	r1, #2
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fac1 	bl	8005608 <RCCEx_PLL3_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800508a:	e009      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	75fb      	strb	r3, [r7, #23]
      break;
 8005090:	e006      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005092:	bf00      	nop
 8005094:	e004      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005096:	bf00      	nop
 8005098:	e002      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800509a:	bf00      	nop
 800509c:	e000      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800509e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050a6:	4b2e      	ldr	r3, [pc, #184]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80050a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050b4:	492a      	ldr	r1, [pc, #168]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	658b      	str	r3, [r1, #88]	; 0x58
 80050ba:	e001      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d04d      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050d6:	d02e      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80050d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050dc:	d828      	bhi.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80050de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e2:	d02a      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80050e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e8:	d822      	bhi.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80050ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050ee:	d026      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80050f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050f4:	d81c      	bhi.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80050f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050fa:	d010      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80050fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005100:	d816      	bhi.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d01d      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800510a:	d111      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3304      	adds	r3, #4
 8005110:	2100      	movs	r1, #0
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f9c6 	bl	80054a4 <RCCEx_PLL2_Config>
 8005118:	4603      	mov	r3, r0
 800511a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800511c:	e012      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3324      	adds	r3, #36	; 0x24
 8005122:	2102      	movs	r1, #2
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fa6f 	bl	8005608 <RCCEx_PLL3_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800512e:	e009      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	75fb      	strb	r3, [r7, #23]
      break;
 8005134:	e006      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005136:	bf00      	nop
 8005138:	e004      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800513a:	bf00      	nop
 800513c:	e002      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800513e:	bf00      	nop
 8005140:	e000      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005144:	7dfb      	ldrb	r3, [r7, #23]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10c      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800514a:	4b05      	ldr	r3, [pc, #20]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800514c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005158:	4901      	ldr	r1, [pc, #4]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800515a:	4313      	orrs	r3, r2
 800515c:	658b      	str	r3, [r1, #88]	; 0x58
 800515e:	e003      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005160:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005164:	7dfb      	ldrb	r3, [r7, #23]
 8005166:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01a      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800517e:	d10a      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3324      	adds	r3, #36	; 0x24
 8005184:	2102      	movs	r1, #2
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fa3e 	bl	8005608 <RCCEx_PLL3_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005196:	4b8c      	ldr	r3, [pc, #560]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a4:	4988      	ldr	r1, [pc, #544]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d01a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c0:	d10a      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3324      	adds	r3, #36	; 0x24
 80051c6:	2102      	movs	r1, #2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fa1d 	bl	8005608 <RCCEx_PLL3_Config>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051d8:	4b7b      	ldr	r3, [pc, #492]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80051da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051e6:	4978      	ldr	r1, [pc, #480]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d034      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005202:	d01d      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8005204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005208:	d817      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800520e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005212:	d009      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005214:	e011      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3304      	adds	r3, #4
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f000 f941 	bl	80054a4 <RCCEx_PLL2_Config>
 8005222:	4603      	mov	r3, r0
 8005224:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005226:	e00c      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3324      	adds	r3, #36	; 0x24
 800522c:	2102      	movs	r1, #2
 800522e:	4618      	mov	r0, r3
 8005230:	f000 f9ea 	bl	8005608 <RCCEx_PLL3_Config>
 8005234:	4603      	mov	r3, r0
 8005236:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005238:	e003      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	75fb      	strb	r3, [r7, #23]
      break;
 800523e:	e000      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8005240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005242:	7dfb      	ldrb	r3, [r7, #23]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005248:	4b5f      	ldr	r3, [pc, #380]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800524a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005256:	495c      	ldr	r1, [pc, #368]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005258:	4313      	orrs	r3, r2
 800525a:	658b      	str	r3, [r1, #88]	; 0x58
 800525c:	e001      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d033      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005274:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005278:	d01c      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800527a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800527e:	d816      	bhi.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005284:	d003      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800528a:	d007      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800528c:	e00f      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800528e:	4b4e      	ldr	r3, [pc, #312]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	4a4d      	ldr	r2, [pc, #308]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005298:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800529a:	e00c      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3324      	adds	r3, #36	; 0x24
 80052a0:	2101      	movs	r1, #1
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f9b0 	bl	8005608 <RCCEx_PLL3_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80052ac:	e003      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	75fb      	strb	r3, [r7, #23]
      break;
 80052b2:	e000      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80052b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052bc:	4b42      	ldr	r3, [pc, #264]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ca:	493f      	ldr	r1, [pc, #252]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	654b      	str	r3, [r1, #84]	; 0x54
 80052d0:	e001      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
 80052d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d029      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80052ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ee:	d007      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80052f0:	e00f      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f2:	4b35      	ldr	r3, [pc, #212]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	4a34      	ldr	r2, [pc, #208]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052fe:	e00b      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3304      	adds	r3, #4
 8005304:	2102      	movs	r1, #2
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f8cc 	bl	80054a4 <RCCEx_PLL2_Config>
 800530c:	4603      	mov	r3, r0
 800530e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005310:	e002      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	75fb      	strb	r3, [r7, #23]
      break;
 8005316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005318:	7dfb      	ldrb	r3, [r7, #23]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800531e:	4b2a      	ldr	r3, [pc, #168]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005322:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532a:	4927      	ldr	r1, [pc, #156]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800532c:	4313      	orrs	r3, r2
 800532e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005330:	e001      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005332:	7dfb      	ldrb	r3, [r7, #23]
 8005334:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3324      	adds	r3, #36	; 0x24
 8005346:	2102      	movs	r1, #2
 8005348:	4618      	mov	r0, r3
 800534a:	f000 f95d 	bl	8005608 <RCCEx_PLL3_Config>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d035      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800536a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800536e:	d017      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005374:	d811      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800537a:	d013      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800537c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005380:	d80b      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005382:	2b00      	cmp	r3, #0
 8005384:	d010      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8005386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800538a:	d106      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800538c:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	4a0d      	ldr	r2, [pc, #52]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005396:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005398:	e007      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	75fb      	strb	r3, [r7, #23]
      break;
 800539e:	e004      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80053a0:	bf00      	nop
 80053a2:	e002      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80053a4:	bf00      	nop
 80053a6:	e000      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80053a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053aa:	7dfb      	ldrb	r3, [r7, #23]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10d      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80053b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053be:	4902      	ldr	r1, [pc, #8]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	654b      	str	r3, [r1, #84]	; 0x54
 80053c4:	e004      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80053c6:	bf00      	nop
 80053c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053dc:	4b30      	ldr	r3, [pc, #192]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80053de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e8:	492d      	ldr	r1, [pc, #180]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d008      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053fa:	4b29      	ldr	r3, [pc, #164]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80053fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005406:	4926      	ldr	r1, [pc, #152]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005408:	4313      	orrs	r3, r2
 800540a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005418:	4b21      	ldr	r3, [pc, #132]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800541a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005424:	491e      	ldr	r1, [pc, #120]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005426:	4313      	orrs	r3, r2
 8005428:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00d      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005436:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	4a19      	ldr	r2, [pc, #100]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800543c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005440:	6113      	str	r3, [r2, #16]
 8005442:	4b17      	ldr	r3, [pc, #92]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800544c:	4914      	ldr	r1, [pc, #80]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800544e:	4313      	orrs	r3, r2
 8005450:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	da08      	bge.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800545a:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800545c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800545e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005466:	490e      	ldr	r1, [pc, #56]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005468:	4313      	orrs	r3, r2
 800546a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d009      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005478:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005486:	4906      	ldr	r1, [pc, #24]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005488:	4313      	orrs	r3, r2
 800548a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800548c:	7dbb      	ldrb	r3, [r7, #22]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	e000      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	58024400 	.word	0x58024400

080054a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054b2:	4b53      	ldr	r3, [pc, #332]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d101      	bne.n	80054c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e099      	b.n	80055f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80054c2:	4b4f      	ldr	r3, [pc, #316]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a4e      	ldr	r2, [pc, #312]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 80054c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ce:	f7fb fb95 	bl	8000bfc <HAL_GetTick>
 80054d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054d4:	e008      	b.n	80054e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80054d6:	f7fb fb91 	bl	8000bfc <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e086      	b.n	80055f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054e8:	4b45      	ldr	r3, [pc, #276]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f0      	bne.n	80054d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80054f4:	4b42      	ldr	r3, [pc, #264]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	031b      	lsls	r3, r3, #12
 8005502:	493f      	ldr	r1, [pc, #252]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 8005504:	4313      	orrs	r3, r2
 8005506:	628b      	str	r3, [r1, #40]	; 0x28
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	3b01      	subs	r3, #1
 800550e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	3b01      	subs	r3, #1
 8005518:	025b      	lsls	r3, r3, #9
 800551a:	b29b      	uxth	r3, r3
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	3b01      	subs	r3, #1
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	3b01      	subs	r3, #1
 8005532:	061b      	lsls	r3, r3, #24
 8005534:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005538:	4931      	ldr	r1, [pc, #196]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 800553a:	4313      	orrs	r3, r2
 800553c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800553e:	4b30      	ldr	r3, [pc, #192]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	492d      	ldr	r1, [pc, #180]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 800554c:	4313      	orrs	r3, r2
 800554e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005550:	4b2b      	ldr	r3, [pc, #172]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	f023 0220 	bic.w	r2, r3, #32
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	4928      	ldr	r1, [pc, #160]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 800555e:	4313      	orrs	r3, r2
 8005560:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005562:	4b27      	ldr	r3, [pc, #156]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	4a26      	ldr	r2, [pc, #152]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 8005568:	f023 0310 	bic.w	r3, r3, #16
 800556c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800556e:	4b24      	ldr	r3, [pc, #144]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 8005570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005572:	4b24      	ldr	r3, [pc, #144]	; (8005604 <RCCEx_PLL2_Config+0x160>)
 8005574:	4013      	ands	r3, r2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	69d2      	ldr	r2, [r2, #28]
 800557a:	00d2      	lsls	r2, r2, #3
 800557c:	4920      	ldr	r1, [pc, #128]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 800557e:	4313      	orrs	r3, r2
 8005580:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005582:	4b1f      	ldr	r3, [pc, #124]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	4a1e      	ldr	r2, [pc, #120]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 8005588:	f043 0310 	orr.w	r3, r3, #16
 800558c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d106      	bne.n	80055a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005594:	4b1a      	ldr	r3, [pc, #104]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	4a19      	ldr	r2, [pc, #100]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 800559a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800559e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055a0:	e00f      	b.n	80055c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d106      	bne.n	80055b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80055a8:	4b15      	ldr	r3, [pc, #84]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	4a14      	ldr	r2, [pc, #80]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 80055ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055b4:	e005      	b.n	80055c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80055b6:	4b12      	ldr	r3, [pc, #72]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	4a11      	ldr	r2, [pc, #68]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 80055bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80055c2:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a0e      	ldr	r2, [pc, #56]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 80055c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ce:	f7fb fb15 	bl	8000bfc <HAL_GetTick>
 80055d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055d4:	e008      	b.n	80055e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80055d6:	f7fb fb11 	bl	8000bfc <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e006      	b.n	80055f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055e8:	4b05      	ldr	r3, [pc, #20]	; (8005600 <RCCEx_PLL2_Config+0x15c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0f0      	beq.n	80055d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	58024400 	.word	0x58024400
 8005604:	ffff0007 	.word	0xffff0007

08005608 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005616:	4b53      	ldr	r3, [pc, #332]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	2b03      	cmp	r3, #3
 8005620:	d101      	bne.n	8005626 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e099      	b.n	800575a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005626:	4b4f      	ldr	r3, [pc, #316]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a4e      	ldr	r2, [pc, #312]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 800562c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005632:	f7fb fae3 	bl	8000bfc <HAL_GetTick>
 8005636:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005638:	e008      	b.n	800564c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800563a:	f7fb fadf 	bl	8000bfc <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e086      	b.n	800575a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800564c:	4b45      	ldr	r3, [pc, #276]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f0      	bne.n	800563a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005658:	4b42      	ldr	r3, [pc, #264]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	051b      	lsls	r3, r3, #20
 8005666:	493f      	ldr	r1, [pc, #252]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 8005668:	4313      	orrs	r3, r2
 800566a:	628b      	str	r3, [r1, #40]	; 0x28
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	3b01      	subs	r3, #1
 8005672:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	3b01      	subs	r3, #1
 800567c:	025b      	lsls	r3, r3, #9
 800567e:	b29b      	uxth	r3, r3
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	3b01      	subs	r3, #1
 8005688:	041b      	lsls	r3, r3, #16
 800568a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	3b01      	subs	r3, #1
 8005696:	061b      	lsls	r3, r3, #24
 8005698:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800569c:	4931      	ldr	r1, [pc, #196]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80056a2:	4b30      	ldr	r3, [pc, #192]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	492d      	ldr	r1, [pc, #180]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80056b4:	4b2b      	ldr	r3, [pc, #172]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	4928      	ldr	r1, [pc, #160]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80056c6:	4b27      	ldr	r3, [pc, #156]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ca:	4a26      	ldr	r2, [pc, #152]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 80056cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80056d2:	4b24      	ldr	r3, [pc, #144]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 80056d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056d6:	4b24      	ldr	r3, [pc, #144]	; (8005768 <RCCEx_PLL3_Config+0x160>)
 80056d8:	4013      	ands	r3, r2
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	69d2      	ldr	r2, [r2, #28]
 80056de:	00d2      	lsls	r2, r2, #3
 80056e0:	4920      	ldr	r1, [pc, #128]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80056e6:	4b1f      	ldr	r3, [pc, #124]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	4a1e      	ldr	r2, [pc, #120]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 80056ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d106      	bne.n	8005706 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80056f8:	4b1a      	ldr	r3, [pc, #104]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	4a19      	ldr	r2, [pc, #100]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 80056fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005702:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005704:	e00f      	b.n	8005726 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d106      	bne.n	800571a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800570c:	4b15      	ldr	r3, [pc, #84]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	4a14      	ldr	r2, [pc, #80]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 8005712:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005716:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005718:	e005      	b.n	8005726 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800571a:	4b12      	ldr	r3, [pc, #72]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	4a11      	ldr	r2, [pc, #68]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 8005720:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005724:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005726:	4b0f      	ldr	r3, [pc, #60]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a0e      	ldr	r2, [pc, #56]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 800572c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005732:	f7fb fa63 	bl	8000bfc <HAL_GetTick>
 8005736:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005738:	e008      	b.n	800574c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800573a:	f7fb fa5f 	bl	8000bfc <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e006      	b.n	800575a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <RCCEx_PLL3_Config+0x15c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0f0      	beq.n	800573a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	58024400 	.word	0x58024400
 8005768:	ffff0007 	.word	0xffff0007

0800576c <siprintf>:
 800576c:	b40e      	push	{r1, r2, r3}
 800576e:	b500      	push	{lr}
 8005770:	b09c      	sub	sp, #112	; 0x70
 8005772:	ab1d      	add	r3, sp, #116	; 0x74
 8005774:	9002      	str	r0, [sp, #8]
 8005776:	9006      	str	r0, [sp, #24]
 8005778:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800577c:	4809      	ldr	r0, [pc, #36]	; (80057a4 <siprintf+0x38>)
 800577e:	9107      	str	r1, [sp, #28]
 8005780:	9104      	str	r1, [sp, #16]
 8005782:	4909      	ldr	r1, [pc, #36]	; (80057a8 <siprintf+0x3c>)
 8005784:	f853 2b04 	ldr.w	r2, [r3], #4
 8005788:	9105      	str	r1, [sp, #20]
 800578a:	6800      	ldr	r0, [r0, #0]
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	a902      	add	r1, sp, #8
 8005790:	f000 f992 	bl	8005ab8 <_svfiprintf_r>
 8005794:	9b02      	ldr	r3, [sp, #8]
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	b01c      	add	sp, #112	; 0x70
 800579c:	f85d eb04 	ldr.w	lr, [sp], #4
 80057a0:	b003      	add	sp, #12
 80057a2:	4770      	bx	lr
 80057a4:	2400005c 	.word	0x2400005c
 80057a8:	ffff0208 	.word	0xffff0208

080057ac <memset>:
 80057ac:	4402      	add	r2, r0
 80057ae:	4603      	mov	r3, r0
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d100      	bne.n	80057b6 <memset+0xa>
 80057b4:	4770      	bx	lr
 80057b6:	f803 1b01 	strb.w	r1, [r3], #1
 80057ba:	e7f9      	b.n	80057b0 <memset+0x4>

080057bc <__errno>:
 80057bc:	4b01      	ldr	r3, [pc, #4]	; (80057c4 <__errno+0x8>)
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	2400005c 	.word	0x2400005c

080057c8 <__libc_init_array>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	4d0d      	ldr	r5, [pc, #52]	; (8005800 <__libc_init_array+0x38>)
 80057cc:	4c0d      	ldr	r4, [pc, #52]	; (8005804 <__libc_init_array+0x3c>)
 80057ce:	1b64      	subs	r4, r4, r5
 80057d0:	10a4      	asrs	r4, r4, #2
 80057d2:	2600      	movs	r6, #0
 80057d4:	42a6      	cmp	r6, r4
 80057d6:	d109      	bne.n	80057ec <__libc_init_array+0x24>
 80057d8:	4d0b      	ldr	r5, [pc, #44]	; (8005808 <__libc_init_array+0x40>)
 80057da:	4c0c      	ldr	r4, [pc, #48]	; (800580c <__libc_init_array+0x44>)
 80057dc:	f000 fc6a 	bl	80060b4 <_init>
 80057e0:	1b64      	subs	r4, r4, r5
 80057e2:	10a4      	asrs	r4, r4, #2
 80057e4:	2600      	movs	r6, #0
 80057e6:	42a6      	cmp	r6, r4
 80057e8:	d105      	bne.n	80057f6 <__libc_init_array+0x2e>
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f0:	4798      	blx	r3
 80057f2:	3601      	adds	r6, #1
 80057f4:	e7ee      	b.n	80057d4 <__libc_init_array+0xc>
 80057f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fa:	4798      	blx	r3
 80057fc:	3601      	adds	r6, #1
 80057fe:	e7f2      	b.n	80057e6 <__libc_init_array+0x1e>
 8005800:	0800613c 	.word	0x0800613c
 8005804:	0800613c 	.word	0x0800613c
 8005808:	0800613c 	.word	0x0800613c
 800580c:	08006140 	.word	0x08006140

08005810 <__retarget_lock_acquire_recursive>:
 8005810:	4770      	bx	lr

08005812 <__retarget_lock_release_recursive>:
 8005812:	4770      	bx	lr

08005814 <_free_r>:
 8005814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005816:	2900      	cmp	r1, #0
 8005818:	d044      	beq.n	80058a4 <_free_r+0x90>
 800581a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800581e:	9001      	str	r0, [sp, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	f1a1 0404 	sub.w	r4, r1, #4
 8005826:	bfb8      	it	lt
 8005828:	18e4      	addlt	r4, r4, r3
 800582a:	f000 f8df 	bl	80059ec <__malloc_lock>
 800582e:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <_free_r+0x94>)
 8005830:	9801      	ldr	r0, [sp, #4]
 8005832:	6813      	ldr	r3, [r2, #0]
 8005834:	b933      	cbnz	r3, 8005844 <_free_r+0x30>
 8005836:	6063      	str	r3, [r4, #4]
 8005838:	6014      	str	r4, [r2, #0]
 800583a:	b003      	add	sp, #12
 800583c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005840:	f000 b8da 	b.w	80059f8 <__malloc_unlock>
 8005844:	42a3      	cmp	r3, r4
 8005846:	d908      	bls.n	800585a <_free_r+0x46>
 8005848:	6825      	ldr	r5, [r4, #0]
 800584a:	1961      	adds	r1, r4, r5
 800584c:	428b      	cmp	r3, r1
 800584e:	bf01      	itttt	eq
 8005850:	6819      	ldreq	r1, [r3, #0]
 8005852:	685b      	ldreq	r3, [r3, #4]
 8005854:	1949      	addeq	r1, r1, r5
 8005856:	6021      	streq	r1, [r4, #0]
 8005858:	e7ed      	b.n	8005836 <_free_r+0x22>
 800585a:	461a      	mov	r2, r3
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	b10b      	cbz	r3, 8005864 <_free_r+0x50>
 8005860:	42a3      	cmp	r3, r4
 8005862:	d9fa      	bls.n	800585a <_free_r+0x46>
 8005864:	6811      	ldr	r1, [r2, #0]
 8005866:	1855      	adds	r5, r2, r1
 8005868:	42a5      	cmp	r5, r4
 800586a:	d10b      	bne.n	8005884 <_free_r+0x70>
 800586c:	6824      	ldr	r4, [r4, #0]
 800586e:	4421      	add	r1, r4
 8005870:	1854      	adds	r4, r2, r1
 8005872:	42a3      	cmp	r3, r4
 8005874:	6011      	str	r1, [r2, #0]
 8005876:	d1e0      	bne.n	800583a <_free_r+0x26>
 8005878:	681c      	ldr	r4, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	6053      	str	r3, [r2, #4]
 800587e:	440c      	add	r4, r1
 8005880:	6014      	str	r4, [r2, #0]
 8005882:	e7da      	b.n	800583a <_free_r+0x26>
 8005884:	d902      	bls.n	800588c <_free_r+0x78>
 8005886:	230c      	movs	r3, #12
 8005888:	6003      	str	r3, [r0, #0]
 800588a:	e7d6      	b.n	800583a <_free_r+0x26>
 800588c:	6825      	ldr	r5, [r4, #0]
 800588e:	1961      	adds	r1, r4, r5
 8005890:	428b      	cmp	r3, r1
 8005892:	bf04      	itt	eq
 8005894:	6819      	ldreq	r1, [r3, #0]
 8005896:	685b      	ldreq	r3, [r3, #4]
 8005898:	6063      	str	r3, [r4, #4]
 800589a:	bf04      	itt	eq
 800589c:	1949      	addeq	r1, r1, r5
 800589e:	6021      	streq	r1, [r4, #0]
 80058a0:	6054      	str	r4, [r2, #4]
 80058a2:	e7ca      	b.n	800583a <_free_r+0x26>
 80058a4:	b003      	add	sp, #12
 80058a6:	bd30      	pop	{r4, r5, pc}
 80058a8:	24000300 	.word	0x24000300

080058ac <sbrk_aligned>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	4e0e      	ldr	r6, [pc, #56]	; (80058e8 <sbrk_aligned+0x3c>)
 80058b0:	460c      	mov	r4, r1
 80058b2:	6831      	ldr	r1, [r6, #0]
 80058b4:	4605      	mov	r5, r0
 80058b6:	b911      	cbnz	r1, 80058be <sbrk_aligned+0x12>
 80058b8:	f000 fba6 	bl	8006008 <_sbrk_r>
 80058bc:	6030      	str	r0, [r6, #0]
 80058be:	4621      	mov	r1, r4
 80058c0:	4628      	mov	r0, r5
 80058c2:	f000 fba1 	bl	8006008 <_sbrk_r>
 80058c6:	1c43      	adds	r3, r0, #1
 80058c8:	d00a      	beq.n	80058e0 <sbrk_aligned+0x34>
 80058ca:	1cc4      	adds	r4, r0, #3
 80058cc:	f024 0403 	bic.w	r4, r4, #3
 80058d0:	42a0      	cmp	r0, r4
 80058d2:	d007      	beq.n	80058e4 <sbrk_aligned+0x38>
 80058d4:	1a21      	subs	r1, r4, r0
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 fb96 	bl	8006008 <_sbrk_r>
 80058dc:	3001      	adds	r0, #1
 80058de:	d101      	bne.n	80058e4 <sbrk_aligned+0x38>
 80058e0:	f04f 34ff 	mov.w	r4, #4294967295
 80058e4:	4620      	mov	r0, r4
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
 80058e8:	24000304 	.word	0x24000304

080058ec <_malloc_r>:
 80058ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f0:	1ccd      	adds	r5, r1, #3
 80058f2:	f025 0503 	bic.w	r5, r5, #3
 80058f6:	3508      	adds	r5, #8
 80058f8:	2d0c      	cmp	r5, #12
 80058fa:	bf38      	it	cc
 80058fc:	250c      	movcc	r5, #12
 80058fe:	2d00      	cmp	r5, #0
 8005900:	4607      	mov	r7, r0
 8005902:	db01      	blt.n	8005908 <_malloc_r+0x1c>
 8005904:	42a9      	cmp	r1, r5
 8005906:	d905      	bls.n	8005914 <_malloc_r+0x28>
 8005908:	230c      	movs	r3, #12
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	2600      	movs	r6, #0
 800590e:	4630      	mov	r0, r6
 8005910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005914:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80059e8 <_malloc_r+0xfc>
 8005918:	f000 f868 	bl	80059ec <__malloc_lock>
 800591c:	f8d8 3000 	ldr.w	r3, [r8]
 8005920:	461c      	mov	r4, r3
 8005922:	bb5c      	cbnz	r4, 800597c <_malloc_r+0x90>
 8005924:	4629      	mov	r1, r5
 8005926:	4638      	mov	r0, r7
 8005928:	f7ff ffc0 	bl	80058ac <sbrk_aligned>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	4604      	mov	r4, r0
 8005930:	d155      	bne.n	80059de <_malloc_r+0xf2>
 8005932:	f8d8 4000 	ldr.w	r4, [r8]
 8005936:	4626      	mov	r6, r4
 8005938:	2e00      	cmp	r6, #0
 800593a:	d145      	bne.n	80059c8 <_malloc_r+0xdc>
 800593c:	2c00      	cmp	r4, #0
 800593e:	d048      	beq.n	80059d2 <_malloc_r+0xe6>
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	4631      	mov	r1, r6
 8005944:	4638      	mov	r0, r7
 8005946:	eb04 0903 	add.w	r9, r4, r3
 800594a:	f000 fb5d 	bl	8006008 <_sbrk_r>
 800594e:	4581      	cmp	r9, r0
 8005950:	d13f      	bne.n	80059d2 <_malloc_r+0xe6>
 8005952:	6821      	ldr	r1, [r4, #0]
 8005954:	1a6d      	subs	r5, r5, r1
 8005956:	4629      	mov	r1, r5
 8005958:	4638      	mov	r0, r7
 800595a:	f7ff ffa7 	bl	80058ac <sbrk_aligned>
 800595e:	3001      	adds	r0, #1
 8005960:	d037      	beq.n	80059d2 <_malloc_r+0xe6>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	442b      	add	r3, r5
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	f8d8 3000 	ldr.w	r3, [r8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d038      	beq.n	80059e2 <_malloc_r+0xf6>
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	42a2      	cmp	r2, r4
 8005974:	d12b      	bne.n	80059ce <_malloc_r+0xe2>
 8005976:	2200      	movs	r2, #0
 8005978:	605a      	str	r2, [r3, #4]
 800597a:	e00f      	b.n	800599c <_malloc_r+0xb0>
 800597c:	6822      	ldr	r2, [r4, #0]
 800597e:	1b52      	subs	r2, r2, r5
 8005980:	d41f      	bmi.n	80059c2 <_malloc_r+0xd6>
 8005982:	2a0b      	cmp	r2, #11
 8005984:	d917      	bls.n	80059b6 <_malloc_r+0xca>
 8005986:	1961      	adds	r1, r4, r5
 8005988:	42a3      	cmp	r3, r4
 800598a:	6025      	str	r5, [r4, #0]
 800598c:	bf18      	it	ne
 800598e:	6059      	strne	r1, [r3, #4]
 8005990:	6863      	ldr	r3, [r4, #4]
 8005992:	bf08      	it	eq
 8005994:	f8c8 1000 	streq.w	r1, [r8]
 8005998:	5162      	str	r2, [r4, r5]
 800599a:	604b      	str	r3, [r1, #4]
 800599c:	4638      	mov	r0, r7
 800599e:	f104 060b 	add.w	r6, r4, #11
 80059a2:	f000 f829 	bl	80059f8 <__malloc_unlock>
 80059a6:	f026 0607 	bic.w	r6, r6, #7
 80059aa:	1d23      	adds	r3, r4, #4
 80059ac:	1af2      	subs	r2, r6, r3
 80059ae:	d0ae      	beq.n	800590e <_malloc_r+0x22>
 80059b0:	1b9b      	subs	r3, r3, r6
 80059b2:	50a3      	str	r3, [r4, r2]
 80059b4:	e7ab      	b.n	800590e <_malloc_r+0x22>
 80059b6:	42a3      	cmp	r3, r4
 80059b8:	6862      	ldr	r2, [r4, #4]
 80059ba:	d1dd      	bne.n	8005978 <_malloc_r+0x8c>
 80059bc:	f8c8 2000 	str.w	r2, [r8]
 80059c0:	e7ec      	b.n	800599c <_malloc_r+0xb0>
 80059c2:	4623      	mov	r3, r4
 80059c4:	6864      	ldr	r4, [r4, #4]
 80059c6:	e7ac      	b.n	8005922 <_malloc_r+0x36>
 80059c8:	4634      	mov	r4, r6
 80059ca:	6876      	ldr	r6, [r6, #4]
 80059cc:	e7b4      	b.n	8005938 <_malloc_r+0x4c>
 80059ce:	4613      	mov	r3, r2
 80059d0:	e7cc      	b.n	800596c <_malloc_r+0x80>
 80059d2:	230c      	movs	r3, #12
 80059d4:	603b      	str	r3, [r7, #0]
 80059d6:	4638      	mov	r0, r7
 80059d8:	f000 f80e 	bl	80059f8 <__malloc_unlock>
 80059dc:	e797      	b.n	800590e <_malloc_r+0x22>
 80059de:	6025      	str	r5, [r4, #0]
 80059e0:	e7dc      	b.n	800599c <_malloc_r+0xb0>
 80059e2:	605b      	str	r3, [r3, #4]
 80059e4:	deff      	udf	#255	; 0xff
 80059e6:	bf00      	nop
 80059e8:	24000300 	.word	0x24000300

080059ec <__malloc_lock>:
 80059ec:	4801      	ldr	r0, [pc, #4]	; (80059f4 <__malloc_lock+0x8>)
 80059ee:	f7ff bf0f 	b.w	8005810 <__retarget_lock_acquire_recursive>
 80059f2:	bf00      	nop
 80059f4:	240002fc 	.word	0x240002fc

080059f8 <__malloc_unlock>:
 80059f8:	4801      	ldr	r0, [pc, #4]	; (8005a00 <__malloc_unlock+0x8>)
 80059fa:	f7ff bf0a 	b.w	8005812 <__retarget_lock_release_recursive>
 80059fe:	bf00      	nop
 8005a00:	240002fc 	.word	0x240002fc

08005a04 <__ssputs_r>:
 8005a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a08:	688e      	ldr	r6, [r1, #8]
 8005a0a:	461f      	mov	r7, r3
 8005a0c:	42be      	cmp	r6, r7
 8005a0e:	680b      	ldr	r3, [r1, #0]
 8005a10:	4682      	mov	sl, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	4690      	mov	r8, r2
 8005a16:	d82c      	bhi.n	8005a72 <__ssputs_r+0x6e>
 8005a18:	898a      	ldrh	r2, [r1, #12]
 8005a1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a1e:	d026      	beq.n	8005a6e <__ssputs_r+0x6a>
 8005a20:	6965      	ldr	r5, [r4, #20]
 8005a22:	6909      	ldr	r1, [r1, #16]
 8005a24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a28:	eba3 0901 	sub.w	r9, r3, r1
 8005a2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a30:	1c7b      	adds	r3, r7, #1
 8005a32:	444b      	add	r3, r9
 8005a34:	106d      	asrs	r5, r5, #1
 8005a36:	429d      	cmp	r5, r3
 8005a38:	bf38      	it	cc
 8005a3a:	461d      	movcc	r5, r3
 8005a3c:	0553      	lsls	r3, r2, #21
 8005a3e:	d527      	bpl.n	8005a90 <__ssputs_r+0x8c>
 8005a40:	4629      	mov	r1, r5
 8005a42:	f7ff ff53 	bl	80058ec <_malloc_r>
 8005a46:	4606      	mov	r6, r0
 8005a48:	b360      	cbz	r0, 8005aa4 <__ssputs_r+0xa0>
 8005a4a:	6921      	ldr	r1, [r4, #16]
 8005a4c:	464a      	mov	r2, r9
 8005a4e:	f000 faeb 	bl	8006028 <memcpy>
 8005a52:	89a3      	ldrh	r3, [r4, #12]
 8005a54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5c:	81a3      	strh	r3, [r4, #12]
 8005a5e:	6126      	str	r6, [r4, #16]
 8005a60:	6165      	str	r5, [r4, #20]
 8005a62:	444e      	add	r6, r9
 8005a64:	eba5 0509 	sub.w	r5, r5, r9
 8005a68:	6026      	str	r6, [r4, #0]
 8005a6a:	60a5      	str	r5, [r4, #8]
 8005a6c:	463e      	mov	r6, r7
 8005a6e:	42be      	cmp	r6, r7
 8005a70:	d900      	bls.n	8005a74 <__ssputs_r+0x70>
 8005a72:	463e      	mov	r6, r7
 8005a74:	6820      	ldr	r0, [r4, #0]
 8005a76:	4632      	mov	r2, r6
 8005a78:	4641      	mov	r1, r8
 8005a7a:	f000 faab 	bl	8005fd4 <memmove>
 8005a7e:	68a3      	ldr	r3, [r4, #8]
 8005a80:	1b9b      	subs	r3, r3, r6
 8005a82:	60a3      	str	r3, [r4, #8]
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	4433      	add	r3, r6
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a90:	462a      	mov	r2, r5
 8005a92:	f000 fad7 	bl	8006044 <_realloc_r>
 8005a96:	4606      	mov	r6, r0
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d1e0      	bne.n	8005a5e <__ssputs_r+0x5a>
 8005a9c:	6921      	ldr	r1, [r4, #16]
 8005a9e:	4650      	mov	r0, sl
 8005aa0:	f7ff feb8 	bl	8005814 <_free_r>
 8005aa4:	230c      	movs	r3, #12
 8005aa6:	f8ca 3000 	str.w	r3, [sl]
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab0:	81a3      	strh	r3, [r4, #12]
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab6:	e7e9      	b.n	8005a8c <__ssputs_r+0x88>

08005ab8 <_svfiprintf_r>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	4698      	mov	r8, r3
 8005abe:	898b      	ldrh	r3, [r1, #12]
 8005ac0:	061b      	lsls	r3, r3, #24
 8005ac2:	b09d      	sub	sp, #116	; 0x74
 8005ac4:	4607      	mov	r7, r0
 8005ac6:	460d      	mov	r5, r1
 8005ac8:	4614      	mov	r4, r2
 8005aca:	d50e      	bpl.n	8005aea <_svfiprintf_r+0x32>
 8005acc:	690b      	ldr	r3, [r1, #16]
 8005ace:	b963      	cbnz	r3, 8005aea <_svfiprintf_r+0x32>
 8005ad0:	2140      	movs	r1, #64	; 0x40
 8005ad2:	f7ff ff0b 	bl	80058ec <_malloc_r>
 8005ad6:	6028      	str	r0, [r5, #0]
 8005ad8:	6128      	str	r0, [r5, #16]
 8005ada:	b920      	cbnz	r0, 8005ae6 <_svfiprintf_r+0x2e>
 8005adc:	230c      	movs	r3, #12
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae4:	e0d0      	b.n	8005c88 <_svfiprintf_r+0x1d0>
 8005ae6:	2340      	movs	r3, #64	; 0x40
 8005ae8:	616b      	str	r3, [r5, #20]
 8005aea:	2300      	movs	r3, #0
 8005aec:	9309      	str	r3, [sp, #36]	; 0x24
 8005aee:	2320      	movs	r3, #32
 8005af0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005af4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005af8:	2330      	movs	r3, #48	; 0x30
 8005afa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005ca0 <_svfiprintf_r+0x1e8>
 8005afe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b02:	f04f 0901 	mov.w	r9, #1
 8005b06:	4623      	mov	r3, r4
 8005b08:	469a      	mov	sl, r3
 8005b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b0e:	b10a      	cbz	r2, 8005b14 <_svfiprintf_r+0x5c>
 8005b10:	2a25      	cmp	r2, #37	; 0x25
 8005b12:	d1f9      	bne.n	8005b08 <_svfiprintf_r+0x50>
 8005b14:	ebba 0b04 	subs.w	fp, sl, r4
 8005b18:	d00b      	beq.n	8005b32 <_svfiprintf_r+0x7a>
 8005b1a:	465b      	mov	r3, fp
 8005b1c:	4622      	mov	r2, r4
 8005b1e:	4629      	mov	r1, r5
 8005b20:	4638      	mov	r0, r7
 8005b22:	f7ff ff6f 	bl	8005a04 <__ssputs_r>
 8005b26:	3001      	adds	r0, #1
 8005b28:	f000 80a9 	beq.w	8005c7e <_svfiprintf_r+0x1c6>
 8005b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b2e:	445a      	add	r2, fp
 8005b30:	9209      	str	r2, [sp, #36]	; 0x24
 8005b32:	f89a 3000 	ldrb.w	r3, [sl]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 80a1 	beq.w	8005c7e <_svfiprintf_r+0x1c6>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b46:	f10a 0a01 	add.w	sl, sl, #1
 8005b4a:	9304      	str	r3, [sp, #16]
 8005b4c:	9307      	str	r3, [sp, #28]
 8005b4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b52:	931a      	str	r3, [sp, #104]	; 0x68
 8005b54:	4654      	mov	r4, sl
 8005b56:	2205      	movs	r2, #5
 8005b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b5c:	4850      	ldr	r0, [pc, #320]	; (8005ca0 <_svfiprintf_r+0x1e8>)
 8005b5e:	f7fa fbc7 	bl	80002f0 <memchr>
 8005b62:	9a04      	ldr	r2, [sp, #16]
 8005b64:	b9d8      	cbnz	r0, 8005b9e <_svfiprintf_r+0xe6>
 8005b66:	06d0      	lsls	r0, r2, #27
 8005b68:	bf44      	itt	mi
 8005b6a:	2320      	movmi	r3, #32
 8005b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b70:	0711      	lsls	r1, r2, #28
 8005b72:	bf44      	itt	mi
 8005b74:	232b      	movmi	r3, #43	; 0x2b
 8005b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b80:	d015      	beq.n	8005bae <_svfiprintf_r+0xf6>
 8005b82:	9a07      	ldr	r2, [sp, #28]
 8005b84:	4654      	mov	r4, sl
 8005b86:	2000      	movs	r0, #0
 8005b88:	f04f 0c0a 	mov.w	ip, #10
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b92:	3b30      	subs	r3, #48	; 0x30
 8005b94:	2b09      	cmp	r3, #9
 8005b96:	d94d      	bls.n	8005c34 <_svfiprintf_r+0x17c>
 8005b98:	b1b0      	cbz	r0, 8005bc8 <_svfiprintf_r+0x110>
 8005b9a:	9207      	str	r2, [sp, #28]
 8005b9c:	e014      	b.n	8005bc8 <_svfiprintf_r+0x110>
 8005b9e:	eba0 0308 	sub.w	r3, r0, r8
 8005ba2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	9304      	str	r3, [sp, #16]
 8005baa:	46a2      	mov	sl, r4
 8005bac:	e7d2      	b.n	8005b54 <_svfiprintf_r+0x9c>
 8005bae:	9b03      	ldr	r3, [sp, #12]
 8005bb0:	1d19      	adds	r1, r3, #4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	9103      	str	r1, [sp, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	bfbb      	ittet	lt
 8005bba:	425b      	neglt	r3, r3
 8005bbc:	f042 0202 	orrlt.w	r2, r2, #2
 8005bc0:	9307      	strge	r3, [sp, #28]
 8005bc2:	9307      	strlt	r3, [sp, #28]
 8005bc4:	bfb8      	it	lt
 8005bc6:	9204      	strlt	r2, [sp, #16]
 8005bc8:	7823      	ldrb	r3, [r4, #0]
 8005bca:	2b2e      	cmp	r3, #46	; 0x2e
 8005bcc:	d10c      	bne.n	8005be8 <_svfiprintf_r+0x130>
 8005bce:	7863      	ldrb	r3, [r4, #1]
 8005bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8005bd2:	d134      	bne.n	8005c3e <_svfiprintf_r+0x186>
 8005bd4:	9b03      	ldr	r3, [sp, #12]
 8005bd6:	1d1a      	adds	r2, r3, #4
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	9203      	str	r2, [sp, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bfb8      	it	lt
 8005be0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005be4:	3402      	adds	r4, #2
 8005be6:	9305      	str	r3, [sp, #20]
 8005be8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005cb0 <_svfiprintf_r+0x1f8>
 8005bec:	7821      	ldrb	r1, [r4, #0]
 8005bee:	2203      	movs	r2, #3
 8005bf0:	4650      	mov	r0, sl
 8005bf2:	f7fa fb7d 	bl	80002f0 <memchr>
 8005bf6:	b138      	cbz	r0, 8005c08 <_svfiprintf_r+0x150>
 8005bf8:	9b04      	ldr	r3, [sp, #16]
 8005bfa:	eba0 000a 	sub.w	r0, r0, sl
 8005bfe:	2240      	movs	r2, #64	; 0x40
 8005c00:	4082      	lsls	r2, r0
 8005c02:	4313      	orrs	r3, r2
 8005c04:	3401      	adds	r4, #1
 8005c06:	9304      	str	r3, [sp, #16]
 8005c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c0c:	4825      	ldr	r0, [pc, #148]	; (8005ca4 <_svfiprintf_r+0x1ec>)
 8005c0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c12:	2206      	movs	r2, #6
 8005c14:	f7fa fb6c 	bl	80002f0 <memchr>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d038      	beq.n	8005c8e <_svfiprintf_r+0x1d6>
 8005c1c:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <_svfiprintf_r+0x1f0>)
 8005c1e:	bb1b      	cbnz	r3, 8005c68 <_svfiprintf_r+0x1b0>
 8005c20:	9b03      	ldr	r3, [sp, #12]
 8005c22:	3307      	adds	r3, #7
 8005c24:	f023 0307 	bic.w	r3, r3, #7
 8005c28:	3308      	adds	r3, #8
 8005c2a:	9303      	str	r3, [sp, #12]
 8005c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2e:	4433      	add	r3, r6
 8005c30:	9309      	str	r3, [sp, #36]	; 0x24
 8005c32:	e768      	b.n	8005b06 <_svfiprintf_r+0x4e>
 8005c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c38:	460c      	mov	r4, r1
 8005c3a:	2001      	movs	r0, #1
 8005c3c:	e7a6      	b.n	8005b8c <_svfiprintf_r+0xd4>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	3401      	adds	r4, #1
 8005c42:	9305      	str	r3, [sp, #20]
 8005c44:	4619      	mov	r1, r3
 8005c46:	f04f 0c0a 	mov.w	ip, #10
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c50:	3a30      	subs	r2, #48	; 0x30
 8005c52:	2a09      	cmp	r2, #9
 8005c54:	d903      	bls.n	8005c5e <_svfiprintf_r+0x1a6>
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0c6      	beq.n	8005be8 <_svfiprintf_r+0x130>
 8005c5a:	9105      	str	r1, [sp, #20]
 8005c5c:	e7c4      	b.n	8005be8 <_svfiprintf_r+0x130>
 8005c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c62:	4604      	mov	r4, r0
 8005c64:	2301      	movs	r3, #1
 8005c66:	e7f0      	b.n	8005c4a <_svfiprintf_r+0x192>
 8005c68:	ab03      	add	r3, sp, #12
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	462a      	mov	r2, r5
 8005c6e:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <_svfiprintf_r+0x1f4>)
 8005c70:	a904      	add	r1, sp, #16
 8005c72:	4638      	mov	r0, r7
 8005c74:	f3af 8000 	nop.w
 8005c78:	1c42      	adds	r2, r0, #1
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	d1d6      	bne.n	8005c2c <_svfiprintf_r+0x174>
 8005c7e:	89ab      	ldrh	r3, [r5, #12]
 8005c80:	065b      	lsls	r3, r3, #25
 8005c82:	f53f af2d 	bmi.w	8005ae0 <_svfiprintf_r+0x28>
 8005c86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c88:	b01d      	add	sp, #116	; 0x74
 8005c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8e:	ab03      	add	r3, sp, #12
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	462a      	mov	r2, r5
 8005c94:	4b05      	ldr	r3, [pc, #20]	; (8005cac <_svfiprintf_r+0x1f4>)
 8005c96:	a904      	add	r1, sp, #16
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f000 f879 	bl	8005d90 <_printf_i>
 8005c9e:	e7eb      	b.n	8005c78 <_svfiprintf_r+0x1c0>
 8005ca0:	08006108 	.word	0x08006108
 8005ca4:	08006112 	.word	0x08006112
 8005ca8:	00000000 	.word	0x00000000
 8005cac:	08005a05 	.word	0x08005a05
 8005cb0:	0800610e 	.word	0x0800610e

08005cb4 <_printf_common>:
 8005cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb8:	4616      	mov	r6, r2
 8005cba:	4699      	mov	r9, r3
 8005cbc:	688a      	ldr	r2, [r1, #8]
 8005cbe:	690b      	ldr	r3, [r1, #16]
 8005cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	bfb8      	it	lt
 8005cc8:	4613      	movlt	r3, r2
 8005cca:	6033      	str	r3, [r6, #0]
 8005ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cd0:	4607      	mov	r7, r0
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	b10a      	cbz	r2, 8005cda <_printf_common+0x26>
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	6033      	str	r3, [r6, #0]
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	0699      	lsls	r1, r3, #26
 8005cde:	bf42      	ittt	mi
 8005ce0:	6833      	ldrmi	r3, [r6, #0]
 8005ce2:	3302      	addmi	r3, #2
 8005ce4:	6033      	strmi	r3, [r6, #0]
 8005ce6:	6825      	ldr	r5, [r4, #0]
 8005ce8:	f015 0506 	ands.w	r5, r5, #6
 8005cec:	d106      	bne.n	8005cfc <_printf_common+0x48>
 8005cee:	f104 0a19 	add.w	sl, r4, #25
 8005cf2:	68e3      	ldr	r3, [r4, #12]
 8005cf4:	6832      	ldr	r2, [r6, #0]
 8005cf6:	1a9b      	subs	r3, r3, r2
 8005cf8:	42ab      	cmp	r3, r5
 8005cfa:	dc26      	bgt.n	8005d4a <_printf_common+0x96>
 8005cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d00:	1e13      	subs	r3, r2, #0
 8005d02:	6822      	ldr	r2, [r4, #0]
 8005d04:	bf18      	it	ne
 8005d06:	2301      	movne	r3, #1
 8005d08:	0692      	lsls	r2, r2, #26
 8005d0a:	d42b      	bmi.n	8005d64 <_printf_common+0xb0>
 8005d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d10:	4649      	mov	r1, r9
 8005d12:	4638      	mov	r0, r7
 8005d14:	47c0      	blx	r8
 8005d16:	3001      	adds	r0, #1
 8005d18:	d01e      	beq.n	8005d58 <_printf_common+0xa4>
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	6922      	ldr	r2, [r4, #16]
 8005d1e:	f003 0306 	and.w	r3, r3, #6
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	bf02      	ittt	eq
 8005d26:	68e5      	ldreq	r5, [r4, #12]
 8005d28:	6833      	ldreq	r3, [r6, #0]
 8005d2a:	1aed      	subeq	r5, r5, r3
 8005d2c:	68a3      	ldr	r3, [r4, #8]
 8005d2e:	bf0c      	ite	eq
 8005d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d34:	2500      	movne	r5, #0
 8005d36:	4293      	cmp	r3, r2
 8005d38:	bfc4      	itt	gt
 8005d3a:	1a9b      	subgt	r3, r3, r2
 8005d3c:	18ed      	addgt	r5, r5, r3
 8005d3e:	2600      	movs	r6, #0
 8005d40:	341a      	adds	r4, #26
 8005d42:	42b5      	cmp	r5, r6
 8005d44:	d11a      	bne.n	8005d7c <_printf_common+0xc8>
 8005d46:	2000      	movs	r0, #0
 8005d48:	e008      	b.n	8005d5c <_printf_common+0xa8>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	4652      	mov	r2, sl
 8005d4e:	4649      	mov	r1, r9
 8005d50:	4638      	mov	r0, r7
 8005d52:	47c0      	blx	r8
 8005d54:	3001      	adds	r0, #1
 8005d56:	d103      	bne.n	8005d60 <_printf_common+0xac>
 8005d58:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d60:	3501      	adds	r5, #1
 8005d62:	e7c6      	b.n	8005cf2 <_printf_common+0x3e>
 8005d64:	18e1      	adds	r1, r4, r3
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	2030      	movs	r0, #48	; 0x30
 8005d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d6e:	4422      	add	r2, r4
 8005d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d78:	3302      	adds	r3, #2
 8005d7a:	e7c7      	b.n	8005d0c <_printf_common+0x58>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	4622      	mov	r2, r4
 8005d80:	4649      	mov	r1, r9
 8005d82:	4638      	mov	r0, r7
 8005d84:	47c0      	blx	r8
 8005d86:	3001      	adds	r0, #1
 8005d88:	d0e6      	beq.n	8005d58 <_printf_common+0xa4>
 8005d8a:	3601      	adds	r6, #1
 8005d8c:	e7d9      	b.n	8005d42 <_printf_common+0x8e>
	...

08005d90 <_printf_i>:
 8005d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d94:	7e0f      	ldrb	r7, [r1, #24]
 8005d96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d98:	2f78      	cmp	r7, #120	; 0x78
 8005d9a:	4691      	mov	r9, r2
 8005d9c:	4680      	mov	r8, r0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	469a      	mov	sl, r3
 8005da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005da6:	d807      	bhi.n	8005db8 <_printf_i+0x28>
 8005da8:	2f62      	cmp	r7, #98	; 0x62
 8005daa:	d80a      	bhi.n	8005dc2 <_printf_i+0x32>
 8005dac:	2f00      	cmp	r7, #0
 8005dae:	f000 80d4 	beq.w	8005f5a <_printf_i+0x1ca>
 8005db2:	2f58      	cmp	r7, #88	; 0x58
 8005db4:	f000 80c0 	beq.w	8005f38 <_printf_i+0x1a8>
 8005db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dc0:	e03a      	b.n	8005e38 <_printf_i+0xa8>
 8005dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dc6:	2b15      	cmp	r3, #21
 8005dc8:	d8f6      	bhi.n	8005db8 <_printf_i+0x28>
 8005dca:	a101      	add	r1, pc, #4	; (adr r1, 8005dd0 <_printf_i+0x40>)
 8005dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dd0:	08005e29 	.word	0x08005e29
 8005dd4:	08005e3d 	.word	0x08005e3d
 8005dd8:	08005db9 	.word	0x08005db9
 8005ddc:	08005db9 	.word	0x08005db9
 8005de0:	08005db9 	.word	0x08005db9
 8005de4:	08005db9 	.word	0x08005db9
 8005de8:	08005e3d 	.word	0x08005e3d
 8005dec:	08005db9 	.word	0x08005db9
 8005df0:	08005db9 	.word	0x08005db9
 8005df4:	08005db9 	.word	0x08005db9
 8005df8:	08005db9 	.word	0x08005db9
 8005dfc:	08005f41 	.word	0x08005f41
 8005e00:	08005e69 	.word	0x08005e69
 8005e04:	08005efb 	.word	0x08005efb
 8005e08:	08005db9 	.word	0x08005db9
 8005e0c:	08005db9 	.word	0x08005db9
 8005e10:	08005f63 	.word	0x08005f63
 8005e14:	08005db9 	.word	0x08005db9
 8005e18:	08005e69 	.word	0x08005e69
 8005e1c:	08005db9 	.word	0x08005db9
 8005e20:	08005db9 	.word	0x08005db9
 8005e24:	08005f03 	.word	0x08005f03
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	1d1a      	adds	r2, r3, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	602a      	str	r2, [r5, #0]
 8005e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e09f      	b.n	8005f7c <_printf_i+0x1ec>
 8005e3c:	6820      	ldr	r0, [r4, #0]
 8005e3e:	682b      	ldr	r3, [r5, #0]
 8005e40:	0607      	lsls	r7, r0, #24
 8005e42:	f103 0104 	add.w	r1, r3, #4
 8005e46:	6029      	str	r1, [r5, #0]
 8005e48:	d501      	bpl.n	8005e4e <_printf_i+0xbe>
 8005e4a:	681e      	ldr	r6, [r3, #0]
 8005e4c:	e003      	b.n	8005e56 <_printf_i+0xc6>
 8005e4e:	0646      	lsls	r6, r0, #25
 8005e50:	d5fb      	bpl.n	8005e4a <_printf_i+0xba>
 8005e52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e56:	2e00      	cmp	r6, #0
 8005e58:	da03      	bge.n	8005e62 <_printf_i+0xd2>
 8005e5a:	232d      	movs	r3, #45	; 0x2d
 8005e5c:	4276      	negs	r6, r6
 8005e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e62:	485a      	ldr	r0, [pc, #360]	; (8005fcc <_printf_i+0x23c>)
 8005e64:	230a      	movs	r3, #10
 8005e66:	e012      	b.n	8005e8e <_printf_i+0xfe>
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	6820      	ldr	r0, [r4, #0]
 8005e6c:	1d19      	adds	r1, r3, #4
 8005e6e:	6029      	str	r1, [r5, #0]
 8005e70:	0605      	lsls	r5, r0, #24
 8005e72:	d501      	bpl.n	8005e78 <_printf_i+0xe8>
 8005e74:	681e      	ldr	r6, [r3, #0]
 8005e76:	e002      	b.n	8005e7e <_printf_i+0xee>
 8005e78:	0641      	lsls	r1, r0, #25
 8005e7a:	d5fb      	bpl.n	8005e74 <_printf_i+0xe4>
 8005e7c:	881e      	ldrh	r6, [r3, #0]
 8005e7e:	4853      	ldr	r0, [pc, #332]	; (8005fcc <_printf_i+0x23c>)
 8005e80:	2f6f      	cmp	r7, #111	; 0x6f
 8005e82:	bf0c      	ite	eq
 8005e84:	2308      	moveq	r3, #8
 8005e86:	230a      	movne	r3, #10
 8005e88:	2100      	movs	r1, #0
 8005e8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e8e:	6865      	ldr	r5, [r4, #4]
 8005e90:	60a5      	str	r5, [r4, #8]
 8005e92:	2d00      	cmp	r5, #0
 8005e94:	bfa2      	ittt	ge
 8005e96:	6821      	ldrge	r1, [r4, #0]
 8005e98:	f021 0104 	bicge.w	r1, r1, #4
 8005e9c:	6021      	strge	r1, [r4, #0]
 8005e9e:	b90e      	cbnz	r6, 8005ea4 <_printf_i+0x114>
 8005ea0:	2d00      	cmp	r5, #0
 8005ea2:	d04b      	beq.n	8005f3c <_printf_i+0x1ac>
 8005ea4:	4615      	mov	r5, r2
 8005ea6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005eaa:	fb03 6711 	mls	r7, r3, r1, r6
 8005eae:	5dc7      	ldrb	r7, [r0, r7]
 8005eb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005eb4:	4637      	mov	r7, r6
 8005eb6:	42bb      	cmp	r3, r7
 8005eb8:	460e      	mov	r6, r1
 8005eba:	d9f4      	bls.n	8005ea6 <_printf_i+0x116>
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d10b      	bne.n	8005ed8 <_printf_i+0x148>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	07de      	lsls	r6, r3, #31
 8005ec4:	d508      	bpl.n	8005ed8 <_printf_i+0x148>
 8005ec6:	6923      	ldr	r3, [r4, #16]
 8005ec8:	6861      	ldr	r1, [r4, #4]
 8005eca:	4299      	cmp	r1, r3
 8005ecc:	bfde      	ittt	le
 8005ece:	2330      	movle	r3, #48	; 0x30
 8005ed0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ed4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ed8:	1b52      	subs	r2, r2, r5
 8005eda:	6122      	str	r2, [r4, #16]
 8005edc:	f8cd a000 	str.w	sl, [sp]
 8005ee0:	464b      	mov	r3, r9
 8005ee2:	aa03      	add	r2, sp, #12
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	f7ff fee4 	bl	8005cb4 <_printf_common>
 8005eec:	3001      	adds	r0, #1
 8005eee:	d14a      	bne.n	8005f86 <_printf_i+0x1f6>
 8005ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef4:	b004      	add	sp, #16
 8005ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	f043 0320 	orr.w	r3, r3, #32
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	4833      	ldr	r0, [pc, #204]	; (8005fd0 <_printf_i+0x240>)
 8005f04:	2778      	movs	r7, #120	; 0x78
 8005f06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	6829      	ldr	r1, [r5, #0]
 8005f0e:	061f      	lsls	r7, r3, #24
 8005f10:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f14:	d402      	bmi.n	8005f1c <_printf_i+0x18c>
 8005f16:	065f      	lsls	r7, r3, #25
 8005f18:	bf48      	it	mi
 8005f1a:	b2b6      	uxthmi	r6, r6
 8005f1c:	07df      	lsls	r7, r3, #31
 8005f1e:	bf48      	it	mi
 8005f20:	f043 0320 	orrmi.w	r3, r3, #32
 8005f24:	6029      	str	r1, [r5, #0]
 8005f26:	bf48      	it	mi
 8005f28:	6023      	strmi	r3, [r4, #0]
 8005f2a:	b91e      	cbnz	r6, 8005f34 <_printf_i+0x1a4>
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	f023 0320 	bic.w	r3, r3, #32
 8005f32:	6023      	str	r3, [r4, #0]
 8005f34:	2310      	movs	r3, #16
 8005f36:	e7a7      	b.n	8005e88 <_printf_i+0xf8>
 8005f38:	4824      	ldr	r0, [pc, #144]	; (8005fcc <_printf_i+0x23c>)
 8005f3a:	e7e4      	b.n	8005f06 <_printf_i+0x176>
 8005f3c:	4615      	mov	r5, r2
 8005f3e:	e7bd      	b.n	8005ebc <_printf_i+0x12c>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	6826      	ldr	r6, [r4, #0]
 8005f44:	6961      	ldr	r1, [r4, #20]
 8005f46:	1d18      	adds	r0, r3, #4
 8005f48:	6028      	str	r0, [r5, #0]
 8005f4a:	0635      	lsls	r5, r6, #24
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	d501      	bpl.n	8005f54 <_printf_i+0x1c4>
 8005f50:	6019      	str	r1, [r3, #0]
 8005f52:	e002      	b.n	8005f5a <_printf_i+0x1ca>
 8005f54:	0670      	lsls	r0, r6, #25
 8005f56:	d5fb      	bpl.n	8005f50 <_printf_i+0x1c0>
 8005f58:	8019      	strh	r1, [r3, #0]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	6123      	str	r3, [r4, #16]
 8005f5e:	4615      	mov	r5, r2
 8005f60:	e7bc      	b.n	8005edc <_printf_i+0x14c>
 8005f62:	682b      	ldr	r3, [r5, #0]
 8005f64:	1d1a      	adds	r2, r3, #4
 8005f66:	602a      	str	r2, [r5, #0]
 8005f68:	681d      	ldr	r5, [r3, #0]
 8005f6a:	6862      	ldr	r2, [r4, #4]
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f7fa f9be 	bl	80002f0 <memchr>
 8005f74:	b108      	cbz	r0, 8005f7a <_printf_i+0x1ea>
 8005f76:	1b40      	subs	r0, r0, r5
 8005f78:	6060      	str	r0, [r4, #4]
 8005f7a:	6863      	ldr	r3, [r4, #4]
 8005f7c:	6123      	str	r3, [r4, #16]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f84:	e7aa      	b.n	8005edc <_printf_i+0x14c>
 8005f86:	6923      	ldr	r3, [r4, #16]
 8005f88:	462a      	mov	r2, r5
 8005f8a:	4649      	mov	r1, r9
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	47d0      	blx	sl
 8005f90:	3001      	adds	r0, #1
 8005f92:	d0ad      	beq.n	8005ef0 <_printf_i+0x160>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	079b      	lsls	r3, r3, #30
 8005f98:	d413      	bmi.n	8005fc2 <_printf_i+0x232>
 8005f9a:	68e0      	ldr	r0, [r4, #12]
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	4298      	cmp	r0, r3
 8005fa0:	bfb8      	it	lt
 8005fa2:	4618      	movlt	r0, r3
 8005fa4:	e7a6      	b.n	8005ef4 <_printf_i+0x164>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	4632      	mov	r2, r6
 8005faa:	4649      	mov	r1, r9
 8005fac:	4640      	mov	r0, r8
 8005fae:	47d0      	blx	sl
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d09d      	beq.n	8005ef0 <_printf_i+0x160>
 8005fb4:	3501      	adds	r5, #1
 8005fb6:	68e3      	ldr	r3, [r4, #12]
 8005fb8:	9903      	ldr	r1, [sp, #12]
 8005fba:	1a5b      	subs	r3, r3, r1
 8005fbc:	42ab      	cmp	r3, r5
 8005fbe:	dcf2      	bgt.n	8005fa6 <_printf_i+0x216>
 8005fc0:	e7eb      	b.n	8005f9a <_printf_i+0x20a>
 8005fc2:	2500      	movs	r5, #0
 8005fc4:	f104 0619 	add.w	r6, r4, #25
 8005fc8:	e7f5      	b.n	8005fb6 <_printf_i+0x226>
 8005fca:	bf00      	nop
 8005fcc:	08006119 	.word	0x08006119
 8005fd0:	0800612a 	.word	0x0800612a

08005fd4 <memmove>:
 8005fd4:	4288      	cmp	r0, r1
 8005fd6:	b510      	push	{r4, lr}
 8005fd8:	eb01 0402 	add.w	r4, r1, r2
 8005fdc:	d902      	bls.n	8005fe4 <memmove+0x10>
 8005fde:	4284      	cmp	r4, r0
 8005fe0:	4623      	mov	r3, r4
 8005fe2:	d807      	bhi.n	8005ff4 <memmove+0x20>
 8005fe4:	1e43      	subs	r3, r0, #1
 8005fe6:	42a1      	cmp	r1, r4
 8005fe8:	d008      	beq.n	8005ffc <memmove+0x28>
 8005fea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ff2:	e7f8      	b.n	8005fe6 <memmove+0x12>
 8005ff4:	4402      	add	r2, r0
 8005ff6:	4601      	mov	r1, r0
 8005ff8:	428a      	cmp	r2, r1
 8005ffa:	d100      	bne.n	8005ffe <memmove+0x2a>
 8005ffc:	bd10      	pop	{r4, pc}
 8005ffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006006:	e7f7      	b.n	8005ff8 <memmove+0x24>

08006008 <_sbrk_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4d06      	ldr	r5, [pc, #24]	; (8006024 <_sbrk_r+0x1c>)
 800600c:	2300      	movs	r3, #0
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	f7fa fc94 	bl	8000940 <_sbrk>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_sbrk_r+0x1a>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_sbrk_r+0x1a>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	240002f8 	.word	0x240002f8

08006028 <memcpy>:
 8006028:	440a      	add	r2, r1
 800602a:	4291      	cmp	r1, r2
 800602c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006030:	d100      	bne.n	8006034 <memcpy+0xc>
 8006032:	4770      	bx	lr
 8006034:	b510      	push	{r4, lr}
 8006036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800603a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800603e:	4291      	cmp	r1, r2
 8006040:	d1f9      	bne.n	8006036 <memcpy+0xe>
 8006042:	bd10      	pop	{r4, pc}

08006044 <_realloc_r>:
 8006044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006048:	4680      	mov	r8, r0
 800604a:	4614      	mov	r4, r2
 800604c:	460e      	mov	r6, r1
 800604e:	b921      	cbnz	r1, 800605a <_realloc_r+0x16>
 8006050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006054:	4611      	mov	r1, r2
 8006056:	f7ff bc49 	b.w	80058ec <_malloc_r>
 800605a:	b92a      	cbnz	r2, 8006068 <_realloc_r+0x24>
 800605c:	f7ff fbda 	bl	8005814 <_free_r>
 8006060:	4625      	mov	r5, r4
 8006062:	4628      	mov	r0, r5
 8006064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006068:	f000 f81b 	bl	80060a2 <_malloc_usable_size_r>
 800606c:	4284      	cmp	r4, r0
 800606e:	4607      	mov	r7, r0
 8006070:	d802      	bhi.n	8006078 <_realloc_r+0x34>
 8006072:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006076:	d812      	bhi.n	800609e <_realloc_r+0x5a>
 8006078:	4621      	mov	r1, r4
 800607a:	4640      	mov	r0, r8
 800607c:	f7ff fc36 	bl	80058ec <_malloc_r>
 8006080:	4605      	mov	r5, r0
 8006082:	2800      	cmp	r0, #0
 8006084:	d0ed      	beq.n	8006062 <_realloc_r+0x1e>
 8006086:	42bc      	cmp	r4, r7
 8006088:	4622      	mov	r2, r4
 800608a:	4631      	mov	r1, r6
 800608c:	bf28      	it	cs
 800608e:	463a      	movcs	r2, r7
 8006090:	f7ff ffca 	bl	8006028 <memcpy>
 8006094:	4631      	mov	r1, r6
 8006096:	4640      	mov	r0, r8
 8006098:	f7ff fbbc 	bl	8005814 <_free_r>
 800609c:	e7e1      	b.n	8006062 <_realloc_r+0x1e>
 800609e:	4635      	mov	r5, r6
 80060a0:	e7df      	b.n	8006062 <_realloc_r+0x1e>

080060a2 <_malloc_usable_size_r>:
 80060a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a6:	1f18      	subs	r0, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	bfbc      	itt	lt
 80060ac:	580b      	ldrlt	r3, [r1, r0]
 80060ae:	18c0      	addlt	r0, r0, r3
 80060b0:	4770      	bx	lr
	...

080060b4 <_init>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	bf00      	nop
 80060b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ba:	bc08      	pop	{r3}
 80060bc:	469e      	mov	lr, r3
 80060be:	4770      	bx	lr

080060c0 <_fini>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr
