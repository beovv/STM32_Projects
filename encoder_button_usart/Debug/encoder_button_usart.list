
encoder_button_usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d50  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006084  08006084  00016084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800608c  0800608c  0001608c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08006094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000026c  24000060  080060f4  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002cc  080060f4  000202cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013ffe  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002374  00000000  00000000  000340cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ff8  00000000  00000000  00036448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000c81  00000000  00000000  00037440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000308c7  00000000  00000000  000380c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013f32  00000000  00000000  00068988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00141a75  00000000  00000000  0007c8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000048e8  00000000  00000000  001be330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005c  00000000  00000000  001c2c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08005fe8 	.word	0x08005fe8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	08005fe8 	.word	0x08005fe8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <HAL_TIM_IC_CaptureCallback>:
	uint8_t str[25];

	//uint8_t pointer;

	void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
	{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af02      	add	r7, sp, #8
 8000692:	6078      	str	r0, [r7, #4]
		counter = __HAL_TIM_GET_COUNTER(htim);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069a:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x64>)
 800069c:	6013      	str	r3, [r2, #0]

		count = (int16_t)counter;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x64>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	b21a      	sxth	r2, r3
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <HAL_TIM_IC_CaptureCallback+0x68>)
 80006a6:	801a      	strh	r2, [r3, #0]

		position = count/4;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_TIM_IC_CaptureCallback+0x68>)
 80006aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	da00      	bge.n	80006b4 <HAL_TIM_IC_CaptureCallback+0x28>
 80006b2:	3303      	adds	r3, #3
 80006b4:	109b      	asrs	r3, r3, #2
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80006ba:	801a      	strh	r2, [r3, #0]

		//int16_t* pointer = &position; pointer = position;
		sprintf(str, "Testing : %lu %i %d \r\n", counter, count, position);
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0x64>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_TIM_IC_CaptureCallback+0x68>)
 80006c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c6:	4619      	mov	r1, r3
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80006ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	460b      	mov	r3, r1
 80006d2:	490a      	ldr	r1, [pc, #40]	; (80006fc <HAL_TIM_IC_CaptureCallback+0x70>)
 80006d4:	480a      	ldr	r0, [pc, #40]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x74>)
 80006d6:	f004 ffe3 	bl	80056a0 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)str, sizeof(str), 100);
 80006da:	2364      	movs	r3, #100	; 0x64
 80006dc:	2219      	movs	r2, #25
 80006de:	4908      	ldr	r1, [pc, #32]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x74>)
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <HAL_TIM_IC_CaptureCallback+0x78>)
 80006e2:	f003 fe23 	bl	800432c <HAL_UART_Transmit>
	}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	24000158 	.word	0x24000158
 80006f4:	2400015c 	.word	0x2400015c
 80006f8:	2400015e 	.word	0x2400015e
 80006fc:	08006000 	.word	0x08006000
 8000700:	24000160 	.word	0x24000160
 8000704:	240000c8 	.word	0x240000c8

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f000 fb6c 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f80e 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f000 f916 	bl	8000944 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000718:	f000 f86e 	bl	80007f8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800071c:	f000 f8c6 	bl	80008ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000720:	213c      	movs	r1, #60	; 0x3c
 8000722:	4802      	ldr	r0, [pc, #8]	; (800072c <main+0x24>)
 8000724:	f003 fa50 	bl	8003bc8 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000728:	e7fe      	b.n	8000728 <main+0x20>
 800072a:	bf00      	nop
 800072c:	2400007c 	.word	0x2400007c

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b09c      	sub	sp, #112	; 0x70
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073a:	224c      	movs	r2, #76	; 0x4c
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f004 ffce 	bl	80056e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2220      	movs	r2, #32
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f004 ffc8 	bl	80056e0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000750:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <SystemClock_Config+0xc0>)
 8000752:	f04f 32ff 	mov.w	r2, #4294967295
 8000756:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800075a:	2002      	movs	r0, #2
 800075c:	f000 fe96 	bl	800148c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000760:	2300      	movs	r3, #0
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <SystemClock_Config+0xc4>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <SystemClock_Config+0xc4>)
 800076a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <SystemClock_Config+0xc4>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800077c:	bf00      	nop
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <SystemClock_Config+0xc4>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800078a:	d1f8      	bne.n	800077e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078c:	2302      	movs	r3, #2
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000790:	2301      	movs	r3, #1
 8000792:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000794:	2340      	movs	r3, #64	; 0x40
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000798:	2300      	movs	r3, #0
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fead 	bl	8001500 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007ac:	f000 f902 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	233f      	movs	r3, #63	; 0x3f
 80007b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c0:	2340      	movs	r3, #64	; 0x40
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007c4:	2340      	movs	r3, #64	; 0x40
 80007c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007ce:	2340      	movs	r3, #64	; 0x40
 80007d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2102      	movs	r1, #2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fa96 	bl	8001d08 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007e2:	f000 f8e7 	bl	80009b4 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3770      	adds	r7, #112	; 0x70
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	58024400 	.word	0x58024400
 80007f4:	58024800 	.word	0x58024800

080007f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2224      	movs	r2, #36	; 0x24
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f004 ff6a 	bl	80056e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <MX_TIM1_Init+0xac>)
 8000818:	4a23      	ldr	r2, [pc, #140]	; (80008a8 <MX_TIM1_Init+0xb0>)
 800081a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_TIM1_Init+0xac>)
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_TIM1_Init+0xac>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_TIM1_Init+0xac>)
 800082a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800082e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_TIM1_Init+0xac>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_TIM1_Init+0xac>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_TIM1_Init+0xac>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000842:	2303      	movs	r3, #3
 8000844:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000846:	2302      	movs	r3, #2
 8000848:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800084a:	2301      	movs	r3, #1
 800084c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 8000852:	2306      	movs	r3, #6
 8000854:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000856:	2302      	movs	r3, #2
 8000858:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800085a:	2301      	movs	r3, #1
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8000862:	2306      	movs	r3, #6
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_TIM1_Init+0xac>)
 800086e:	f003 f905 	bl	8003a7c <HAL_TIM_Encoder_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000878:	f000 f89c 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_TIM1_Init+0xac>)
 800088e:	f003 fc51 	bl	8004134 <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000898:	f000 f88c 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3730      	adds	r7, #48	; 0x30
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	2400007c 	.word	0x2400007c
 80008a8:	40010000 	.word	0x40010000

080008ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008b2:	4a23      	ldr	r2, [pc, #140]	; (8000940 <MX_USART1_UART_Init+0x94>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_USART1_UART_Init+0x90>)
 80008f6:	f003 fcc9 	bl	800428c <HAL_UART_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000900:	f000 f858 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_USART1_UART_Init+0x90>)
 8000908:	f004 fe00 	bl	800550c <HAL_UARTEx_SetTxFifoThreshold>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000912:	f000 f84f 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4808      	ldr	r0, [pc, #32]	; (800093c <MX_USART1_UART_Init+0x90>)
 800091a:	f004 fe35 	bl	8005588 <HAL_UARTEx_SetRxFifoThreshold>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000924:	f000 f846 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_USART1_UART_Init+0x90>)
 800092a:	f004 fdb6 	bl	800549a <HAL_UARTEx_DisableFifoMode>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000934:	f000 f83e 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	240000c8 	.word	0x240000c8
 8000940:	40011000 	.word	0x40011000

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_GPIO_Init+0x6c>)
 800094c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000950:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <MX_GPIO_Init+0x6c>)
 8000952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000956:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_GPIO_Init+0x6c>)
 800095c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_GPIO_Init+0x6c>)
 800096a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <MX_GPIO_Init+0x6c>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_GPIO_Init+0x6c>)
 800097a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_GPIO_Init+0x6c>)
 8000988:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800098c:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <MX_GPIO_Init+0x6c>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_GPIO_Init+0x6c>)
 8000998:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]

}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	58024400 	.word	0x58024400

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_MspInit+0x30>)
 80009c8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009cc:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x30>)
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x30>)
 80009d8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	58024400 	.word	0x58024400

080009f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a2a      	ldr	r2, [pc, #168]	; (8000abc <HAL_TIM_Encoder_MspInit+0xc8>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d14e      	bne.n	8000ab4 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000a18:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000a1c:	4a28      	ldr	r2, [pc, #160]	; (8000ac0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000a26:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000a28:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000a36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a3a:	4a21      	ldr	r2, [pc, #132]	; (8000ac0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000a46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4815      	ldr	r0, [pc, #84]	; (8000ac4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000a70:	f000 fb5c 	bl	800112c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	2018      	movs	r0, #24
 8000a7a:	f000 fb22 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000a7e:	2018      	movs	r0, #24
 8000a80:	f000 fb39 	bl	80010f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	2019      	movs	r0, #25
 8000a8a:	f000 fb1a 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a8e:	2019      	movs	r0, #25
 8000a90:	f000 fb31 	bl	80010f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	201a      	movs	r0, #26
 8000a9a:	f000 fb12 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000a9e:	201a      	movs	r0, #26
 8000aa0:	f000 fb29 	bl	80010f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	201b      	movs	r0, #27
 8000aaa:	f000 fb0a 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000aae:	201b      	movs	r0, #27
 8000ab0:	f000 fb21 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40010000 	.word	0x40010000
 8000ac0:	58024400 	.word	0x58024400
 8000ac4:	58020000 	.word	0x58020000

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0b8      	sub	sp, #224	; 0xe0
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	22b8      	movs	r2, #184	; 0xb8
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 fdf9 	bl	80056e0 <memset>
  if(huart->Instance==USART1)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a25      	ldr	r2, [pc, #148]	; (8000b88 <HAL_UART_MspInit+0xc0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d142      	bne.n	8000b7e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fc8a 	bl	8002420 <HAL_RCCEx_PeriphCLKConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b12:	f7ff ff4f 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b16:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <HAL_UART_MspInit+0xc4>)
 8000b18:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <HAL_UART_MspInit+0xc4>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_UART_MspInit+0xc4>)
 8000b28:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_UART_MspInit+0xc4>)
 8000b36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b3a:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <HAL_UART_MspInit+0xc4>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_UART_MspInit+0xc4>)
 8000b46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b52:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_UART_MspInit+0xc8>)
 8000b7a:	f000 fad7 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	37e0      	adds	r7, #224	; 0xe0
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40011000 	.word	0x40011000
 8000b8c:	58024400 	.word	0x58024400
 8000b90:	58020400 	.word	0x58020400

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <NMI_Handler+0x4>

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be0:	f000 f974 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <TIM1_BRK_IRQHandler+0x10>)
 8000bee:	f003 f899 	bl	8003d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2400007c 	.word	0x2400007c

08000bfc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <TIM1_UP_IRQHandler+0x10>)
 8000c02:	f003 f88f 	bl	8003d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2400007c 	.word	0x2400007c

08000c10 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000c16:	f003 f885 	bl	8003d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2400007c 	.word	0x2400007c

08000c24 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM1_CC_IRQHandler+0x10>)
 8000c2a:	f003 f87b 	bl	8003d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2400007c 	.word	0x2400007c

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c68:	f004 fd42 	bl	80056f0 <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	24100000 	.word	0x24100000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	2400017c 	.word	0x2400017c
 8000ca0:	240002d0 	.word	0x240002d0

08000ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b32      	ldr	r3, [pc, #200]	; (8000d74 <SystemInit+0xd0>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	4a31      	ldr	r2, [pc, #196]	; (8000d74 <SystemInit+0xd0>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <SystemInit+0xd4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 030f 	and.w	r3, r3, #15
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d807      	bhi.n	8000cd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <SystemInit+0xd4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f023 030f 	bic.w	r3, r3, #15
 8000ccc:	4a2a      	ldr	r2, [pc, #168]	; (8000d78 <SystemInit+0xd4>)
 8000cce:	f043 0303 	orr.w	r3, r3, #3
 8000cd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <SystemInit+0xd8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <SystemInit+0xd8>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <SystemInit+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <SystemInit+0xd8>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4924      	ldr	r1, [pc, #144]	; (8000d7c <SystemInit+0xd8>)
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <SystemInit+0xdc>)
 8000cee:	4013      	ands	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <SystemInit+0xd4>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d007      	beq.n	8000d0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <SystemInit+0xd4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f023 030f 	bic.w	r3, r3, #15
 8000d06:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <SystemInit+0xd4>)
 8000d08:	f043 0303 	orr.w	r3, r3, #3
 8000d0c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <SystemInit+0xd8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <SystemInit+0xd8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <SystemInit+0xd8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <SystemInit+0xd8>)
 8000d22:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <SystemInit+0xe0>)
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <SystemInit+0xd8>)
 8000d28:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <SystemInit+0xe4>)
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <SystemInit+0xd8>)
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <SystemInit+0xe8>)
 8000d30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <SystemInit+0xd8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <SystemInit+0xd8>)
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <SystemInit+0xe8>)
 8000d3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <SystemInit+0xd8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <SystemInit+0xd8>)
 8000d46:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <SystemInit+0xe8>)
 8000d48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <SystemInit+0xd8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <SystemInit+0xd8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <SystemInit+0xd8>)
 8000d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <SystemInit+0xd8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <SystemInit+0xec>)
 8000d64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00
 8000d78:	52002000 	.word	0x52002000
 8000d7c:	58024400 	.word	0x58024400
 8000d80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d84:	02020200 	.word	0x02020200
 8000d88:	01ff0000 	.word	0x01ff0000
 8000d8c:	01010280 	.word	0x01010280
 8000d90:	52004000 	.word	0x52004000

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d98:	f7ff ff84 	bl	8000ca4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	; (8000de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f004 fc9b 	bl	80056fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fc9f 	bl	8000708 <main>
  bx  lr
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000dd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dd4:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000dd8:	08006094 	.word	0x08006094
  ldr r2, =_sbss
 8000ddc:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000de0:	240002cc 	.word	0x240002cc

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dee:	2003      	movs	r0, #3
 8000df0:	f000 f95c 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000df4:	f001 f93e 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_Init+0x68>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	f003 030f 	and.w	r3, r3, #15
 8000e04:	4913      	ldr	r1, [pc, #76]	; (8000e54 <HAL_Init+0x6c>)
 8000e06:	5ccb      	ldrb	r3, [r1, r3]
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e10:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <HAL_Init+0x68>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_Init+0x6c>)
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	fa22 f303 	lsr.w	r3, r2, r3
 8000e28:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <HAL_Init+0x70>)
 8000e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <HAL_Init+0x74>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e32:	200f      	movs	r0, #15
 8000e34:	f000 f814 	bl	8000e60 <HAL_InitTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e002      	b.n	8000e48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e42:	f7ff fdbd 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	58024400 	.word	0x58024400
 8000e54:	08006018 	.word	0x08006018
 8000e58:	24000004 	.word	0x24000004
 8000e5c:	24000000 	.word	0x24000000

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_InitTick+0x60>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e021      	b.n	8000eb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <HAL_InitTick+0x64>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_InitTick+0x60>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f941 	bl	8001112 <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 f90b 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_InitTick+0x68>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2400000c 	.word	0x2400000c
 8000ec4:	24000000 	.word	0x24000000
 8000ec8:	24000008 	.word	0x24000008

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2400000c 	.word	0x2400000c
 8000ef0:	24000180 	.word	0x24000180

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	24000180 	.word	0x24000180

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <__NVIC_SetPriorityGrouping+0x40>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x40>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00
 8000f50:	05fa0000 	.word	0x05fa0000

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <__NVIC_EnableIRQ+0x38>)
 8000f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff29 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff40 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff90 	bl	8001000 <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5f 	bl	8000fac <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff33 	bl	8000f70 <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa4 	bl	8001068 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800113a:	4b89      	ldr	r3, [pc, #548]	; (8001360 <HAL_GPIO_Init+0x234>)
 800113c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800113e:	e194      	b.n	800146a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2101      	movs	r1, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8186 	beq.w	8001464 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b01      	cmp	r3, #1
 8001162:	d005      	beq.n	8001170 <HAL_GPIO_Init+0x44>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d130      	bne.n	80011d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011a6:	2201      	movs	r2, #1
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	f003 0201 	and.w	r2, r3, #1
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d017      	beq.n	800120e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d123      	bne.n	8001262 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	69b9      	ldr	r1, [r7, #24]
 800125e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0203 	and.w	r2, r3, #3
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 80e0 	beq.w	8001464 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <HAL_GPIO_Init+0x238>)
 80012a6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012aa:	4a2e      	ldr	r2, [pc, #184]	; (8001364 <HAL_GPIO_Init+0x238>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <HAL_GPIO_Init+0x238>)
 80012b6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c2:	4a29      	ldr	r2, [pc, #164]	; (8001368 <HAL_GPIO_Init+0x23c>)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a20      	ldr	r2, [pc, #128]	; (800136c <HAL_GPIO_Init+0x240>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d052      	beq.n	8001394 <HAL_GPIO_Init+0x268>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a1f      	ldr	r2, [pc, #124]	; (8001370 <HAL_GPIO_Init+0x244>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d031      	beq.n	800135a <HAL_GPIO_Init+0x22e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <HAL_GPIO_Init+0x248>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d02b      	beq.n	8001356 <HAL_GPIO_Init+0x22a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_GPIO_Init+0x24c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d025      	beq.n	8001352 <HAL_GPIO_Init+0x226>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a1c      	ldr	r2, [pc, #112]	; (800137c <HAL_GPIO_Init+0x250>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01f      	beq.n	800134e <HAL_GPIO_Init+0x222>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <HAL_GPIO_Init+0x254>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d019      	beq.n	800134a <HAL_GPIO_Init+0x21e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <HAL_GPIO_Init+0x258>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0x21a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a19      	ldr	r2, [pc, #100]	; (8001388 <HAL_GPIO_Init+0x25c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00d      	beq.n	8001342 <HAL_GPIO_Init+0x216>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a18      	ldr	r2, [pc, #96]	; (800138c <HAL_GPIO_Init+0x260>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0x212>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_GPIO_Init+0x264>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d101      	bne.n	800133a <HAL_GPIO_Init+0x20e>
 8001336:	2309      	movs	r3, #9
 8001338:	e02d      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 800133a:	230a      	movs	r3, #10
 800133c:	e02b      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 800133e:	2308      	movs	r3, #8
 8001340:	e029      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 8001342:	2307      	movs	r3, #7
 8001344:	e027      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 8001346:	2306      	movs	r3, #6
 8001348:	e025      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 800134a:	2305      	movs	r3, #5
 800134c:	e023      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 800134e:	2304      	movs	r3, #4
 8001350:	e021      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 8001352:	2303      	movs	r3, #3
 8001354:	e01f      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 8001356:	2302      	movs	r3, #2
 8001358:	e01d      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 800135a:	2301      	movs	r3, #1
 800135c:	e01b      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 800135e:	bf00      	nop
 8001360:	58000080 	.word	0x58000080
 8001364:	58024400 	.word	0x58024400
 8001368:	58000400 	.word	0x58000400
 800136c:	58020000 	.word	0x58020000
 8001370:	58020400 	.word	0x58020400
 8001374:	58020800 	.word	0x58020800
 8001378:	58020c00 	.word	0x58020c00
 800137c:	58021000 	.word	0x58021000
 8001380:	58021400 	.word	0x58021400
 8001384:	58021800 	.word	0x58021800
 8001388:	58021c00 	.word	0x58021c00
 800138c:	58022000 	.word	0x58022000
 8001390:	58022400 	.word	0x58022400
 8001394:	2300      	movs	r3, #0
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	f002 0203 	and.w	r2, r2, #3
 800139c:	0092      	lsls	r2, r2, #2
 800139e:	4093      	lsls	r3, r2
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a6:	4938      	ldr	r1, [pc, #224]	; (8001488 <HAL_GPIO_Init+0x35c>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	3301      	adds	r3, #1
 8001468:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	f47f ae63 	bne.w	8001140 <HAL_GPIO_Init+0x14>
  }
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	3724      	adds	r7, #36	; 0x24
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	58000400 	.word	0x58000400

0800148c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_PWREx_ConfigSupply+0x70>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b04      	cmp	r3, #4
 800149e:	d00a      	beq.n	80014b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_PWREx_ConfigSupply+0x70>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d001      	beq.n	80014b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e01f      	b.n	80014f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e01d      	b.n	80014f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_PWREx_ConfigSupply+0x70>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f023 0207 	bic.w	r2, r3, #7
 80014be:	490f      	ldr	r1, [pc, #60]	; (80014fc <HAL_PWREx_ConfigSupply+0x70>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014c6:	f7ff fd15 	bl	8000ef4 <HAL_GetTick>
 80014ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014cc:	e009      	b.n	80014e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014ce:	f7ff fd11 	bl	8000ef4 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014dc:	d901      	bls.n	80014e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e007      	b.n	80014f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_PWREx_ConfigSupply+0x70>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ee:	d1ee      	bne.n	80014ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	58024800 	.word	0x58024800

08001500 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e3f4      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80b3 	beq.w	8001686 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001520:	4b95      	ldr	r3, [pc, #596]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800152a:	4b93      	ldr	r3, [pc, #588]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001532:	2b10      	cmp	r3, #16
 8001534:	d007      	beq.n	8001546 <HAL_RCC_OscConfig+0x46>
 8001536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001538:	2b18      	cmp	r3, #24
 800153a:	d112      	bne.n	8001562 <HAL_RCC_OscConfig+0x62>
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d10d      	bne.n	8001562 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001546:	4b8c      	ldr	r3, [pc, #560]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 8098 	beq.w	8001684 <HAL_RCC_OscConfig+0x184>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	f040 8093 	bne.w	8001684 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e3cc      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x7a>
 800156c:	4b82      	ldr	r3, [pc, #520]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a81      	ldr	r2, [pc, #516]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e058      	b.n	800162c <HAL_RCC_OscConfig+0x12c>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d112      	bne.n	80015a8 <HAL_RCC_OscConfig+0xa8>
 8001582:	4b7d      	ldr	r3, [pc, #500]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7c      	ldr	r2, [pc, #496]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b7a      	ldr	r3, [pc, #488]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a79      	ldr	r2, [pc, #484]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001594:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b77      	ldr	r3, [pc, #476]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a76      	ldr	r2, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80015a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e041      	b.n	800162c <HAL_RCC_OscConfig+0x12c>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b0:	d112      	bne.n	80015d8 <HAL_RCC_OscConfig+0xd8>
 80015b2:	4b71      	ldr	r3, [pc, #452]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a70      	ldr	r2, [pc, #448]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80015b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b6e      	ldr	r3, [pc, #440]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a6d      	ldr	r2, [pc, #436]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80015c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b6b      	ldr	r3, [pc, #428]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a6a      	ldr	r2, [pc, #424]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e029      	b.n	800162c <HAL_RCC_OscConfig+0x12c>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80015e0:	d112      	bne.n	8001608 <HAL_RCC_OscConfig+0x108>
 80015e2:	4b65      	ldr	r3, [pc, #404]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a64      	ldr	r2, [pc, #400]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b62      	ldr	r3, [pc, #392]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a61      	ldr	r2, [pc, #388]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80015f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b5f      	ldr	r3, [pc, #380]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a5e      	ldr	r2, [pc, #376]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e011      	b.n	800162c <HAL_RCC_OscConfig+0x12c>
 8001608:	4b5b      	ldr	r3, [pc, #364]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a5a      	ldr	r2, [pc, #360]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 800160e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b58      	ldr	r3, [pc, #352]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a57      	ldr	r2, [pc, #348]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 800161a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b55      	ldr	r3, [pc, #340]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a54      	ldr	r2, [pc, #336]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001626:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800162a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fc5e 	bl	8000ef4 <HAL_GetTick>
 8001638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fc5a 	bl	8000ef4 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e356      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800164e:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x13c>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fc4a 	bl	8000ef4 <HAL_GetTick>
 8001660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fc46 	bl	8000ef4 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e342      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001676:	4b40      	ldr	r3, [pc, #256]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x164>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 808d 	beq.w	80017ae <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001694:	4b38      	ldr	r3, [pc, #224]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800169c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <HAL_RCC_OscConfig+0x1ba>
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	2b18      	cmp	r3, #24
 80016ae:	d137      	bne.n	8001720 <HAL_RCC_OscConfig+0x220>
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d132      	bne.n	8001720 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1d2>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e314      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016d2:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 0219 	bic.w	r2, r3, #25
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	4926      	ldr	r1, [pc, #152]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016e4:	f7ff fc06 	bl	8000ef4 <HAL_GetTick>
 80016e8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff fc02 	bl	8000ef4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e2fe      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	061b      	lsls	r3, r3, #24
 8001718:	4917      	ldr	r1, [pc, #92]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800171e:	e046      	b.n	80017ae <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d029      	beq.n	800177c <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 0219 	bic.w	r2, r3, #25
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4910      	ldr	r1, [pc, #64]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173a:	f7ff fbdb 	bl	8000ef4 <HAL_GetTick>
 800173e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001742:	f7ff fbd7 	bl	8000ef4 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e2d3      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	061b      	lsls	r3, r3, #24
 800176e:	4902      	ldr	r1, [pc, #8]	; (8001778 <HAL_RCC_OscConfig+0x278>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
 8001774:	e01b      	b.n	80017ae <HAL_RCC_OscConfig+0x2ae>
 8001776:	bf00      	nop
 8001778:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177c:	4b97      	ldr	r3, [pc, #604]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a96      	ldr	r2, [pc, #600]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fbb4 	bl	8000ef4 <HAL_GetTick>
 800178c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001790:	f7ff fbb0 	bl	8000ef4 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e2ac      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017a2:	4b8e      	ldr	r3, [pc, #568]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d06a      	beq.n	8001890 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ba:	4b88      	ldr	r3, [pc, #544]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017c4:	4b85      	ldr	r3, [pc, #532]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d007      	beq.n	80017e0 <HAL_RCC_OscConfig+0x2e0>
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b18      	cmp	r3, #24
 80017d4:	d11b      	bne.n	800180e <HAL_RCC_OscConfig+0x30e>
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d116      	bne.n	800180e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017e0:	4b7e      	ldr	r3, [pc, #504]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_OscConfig+0x2f8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2b80      	cmp	r3, #128	; 0x80
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e281      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017f8:	4b78      	ldr	r3, [pc, #480]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	061b      	lsls	r3, r3, #24
 8001806:	4975      	ldr	r1, [pc, #468]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 8001808:	4313      	orrs	r3, r2
 800180a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800180c:	e040      	b.n	8001890 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d023      	beq.n	800185e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001816:	4b71      	ldr	r3, [pc, #452]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a70      	ldr	r2, [pc, #448]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 800181c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7ff fb67 	bl	8000ef4 <HAL_GetTick>
 8001826:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800182a:	f7ff fb63 	bl	8000ef4 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e25f      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800183c:	4b67      	ldr	r3, [pc, #412]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001848:	4b64      	ldr	r3, [pc, #400]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	061b      	lsls	r3, r3, #24
 8001856:	4961      	ldr	r1, [pc, #388]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 8001858:	4313      	orrs	r3, r2
 800185a:	60cb      	str	r3, [r1, #12]
 800185c:	e018      	b.n	8001890 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800185e:	4b5f      	ldr	r3, [pc, #380]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a5e      	ldr	r2, [pc, #376]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 8001864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186a:	f7ff fb43 	bl	8000ef4 <HAL_GetTick>
 800186e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001872:	f7ff fb3f 	bl	8000ef4 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e23b      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001884:	4b55      	ldr	r3, [pc, #340]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d036      	beq.n	800190a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d019      	beq.n	80018d8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a4:	4b4d      	ldr	r3, [pc, #308]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 80018a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a8:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff fb20 	bl	8000ef4 <HAL_GetTick>
 80018b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff fb1c 	bl	8000ef4 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e218      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018ca:	4b44      	ldr	r3, [pc, #272]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 80018cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x3b8>
 80018d6:	e018      	b.n	800190a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d8:	4b40      	ldr	r3, [pc, #256]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 80018da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018dc:	4a3f      	ldr	r2, [pc, #252]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e4:	f7ff fb06 	bl	8000ef4 <HAL_GetTick>
 80018e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ec:	f7ff fb02 	bl	8000ef4 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e1fe      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018fe:	4b37      	ldr	r3, [pc, #220]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 8001900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	2b00      	cmp	r3, #0
 8001914:	d036      	beq.n	8001984 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d019      	beq.n	8001952 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800191e:	4b2f      	ldr	r3, [pc, #188]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a2e      	ldr	r2, [pc, #184]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 8001924:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001928:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800192a:	f7ff fae3 	bl	8000ef4 <HAL_GetTick>
 800192e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001932:	f7ff fadf 	bl	8000ef4 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e1db      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x432>
 8001950:	e018      	b.n	8001984 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001952:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a21      	ldr	r2, [pc, #132]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 8001958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800195c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800195e:	f7ff fac9 	bl	8000ef4 <HAL_GetTick>
 8001962:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001966:	f7ff fac5 	bl	8000ef4 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e1c1      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80af 	beq.w	8001af0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_RCC_OscConfig+0x4e0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <HAL_RCC_OscConfig+0x4e0>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800199e:	f7ff faa9 	bl	8000ef4 <HAL_GetTick>
 80019a2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019a6:	f7ff faa5 	bl	8000ef4 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b64      	cmp	r3, #100	; 0x64
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e1a1      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_RCC_OscConfig+0x4e0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d10b      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4e4>
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d0:	4a02      	ldr	r2, [pc, #8]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6713      	str	r3, [r2, #112]	; 0x70
 80019d8:	e05b      	b.n	8001a92 <HAL_RCC_OscConfig+0x592>
 80019da:	bf00      	nop
 80019dc:	58024400 	.word	0x58024400
 80019e0:	58024800 	.word	0x58024800
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d112      	bne.n	8001a12 <HAL_RCC_OscConfig+0x512>
 80019ec:	4b9d      	ldr	r3, [pc, #628]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f0:	4a9c      	ldr	r2, [pc, #624]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	6713      	str	r3, [r2, #112]	; 0x70
 80019f8:	4b9a      	ldr	r3, [pc, #616]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fc:	4a99      	ldr	r2, [pc, #612]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 80019fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a02:	6713      	str	r3, [r2, #112]	; 0x70
 8001a04:	4b97      	ldr	r3, [pc, #604]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a08:	4a96      	ldr	r2, [pc, #600]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a0a:	f023 0304 	bic.w	r3, r3, #4
 8001a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a10:	e03f      	b.n	8001a92 <HAL_RCC_OscConfig+0x592>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d112      	bne.n	8001a40 <HAL_RCC_OscConfig+0x540>
 8001a1a:	4b92      	ldr	r3, [pc, #584]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1e:	4a91      	ldr	r2, [pc, #580]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6713      	str	r3, [r2, #112]	; 0x70
 8001a26:	4b8f      	ldr	r3, [pc, #572]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	4a8e      	ldr	r2, [pc, #568]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a30:	6713      	str	r3, [r2, #112]	; 0x70
 8001a32:	4b8c      	ldr	r3, [pc, #560]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a36:	4a8b      	ldr	r2, [pc, #556]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3e:	e028      	b.n	8001a92 <HAL_RCC_OscConfig+0x592>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b85      	cmp	r3, #133	; 0x85
 8001a46:	d112      	bne.n	8001a6e <HAL_RCC_OscConfig+0x56e>
 8001a48:	4b86      	ldr	r3, [pc, #536]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4c:	4a85      	ldr	r2, [pc, #532]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	6713      	str	r3, [r2, #112]	; 0x70
 8001a54:	4b83      	ldr	r3, [pc, #524]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a58:	4a82      	ldr	r2, [pc, #520]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a60:	4b80      	ldr	r3, [pc, #512]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a64:	4a7f      	ldr	r2, [pc, #508]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a6c:	e011      	b.n	8001a92 <HAL_RCC_OscConfig+0x592>
 8001a6e:	4b7d      	ldr	r3, [pc, #500]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a72:	4a7c      	ldr	r2, [pc, #496]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7a:	4b7a      	ldr	r3, [pc, #488]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	4a79      	ldr	r2, [pc, #484]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	6713      	str	r3, [r2, #112]	; 0x70
 8001a86:	4b77      	ldr	r3, [pc, #476]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	4a76      	ldr	r2, [pc, #472]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d015      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fa2b 	bl	8000ef4 <HAL_GetTick>
 8001a9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa2:	f7ff fa27 	bl	8000ef4 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e121      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ab8:	4b6a      	ldr	r3, [pc, #424]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0ee      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x5a2>
 8001ac4:	e014      	b.n	8001af0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fa15 	bl	8000ef4 <HAL_GetTick>
 8001aca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7ff fa11 	bl	8000ef4 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e10b      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ae4:	4b5f      	ldr	r3, [pc, #380]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1ee      	bne.n	8001ace <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 8100 	beq.w	8001cfa <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001afa:	4b5a      	ldr	r3, [pc, #360]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b02:	2b18      	cmp	r3, #24
 8001b04:	f000 80bb 	beq.w	8001c7e <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	f040 8095 	bne.w	8001c3c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b12:	4b54      	ldr	r3, [pc, #336]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a53      	ldr	r2, [pc, #332]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001b18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7ff f9e9 	bl	8000ef4 <HAL_GetTick>
 8001b22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b26:	f7ff f9e5 	bl	8000ef4 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e0e1      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b38:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b44:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b48:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_RCC_OscConfig+0x768>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	430a      	orrs	r2, r1
 8001b58:	4942      	ldr	r1, [pc, #264]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	628b      	str	r3, [r1, #40]	; 0x28
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	3b01      	subs	r3, #1
 8001b64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	025b      	lsls	r3, r3, #9
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	041b      	lsls	r3, r3, #16
 8001b7c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b86:	3b01      	subs	r3, #1
 8001b88:	061b      	lsls	r3, r3, #24
 8001b8a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b8e:	4935      	ldr	r1, [pc, #212]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001b94:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	4a32      	ldr	r2, [pc, #200]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ba0:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba4:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <HAL_RCC_OscConfig+0x76c>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bac:	00d2      	lsls	r2, r2, #3
 8001bae:	492d      	ldr	r1, [pc, #180]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	f023 020c 	bic.w	r2, r3, #12
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	4928      	ldr	r1, [pc, #160]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001bc6:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	f023 0202 	bic.w	r2, r3, #2
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4924      	ldr	r1, [pc, #144]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001be4:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001bf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f96e 	bl	8000ef4 <HAL_GetTick>
 8001c18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f96a 	bl	8000ef4 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e066      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x71c>
 8001c3a:	e05e      	b.n	8001cfa <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_RCC_OscConfig+0x764>)
 8001c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff f954 	bl	8000ef4 <HAL_GetTick>
 8001c4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c4e:	e00f      	b.n	8001c70 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c50:	f7ff f950 	bl	8000ef4 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d908      	bls.n	8001c70 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e04c      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
 8001c62:	bf00      	nop
 8001c64:	58024400 	.word	0x58024400
 8001c68:	fffffc0c 	.word	0xfffffc0c
 8001c6c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_RCC_OscConfig+0x804>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1e9      	bne.n	8001c50 <HAL_RCC_OscConfig+0x750>
 8001c7c:	e03d      	b.n	8001cfa <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c7e:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_RCC_OscConfig+0x804>)
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c84:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <HAL_RCC_OscConfig+0x804>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d031      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d12a      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d122      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d11a      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	0a5b      	lsrs	r3, r3, #9
 8001cc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ccc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d111      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	0c1b      	lsrs	r3, r3, #16
 8001cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cde:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d108      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	0e1b      	lsrs	r3, r3, #24
 8001ce8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3730      	adds	r7, #48	; 0x30
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	58024400 	.word	0x58024400

08001d08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e19c      	b.n	8002056 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b8a      	ldr	r3, [pc, #552]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d910      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b87      	ldr	r3, [pc, #540]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 020f 	bic.w	r2, r3, #15
 8001d32:	4985      	ldr	r1, [pc, #532]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b83      	ldr	r3, [pc, #524]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e184      	b.n	8002056 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d010      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	4b7b      	ldr	r3, [pc, #492]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d908      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d68:	4b78      	ldr	r3, [pc, #480]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	4975      	ldr	r1, [pc, #468]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d010      	beq.n	8001da8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695a      	ldr	r2, [r3, #20]
 8001d8a:	4b70      	ldr	r3, [pc, #448]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d908      	bls.n	8001da8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d96:	4b6d      	ldr	r3, [pc, #436]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	496a      	ldr	r1, [pc, #424]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d010      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699a      	ldr	r2, [r3, #24]
 8001db8:	4b64      	ldr	r3, [pc, #400]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d908      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001dc4:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	495e      	ldr	r1, [pc, #376]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d010      	beq.n	8001e04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d908      	bls.n	8001e04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001df2:	4b56      	ldr	r3, [pc, #344]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4953      	ldr	r1, [pc, #332]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d010      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d908      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b4a      	ldr	r3, [pc, #296]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f023 020f 	bic.w	r2, r3, #15
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4947      	ldr	r1, [pc, #284]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d055      	beq.n	8001eea <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e3e:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	4940      	ldr	r1, [pc, #256]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e58:	4b3c      	ldr	r3, [pc, #240]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d121      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0f6      	b.n	8002056 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e70:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d115      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0ea      	b.n	8002056 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d107      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e88:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d109      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0de      	b.n	8002056 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e98:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0d6      	b.n	8002056 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	f023 0207 	bic.w	r2, r3, #7
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4925      	ldr	r1, [pc, #148]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f7ff f81b 	bl	8000ef4 <HAL_GetTick>
 8001ebe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec2:	f7ff f817 	bl	8000ef4 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e0be      	b.n	8002056 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d1eb      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d010      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d208      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f023 020f 	bic.w	r2, r3, #15
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	490e      	ldr	r1, [pc, #56]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d214      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 020f 	bic.w	r2, r3, #15
 8001f2e:	4906      	ldr	r1, [pc, #24]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e086      	b.n	8002056 <HAL_RCC_ClockConfig+0x34e>
 8001f48:	52002000 	.word	0x52002000
 8001f4c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d010      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	4b3f      	ldr	r3, [pc, #252]	; (8002060 <HAL_RCC_ClockConfig+0x358>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d208      	bcs.n	8001f7e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f6c:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <HAL_RCC_ClockConfig+0x358>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	4939      	ldr	r1, [pc, #228]	; (8002060 <HAL_RCC_ClockConfig+0x358>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d010      	beq.n	8001fac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCC_ClockConfig+0x358>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d208      	bcs.n	8001fac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f9a:	4b31      	ldr	r3, [pc, #196]	; (8002060 <HAL_RCC_ClockConfig+0x358>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	492e      	ldr	r1, [pc, #184]	; (8002060 <HAL_RCC_ClockConfig+0x358>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d010      	beq.n	8001fda <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <HAL_RCC_ClockConfig+0x358>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d208      	bcs.n	8001fda <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <HAL_RCC_ClockConfig+0x358>)
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4922      	ldr	r1, [pc, #136]	; (8002060 <HAL_RCC_ClockConfig+0x358>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d010      	beq.n	8002008 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_RCC_ClockConfig+0x358>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d208      	bcs.n	8002008 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_RCC_ClockConfig+0x358>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4917      	ldr	r1, [pc, #92]	; (8002060 <HAL_RCC_ClockConfig+0x358>)
 8002004:	4313      	orrs	r3, r2
 8002006:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002008:	f000 f834 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_RCC_ClockConfig+0x358>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	4912      	ldr	r1, [pc, #72]	; (8002064 <HAL_RCC_ClockConfig+0x35c>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
 8002024:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_RCC_ClockConfig+0x358>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <HAL_RCC_ClockConfig+0x35c>)
 8002030:	5cd3      	ldrb	r3, [r2, r3]
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_RCC_ClockConfig+0x360>)
 800203e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002040:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_RCC_ClockConfig+0x364>)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_RCC_ClockConfig+0x368>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe ff08 	bl	8000e60 <HAL_InitTick>
 8002050:	4603      	mov	r3, r0
 8002052:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	58024400 	.word	0x58024400
 8002064:	08006018 	.word	0x08006018
 8002068:	24000004 	.word	0x24000004
 800206c:	24000000 	.word	0x24000000
 8002070:	24000008 	.word	0x24000008

08002074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800207a:	4bb3      	ldr	r3, [pc, #716]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002082:	2b18      	cmp	r3, #24
 8002084:	f200 8155 	bhi.w	8002332 <HAL_RCC_GetSysClockFreq+0x2be>
 8002088:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <HAL_RCC_GetSysClockFreq+0x1c>)
 800208a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208e:	bf00      	nop
 8002090:	080020f5 	.word	0x080020f5
 8002094:	08002333 	.word	0x08002333
 8002098:	08002333 	.word	0x08002333
 800209c:	08002333 	.word	0x08002333
 80020a0:	08002333 	.word	0x08002333
 80020a4:	08002333 	.word	0x08002333
 80020a8:	08002333 	.word	0x08002333
 80020ac:	08002333 	.word	0x08002333
 80020b0:	0800211b 	.word	0x0800211b
 80020b4:	08002333 	.word	0x08002333
 80020b8:	08002333 	.word	0x08002333
 80020bc:	08002333 	.word	0x08002333
 80020c0:	08002333 	.word	0x08002333
 80020c4:	08002333 	.word	0x08002333
 80020c8:	08002333 	.word	0x08002333
 80020cc:	08002333 	.word	0x08002333
 80020d0:	08002121 	.word	0x08002121
 80020d4:	08002333 	.word	0x08002333
 80020d8:	08002333 	.word	0x08002333
 80020dc:	08002333 	.word	0x08002333
 80020e0:	08002333 	.word	0x08002333
 80020e4:	08002333 	.word	0x08002333
 80020e8:	08002333 	.word	0x08002333
 80020ec:	08002333 	.word	0x08002333
 80020f0:	08002127 	.word	0x08002127
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020f4:	4b94      	ldr	r3, [pc, #592]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d009      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002100:	4b91      	ldr	r3, [pc, #580]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	08db      	lsrs	r3, r3, #3
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	4a90      	ldr	r2, [pc, #576]	; (800234c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
 8002110:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002112:	e111      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002114:	4b8d      	ldr	r3, [pc, #564]	; (800234c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002116:	61bb      	str	r3, [r7, #24]
    break;
 8002118:	e10e      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800211a:	4b8d      	ldr	r3, [pc, #564]	; (8002350 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800211c:	61bb      	str	r3, [r7, #24]
    break;
 800211e:	e10b      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002120:	4b8c      	ldr	r3, [pc, #560]	; (8002354 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002122:	61bb      	str	r3, [r7, #24]
    break;
 8002124:	e108      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002126:	4b88      	ldr	r3, [pc, #544]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002130:	4b85      	ldr	r3, [pc, #532]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800213a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800213c:	4b82      	ldr	r3, [pc, #520]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002146:	4b80      	ldr	r3, [pc, #512]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800215e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80e1 	beq.w	800232c <HAL_RCC_GetSysClockFreq+0x2b8>
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b02      	cmp	r3, #2
 800216e:	f000 8083 	beq.w	8002278 <HAL_RCC_GetSysClockFreq+0x204>
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b02      	cmp	r3, #2
 8002176:	f200 80a1 	bhi.w	80022bc <HAL_RCC_GetSysClockFreq+0x248>
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x114>
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d056      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002186:	e099      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002188:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b00      	cmp	r3, #0
 8002192:	d02d      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002194:	4b6c      	ldr	r3, [pc, #432]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	08db      	lsrs	r3, r3, #3
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	4a6b      	ldr	r2, [pc, #428]	; (800234c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
 80021a4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	ee07 3a90 	vmov	s15, r3
 80021b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021be:	4b62      	ldr	r3, [pc, #392]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c6:	ee07 3a90 	vmov	s15, r3
 80021ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80021d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002358 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80021ee:	e087      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800235c <HAL_RCC_GetSysClockFreq+0x2e8>
 80021fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002202:	4b51      	ldr	r3, [pc, #324]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800220a:	ee07 3a90 	vmov	s15, r3
 800220e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002212:	ed97 6a02 	vldr	s12, [r7, #8]
 8002216:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002358 <HAL_RCC_GetSysClockFreq+0x2e4>
 800221a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800221e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800222a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002232:	e065      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800223e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002360 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002246:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002256:	ed97 6a02 	vldr	s12, [r7, #8]
 800225a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002358 <HAL_RCC_GetSysClockFreq+0x2e4>
 800225e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800226a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800226e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002276:	e043      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002282:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002364 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800228a:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800229a:	ed97 6a02 	vldr	s12, [r7, #8]
 800229e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002358 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022ba:	e021      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	ee07 3a90 	vmov	s15, r3
 80022c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002360 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ce:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022de:	ed97 6a02 	vldr	s12, [r7, #8]
 80022e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002358 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022fe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	0a5b      	lsrs	r3, r3, #9
 8002306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800230a:	3301      	adds	r3, #1
 800230c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	ee07 3a90 	vmov	s15, r3
 8002314:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002318:	edd7 6a07 	vldr	s13, [r7, #28]
 800231c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002324:	ee17 3a90 	vmov	r3, s15
 8002328:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800232a:	e005      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	61bb      	str	r3, [r7, #24]
    break;
 8002330:	e002      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002334:	61bb      	str	r3, [r7, #24]
    break;
 8002336:	bf00      	nop
  }

  return sysclockfreq;
 8002338:	69bb      	ldr	r3, [r7, #24]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3724      	adds	r7, #36	; 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	58024400 	.word	0x58024400
 800234c:	03d09000 	.word	0x03d09000
 8002350:	003d0900 	.word	0x003d0900
 8002354:	016e3600 	.word	0x016e3600
 8002358:	46000000 	.word	0x46000000
 800235c:	4c742400 	.word	0x4c742400
 8002360:	4a742400 	.word	0x4a742400
 8002364:	4bb71b00 	.word	0x4bb71b00

08002368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800236e:	f7ff fe81 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002372:	4602      	mov	r2, r0
 8002374:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	490f      	ldr	r1, [pc, #60]	; (80023bc <HAL_RCC_GetHCLKFreq+0x54>)
 8002380:	5ccb      	ldrb	r3, [r1, r3]
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	4a09      	ldr	r2, [pc, #36]	; (80023bc <HAL_RCC_GetHCLKFreq+0x54>)
 8002396:	5cd3      	ldrb	r3, [r2, r3]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	fa22 f303 	lsr.w	r3, r2, r3
 80023a2:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80023a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023a6:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	58024400 	.word	0x58024400
 80023bc:	08006018 	.word	0x08006018
 80023c0:	24000004 	.word	0x24000004
 80023c4:	24000000 	.word	0x24000000

080023c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80023cc:	f7ff ffcc 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	4904      	ldr	r1, [pc, #16]	; (80023f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023de:	5ccb      	ldrb	r3, [r1, r3]
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	58024400 	.word	0x58024400
 80023f0:	08006018 	.word	0x08006018

080023f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80023f8:	f7ff ffb6 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	4904      	ldr	r1, [pc, #16]	; (800241c <HAL_RCC_GetPCLK2Freq+0x28>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002414:	4618      	mov	r0, r3
 8002416:	bd80      	pop	{r7, pc}
 8002418:	58024400 	.word	0x58024400
 800241c:	08006018 	.word	0x08006018

08002420 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002428:	2300      	movs	r3, #0
 800242a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800242c:	2300      	movs	r3, #0
 800242e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d03f      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002440:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002444:	d02a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002446:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800244a:	d824      	bhi.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800244c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002450:	d018      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002456:	d81e      	bhi.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800245c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002460:	d007      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002462:	e018      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002464:	4b9f      	ldr	r3, [pc, #636]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	4a9e      	ldr	r2, [pc, #632]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800246a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002470:	e015      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3304      	adds	r3, #4
 8002476:	2102      	movs	r1, #2
 8002478:	4618      	mov	r0, r3
 800247a:	f001 f99b 	bl	80037b4 <RCCEx_PLL2_Config>
 800247e:	4603      	mov	r3, r0
 8002480:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002482:	e00c      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3324      	adds	r3, #36	; 0x24
 8002488:	2102      	movs	r1, #2
 800248a:	4618      	mov	r0, r3
 800248c:	f001 fa44 	bl	8003918 <RCCEx_PLL3_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002494:	e003      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	75fb      	strb	r3, [r7, #23]
      break;
 800249a:	e000      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800249c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249e:	7dfb      	ldrb	r3, [r7, #23]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d109      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80024a4:	4b8f      	ldr	r3, [pc, #572]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024b0:	498c      	ldr	r1, [pc, #560]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	650b      	str	r3, [r1, #80]	; 0x50
 80024b6:	e001      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d03d      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d826      	bhi.n	800251e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80024d0:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80024d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d6:	bf00      	nop
 80024d8:	080024ed 	.word	0x080024ed
 80024dc:	080024fb 	.word	0x080024fb
 80024e0:	0800250d 	.word	0x0800250d
 80024e4:	08002525 	.word	0x08002525
 80024e8:	08002525 	.word	0x08002525
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ec:	4b7d      	ldr	r3, [pc, #500]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	4a7c      	ldr	r2, [pc, #496]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024f8:	e015      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f001 f957 	bl	80037b4 <RCCEx_PLL2_Config>
 8002506:	4603      	mov	r3, r0
 8002508:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800250a:	e00c      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3324      	adds	r3, #36	; 0x24
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f001 fa00 	bl	8003918 <RCCEx_PLL3_Config>
 8002518:	4603      	mov	r3, r0
 800251a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800251c:	e003      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	75fb      	strb	r3, [r7, #23]
      break;
 8002522:	e000      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002526:	7dfb      	ldrb	r3, [r7, #23]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800252c:	4b6d      	ldr	r3, [pc, #436]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800252e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002530:	f023 0207 	bic.w	r2, r3, #7
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	496a      	ldr	r1, [pc, #424]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	650b      	str	r3, [r1, #80]	; 0x50
 800253e:	e001      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254c:	2b00      	cmp	r3, #0
 800254e:	d04a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002558:	d031      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800255a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800255e:	d82b      	bhi.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002564:	d02d      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800256a:	d825      	bhi.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800256c:	2bc0      	cmp	r3, #192	; 0xc0
 800256e:	d02a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002570:	2bc0      	cmp	r3, #192	; 0xc0
 8002572:	d821      	bhi.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002574:	2b80      	cmp	r3, #128	; 0x80
 8002576:	d016      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d81d      	bhi.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002580:	2b40      	cmp	r3, #64	; 0x40
 8002582:	d007      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002584:	e018      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002586:	4b57      	ldr	r3, [pc, #348]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	4a56      	ldr	r2, [pc, #344]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800258c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002590:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002592:	e019      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3304      	adds	r3, #4
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f001 f90a 	bl	80037b4 <RCCEx_PLL2_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80025a4:	e010      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3324      	adds	r3, #36	; 0x24
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f001 f9b3 	bl	8003918 <RCCEx_PLL3_Config>
 80025b2:	4603      	mov	r3, r0
 80025b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80025b6:	e007      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	75fb      	strb	r3, [r7, #23]
      break;
 80025bc:	e004      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80025be:	bf00      	nop
 80025c0:	e002      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80025c2:	bf00      	nop
 80025c4:	e000      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80025c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80025ce:	4b45      	ldr	r3, [pc, #276]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	4942      	ldr	r1, [pc, #264]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	650b      	str	r3, [r1, #80]	; 0x50
 80025e0:	e001      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
 80025e4:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d04f      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80025fa:	d036      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80025fc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002600:	d830      	bhi.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002606:	d032      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800260c:	d82a      	bhi.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800260e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002612:	d02e      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002614:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002618:	d824      	bhi.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800261a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261e:	d018      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002624:	d81e      	bhi.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800262a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800262e:	d007      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002630:	e018      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002632:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	4a2b      	ldr	r2, [pc, #172]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800263e:	e019      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3304      	adds	r3, #4
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f001 f8b4 	bl	80037b4 <RCCEx_PLL2_Config>
 800264c:	4603      	mov	r3, r0
 800264e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002650:	e010      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3324      	adds	r3, #36	; 0x24
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f001 f95d 	bl	8003918 <RCCEx_PLL3_Config>
 800265e:	4603      	mov	r3, r0
 8002660:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002662:	e007      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	75fb      	strb	r3, [r7, #23]
      break;
 8002668:	e004      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800266a:	bf00      	nop
 800266c:	e002      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800266e:	bf00      	nop
 8002670:	e000      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800267a:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800267c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	4917      	ldr	r1, [pc, #92]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002688:	4313      	orrs	r3, r2
 800268a:	650b      	str	r3, [r1, #80]	; 0x50
 800268c:	e001      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d034      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a2:	2b30      	cmp	r3, #48	; 0x30
 80026a4:	d01c      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80026a6:	2b30      	cmp	r3, #48	; 0x30
 80026a8:	d817      	bhi.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d00c      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d813      	bhi.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d018      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d10f      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	4a09      	ldr	r2, [pc, #36]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80026c6:	e010      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3304      	adds	r3, #4
 80026cc:	2102      	movs	r1, #2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f001 f870 	bl	80037b4 <RCCEx_PLL2_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80026d8:	e007      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
      break;
 80026de:	e004      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 80026e0:	bf00      	nop
 80026e2:	e002      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80026e4:	58024400 	.word	0x58024400
      break;
 80026e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80026f0:	4b9b      	ldr	r3, [pc, #620]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80026f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fc:	4998      	ldr	r1, [pc, #608]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002702:	e001      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d047      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800271c:	d030      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800271e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002722:	d82a      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002724:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002728:	d02c      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800272a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800272e:	d824      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002734:	d018      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273a:	d81e      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002744:	d007      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002746:	e018      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002748:	4b85      	ldr	r3, [pc, #532]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	4a84      	ldr	r2, [pc, #528]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800274e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002752:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002754:	e017      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3304      	adds	r3, #4
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f001 f829 	bl	80037b4 <RCCEx_PLL2_Config>
 8002762:	4603      	mov	r3, r0
 8002764:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002766:	e00e      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3324      	adds	r3, #36	; 0x24
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f001 f8d2 	bl	8003918 <RCCEx_PLL3_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002778:	e005      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
      break;
 800277e:	e002      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002780:	bf00      	nop
 8002782:	e000      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002786:	7dfb      	ldrb	r3, [r7, #23]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800278c:	4b74      	ldr	r3, [pc, #464]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800278e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002790:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002798:	4971      	ldr	r1, [pc, #452]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800279a:	4313      	orrs	r3, r2
 800279c:	650b      	str	r3, [r1, #80]	; 0x50
 800279e:	e001      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d049      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b8:	d02e      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80027ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027be:	d828      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80027c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027c4:	d02a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80027c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027ca:	d822      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80027cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027d0:	d026      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80027d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027d6:	d81c      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80027d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027dc:	d010      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80027de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027e2:	d816      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01d      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ec:	d111      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3304      	adds	r3, #4
 80027f2:	2101      	movs	r1, #1
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 ffdd 	bl	80037b4 <RCCEx_PLL2_Config>
 80027fa:	4603      	mov	r3, r0
 80027fc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80027fe:	e012      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3324      	adds	r3, #36	; 0x24
 8002804:	2101      	movs	r1, #1
 8002806:	4618      	mov	r0, r3
 8002808:	f001 f886 	bl	8003918 <RCCEx_PLL3_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002810:	e009      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	75fb      	strb	r3, [r7, #23]
      break;
 8002816:	e006      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002818:	bf00      	nop
 800281a:	e004      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800281c:	bf00      	nop
 800281e:	e002      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002820:	bf00      	nop
 8002822:	e000      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800282c:	4b4c      	ldr	r3, [pc, #304]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800282e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002830:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002838:	4949      	ldr	r1, [pc, #292]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800283a:	4313      	orrs	r3, r2
 800283c:	650b      	str	r3, [r1, #80]	; 0x50
 800283e:	e001      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002840:	7dfb      	ldrb	r3, [r7, #23]
 8002842:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d053      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002856:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800285a:	d034      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800285c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002860:	d82e      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002866:	d030      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800286c:	d828      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800286e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002872:	d02c      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002878:	d822      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800287a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800287e:	d028      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002880:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002884:	d81c      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800288a:	d010      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800288c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002890:	d816      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01f      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800289a:	d111      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	2101      	movs	r1, #1
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 ff86 	bl	80037b4 <RCCEx_PLL2_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80028ac:	e014      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3324      	adds	r3, #36	; 0x24
 80028b2:	2101      	movs	r1, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 f82f 	bl	8003918 <RCCEx_PLL3_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80028be:	e00b      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	75fb      	strb	r3, [r7, #23]
      break;
 80028c4:	e008      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80028c6:	bf00      	nop
 80028c8:	e006      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80028ca:	bf00      	nop
 80028cc:	e004      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80028ce:	bf00      	nop
 80028d0:	e002      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80028d2:	bf00      	nop
 80028d4:	e000      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80028d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10a      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80028ec:	491c      	ldr	r1, [pc, #112]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	658b      	str	r3, [r1, #88]	; 0x58
 80028f2:	e001      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	7dfb      	ldrb	r3, [r7, #23]
 80028f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d031      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800290c:	d00e      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800290e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002912:	d814      	bhi.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002914:	2b00      	cmp	r3, #0
 8002916:	d015      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800291c:	d10f      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002928:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800292a:	e00c      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	2101      	movs	r1, #1
 8002932:	4618      	mov	r0, r3
 8002934:	f000 ff3e 	bl	80037b4 <RCCEx_PLL2_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800293c:	e003      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]
      break;
 8002942:	e000      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10b      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800294e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002950:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002958:	4901      	ldr	r1, [pc, #4]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800295a:	4313      	orrs	r3, r2
 800295c:	650b      	str	r3, [r1, #80]	; 0x50
 800295e:	e003      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8002960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d032      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	2b03      	cmp	r3, #3
 800297a:	d81b      	bhi.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800297c:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	080029bb 	.word	0x080029bb
 8002988:	08002995 	.word	0x08002995
 800298c:	080029a3 	.word	0x080029a3
 8002990:	080029bb 	.word	0x080029bb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002994:	4bb2      	ldr	r3, [pc, #712]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	4ab1      	ldr	r2, [pc, #708]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800299a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80029a0:	e00c      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2102      	movs	r1, #2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 ff03 	bl	80037b4 <RCCEx_PLL2_Config>
 80029ae:	4603      	mov	r3, r0
 80029b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80029b2:	e003      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	75fb      	strb	r3, [r7, #23]
      break;
 80029b8:	e000      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80029ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80029c2:	4ba7      	ldr	r3, [pc, #668]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80029c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	49a4      	ldr	r1, [pc, #656]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80029d4:	e001      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
 80029d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8086 	beq.w	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e8:	4b9e      	ldr	r3, [pc, #632]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a9d      	ldr	r2, [pc, #628]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f4:	f7fe fa7e 	bl	8000ef4 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029fa:	e009      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fc:	f7fe fa7a 	bl	8000ef4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d902      	bls.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	75fb      	strb	r3, [r7, #23]
        break;
 8002a0e:	e005      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a10:	4b94      	ldr	r3, [pc, #592]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ef      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8002a1c:	7dfb      	ldrb	r3, [r7, #23]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d166      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002a22:	4b8f      	ldr	r3, [pc, #572]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002a24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a2c:	4053      	eors	r3, r2
 8002a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d013      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a36:	4b8a      	ldr	r3, [pc, #552]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a40:	4b87      	ldr	r3, [pc, #540]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a86      	ldr	r2, [pc, #536]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a4c:	4b84      	ldr	r3, [pc, #528]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a83      	ldr	r2, [pc, #524]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002a58:	4a81      	ldr	r2, [pc, #516]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a68:	d115      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fa43 	bl	8000ef4 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a70:	e00b      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe fa3f 	bl	8000ef4 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d902      	bls.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	75fb      	strb	r3, [r7, #23]
            break;
 8002a88:	e005      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a8a:	4b75      	ldr	r3, [pc, #468]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ed      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d126      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002aaa:	d10d      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8002aac:	4b6c      	ldr	r3, [pc, #432]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002aba:	0919      	lsrs	r1, r3, #4
 8002abc:	4b6a      	ldr	r3, [pc, #424]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002abe:	400b      	ands	r3, r1
 8002ac0:	4967      	ldr	r1, [pc, #412]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	610b      	str	r3, [r1, #16]
 8002ac6:	e005      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8002ac8:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	4a64      	ldr	r2, [pc, #400]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002ace:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ad2:	6113      	str	r3, [r2, #16]
 8002ad4:	4b62      	ldr	r3, [pc, #392]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002ad6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae2:	495f      	ldr	r1, [pc, #380]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	670b      	str	r3, [r1, #112]	; 0x70
 8002ae8:	e004      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	75bb      	strb	r3, [r7, #22]
 8002aee:	e001      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d07f      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b06:	2b28      	cmp	r3, #40	; 0x28
 8002b08:	d866      	bhi.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8002b0a:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8002b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b10:	08002bdf 	.word	0x08002bdf
 8002b14:	08002bd9 	.word	0x08002bd9
 8002b18:	08002bd9 	.word	0x08002bd9
 8002b1c:	08002bd9 	.word	0x08002bd9
 8002b20:	08002bd9 	.word	0x08002bd9
 8002b24:	08002bd9 	.word	0x08002bd9
 8002b28:	08002bd9 	.word	0x08002bd9
 8002b2c:	08002bd9 	.word	0x08002bd9
 8002b30:	08002bb5 	.word	0x08002bb5
 8002b34:	08002bd9 	.word	0x08002bd9
 8002b38:	08002bd9 	.word	0x08002bd9
 8002b3c:	08002bd9 	.word	0x08002bd9
 8002b40:	08002bd9 	.word	0x08002bd9
 8002b44:	08002bd9 	.word	0x08002bd9
 8002b48:	08002bd9 	.word	0x08002bd9
 8002b4c:	08002bd9 	.word	0x08002bd9
 8002b50:	08002bc7 	.word	0x08002bc7
 8002b54:	08002bd9 	.word	0x08002bd9
 8002b58:	08002bd9 	.word	0x08002bd9
 8002b5c:	08002bd9 	.word	0x08002bd9
 8002b60:	08002bd9 	.word	0x08002bd9
 8002b64:	08002bd9 	.word	0x08002bd9
 8002b68:	08002bd9 	.word	0x08002bd9
 8002b6c:	08002bd9 	.word	0x08002bd9
 8002b70:	08002bdf 	.word	0x08002bdf
 8002b74:	08002bd9 	.word	0x08002bd9
 8002b78:	08002bd9 	.word	0x08002bd9
 8002b7c:	08002bd9 	.word	0x08002bd9
 8002b80:	08002bd9 	.word	0x08002bd9
 8002b84:	08002bd9 	.word	0x08002bd9
 8002b88:	08002bd9 	.word	0x08002bd9
 8002b8c:	08002bd9 	.word	0x08002bd9
 8002b90:	08002bdf 	.word	0x08002bdf
 8002b94:	08002bd9 	.word	0x08002bd9
 8002b98:	08002bd9 	.word	0x08002bd9
 8002b9c:	08002bd9 	.word	0x08002bd9
 8002ba0:	08002bd9 	.word	0x08002bd9
 8002ba4:	08002bd9 	.word	0x08002bd9
 8002ba8:	08002bd9 	.word	0x08002bd9
 8002bac:	08002bd9 	.word	0x08002bd9
 8002bb0:	08002bdf 	.word	0x08002bdf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fdfa 	bl	80037b4 <RCCEx_PLL2_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002bc4:	e00c      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3324      	adds	r3, #36	; 0x24
 8002bca:	2101      	movs	r1, #1
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fea3 	bl	8003918 <RCCEx_PLL3_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002bd6:	e003      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	75fb      	strb	r3, [r7, #23]
      break;
 8002bdc:	e000      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8002bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10a      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002be6:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf4:	491a      	ldr	r1, [pc, #104]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	654b      	str	r3, [r1, #84]	; 0x54
 8002bfa:	e001      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d03f      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d821      	bhi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8002c14:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1a:	bf00      	nop
 8002c1c:	08002c6d 	.word	0x08002c6d
 8002c20:	08002c35 	.word	0x08002c35
 8002c24:	08002c47 	.word	0x08002c47
 8002c28:	08002c6d 	.word	0x08002c6d
 8002c2c:	08002c6d 	.word	0x08002c6d
 8002c30:	08002c6d 	.word	0x08002c6d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fdba 	bl	80037b4 <RCCEx_PLL2_Config>
 8002c40:	4603      	mov	r3, r0
 8002c42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c44:	e013      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3324      	adds	r3, #36	; 0x24
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fe63 	bl	8003918 <RCCEx_PLL3_Config>
 8002c52:	4603      	mov	r3, r0
 8002c54:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c56:	e00a      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c5c:	e007      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8002c5e:	bf00      	nop
 8002c60:	58024400 	.word	0x58024400
 8002c64:	58024800 	.word	0x58024800
 8002c68:	00ffffcf 	.word	0x00ffffcf
      break;
 8002c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002c74:	4b9f      	ldr	r3, [pc, #636]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c78:	f023 0207 	bic.w	r2, r3, #7
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c80:	499c      	ldr	r1, [pc, #624]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	654b      	str	r3, [r1, #84]	; 0x54
 8002c86:	e001      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d039      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c9e:	2b05      	cmp	r3, #5
 8002ca0:	d820      	bhi.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8002ca2:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8002ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca8:	08002ceb 	.word	0x08002ceb
 8002cac:	08002cc1 	.word	0x08002cc1
 8002cb0:	08002cd3 	.word	0x08002cd3
 8002cb4:	08002ceb 	.word	0x08002ceb
 8002cb8:	08002ceb 	.word	0x08002ceb
 8002cbc:	08002ceb 	.word	0x08002ceb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fd74 	bl	80037b4 <RCCEx_PLL2_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002cd0:	e00c      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3324      	adds	r3, #36	; 0x24
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fe1d 	bl	8003918 <RCCEx_PLL3_Config>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002ce2:	e003      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ce8:	e000      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8002cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cf2:	4b80      	ldr	r3, [pc, #512]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf6:	f023 0207 	bic.w	r2, r3, #7
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d00:	497c      	ldr	r1, [pc, #496]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	658b      	str	r3, [r1, #88]	; 0x58
 8002d06:	e001      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d04b      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d22:	d02e      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8002d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d28:	d828      	bhi.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8002d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2e:	d02a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d34:	d822      	bhi.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8002d36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d3a:	d026      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002d3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d40:	d81c      	bhi.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8002d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d46:	d010      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8002d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d4c:	d816      	bhi.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01d      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d56:	d111      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fd28 	bl	80037b4 <RCCEx_PLL2_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002d68:	e012      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3324      	adds	r3, #36	; 0x24
 8002d6e:	2102      	movs	r1, #2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fdd1 	bl	8003918 <RCCEx_PLL3_Config>
 8002d76:	4603      	mov	r3, r0
 8002d78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002d7a:	e009      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d80:	e006      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8002d82:	bf00      	nop
 8002d84:	e004      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8002d86:	bf00      	nop
 8002d88:	e002      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e000      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8002d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d96:	4b57      	ldr	r3, [pc, #348]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da4:	4953      	ldr	r1, [pc, #332]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	654b      	str	r3, [r1, #84]	; 0x54
 8002daa:	e001      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d04b      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002dc2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002dc6:	d02e      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8002dc8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002dcc:	d828      	bhi.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8002dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd2:	d02a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8002dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd8:	d822      	bhi.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8002dda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dde:	d026      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002de0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002de4:	d81c      	bhi.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8002de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dea:	d010      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8002dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df0:	d816      	bhi.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01d      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfa:	d111      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fcd6 	bl	80037b4 <RCCEx_PLL2_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e0c:	e012      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3324      	adds	r3, #36	; 0x24
 8002e12:	2102      	movs	r1, #2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fd7f 	bl	8003918 <RCCEx_PLL3_Config>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e1e:	e009      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	75fb      	strb	r3, [r7, #23]
      break;
 8002e24:	e006      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8002e26:	bf00      	nop
 8002e28:	e004      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e002      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e000      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8002e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e3a:	4b2e      	ldr	r3, [pc, #184]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e48:	492a      	ldr	r1, [pc, #168]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	658b      	str	r3, [r1, #88]	; 0x58
 8002e4e:	e001      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d04d      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e6a:	d02e      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8002e6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e70:	d828      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e76:	d02a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8002e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e7c:	d822      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002e7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e82:	d026      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002e84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e88:	d81c      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002e8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8002e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e94:	d816      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d01d      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8002e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e9e:	d111      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fc84 	bl	80037b4 <RCCEx_PLL2_Config>
 8002eac:	4603      	mov	r3, r0
 8002eae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002eb0:	e012      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3324      	adds	r3, #36	; 0x24
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fd2d 	bl	8003918 <RCCEx_PLL3_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002ec2:	e009      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec8:	e006      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e004      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e002      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e000      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8002ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002ede:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002eec:	4901      	ldr	r1, [pc, #4]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ef2:	e003      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002ef4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01a      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f12:	d10a      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3324      	adds	r3, #36	; 0x24
 8002f18:	2102      	movs	r1, #2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fcfc 	bl	8003918 <RCCEx_PLL3_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002f2a:	4b8c      	ldr	r3, [pc, #560]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f38:	4988      	ldr	r1, [pc, #544]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f54:	d10a      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3324      	adds	r3, #36	; 0x24
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fcdb 	bl	8003918 <RCCEx_PLL3_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f6c:	4b7b      	ldr	r3, [pc, #492]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f7a:	4978      	ldr	r1, [pc, #480]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d034      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f96:	d01d      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8002f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f9c:	d817      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8002fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa6:	d009      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002fa8:	e011      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fbff 	bl	80037b4 <RCCEx_PLL2_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002fba:	e00c      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3324      	adds	r3, #36	; 0x24
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fca8 	bl	8003918 <RCCEx_PLL3_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002fcc:	e003      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8002fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fdc:	4b5f      	ldr	r3, [pc, #380]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fea:	495c      	ldr	r1, [pc, #368]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	658b      	str	r3, [r1, #88]	; 0x58
 8002ff0:	e001      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d033      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003008:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800300c:	d01c      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800300e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003012:	d816      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003018:	d003      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800301a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800301e:	d007      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003020:	e00f      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003022:	4b4e      	ldr	r3, [pc, #312]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	4a4d      	ldr	r2, [pc, #308]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800302e:	e00c      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3324      	adds	r3, #36	; 0x24
 8003034:	2101      	movs	r1, #1
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fc6e 	bl	8003918 <RCCEx_PLL3_Config>
 800303c:	4603      	mov	r3, r0
 800303e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003040:	e003      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	75fb      	strb	r3, [r7, #23]
      break;
 8003046:	e000      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800304a:	7dfb      	ldrb	r3, [r7, #23]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003050:	4b42      	ldr	r3, [pc, #264]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800305e:	493f      	ldr	r1, [pc, #252]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003060:	4313      	orrs	r3, r2
 8003062:	654b      	str	r3, [r1, #84]	; 0x54
 8003064:	e001      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d029      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800307e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003082:	d007      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003084:	e00f      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003086:	4b35      	ldr	r3, [pc, #212]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	4a34      	ldr	r2, [pc, #208]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800308c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003090:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003092:	e00b      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3304      	adds	r3, #4
 8003098:	2102      	movs	r1, #2
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fb8a 	bl	80037b4 <RCCEx_PLL2_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80030a4:	e002      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
      break;
 80030aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ac:	7dfb      	ldrb	r3, [r7, #23]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80030b2:	4b2a      	ldr	r3, [pc, #168]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	4927      	ldr	r1, [pc, #156]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80030c4:	e001      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3324      	adds	r3, #36	; 0x24
 80030da:	2102      	movs	r1, #2
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fc1b 	bl	8003918 <RCCEx_PLL3_Config>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d035      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003102:	d017      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003108:	d811      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800310a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310e:	d013      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003114:	d80b      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003116:	2b00      	cmp	r3, #0
 8003118:	d010      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800311a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311e:	d106      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	4a0d      	ldr	r2, [pc, #52]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800312c:	e007      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
      break;
 8003132:	e004      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003134:	bf00      	nop
 8003136:	e002      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003138:	bf00      	nop
 800313a:	e000      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800313c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800313e:	7dfb      	ldrb	r3, [r7, #23]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10d      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003152:	4902      	ldr	r1, [pc, #8]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003154:	4313      	orrs	r3, r2
 8003156:	654b      	str	r3, [r1, #84]	; 0x54
 8003158:	e004      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800315a:	bf00      	nop
 800315c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003170:	4b30      	ldr	r3, [pc, #192]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003174:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800317c:	492d      	ldr	r1, [pc, #180]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800317e:	4313      	orrs	r3, r2
 8003180:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800318e:	4b29      	ldr	r3, [pc, #164]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003192:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800319a:	4926      	ldr	r1, [pc, #152]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800319c:	4313      	orrs	r3, r2
 800319e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80031ac:	4b21      	ldr	r3, [pc, #132]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	491e      	ldr	r1, [pc, #120]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00d      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031ca:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	4a19      	ldr	r2, [pc, #100]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031d4:	6113      	str	r3, [r2, #16]
 80031d6:	4b17      	ldr	r3, [pc, #92]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031e0:	4914      	ldr	r1, [pc, #80]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	da08      	bge.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fa:	490e      	ldr	r1, [pc, #56]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	4906      	ldr	r1, [pc, #24]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800321c:	4313      	orrs	r3, r2
 800321e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003220:	7dbb      	ldrb	r3, [r7, #22]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	e000      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	58024400 	.word	0x58024400

08003238 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800323c:	f7ff f894 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4904      	ldr	r1, [pc, #16]	; (8003260 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003258:	4618      	mov	r0, r3
 800325a:	bd80      	pop	{r7, pc}
 800325c:	58024400 	.word	0x58024400
 8003260:	08006018 	.word	0x08006018

08003264 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	; 0x24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800326c:	4ba1      	ldr	r3, [pc, #644]	; (80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003276:	4b9f      	ldr	r3, [pc, #636]	; (80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	0b1b      	lsrs	r3, r3, #12
 800327c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003280:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003282:	4b9c      	ldr	r3, [pc, #624]	; (80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800328e:	4b99      	ldr	r3, [pc, #612]	; (80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003292:	08db      	lsrs	r3, r3, #3
 8003294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8111 	beq.w	80034d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	f000 8083 	beq.w	80033c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	f200 80a1 	bhi.w	8003404 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d056      	beq.n	800337c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80032ce:	e099      	b.n	8003404 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032d0:	4b88      	ldr	r3, [pc, #544]	; (80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d02d      	beq.n	8003338 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032dc:	4b85      	ldr	r3, [pc, #532]	; (80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	08db      	lsrs	r3, r3, #3
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	4a84      	ldr	r2, [pc, #528]	; (80034f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
 80032ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003306:	4b7b      	ldr	r3, [pc, #492]	; (80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003316:	ed97 6a03 	vldr	s12, [r7, #12]
 800331a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80034fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800331e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800332a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003332:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003336:	e087      	b.n	8003448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003342:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003500 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334a:	4b6a      	ldr	r3, [pc, #424]	; (80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335a:	ed97 6a03 	vldr	s12, [r7, #12]
 800335e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80034fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800336e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800337a:	e065      	b.n	8003448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003386:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800338a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800338e:	4b59      	ldr	r3, [pc, #356]	; (80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800339e:	ed97 6a03 	vldr	s12, [r7, #12]
 80033a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80034fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80033a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033be:	e043      	b.n	8003448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80033ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033d2:	4b48      	ldr	r3, [pc, #288]	; (80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80033e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80034fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80033ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003402:	e021      	b.n	8003448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	ee07 3a90 	vmov	s15, r3
 800340a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003416:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003426:	ed97 6a03 	vldr	s12, [r7, #12]
 800342a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80034fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800342e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800343a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800343e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003442:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003446:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003448:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	0a5b      	lsrs	r3, r3, #9
 800344e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800345e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003462:	edd7 6a07 	vldr	s13, [r7, #28]
 8003466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800346a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800346e:	ee17 2a90 	vmov	r2, s15
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003476:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	0c1b      	lsrs	r3, r3, #16
 800347c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800348c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003490:	edd7 6a07 	vldr	s13, [r7, #28]
 8003494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800349c:	ee17 2a90 	vmov	r2, s15
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80034a4:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	0e1b      	lsrs	r3, r3, #24
 80034aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034be:	edd7 6a07 	vldr	s13, [r7, #28]
 80034c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ca:	ee17 2a90 	vmov	r2, s15
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80034d2:	e008      	b.n	80034e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
}
 80034e6:	bf00      	nop
 80034e8:	3724      	adds	r7, #36	; 0x24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	58024400 	.word	0x58024400
 80034f8:	03d09000 	.word	0x03d09000
 80034fc:	46000000 	.word	0x46000000
 8003500:	4c742400 	.word	0x4c742400
 8003504:	4a742400 	.word	0x4a742400
 8003508:	4bb71b00 	.word	0x4bb71b00

0800350c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800350c:	b480      	push	{r7}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003514:	4ba1      	ldr	r3, [pc, #644]	; (800379c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800351e:	4b9f      	ldr	r3, [pc, #636]	; (800379c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	0d1b      	lsrs	r3, r3, #20
 8003524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003528:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800352a:	4b9c      	ldr	r3, [pc, #624]	; (800379c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003536:	4b99      	ldr	r3, [pc, #612]	; (800379c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	08db      	lsrs	r3, r3, #3
 800353c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800354e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 8111 	beq.w	800377c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	2b02      	cmp	r3, #2
 800355e:	f000 8083 	beq.w	8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b02      	cmp	r3, #2
 8003566:	f200 80a1 	bhi.w	80036ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d056      	beq.n	8003624 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003576:	e099      	b.n	80036ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003578:	4b88      	ldr	r3, [pc, #544]	; (800379c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d02d      	beq.n	80035e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003584:	4b85      	ldr	r3, [pc, #532]	; (800379c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	08db      	lsrs	r3, r3, #3
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	4a84      	ldr	r2, [pc, #528]	; (80037a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
 8003594:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	ee07 3a90 	vmov	s15, r3
 800359c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ae:	4b7b      	ldr	r3, [pc, #492]	; (800379c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035be:	ed97 6a03 	vldr	s12, [r7, #12]
 80035c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80037a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80035c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80035de:	e087      	b.n	80036f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80037a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80035ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f2:	4b6a      	ldr	r3, [pc, #424]	; (800379c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003602:	ed97 6a03 	vldr	s12, [r7, #12]
 8003606:	eddf 5a67 	vldr	s11, [pc, #412]	; 80037a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800360a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800360e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800361a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800361e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003622:	e065      	b.n	80036f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800362e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80037ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003636:	4b59      	ldr	r3, [pc, #356]	; (800379c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003646:	ed97 6a03 	vldr	s12, [r7, #12]
 800364a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80037a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800364e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800365a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800365e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003662:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003666:	e043      	b.n	80036f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003672:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80037b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800367a:	4b48      	ldr	r3, [pc, #288]	; (800379c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003682:	ee07 3a90 	vmov	s15, r3
 8003686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368a:	ed97 6a03 	vldr	s12, [r7, #12]
 800368e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80037a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800369a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800369e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036aa:	e021      	b.n	80036f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80037ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80036ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036be:	4b37      	ldr	r3, [pc, #220]	; (800379c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80036d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80037a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80036d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80036f0:	4b2a      	ldr	r3, [pc, #168]	; (800379c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	0a5b      	lsrs	r3, r3, #9
 80036f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800370a:	edd7 6a07 	vldr	s13, [r7, #28]
 800370e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003716:	ee17 2a90 	vmov	r2, s15
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	0c1b      	lsrs	r3, r3, #16
 8003724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003728:	ee07 3a90 	vmov	s15, r3
 800372c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003734:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003738:	edd7 6a07 	vldr	s13, [r7, #28]
 800373c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003744:	ee17 2a90 	vmov	r2, s15
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800374c:	4b13      	ldr	r3, [pc, #76]	; (800379c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	0e1b      	lsrs	r3, r3, #24
 8003752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003766:	edd7 6a07 	vldr	s13, [r7, #28]
 800376a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800376e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003772:	ee17 2a90 	vmov	r2, s15
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800377a:	e008      	b.n	800378e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]
}
 800378e:	bf00      	nop
 8003790:	3724      	adds	r7, #36	; 0x24
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	58024400 	.word	0x58024400
 80037a0:	03d09000 	.word	0x03d09000
 80037a4:	46000000 	.word	0x46000000
 80037a8:	4c742400 	.word	0x4c742400
 80037ac:	4a742400 	.word	0x4a742400
 80037b0:	4bb71b00 	.word	0x4bb71b00

080037b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037c2:	4b53      	ldr	r3, [pc, #332]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d101      	bne.n	80037d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e099      	b.n	8003906 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80037d2:	4b4f      	ldr	r3, [pc, #316]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a4e      	ldr	r2, [pc, #312]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 80037d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037de:	f7fd fb89 	bl	8000ef4 <HAL_GetTick>
 80037e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80037e4:	e008      	b.n	80037f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80037e6:	f7fd fb85 	bl	8000ef4 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e086      	b.n	8003906 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80037f8:	4b45      	ldr	r3, [pc, #276]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003804:	4b42      	ldr	r3, [pc, #264]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	031b      	lsls	r3, r3, #12
 8003812:	493f      	ldr	r1, [pc, #252]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 8003814:	4313      	orrs	r3, r2
 8003816:	628b      	str	r3, [r1, #40]	; 0x28
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	3b01      	subs	r3, #1
 800381e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	3b01      	subs	r3, #1
 8003828:	025b      	lsls	r3, r3, #9
 800382a:	b29b      	uxth	r3, r3
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	3b01      	subs	r3, #1
 8003834:	041b      	lsls	r3, r3, #16
 8003836:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	3b01      	subs	r3, #1
 8003842:	061b      	lsls	r3, r3, #24
 8003844:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003848:	4931      	ldr	r1, [pc, #196]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 800384a:	4313      	orrs	r3, r2
 800384c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800384e:	4b30      	ldr	r3, [pc, #192]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	492d      	ldr	r1, [pc, #180]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 800385c:	4313      	orrs	r3, r2
 800385e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003860:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	f023 0220 	bic.w	r2, r3, #32
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	4928      	ldr	r1, [pc, #160]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 800386e:	4313      	orrs	r3, r2
 8003870:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003872:	4b27      	ldr	r3, [pc, #156]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	4a26      	ldr	r2, [pc, #152]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 8003878:	f023 0310 	bic.w	r3, r3, #16
 800387c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 8003880:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003882:	4b24      	ldr	r3, [pc, #144]	; (8003914 <RCCEx_PLL2_Config+0x160>)
 8003884:	4013      	ands	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	69d2      	ldr	r2, [r2, #28]
 800388a:	00d2      	lsls	r2, r2, #3
 800388c:	4920      	ldr	r1, [pc, #128]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 800388e:	4313      	orrs	r3, r2
 8003890:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003892:	4b1f      	ldr	r3, [pc, #124]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 8003898:	f043 0310 	orr.w	r3, r3, #16
 800389c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d106      	bne.n	80038b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80038a4:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	4a19      	ldr	r2, [pc, #100]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 80038aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038b0:	e00f      	b.n	80038d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d106      	bne.n	80038c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80038b8:	4b15      	ldr	r3, [pc, #84]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	4a14      	ldr	r2, [pc, #80]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 80038be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038c4:	e005      	b.n	80038d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80038c6:	4b12      	ldr	r3, [pc, #72]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	4a11      	ldr	r2, [pc, #68]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 80038cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80038d2:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a0e      	ldr	r2, [pc, #56]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 80038d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038de:	f7fd fb09 	bl	8000ef4 <HAL_GetTick>
 80038e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80038e4:	e008      	b.n	80038f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80038e6:	f7fd fb05 	bl	8000ef4 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e006      	b.n	8003906 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <RCCEx_PLL2_Config+0x15c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	58024400 	.word	0x58024400
 8003914:	ffff0007 	.word	0xffff0007

08003918 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003926:	4b53      	ldr	r3, [pc, #332]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b03      	cmp	r3, #3
 8003930:	d101      	bne.n	8003936 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e099      	b.n	8003a6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003936:	4b4f      	ldr	r3, [pc, #316]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a4e      	ldr	r2, [pc, #312]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 800393c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003942:	f7fd fad7 	bl	8000ef4 <HAL_GetTick>
 8003946:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003948:	e008      	b.n	800395c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800394a:	f7fd fad3 	bl	8000ef4 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e086      	b.n	8003a6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800395c:	4b45      	ldr	r3, [pc, #276]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f0      	bne.n	800394a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003968:	4b42      	ldr	r3, [pc, #264]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	051b      	lsls	r3, r3, #20
 8003976:	493f      	ldr	r1, [pc, #252]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 8003978:	4313      	orrs	r3, r2
 800397a:	628b      	str	r3, [r1, #40]	; 0x28
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	3b01      	subs	r3, #1
 8003982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	3b01      	subs	r3, #1
 800398c:	025b      	lsls	r3, r3, #9
 800398e:	b29b      	uxth	r3, r3
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	3b01      	subs	r3, #1
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	061b      	lsls	r3, r3, #24
 80039a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039ac:	4931      	ldr	r1, [pc, #196]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80039b2:	4b30      	ldr	r3, [pc, #192]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	492d      	ldr	r1, [pc, #180]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80039c4:	4b2b      	ldr	r3, [pc, #172]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	4928      	ldr	r1, [pc, #160]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80039d6:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	4a26      	ldr	r2, [pc, #152]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 80039dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 80039e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039e6:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <RCCEx_PLL3_Config+0x160>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	69d2      	ldr	r2, [r2, #28]
 80039ee:	00d2      	lsls	r2, r2, #3
 80039f0:	4920      	ldr	r1, [pc, #128]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80039f6:	4b1f      	ldr	r3, [pc, #124]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	4a1e      	ldr	r2, [pc, #120]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d106      	bne.n	8003a16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003a08:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 8003a0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a14:	e00f      	b.n	8003a36 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d106      	bne.n	8003a2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003a1c:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	4a14      	ldr	r2, [pc, #80]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 8003a22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a28:	e005      	b.n	8003a36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	4a11      	ldr	r2, [pc, #68]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 8003a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003a36:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a0e      	ldr	r2, [pc, #56]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 8003a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a42:	f7fd fa57 	bl	8000ef4 <HAL_GetTick>
 8003a46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a48:	e008      	b.n	8003a5c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003a4a:	f7fd fa53 	bl	8000ef4 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e006      	b.n	8003a6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <RCCEx_PLL3_Config+0x15c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	58024400 	.word	0x58024400
 8003a78:	ffff0007 	.word	0xffff0007

08003a7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e08f      	b.n	8003bb0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7fc ffa5 	bl	80009f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6899      	ldr	r1, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b3e      	ldr	r3, [pc, #248]	; (8003bb8 <HAL_TIM_Encoder_Init+0x13c>)
 8003abe:	400b      	ands	r3, r1
 8003ac0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f000 fa71 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_TIM_Encoder_Init+0x140>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	4313      	orrs	r3, r2
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <HAL_TIM_Encoder_Init+0x144>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4b2a      	ldr	r3, [pc, #168]	; (8003bc4 <HAL_TIM_Encoder_Init+0x148>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	011a      	lsls	r2, r3, #4
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	031b      	lsls	r3, r3, #12
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003b4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003b52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	fffebff8 	.word	0xfffebff8
 8003bbc:	fffffcfc 	.word	0xfffffcfc
 8003bc0:	fffff3f3 	.word	0xfffff3f3
 8003bc4:	ffff0f0f 	.word	0xffff0f0f

08003bc8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003be0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003be8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d110      	bne.n	8003c1a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d102      	bne.n	8003c04 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bfe:	7b7b      	ldrb	r3, [r7, #13]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d001      	beq.n	8003c08 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e089      	b.n	8003d1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c18:	e031      	b.n	8003c7e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d110      	bne.n	8003c42 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c20:	7bbb      	ldrb	r3, [r7, #14]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d102      	bne.n	8003c2c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c26:	7b3b      	ldrb	r3, [r7, #12]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d001      	beq.n	8003c30 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e075      	b.n	8003d1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c40:	e01d      	b.n	8003c7e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d108      	bne.n	8003c5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c48:	7bbb      	ldrb	r3, [r7, #14]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d105      	bne.n	8003c5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c4e:	7b7b      	ldrb	r3, [r7, #13]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d102      	bne.n	8003c5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c54:	7b3b      	ldrb	r3, [r7, #12]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d001      	beq.n	8003c5e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e05e      	b.n	8003d1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2202      	movs	r2, #2
 8003c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_TIM_Encoder_Start_IT+0xc4>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d010      	beq.n	8003cac <HAL_TIM_Encoder_Start_IT+0xe4>
 8003c8a:	e01f      	b.n	8003ccc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2201      	movs	r2, #1
 8003c92:	2100      	movs	r1, #0
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fa27 	bl	80040e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0202 	orr.w	r2, r2, #2
 8003ca8:	60da      	str	r2, [r3, #12]
      break;
 8003caa:	e02e      	b.n	8003d0a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2104      	movs	r1, #4
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fa17 	bl	80040e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0204 	orr.w	r2, r2, #4
 8003cc8:	60da      	str	r2, [r3, #12]
      break;
 8003cca:	e01e      	b.n	8003d0a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fa07 	bl	80040e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	2104      	movs	r1, #4
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fa00 	bl	80040e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0202 	orr.w	r2, r2, #2
 8003cf6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0204 	orr.w	r2, r2, #4
 8003d06:	60da      	str	r2, [r3, #12]
      break;
 8003d08:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d122      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d11b      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0202 	mvn.w	r2, #2
 8003d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fc fc90 	bl	800068c <HAL_TIM_IC_CaptureCallback>
 8003d6c:	e005      	b.n	8003d7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f901 	bl	8003f76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f908 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d122      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0204 	mvn.w	r2, #4
 8003da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2202      	movs	r2, #2
 8003daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fc fc66 	bl	800068c <HAL_TIM_IC_CaptureCallback>
 8003dc0:	e005      	b.n	8003dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f8d7 	bl	8003f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f8de 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d122      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d11b      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0208 	mvn.w	r2, #8
 8003df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fc fc3c 	bl	800068c <HAL_TIM_IC_CaptureCallback>
 8003e14:	e005      	b.n	8003e22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8ad 	bl	8003f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f8b4 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	2b10      	cmp	r3, #16
 8003e34:	d122      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d11b      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0210 	mvn.w	r2, #16
 8003e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2208      	movs	r2, #8
 8003e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fc fc12 	bl	800068c <HAL_TIM_IC_CaptureCallback>
 8003e68:	e005      	b.n	8003e76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f883 	bl	8003f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f88a 	bl	8003f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d10e      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d107      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0201 	mvn.w	r2, #1
 8003ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f85d 	bl	8003f62 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb2:	2b80      	cmp	r3, #128	; 0x80
 8003eb4:	d10e      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d107      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9c8 	bl	8004264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee2:	d10e      	bne.n	8003f02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b80      	cmp	r3, #128	; 0x80
 8003ef0:	d107      	bne.n	8003f02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f9bb 	bl	8004278 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d10e      	bne.n	8003f2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d107      	bne.n	8003f2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f838 	bl	8003f9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d10e      	bne.n	8003f5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d107      	bne.n	8003f5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f06f 0220 	mvn.w	r2, #32
 8003f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f97b 	bl	8004250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a40      	ldr	r2, [pc, #256]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d00f      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3d      	ldr	r2, [pc, #244]	; (80040cc <TIM_Base_SetConfig+0x118>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00b      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3c      	ldr	r2, [pc, #240]	; (80040d0 <TIM_Base_SetConfig+0x11c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d007      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a3b      	ldr	r2, [pc, #236]	; (80040d4 <TIM_Base_SetConfig+0x120>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3a      	ldr	r2, [pc, #232]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d108      	bne.n	8004006 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2f      	ldr	r2, [pc, #188]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d01f      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d01b      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <TIM_Base_SetConfig+0x118>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d017      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2b      	ldr	r2, [pc, #172]	; (80040d0 <TIM_Base_SetConfig+0x11c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d013      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <TIM_Base_SetConfig+0x120>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00f      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00b      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a28      	ldr	r2, [pc, #160]	; (80040dc <TIM_Base_SetConfig+0x128>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d007      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a27      	ldr	r2, [pc, #156]	; (80040e0 <TIM_Base_SetConfig+0x12c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d003      	beq.n	800404e <TIM_Base_SetConfig+0x9a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <TIM_Base_SetConfig+0x130>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d108      	bne.n	8004060 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a10      	ldr	r2, [pc, #64]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00f      	beq.n	80040ac <TIM_Base_SetConfig+0xf8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a12      	ldr	r2, [pc, #72]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00b      	beq.n	80040ac <TIM_Base_SetConfig+0xf8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a11      	ldr	r2, [pc, #68]	; (80040dc <TIM_Base_SetConfig+0x128>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d007      	beq.n	80040ac <TIM_Base_SetConfig+0xf8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <TIM_Base_SetConfig+0x12c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d003      	beq.n	80040ac <TIM_Base_SetConfig+0xf8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a0f      	ldr	r2, [pc, #60]	; (80040e4 <TIM_Base_SetConfig+0x130>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d103      	bne.n	80040b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	615a      	str	r2, [r3, #20]
}
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40000400 	.word	0x40000400
 80040d0:	40000800 	.word	0x40000800
 80040d4:	40000c00 	.word	0x40000c00
 80040d8:	40010400 	.word	0x40010400
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40014400 	.word	0x40014400
 80040e4:	40014800 	.word	0x40014800

080040e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	2201      	movs	r2, #1
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a1a      	ldr	r2, [r3, #32]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	43db      	mvns	r3, r3
 800410a:	401a      	ands	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a1a      	ldr	r2, [r3, #32]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	fa01 f303 	lsl.w	r3, r1, r3
 8004120:	431a      	orrs	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	621a      	str	r2, [r3, #32]
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
	...

08004134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004148:	2302      	movs	r3, #2
 800414a:	e06d      	b.n	8004228 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a30      	ldr	r2, [pc, #192]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2f      	ldr	r2, [pc, #188]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d108      	bne.n	8004192 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004186:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004198:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a20      	ldr	r2, [pc, #128]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d022      	beq.n	80041fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041be:	d01d      	beq.n	80041fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1d      	ldr	r2, [pc, #116]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d018      	beq.n	80041fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1c      	ldr	r2, [pc, #112]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d013      	beq.n	80041fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00e      	beq.n	80041fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a15      	ldr	r2, [pc, #84]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d009      	beq.n	80041fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a16      	ldr	r2, [pc, #88]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a15      	ldr	r2, [pc, #84]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d10c      	bne.n	8004216 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004202:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	4313      	orrs	r3, r2
 800420c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40010000 	.word	0x40010000
 8004238:	40010400 	.word	0x40010400
 800423c:	40000400 	.word	0x40000400
 8004240:	40000800 	.word	0x40000800
 8004244:	40000c00 	.word	0x40000c00
 8004248:	40001800 	.word	0x40001800
 800424c:	40014000 	.word	0x40014000

08004250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e042      	b.n	8004324 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7fc fc09 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2224      	movs	r2, #36	; 0x24
 80042ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f8c2 	bl	8004458 <UART_SetConfig>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e022      	b.n	8004324 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 ff22 	bl	8005130 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800430a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 ffa9 	bl	8005274 <UART_CheckIdleState>
 8004322:	4603      	mov	r3, r0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004342:	2b20      	cmp	r3, #32
 8004344:	f040 8083 	bne.w	800444e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <HAL_UART_Transmit+0x28>
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e07b      	b.n	8004450 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_UART_Transmit+0x3a>
 8004362:	2302      	movs	r3, #2
 8004364:	e074      	b.n	8004450 <HAL_UART_Transmit+0x124>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2221      	movs	r2, #33	; 0x21
 800437a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800437e:	f7fc fdb9 	bl	8000ef4 <HAL_GetTick>
 8004382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	88fa      	ldrh	r2, [r7, #6]
 8004388:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	88fa      	ldrh	r2, [r7, #6]
 8004390:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439c:	d108      	bne.n	80043b0 <HAL_UART_Transmit+0x84>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	e003      	b.n	80043b8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80043c0:	e02c      	b.n	800441c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	2180      	movs	r1, #128	; 0x80
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 ff9c 	bl	800530a <UART_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e039      	b.n	8004450 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	3302      	adds	r3, #2
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	e007      	b.n	800440a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3301      	adds	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1cc      	bne.n	80043c2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2200      	movs	r2, #0
 8004430:	2140      	movs	r1, #64	; 0x40
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 ff69 	bl	800530a <UART_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e006      	b.n	8004450 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e000      	b.n	8004450 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800444e:	2302      	movs	r3, #2
  }
}
 8004450:	4618      	mov	r0, r3
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800445c:	b092      	sub	sp, #72	; 0x48
 800445e:	af00      	add	r7, sp, #0
 8004460:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	431a      	orrs	r2, r3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	431a      	orrs	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	4313      	orrs	r3, r2
 800447e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4bbe      	ldr	r3, [pc, #760]	; (8004780 <UART_SetConfig+0x328>)
 8004488:	4013      	ands	r3, r2
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004490:	430b      	orrs	r3, r1
 8004492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4ab3      	ldr	r2, [pc, #716]	; (8004784 <UART_SetConfig+0x32c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044c0:	4313      	orrs	r3, r2
 80044c2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	4baf      	ldr	r3, [pc, #700]	; (8004788 <UART_SetConfig+0x330>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044d4:	430b      	orrs	r3, r1
 80044d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	f023 010f 	bic.w	r1, r3, #15
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4aa6      	ldr	r2, [pc, #664]	; (800478c <UART_SetConfig+0x334>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d177      	bne.n	80045e8 <UART_SetConfig+0x190>
 80044f8:	4ba5      	ldr	r3, [pc, #660]	; (8004790 <UART_SetConfig+0x338>)
 80044fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004500:	2b28      	cmp	r3, #40	; 0x28
 8004502:	d86d      	bhi.n	80045e0 <UART_SetConfig+0x188>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0xb4>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	080045b1 	.word	0x080045b1
 8004510:	080045e1 	.word	0x080045e1
 8004514:	080045e1 	.word	0x080045e1
 8004518:	080045e1 	.word	0x080045e1
 800451c:	080045e1 	.word	0x080045e1
 8004520:	080045e1 	.word	0x080045e1
 8004524:	080045e1 	.word	0x080045e1
 8004528:	080045e1 	.word	0x080045e1
 800452c:	080045b9 	.word	0x080045b9
 8004530:	080045e1 	.word	0x080045e1
 8004534:	080045e1 	.word	0x080045e1
 8004538:	080045e1 	.word	0x080045e1
 800453c:	080045e1 	.word	0x080045e1
 8004540:	080045e1 	.word	0x080045e1
 8004544:	080045e1 	.word	0x080045e1
 8004548:	080045e1 	.word	0x080045e1
 800454c:	080045c1 	.word	0x080045c1
 8004550:	080045e1 	.word	0x080045e1
 8004554:	080045e1 	.word	0x080045e1
 8004558:	080045e1 	.word	0x080045e1
 800455c:	080045e1 	.word	0x080045e1
 8004560:	080045e1 	.word	0x080045e1
 8004564:	080045e1 	.word	0x080045e1
 8004568:	080045e1 	.word	0x080045e1
 800456c:	080045c9 	.word	0x080045c9
 8004570:	080045e1 	.word	0x080045e1
 8004574:	080045e1 	.word	0x080045e1
 8004578:	080045e1 	.word	0x080045e1
 800457c:	080045e1 	.word	0x080045e1
 8004580:	080045e1 	.word	0x080045e1
 8004584:	080045e1 	.word	0x080045e1
 8004588:	080045e1 	.word	0x080045e1
 800458c:	080045d1 	.word	0x080045d1
 8004590:	080045e1 	.word	0x080045e1
 8004594:	080045e1 	.word	0x080045e1
 8004598:	080045e1 	.word	0x080045e1
 800459c:	080045e1 	.word	0x080045e1
 80045a0:	080045e1 	.word	0x080045e1
 80045a4:	080045e1 	.word	0x080045e1
 80045a8:	080045e1 	.word	0x080045e1
 80045ac:	080045d9 	.word	0x080045d9
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045b6:	e326      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80045b8:	2304      	movs	r3, #4
 80045ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045be:	e322      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80045c0:	2308      	movs	r3, #8
 80045c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045c6:	e31e      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80045c8:	2310      	movs	r3, #16
 80045ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ce:	e31a      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80045d0:	2320      	movs	r3, #32
 80045d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045d6:	e316      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80045d8:	2340      	movs	r3, #64	; 0x40
 80045da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045de:	e312      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80045e0:	2380      	movs	r3, #128	; 0x80
 80045e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045e6:	e30e      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a69      	ldr	r2, [pc, #420]	; (8004794 <UART_SetConfig+0x33c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d130      	bne.n	8004654 <UART_SetConfig+0x1fc>
 80045f2:	4b67      	ldr	r3, [pc, #412]	; (8004790 <UART_SetConfig+0x338>)
 80045f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	2b05      	cmp	r3, #5
 80045fc:	d826      	bhi.n	800464c <UART_SetConfig+0x1f4>
 80045fe:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <UART_SetConfig+0x1ac>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	0800461d 	.word	0x0800461d
 8004608:	08004625 	.word	0x08004625
 800460c:	0800462d 	.word	0x0800462d
 8004610:	08004635 	.word	0x08004635
 8004614:	0800463d 	.word	0x0800463d
 8004618:	08004645 	.word	0x08004645
 800461c:	2300      	movs	r3, #0
 800461e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004622:	e2f0      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004624:	2304      	movs	r3, #4
 8004626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462a:	e2ec      	b.n	8004c06 <UART_SetConfig+0x7ae>
 800462c:	2308      	movs	r3, #8
 800462e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004632:	e2e8      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004634:	2310      	movs	r3, #16
 8004636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800463a:	e2e4      	b.n	8004c06 <UART_SetConfig+0x7ae>
 800463c:	2320      	movs	r3, #32
 800463e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004642:	e2e0      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004644:	2340      	movs	r3, #64	; 0x40
 8004646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800464a:	e2dc      	b.n	8004c06 <UART_SetConfig+0x7ae>
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004652:	e2d8      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a4f      	ldr	r2, [pc, #316]	; (8004798 <UART_SetConfig+0x340>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d130      	bne.n	80046c0 <UART_SetConfig+0x268>
 800465e:	4b4c      	ldr	r3, [pc, #304]	; (8004790 <UART_SetConfig+0x338>)
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	2b05      	cmp	r3, #5
 8004668:	d826      	bhi.n	80046b8 <UART_SetConfig+0x260>
 800466a:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <UART_SetConfig+0x218>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	08004689 	.word	0x08004689
 8004674:	08004691 	.word	0x08004691
 8004678:	08004699 	.word	0x08004699
 800467c:	080046a1 	.word	0x080046a1
 8004680:	080046a9 	.word	0x080046a9
 8004684:	080046b1 	.word	0x080046b1
 8004688:	2300      	movs	r3, #0
 800468a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800468e:	e2ba      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004690:	2304      	movs	r3, #4
 8004692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004696:	e2b6      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004698:	2308      	movs	r3, #8
 800469a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800469e:	e2b2      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80046a0:	2310      	movs	r3, #16
 80046a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046a6:	e2ae      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80046a8:	2320      	movs	r3, #32
 80046aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ae:	e2aa      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80046b0:	2340      	movs	r3, #64	; 0x40
 80046b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b6:	e2a6      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046be:	e2a2      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a35      	ldr	r2, [pc, #212]	; (800479c <UART_SetConfig+0x344>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d130      	bne.n	800472c <UART_SetConfig+0x2d4>
 80046ca:	4b31      	ldr	r3, [pc, #196]	; (8004790 <UART_SetConfig+0x338>)
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d826      	bhi.n	8004724 <UART_SetConfig+0x2cc>
 80046d6:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <UART_SetConfig+0x284>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	080046f5 	.word	0x080046f5
 80046e0:	080046fd 	.word	0x080046fd
 80046e4:	08004705 	.word	0x08004705
 80046e8:	0800470d 	.word	0x0800470d
 80046ec:	08004715 	.word	0x08004715
 80046f0:	0800471d 	.word	0x0800471d
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046fa:	e284      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80046fc:	2304      	movs	r3, #4
 80046fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004702:	e280      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004704:	2308      	movs	r3, #8
 8004706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470a:	e27c      	b.n	8004c06 <UART_SetConfig+0x7ae>
 800470c:	2310      	movs	r3, #16
 800470e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004712:	e278      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004714:	2320      	movs	r3, #32
 8004716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471a:	e274      	b.n	8004c06 <UART_SetConfig+0x7ae>
 800471c:	2340      	movs	r3, #64	; 0x40
 800471e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004722:	e270      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472a:	e26c      	b.n	8004c06 <UART_SetConfig+0x7ae>
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <UART_SetConfig+0x348>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d142      	bne.n	80047bc <UART_SetConfig+0x364>
 8004736:	4b16      	ldr	r3, [pc, #88]	; (8004790 <UART_SetConfig+0x338>)
 8004738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	2b05      	cmp	r3, #5
 8004740:	d838      	bhi.n	80047b4 <UART_SetConfig+0x35c>
 8004742:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <UART_SetConfig+0x2f0>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	08004761 	.word	0x08004761
 800474c:	08004769 	.word	0x08004769
 8004750:	08004771 	.word	0x08004771
 8004754:	08004779 	.word	0x08004779
 8004758:	080047a5 	.word	0x080047a5
 800475c:	080047ad 	.word	0x080047ad
 8004760:	2300      	movs	r3, #0
 8004762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004766:	e24e      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004768:	2304      	movs	r3, #4
 800476a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800476e:	e24a      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004770:	2308      	movs	r3, #8
 8004772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004776:	e246      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004778:	2310      	movs	r3, #16
 800477a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800477e:	e242      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004780:	cfff69f3 	.word	0xcfff69f3
 8004784:	58000c00 	.word	0x58000c00
 8004788:	11fff4ff 	.word	0x11fff4ff
 800478c:	40011000 	.word	0x40011000
 8004790:	58024400 	.word	0x58024400
 8004794:	40004400 	.word	0x40004400
 8004798:	40004800 	.word	0x40004800
 800479c:	40004c00 	.word	0x40004c00
 80047a0:	40005000 	.word	0x40005000
 80047a4:	2320      	movs	r3, #32
 80047a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047aa:	e22c      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80047ac:	2340      	movs	r3, #64	; 0x40
 80047ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047b2:	e228      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80047b4:	2380      	movs	r3, #128	; 0x80
 80047b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ba:	e224      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4ab1      	ldr	r2, [pc, #708]	; (8004a88 <UART_SetConfig+0x630>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d176      	bne.n	80048b4 <UART_SetConfig+0x45c>
 80047c6:	4bb1      	ldr	r3, [pc, #708]	; (8004a8c <UART_SetConfig+0x634>)
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ce:	2b28      	cmp	r3, #40	; 0x28
 80047d0:	d86c      	bhi.n	80048ac <UART_SetConfig+0x454>
 80047d2:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <UART_SetConfig+0x380>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	0800487d 	.word	0x0800487d
 80047dc:	080048ad 	.word	0x080048ad
 80047e0:	080048ad 	.word	0x080048ad
 80047e4:	080048ad 	.word	0x080048ad
 80047e8:	080048ad 	.word	0x080048ad
 80047ec:	080048ad 	.word	0x080048ad
 80047f0:	080048ad 	.word	0x080048ad
 80047f4:	080048ad 	.word	0x080048ad
 80047f8:	08004885 	.word	0x08004885
 80047fc:	080048ad 	.word	0x080048ad
 8004800:	080048ad 	.word	0x080048ad
 8004804:	080048ad 	.word	0x080048ad
 8004808:	080048ad 	.word	0x080048ad
 800480c:	080048ad 	.word	0x080048ad
 8004810:	080048ad 	.word	0x080048ad
 8004814:	080048ad 	.word	0x080048ad
 8004818:	0800488d 	.word	0x0800488d
 800481c:	080048ad 	.word	0x080048ad
 8004820:	080048ad 	.word	0x080048ad
 8004824:	080048ad 	.word	0x080048ad
 8004828:	080048ad 	.word	0x080048ad
 800482c:	080048ad 	.word	0x080048ad
 8004830:	080048ad 	.word	0x080048ad
 8004834:	080048ad 	.word	0x080048ad
 8004838:	08004895 	.word	0x08004895
 800483c:	080048ad 	.word	0x080048ad
 8004840:	080048ad 	.word	0x080048ad
 8004844:	080048ad 	.word	0x080048ad
 8004848:	080048ad 	.word	0x080048ad
 800484c:	080048ad 	.word	0x080048ad
 8004850:	080048ad 	.word	0x080048ad
 8004854:	080048ad 	.word	0x080048ad
 8004858:	0800489d 	.word	0x0800489d
 800485c:	080048ad 	.word	0x080048ad
 8004860:	080048ad 	.word	0x080048ad
 8004864:	080048ad 	.word	0x080048ad
 8004868:	080048ad 	.word	0x080048ad
 800486c:	080048ad 	.word	0x080048ad
 8004870:	080048ad 	.word	0x080048ad
 8004874:	080048ad 	.word	0x080048ad
 8004878:	080048a5 	.word	0x080048a5
 800487c:	2301      	movs	r3, #1
 800487e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004882:	e1c0      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004884:	2304      	movs	r3, #4
 8004886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800488a:	e1bc      	b.n	8004c06 <UART_SetConfig+0x7ae>
 800488c:	2308      	movs	r3, #8
 800488e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004892:	e1b8      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004894:	2310      	movs	r3, #16
 8004896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800489a:	e1b4      	b.n	8004c06 <UART_SetConfig+0x7ae>
 800489c:	2320      	movs	r3, #32
 800489e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048a2:	e1b0      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80048a4:	2340      	movs	r3, #64	; 0x40
 80048a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048aa:	e1ac      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80048ac:	2380      	movs	r3, #128	; 0x80
 80048ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048b2:	e1a8      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a75      	ldr	r2, [pc, #468]	; (8004a90 <UART_SetConfig+0x638>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d130      	bne.n	8004920 <UART_SetConfig+0x4c8>
 80048be:	4b73      	ldr	r3, [pc, #460]	; (8004a8c <UART_SetConfig+0x634>)
 80048c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	2b05      	cmp	r3, #5
 80048c8:	d826      	bhi.n	8004918 <UART_SetConfig+0x4c0>
 80048ca:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <UART_SetConfig+0x478>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	080048e9 	.word	0x080048e9
 80048d4:	080048f1 	.word	0x080048f1
 80048d8:	080048f9 	.word	0x080048f9
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004911 	.word	0x08004911
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ee:	e18a      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80048f0:	2304      	movs	r3, #4
 80048f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048f6:	e186      	b.n	8004c06 <UART_SetConfig+0x7ae>
 80048f8:	2308      	movs	r3, #8
 80048fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048fe:	e182      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004900:	2310      	movs	r3, #16
 8004902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004906:	e17e      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004908:	2320      	movs	r3, #32
 800490a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800490e:	e17a      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004910:	2340      	movs	r3, #64	; 0x40
 8004912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004916:	e176      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800491e:	e172      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a5b      	ldr	r2, [pc, #364]	; (8004a94 <UART_SetConfig+0x63c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d130      	bne.n	800498c <UART_SetConfig+0x534>
 800492a:	4b58      	ldr	r3, [pc, #352]	; (8004a8c <UART_SetConfig+0x634>)
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	2b05      	cmp	r3, #5
 8004934:	d826      	bhi.n	8004984 <UART_SetConfig+0x52c>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <UART_SetConfig+0x4e4>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004955 	.word	0x08004955
 8004940:	0800495d 	.word	0x0800495d
 8004944:	08004965 	.word	0x08004965
 8004948:	0800496d 	.word	0x0800496d
 800494c:	08004975 	.word	0x08004975
 8004950:	0800497d 	.word	0x0800497d
 8004954:	2300      	movs	r3, #0
 8004956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800495a:	e154      	b.n	8004c06 <UART_SetConfig+0x7ae>
 800495c:	2304      	movs	r3, #4
 800495e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004962:	e150      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004964:	2308      	movs	r3, #8
 8004966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800496a:	e14c      	b.n	8004c06 <UART_SetConfig+0x7ae>
 800496c:	2310      	movs	r3, #16
 800496e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004972:	e148      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004974:	2320      	movs	r3, #32
 8004976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800497a:	e144      	b.n	8004c06 <UART_SetConfig+0x7ae>
 800497c:	2340      	movs	r3, #64	; 0x40
 800497e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004982:	e140      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800498a:	e13c      	b.n	8004c06 <UART_SetConfig+0x7ae>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a41      	ldr	r2, [pc, #260]	; (8004a98 <UART_SetConfig+0x640>)
 8004992:	4293      	cmp	r3, r2
 8004994:	f040 8082 	bne.w	8004a9c <UART_SetConfig+0x644>
 8004998:	4b3c      	ldr	r3, [pc, #240]	; (8004a8c <UART_SetConfig+0x634>)
 800499a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049a0:	2b28      	cmp	r3, #40	; 0x28
 80049a2:	d86d      	bhi.n	8004a80 <UART_SetConfig+0x628>
 80049a4:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <UART_SetConfig+0x554>)
 80049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	08004a51 	.word	0x08004a51
 80049b0:	08004a81 	.word	0x08004a81
 80049b4:	08004a81 	.word	0x08004a81
 80049b8:	08004a81 	.word	0x08004a81
 80049bc:	08004a81 	.word	0x08004a81
 80049c0:	08004a81 	.word	0x08004a81
 80049c4:	08004a81 	.word	0x08004a81
 80049c8:	08004a81 	.word	0x08004a81
 80049cc:	08004a59 	.word	0x08004a59
 80049d0:	08004a81 	.word	0x08004a81
 80049d4:	08004a81 	.word	0x08004a81
 80049d8:	08004a81 	.word	0x08004a81
 80049dc:	08004a81 	.word	0x08004a81
 80049e0:	08004a81 	.word	0x08004a81
 80049e4:	08004a81 	.word	0x08004a81
 80049e8:	08004a81 	.word	0x08004a81
 80049ec:	08004a61 	.word	0x08004a61
 80049f0:	08004a81 	.word	0x08004a81
 80049f4:	08004a81 	.word	0x08004a81
 80049f8:	08004a81 	.word	0x08004a81
 80049fc:	08004a81 	.word	0x08004a81
 8004a00:	08004a81 	.word	0x08004a81
 8004a04:	08004a81 	.word	0x08004a81
 8004a08:	08004a81 	.word	0x08004a81
 8004a0c:	08004a69 	.word	0x08004a69
 8004a10:	08004a81 	.word	0x08004a81
 8004a14:	08004a81 	.word	0x08004a81
 8004a18:	08004a81 	.word	0x08004a81
 8004a1c:	08004a81 	.word	0x08004a81
 8004a20:	08004a81 	.word	0x08004a81
 8004a24:	08004a81 	.word	0x08004a81
 8004a28:	08004a81 	.word	0x08004a81
 8004a2c:	08004a71 	.word	0x08004a71
 8004a30:	08004a81 	.word	0x08004a81
 8004a34:	08004a81 	.word	0x08004a81
 8004a38:	08004a81 	.word	0x08004a81
 8004a3c:	08004a81 	.word	0x08004a81
 8004a40:	08004a81 	.word	0x08004a81
 8004a44:	08004a81 	.word	0x08004a81
 8004a48:	08004a81 	.word	0x08004a81
 8004a4c:	08004a79 	.word	0x08004a79
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a56:	e0d6      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a5e:	e0d2      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004a60:	2308      	movs	r3, #8
 8004a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a66:	e0ce      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a6e:	e0ca      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004a70:	2320      	movs	r3, #32
 8004a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a76:	e0c6      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004a78:	2340      	movs	r3, #64	; 0x40
 8004a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a7e:	e0c2      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a86:	e0be      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004a88:	40011400 	.word	0x40011400
 8004a8c:	58024400 	.word	0x58024400
 8004a90:	40007800 	.word	0x40007800
 8004a94:	40007c00 	.word	0x40007c00
 8004a98:	40011800 	.word	0x40011800
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4aad      	ldr	r2, [pc, #692]	; (8004d58 <UART_SetConfig+0x900>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d176      	bne.n	8004b94 <UART_SetConfig+0x73c>
 8004aa6:	4bad      	ldr	r3, [pc, #692]	; (8004d5c <UART_SetConfig+0x904>)
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aae:	2b28      	cmp	r3, #40	; 0x28
 8004ab0:	d86c      	bhi.n	8004b8c <UART_SetConfig+0x734>
 8004ab2:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <UART_SetConfig+0x660>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004b5d 	.word	0x08004b5d
 8004abc:	08004b8d 	.word	0x08004b8d
 8004ac0:	08004b8d 	.word	0x08004b8d
 8004ac4:	08004b8d 	.word	0x08004b8d
 8004ac8:	08004b8d 	.word	0x08004b8d
 8004acc:	08004b8d 	.word	0x08004b8d
 8004ad0:	08004b8d 	.word	0x08004b8d
 8004ad4:	08004b8d 	.word	0x08004b8d
 8004ad8:	08004b65 	.word	0x08004b65
 8004adc:	08004b8d 	.word	0x08004b8d
 8004ae0:	08004b8d 	.word	0x08004b8d
 8004ae4:	08004b8d 	.word	0x08004b8d
 8004ae8:	08004b8d 	.word	0x08004b8d
 8004aec:	08004b8d 	.word	0x08004b8d
 8004af0:	08004b8d 	.word	0x08004b8d
 8004af4:	08004b8d 	.word	0x08004b8d
 8004af8:	08004b6d 	.word	0x08004b6d
 8004afc:	08004b8d 	.word	0x08004b8d
 8004b00:	08004b8d 	.word	0x08004b8d
 8004b04:	08004b8d 	.word	0x08004b8d
 8004b08:	08004b8d 	.word	0x08004b8d
 8004b0c:	08004b8d 	.word	0x08004b8d
 8004b10:	08004b8d 	.word	0x08004b8d
 8004b14:	08004b8d 	.word	0x08004b8d
 8004b18:	08004b75 	.word	0x08004b75
 8004b1c:	08004b8d 	.word	0x08004b8d
 8004b20:	08004b8d 	.word	0x08004b8d
 8004b24:	08004b8d 	.word	0x08004b8d
 8004b28:	08004b8d 	.word	0x08004b8d
 8004b2c:	08004b8d 	.word	0x08004b8d
 8004b30:	08004b8d 	.word	0x08004b8d
 8004b34:	08004b8d 	.word	0x08004b8d
 8004b38:	08004b7d 	.word	0x08004b7d
 8004b3c:	08004b8d 	.word	0x08004b8d
 8004b40:	08004b8d 	.word	0x08004b8d
 8004b44:	08004b8d 	.word	0x08004b8d
 8004b48:	08004b8d 	.word	0x08004b8d
 8004b4c:	08004b8d 	.word	0x08004b8d
 8004b50:	08004b8d 	.word	0x08004b8d
 8004b54:	08004b8d 	.word	0x08004b8d
 8004b58:	08004b85 	.word	0x08004b85
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b62:	e050      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004b64:	2304      	movs	r3, #4
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b6a:	e04c      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b72:	e048      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004b74:	2310      	movs	r3, #16
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b7a:	e044      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004b7c:	2320      	movs	r3, #32
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b82:	e040      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004b84:	2340      	movs	r3, #64	; 0x40
 8004b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b8a:	e03c      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004b8c:	2380      	movs	r3, #128	; 0x80
 8004b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b92:	e038      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a71      	ldr	r2, [pc, #452]	; (8004d60 <UART_SetConfig+0x908>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d130      	bne.n	8004c00 <UART_SetConfig+0x7a8>
 8004b9e:	4b6f      	ldr	r3, [pc, #444]	; (8004d5c <UART_SetConfig+0x904>)
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	2b05      	cmp	r3, #5
 8004ba8:	d826      	bhi.n	8004bf8 <UART_SetConfig+0x7a0>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <UART_SetConfig+0x758>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004bc9 	.word	0x08004bc9
 8004bb4:	08004bd1 	.word	0x08004bd1
 8004bb8:	08004bd9 	.word	0x08004bd9
 8004bbc:	08004be1 	.word	0x08004be1
 8004bc0:	08004be9 	.word	0x08004be9
 8004bc4:	08004bf1 	.word	0x08004bf1
 8004bc8:	2302      	movs	r3, #2
 8004bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bce:	e01a      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bd6:	e016      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004bd8:	2308      	movs	r3, #8
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bde:	e012      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004be0:	2310      	movs	r3, #16
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004be6:	e00e      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004be8:	2320      	movs	r3, #32
 8004bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bee:	e00a      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004bf0:	2340      	movs	r3, #64	; 0x40
 8004bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bf6:	e006      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004bf8:	2380      	movs	r3, #128	; 0x80
 8004bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bfe:	e002      	b.n	8004c06 <UART_SetConfig+0x7ae>
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a55      	ldr	r2, [pc, #340]	; (8004d60 <UART_SetConfig+0x908>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	f040 80f8 	bne.w	8004e02 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	dc46      	bgt.n	8004ca8 <UART_SetConfig+0x850>
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	db75      	blt.n	8004d0a <UART_SetConfig+0x8b2>
 8004c1e:	3b02      	subs	r3, #2
 8004c20:	2b1e      	cmp	r3, #30
 8004c22:	d872      	bhi.n	8004d0a <UART_SetConfig+0x8b2>
 8004c24:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <UART_SetConfig+0x7d4>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004caf 	.word	0x08004caf
 8004c30:	08004d0b 	.word	0x08004d0b
 8004c34:	08004cb7 	.word	0x08004cb7
 8004c38:	08004d0b 	.word	0x08004d0b
 8004c3c:	08004d0b 	.word	0x08004d0b
 8004c40:	08004d0b 	.word	0x08004d0b
 8004c44:	08004cc7 	.word	0x08004cc7
 8004c48:	08004d0b 	.word	0x08004d0b
 8004c4c:	08004d0b 	.word	0x08004d0b
 8004c50:	08004d0b 	.word	0x08004d0b
 8004c54:	08004d0b 	.word	0x08004d0b
 8004c58:	08004d0b 	.word	0x08004d0b
 8004c5c:	08004d0b 	.word	0x08004d0b
 8004c60:	08004d0b 	.word	0x08004d0b
 8004c64:	08004cd7 	.word	0x08004cd7
 8004c68:	08004d0b 	.word	0x08004d0b
 8004c6c:	08004d0b 	.word	0x08004d0b
 8004c70:	08004d0b 	.word	0x08004d0b
 8004c74:	08004d0b 	.word	0x08004d0b
 8004c78:	08004d0b 	.word	0x08004d0b
 8004c7c:	08004d0b 	.word	0x08004d0b
 8004c80:	08004d0b 	.word	0x08004d0b
 8004c84:	08004d0b 	.word	0x08004d0b
 8004c88:	08004d0b 	.word	0x08004d0b
 8004c8c:	08004d0b 	.word	0x08004d0b
 8004c90:	08004d0b 	.word	0x08004d0b
 8004c94:	08004d0b 	.word	0x08004d0b
 8004c98:	08004d0b 	.word	0x08004d0b
 8004c9c:	08004d0b 	.word	0x08004d0b
 8004ca0:	08004d0b 	.word	0x08004d0b
 8004ca4:	08004cfd 	.word	0x08004cfd
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d02a      	beq.n	8004d02 <UART_SetConfig+0x8aa>
 8004cac:	e02d      	b.n	8004d0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004cae:	f7fe fac3 	bl	8003238 <HAL_RCCEx_GetD3PCLK1Freq>
 8004cb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004cb4:	e02f      	b.n	8004d16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe fad2 	bl	8003264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cc4:	e027      	b.n	8004d16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cc6:	f107 0318 	add.w	r3, r7, #24
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fe fc1e 	bl	800350c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cd4:	e01f      	b.n	8004d16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cd6:	4b21      	ldr	r3, [pc, #132]	; (8004d5c <UART_SetConfig+0x904>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ce2:	4b1e      	ldr	r3, [pc, #120]	; (8004d5c <UART_SetConfig+0x904>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	08db      	lsrs	r3, r3, #3
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <UART_SetConfig+0x90c>)
 8004cee:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004cf4:	e00f      	b.n	8004d16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004cf6:	4b1b      	ldr	r3, [pc, #108]	; (8004d64 <UART_SetConfig+0x90c>)
 8004cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cfa:	e00c      	b.n	8004d16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <UART_SetConfig+0x910>)
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d00:	e009      	b.n	8004d16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d08:	e005      	b.n	8004d16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004d14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 81ee 	beq.w	80050fa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	4a12      	ldr	r2, [pc, #72]	; (8004d6c <UART_SetConfig+0x914>)
 8004d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d30:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	4413      	add	r3, r2
 8004d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d305      	bcc.n	8004d4e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d910      	bls.n	8004d70 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004d54:	e1d1      	b.n	80050fa <UART_SetConfig+0xca2>
 8004d56:	bf00      	nop
 8004d58:	40011c00 	.word	0x40011c00
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	58000c00 	.word	0x58000c00
 8004d64:	03d09000 	.word	0x03d09000
 8004d68:	003d0900 	.word	0x003d0900
 8004d6c:	08006028 	.word	0x08006028
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d72:	2200      	movs	r2, #0
 8004d74:	60bb      	str	r3, [r7, #8]
 8004d76:	60fa      	str	r2, [r7, #12]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	4ac0      	ldr	r2, [pc, #768]	; (8005080 <UART_SetConfig+0xc28>)
 8004d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2200      	movs	r2, #0
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d92:	f7fb fafd 	bl	8000390 <__aeabi_uldivmod>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	020b      	lsls	r3, r1, #8
 8004da8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dac:	0202      	lsls	r2, r0, #8
 8004dae:	6979      	ldr	r1, [r7, #20]
 8004db0:	6849      	ldr	r1, [r1, #4]
 8004db2:	0849      	lsrs	r1, r1, #1
 8004db4:	2000      	movs	r0, #0
 8004db6:	460c      	mov	r4, r1
 8004db8:	4605      	mov	r5, r0
 8004dba:	eb12 0804 	adds.w	r8, r2, r4
 8004dbe:	eb43 0905 	adc.w	r9, r3, r5
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	469a      	mov	sl, r3
 8004dca:	4693      	mov	fp, r2
 8004dcc:	4652      	mov	r2, sl
 8004dce:	465b      	mov	r3, fp
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	f7fb fadc 	bl	8000390 <__aeabi_uldivmod>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4613      	mov	r3, r2
 8004dde:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de6:	d308      	bcc.n	8004dfa <UART_SetConfig+0x9a2>
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dee:	d204      	bcs.n	8004dfa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004df6:	60da      	str	r2, [r3, #12]
 8004df8:	e17f      	b.n	80050fa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004e00:	e17b      	b.n	80050fa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e0a:	f040 80bd 	bne.w	8004f88 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004e0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	dc48      	bgt.n	8004ea8 <UART_SetConfig+0xa50>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	db7b      	blt.n	8004f12 <UART_SetConfig+0xaba>
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d879      	bhi.n	8004f12 <UART_SetConfig+0xaba>
 8004e1e:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <UART_SetConfig+0x9cc>)
 8004e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e24:	08004eaf 	.word	0x08004eaf
 8004e28:	08004eb7 	.word	0x08004eb7
 8004e2c:	08004f13 	.word	0x08004f13
 8004e30:	08004f13 	.word	0x08004f13
 8004e34:	08004ebf 	.word	0x08004ebf
 8004e38:	08004f13 	.word	0x08004f13
 8004e3c:	08004f13 	.word	0x08004f13
 8004e40:	08004f13 	.word	0x08004f13
 8004e44:	08004ecf 	.word	0x08004ecf
 8004e48:	08004f13 	.word	0x08004f13
 8004e4c:	08004f13 	.word	0x08004f13
 8004e50:	08004f13 	.word	0x08004f13
 8004e54:	08004f13 	.word	0x08004f13
 8004e58:	08004f13 	.word	0x08004f13
 8004e5c:	08004f13 	.word	0x08004f13
 8004e60:	08004f13 	.word	0x08004f13
 8004e64:	08004edf 	.word	0x08004edf
 8004e68:	08004f13 	.word	0x08004f13
 8004e6c:	08004f13 	.word	0x08004f13
 8004e70:	08004f13 	.word	0x08004f13
 8004e74:	08004f13 	.word	0x08004f13
 8004e78:	08004f13 	.word	0x08004f13
 8004e7c:	08004f13 	.word	0x08004f13
 8004e80:	08004f13 	.word	0x08004f13
 8004e84:	08004f13 	.word	0x08004f13
 8004e88:	08004f13 	.word	0x08004f13
 8004e8c:	08004f13 	.word	0x08004f13
 8004e90:	08004f13 	.word	0x08004f13
 8004e94:	08004f13 	.word	0x08004f13
 8004e98:	08004f13 	.word	0x08004f13
 8004e9c:	08004f13 	.word	0x08004f13
 8004ea0:	08004f13 	.word	0x08004f13
 8004ea4:	08004f05 	.word	0x08004f05
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	d02e      	beq.n	8004f0a <UART_SetConfig+0xab2>
 8004eac:	e031      	b.n	8004f12 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eae:	f7fd fa8b 	bl	80023c8 <HAL_RCC_GetPCLK1Freq>
 8004eb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004eb4:	e033      	b.n	8004f1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eb6:	f7fd fa9d 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8004eba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004ebc:	e02f      	b.n	8004f1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe f9ce 	bl	8003264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ecc:	e027      	b.n	8004f1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ece:	f107 0318 	add.w	r3, r7, #24
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe fb1a 	bl	800350c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004edc:	e01f      	b.n	8004f1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ede:	4b69      	ldr	r3, [pc, #420]	; (8005084 <UART_SetConfig+0xc2c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004eea:	4b66      	ldr	r3, [pc, #408]	; (8005084 <UART_SetConfig+0xc2c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	08db      	lsrs	r3, r3, #3
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	4a64      	ldr	r2, [pc, #400]	; (8005088 <UART_SetConfig+0xc30>)
 8004ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8004efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004efc:	e00f      	b.n	8004f1e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004efe:	4b62      	ldr	r3, [pc, #392]	; (8005088 <UART_SetConfig+0xc30>)
 8004f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f02:	e00c      	b.n	8004f1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f04:	4b61      	ldr	r3, [pc, #388]	; (800508c <UART_SetConfig+0xc34>)
 8004f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f08:	e009      	b.n	8004f1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f10:	e005      	b.n	8004f1e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004f1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80ea 	beq.w	80050fa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	4a55      	ldr	r2, [pc, #340]	; (8005080 <UART_SetConfig+0xc28>)
 8004f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f38:	005a      	lsls	r2, r3, #1
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	085b      	lsrs	r3, r3, #1
 8004f40:	441a      	add	r2, r3
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	2b0f      	cmp	r3, #15
 8004f50:	d916      	bls.n	8004f80 <UART_SetConfig+0xb28>
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f58:	d212      	bcs.n	8004f80 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f023 030f 	bic.w	r3, r3, #15
 8004f62:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f72:	4313      	orrs	r3, r2
 8004f74:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004f7c:	60da      	str	r2, [r3, #12]
 8004f7e:	e0bc      	b.n	80050fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004f86:	e0b8      	b.n	80050fa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	dc4b      	bgt.n	8005028 <UART_SetConfig+0xbd0>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f2c0 8087 	blt.w	80050a4 <UART_SetConfig+0xc4c>
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	f200 8084 	bhi.w	80050a4 <UART_SetConfig+0xc4c>
 8004f9c:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <UART_SetConfig+0xb4c>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	0800502f 	.word	0x0800502f
 8004fa8:	08005037 	.word	0x08005037
 8004fac:	080050a5 	.word	0x080050a5
 8004fb0:	080050a5 	.word	0x080050a5
 8004fb4:	0800503f 	.word	0x0800503f
 8004fb8:	080050a5 	.word	0x080050a5
 8004fbc:	080050a5 	.word	0x080050a5
 8004fc0:	080050a5 	.word	0x080050a5
 8004fc4:	0800504f 	.word	0x0800504f
 8004fc8:	080050a5 	.word	0x080050a5
 8004fcc:	080050a5 	.word	0x080050a5
 8004fd0:	080050a5 	.word	0x080050a5
 8004fd4:	080050a5 	.word	0x080050a5
 8004fd8:	080050a5 	.word	0x080050a5
 8004fdc:	080050a5 	.word	0x080050a5
 8004fe0:	080050a5 	.word	0x080050a5
 8004fe4:	0800505f 	.word	0x0800505f
 8004fe8:	080050a5 	.word	0x080050a5
 8004fec:	080050a5 	.word	0x080050a5
 8004ff0:	080050a5 	.word	0x080050a5
 8004ff4:	080050a5 	.word	0x080050a5
 8004ff8:	080050a5 	.word	0x080050a5
 8004ffc:	080050a5 	.word	0x080050a5
 8005000:	080050a5 	.word	0x080050a5
 8005004:	080050a5 	.word	0x080050a5
 8005008:	080050a5 	.word	0x080050a5
 800500c:	080050a5 	.word	0x080050a5
 8005010:	080050a5 	.word	0x080050a5
 8005014:	080050a5 	.word	0x080050a5
 8005018:	080050a5 	.word	0x080050a5
 800501c:	080050a5 	.word	0x080050a5
 8005020:	080050a5 	.word	0x080050a5
 8005024:	08005097 	.word	0x08005097
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	d037      	beq.n	800509c <UART_SetConfig+0xc44>
 800502c:	e03a      	b.n	80050a4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800502e:	f7fd f9cb 	bl	80023c8 <HAL_RCC_GetPCLK1Freq>
 8005032:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005034:	e03c      	b.n	80050b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005036:	f7fd f9dd 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 800503a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800503c:	e038      	b.n	80050b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800503e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe f90e 	bl	8003264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800504c:	e030      	b.n	80050b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800504e:	f107 0318 	add.w	r3, r7, #24
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe fa5a 	bl	800350c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800505c:	e028      	b.n	80050b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800505e:	4b09      	ldr	r3, [pc, #36]	; (8005084 <UART_SetConfig+0xc2c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d012      	beq.n	8005090 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800506a:	4b06      	ldr	r3, [pc, #24]	; (8005084 <UART_SetConfig+0xc2c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	08db      	lsrs	r3, r3, #3
 8005070:	f003 0303 	and.w	r3, r3, #3
 8005074:	4a04      	ldr	r2, [pc, #16]	; (8005088 <UART_SetConfig+0xc30>)
 8005076:	fa22 f303 	lsr.w	r3, r2, r3
 800507a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800507c:	e018      	b.n	80050b0 <UART_SetConfig+0xc58>
 800507e:	bf00      	nop
 8005080:	08006028 	.word	0x08006028
 8005084:	58024400 	.word	0x58024400
 8005088:	03d09000 	.word	0x03d09000
 800508c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005090:	4b24      	ldr	r3, [pc, #144]	; (8005124 <UART_SetConfig+0xccc>)
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005094:	e00c      	b.n	80050b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005096:	4b24      	ldr	r3, [pc, #144]	; (8005128 <UART_SetConfig+0xcd0>)
 8005098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800509a:	e009      	b.n	80050b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050a2:	e005      	b.n	80050b0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80050ae:	bf00      	nop
    }

    if (pclk != 0U)
 80050b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d021      	beq.n	80050fa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	4a1c      	ldr	r2, [pc, #112]	; (800512c <UART_SetConfig+0xcd4>)
 80050bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050c0:	461a      	mov	r2, r3
 80050c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	085b      	lsrs	r3, r3, #1
 80050ce:	441a      	add	r2, r3
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	2b0f      	cmp	r3, #15
 80050de:	d909      	bls.n	80050f4 <UART_SetConfig+0xc9c>
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e6:	d205      	bcs.n	80050f4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	e002      	b.n	80050fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2201      	movs	r2, #1
 8005106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2200      	movs	r2, #0
 800510e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2200      	movs	r2, #0
 8005114:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005116:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800511a:	4618      	mov	r0, r3
 800511c:	3748      	adds	r7, #72	; 0x48
 800511e:	46bd      	mov	sp, r7
 8005120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005124:	03d09000 	.word	0x03d09000
 8005128:	003d0900 	.word	0x003d0900
 800512c:	08006028 	.word	0x08006028

08005130 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01a      	beq.n	8005246 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800522e:	d10a      	bne.n	8005246 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	605a      	str	r2, [r3, #4]
  }
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af02      	add	r7, sp, #8
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005284:	f7fb fe36 	bl	8000ef4 <HAL_GetTick>
 8005288:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b08      	cmp	r3, #8
 8005296:	d10e      	bne.n	80052b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f82f 	bl	800530a <UART_WaitOnFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e025      	b.n	8005302 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d10e      	bne.n	80052e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f819 	bl	800530a <UART_WaitOnFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e00f      	b.n	8005302 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b09c      	sub	sp, #112	; 0x70
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	4613      	mov	r3, r2
 8005318:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800531a:	e0a9      	b.n	8005470 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005322:	f000 80a5 	beq.w	8005470 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005326:	f7fb fde5 	bl	8000ef4 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005332:	429a      	cmp	r2, r3
 8005334:	d302      	bcc.n	800533c <UART_WaitOnFlagUntilTimeout+0x32>
 8005336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005338:	2b00      	cmp	r3, #0
 800533a:	d140      	bne.n	80053be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800534a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005350:	667b      	str	r3, [r7, #100]	; 0x64
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800535a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800535c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005360:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e6      	bne.n	800533c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3308      	adds	r3, #8
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	663b      	str	r3, [r7, #96]	; 0x60
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3308      	adds	r3, #8
 800538c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800538e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005390:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800539c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e5      	bne.n	800536e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e069      	b.n	8005492 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d051      	beq.n	8005470 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053da:	d149      	bne.n	8005470 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	e853 3f00 	ldrex	r3, [r3]
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005404:	637b      	str	r3, [r7, #52]	; 0x34
 8005406:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005408:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800540a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800540c:	e841 2300 	strex	r3, r2, [r1]
 8005410:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1e6      	bne.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3308      	adds	r3, #8
 800541e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	613b      	str	r3, [r7, #16]
   return(result);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005438:	623a      	str	r2, [r7, #32]
 800543a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	69f9      	ldr	r1, [r7, #28]
 800543e:	6a3a      	ldr	r2, [r7, #32]
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	61bb      	str	r3, [r7, #24]
   return(result);
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e5      	bne.n	8005418 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e010      	b.n	8005492 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69da      	ldr	r2, [r3, #28]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4013      	ands	r3, r2
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	429a      	cmp	r2, r3
 800547e:	bf0c      	ite	eq
 8005480:	2301      	moveq	r3, #1
 8005482:	2300      	movne	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	429a      	cmp	r2, r3
 800548c:	f43f af46 	beq.w	800531c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3770      	adds	r7, #112	; 0x70
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800549a:	b480      	push	{r7}
 800549c:	b085      	sub	sp, #20
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e027      	b.n	8005500 <HAL_UARTEx_DisableFifoMode+0x66>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2224      	movs	r2, #36	; 0x24
 80054bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0201 	bic.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80054de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005520:	2302      	movs	r3, #2
 8005522:	e02d      	b.n	8005580 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2224      	movs	r2, #36	; 0x24
 8005530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0201 	bic.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f84f 	bl	8005604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800559c:	2302      	movs	r3, #2
 800559e:	e02d      	b.n	80055fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2224      	movs	r2, #36	; 0x24
 80055ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0201 	bic.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f811 	bl	8005604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005610:	2b00      	cmp	r3, #0
 8005612:	d108      	bne.n	8005626 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005624:	e031      	b.n	800568a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005626:	2310      	movs	r3, #16
 8005628:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800562a:	2310      	movs	r3, #16
 800562c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	0e5b      	lsrs	r3, r3, #25
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	0f5b      	lsrs	r3, r3, #29
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800564e:	7bbb      	ldrb	r3, [r7, #14]
 8005650:	7b3a      	ldrb	r2, [r7, #12]
 8005652:	4911      	ldr	r1, [pc, #68]	; (8005698 <UARTEx_SetNbDataToProcess+0x94>)
 8005654:	5c8a      	ldrb	r2, [r1, r2]
 8005656:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800565a:	7b3a      	ldrb	r2, [r7, #12]
 800565c:	490f      	ldr	r1, [pc, #60]	; (800569c <UARTEx_SetNbDataToProcess+0x98>)
 800565e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005660:	fb93 f3f2 	sdiv	r3, r3, r2
 8005664:	b29a      	uxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	7b7a      	ldrb	r2, [r7, #13]
 8005670:	4909      	ldr	r1, [pc, #36]	; (8005698 <UARTEx_SetNbDataToProcess+0x94>)
 8005672:	5c8a      	ldrb	r2, [r1, r2]
 8005674:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005678:	7b7a      	ldrb	r2, [r7, #13]
 800567a:	4908      	ldr	r1, [pc, #32]	; (800569c <UARTEx_SetNbDataToProcess+0x98>)
 800567c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800567e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	08006040 	.word	0x08006040
 800569c:	08006048 	.word	0x08006048

080056a0 <siprintf>:
 80056a0:	b40e      	push	{r1, r2, r3}
 80056a2:	b500      	push	{lr}
 80056a4:	b09c      	sub	sp, #112	; 0x70
 80056a6:	ab1d      	add	r3, sp, #116	; 0x74
 80056a8:	9002      	str	r0, [sp, #8]
 80056aa:	9006      	str	r0, [sp, #24]
 80056ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056b0:	4809      	ldr	r0, [pc, #36]	; (80056d8 <siprintf+0x38>)
 80056b2:	9107      	str	r1, [sp, #28]
 80056b4:	9104      	str	r1, [sp, #16]
 80056b6:	4909      	ldr	r1, [pc, #36]	; (80056dc <siprintf+0x3c>)
 80056b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80056bc:	9105      	str	r1, [sp, #20]
 80056be:	6800      	ldr	r0, [r0, #0]
 80056c0:	9301      	str	r3, [sp, #4]
 80056c2:	a902      	add	r1, sp, #8
 80056c4:	f000 f992 	bl	80059ec <_svfiprintf_r>
 80056c8:	9b02      	ldr	r3, [sp, #8]
 80056ca:	2200      	movs	r2, #0
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	b01c      	add	sp, #112	; 0x70
 80056d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056d4:	b003      	add	sp, #12
 80056d6:	4770      	bx	lr
 80056d8:	2400005c 	.word	0x2400005c
 80056dc:	ffff0208 	.word	0xffff0208

080056e0 <memset>:
 80056e0:	4402      	add	r2, r0
 80056e2:	4603      	mov	r3, r0
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d100      	bne.n	80056ea <memset+0xa>
 80056e8:	4770      	bx	lr
 80056ea:	f803 1b01 	strb.w	r1, [r3], #1
 80056ee:	e7f9      	b.n	80056e4 <memset+0x4>

080056f0 <__errno>:
 80056f0:	4b01      	ldr	r3, [pc, #4]	; (80056f8 <__errno+0x8>)
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	2400005c 	.word	0x2400005c

080056fc <__libc_init_array>:
 80056fc:	b570      	push	{r4, r5, r6, lr}
 80056fe:	4d0d      	ldr	r5, [pc, #52]	; (8005734 <__libc_init_array+0x38>)
 8005700:	4c0d      	ldr	r4, [pc, #52]	; (8005738 <__libc_init_array+0x3c>)
 8005702:	1b64      	subs	r4, r4, r5
 8005704:	10a4      	asrs	r4, r4, #2
 8005706:	2600      	movs	r6, #0
 8005708:	42a6      	cmp	r6, r4
 800570a:	d109      	bne.n	8005720 <__libc_init_array+0x24>
 800570c:	4d0b      	ldr	r5, [pc, #44]	; (800573c <__libc_init_array+0x40>)
 800570e:	4c0c      	ldr	r4, [pc, #48]	; (8005740 <__libc_init_array+0x44>)
 8005710:	f000 fc6a 	bl	8005fe8 <_init>
 8005714:	1b64      	subs	r4, r4, r5
 8005716:	10a4      	asrs	r4, r4, #2
 8005718:	2600      	movs	r6, #0
 800571a:	42a6      	cmp	r6, r4
 800571c:	d105      	bne.n	800572a <__libc_init_array+0x2e>
 800571e:	bd70      	pop	{r4, r5, r6, pc}
 8005720:	f855 3b04 	ldr.w	r3, [r5], #4
 8005724:	4798      	blx	r3
 8005726:	3601      	adds	r6, #1
 8005728:	e7ee      	b.n	8005708 <__libc_init_array+0xc>
 800572a:	f855 3b04 	ldr.w	r3, [r5], #4
 800572e:	4798      	blx	r3
 8005730:	3601      	adds	r6, #1
 8005732:	e7f2      	b.n	800571a <__libc_init_array+0x1e>
 8005734:	0800608c 	.word	0x0800608c
 8005738:	0800608c 	.word	0x0800608c
 800573c:	0800608c 	.word	0x0800608c
 8005740:	08006090 	.word	0x08006090

08005744 <__retarget_lock_acquire_recursive>:
 8005744:	4770      	bx	lr

08005746 <__retarget_lock_release_recursive>:
 8005746:	4770      	bx	lr

08005748 <_free_r>:
 8005748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800574a:	2900      	cmp	r1, #0
 800574c:	d044      	beq.n	80057d8 <_free_r+0x90>
 800574e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005752:	9001      	str	r0, [sp, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f1a1 0404 	sub.w	r4, r1, #4
 800575a:	bfb8      	it	lt
 800575c:	18e4      	addlt	r4, r4, r3
 800575e:	f000 f8df 	bl	8005920 <__malloc_lock>
 8005762:	4a1e      	ldr	r2, [pc, #120]	; (80057dc <_free_r+0x94>)
 8005764:	9801      	ldr	r0, [sp, #4]
 8005766:	6813      	ldr	r3, [r2, #0]
 8005768:	b933      	cbnz	r3, 8005778 <_free_r+0x30>
 800576a:	6063      	str	r3, [r4, #4]
 800576c:	6014      	str	r4, [r2, #0]
 800576e:	b003      	add	sp, #12
 8005770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005774:	f000 b8da 	b.w	800592c <__malloc_unlock>
 8005778:	42a3      	cmp	r3, r4
 800577a:	d908      	bls.n	800578e <_free_r+0x46>
 800577c:	6825      	ldr	r5, [r4, #0]
 800577e:	1961      	adds	r1, r4, r5
 8005780:	428b      	cmp	r3, r1
 8005782:	bf01      	itttt	eq
 8005784:	6819      	ldreq	r1, [r3, #0]
 8005786:	685b      	ldreq	r3, [r3, #4]
 8005788:	1949      	addeq	r1, r1, r5
 800578a:	6021      	streq	r1, [r4, #0]
 800578c:	e7ed      	b.n	800576a <_free_r+0x22>
 800578e:	461a      	mov	r2, r3
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	b10b      	cbz	r3, 8005798 <_free_r+0x50>
 8005794:	42a3      	cmp	r3, r4
 8005796:	d9fa      	bls.n	800578e <_free_r+0x46>
 8005798:	6811      	ldr	r1, [r2, #0]
 800579a:	1855      	adds	r5, r2, r1
 800579c:	42a5      	cmp	r5, r4
 800579e:	d10b      	bne.n	80057b8 <_free_r+0x70>
 80057a0:	6824      	ldr	r4, [r4, #0]
 80057a2:	4421      	add	r1, r4
 80057a4:	1854      	adds	r4, r2, r1
 80057a6:	42a3      	cmp	r3, r4
 80057a8:	6011      	str	r1, [r2, #0]
 80057aa:	d1e0      	bne.n	800576e <_free_r+0x26>
 80057ac:	681c      	ldr	r4, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	6053      	str	r3, [r2, #4]
 80057b2:	440c      	add	r4, r1
 80057b4:	6014      	str	r4, [r2, #0]
 80057b6:	e7da      	b.n	800576e <_free_r+0x26>
 80057b8:	d902      	bls.n	80057c0 <_free_r+0x78>
 80057ba:	230c      	movs	r3, #12
 80057bc:	6003      	str	r3, [r0, #0]
 80057be:	e7d6      	b.n	800576e <_free_r+0x26>
 80057c0:	6825      	ldr	r5, [r4, #0]
 80057c2:	1961      	adds	r1, r4, r5
 80057c4:	428b      	cmp	r3, r1
 80057c6:	bf04      	itt	eq
 80057c8:	6819      	ldreq	r1, [r3, #0]
 80057ca:	685b      	ldreq	r3, [r3, #4]
 80057cc:	6063      	str	r3, [r4, #4]
 80057ce:	bf04      	itt	eq
 80057d0:	1949      	addeq	r1, r1, r5
 80057d2:	6021      	streq	r1, [r4, #0]
 80057d4:	6054      	str	r4, [r2, #4]
 80057d6:	e7ca      	b.n	800576e <_free_r+0x26>
 80057d8:	b003      	add	sp, #12
 80057da:	bd30      	pop	{r4, r5, pc}
 80057dc:	240002c4 	.word	0x240002c4

080057e0 <sbrk_aligned>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	4e0e      	ldr	r6, [pc, #56]	; (800581c <sbrk_aligned+0x3c>)
 80057e4:	460c      	mov	r4, r1
 80057e6:	6831      	ldr	r1, [r6, #0]
 80057e8:	4605      	mov	r5, r0
 80057ea:	b911      	cbnz	r1, 80057f2 <sbrk_aligned+0x12>
 80057ec:	f000 fba6 	bl	8005f3c <_sbrk_r>
 80057f0:	6030      	str	r0, [r6, #0]
 80057f2:	4621      	mov	r1, r4
 80057f4:	4628      	mov	r0, r5
 80057f6:	f000 fba1 	bl	8005f3c <_sbrk_r>
 80057fa:	1c43      	adds	r3, r0, #1
 80057fc:	d00a      	beq.n	8005814 <sbrk_aligned+0x34>
 80057fe:	1cc4      	adds	r4, r0, #3
 8005800:	f024 0403 	bic.w	r4, r4, #3
 8005804:	42a0      	cmp	r0, r4
 8005806:	d007      	beq.n	8005818 <sbrk_aligned+0x38>
 8005808:	1a21      	subs	r1, r4, r0
 800580a:	4628      	mov	r0, r5
 800580c:	f000 fb96 	bl	8005f3c <_sbrk_r>
 8005810:	3001      	adds	r0, #1
 8005812:	d101      	bne.n	8005818 <sbrk_aligned+0x38>
 8005814:	f04f 34ff 	mov.w	r4, #4294967295
 8005818:	4620      	mov	r0, r4
 800581a:	bd70      	pop	{r4, r5, r6, pc}
 800581c:	240002c8 	.word	0x240002c8

08005820 <_malloc_r>:
 8005820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005824:	1ccd      	adds	r5, r1, #3
 8005826:	f025 0503 	bic.w	r5, r5, #3
 800582a:	3508      	adds	r5, #8
 800582c:	2d0c      	cmp	r5, #12
 800582e:	bf38      	it	cc
 8005830:	250c      	movcc	r5, #12
 8005832:	2d00      	cmp	r5, #0
 8005834:	4607      	mov	r7, r0
 8005836:	db01      	blt.n	800583c <_malloc_r+0x1c>
 8005838:	42a9      	cmp	r1, r5
 800583a:	d905      	bls.n	8005848 <_malloc_r+0x28>
 800583c:	230c      	movs	r3, #12
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	2600      	movs	r6, #0
 8005842:	4630      	mov	r0, r6
 8005844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005848:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800591c <_malloc_r+0xfc>
 800584c:	f000 f868 	bl	8005920 <__malloc_lock>
 8005850:	f8d8 3000 	ldr.w	r3, [r8]
 8005854:	461c      	mov	r4, r3
 8005856:	bb5c      	cbnz	r4, 80058b0 <_malloc_r+0x90>
 8005858:	4629      	mov	r1, r5
 800585a:	4638      	mov	r0, r7
 800585c:	f7ff ffc0 	bl	80057e0 <sbrk_aligned>
 8005860:	1c43      	adds	r3, r0, #1
 8005862:	4604      	mov	r4, r0
 8005864:	d155      	bne.n	8005912 <_malloc_r+0xf2>
 8005866:	f8d8 4000 	ldr.w	r4, [r8]
 800586a:	4626      	mov	r6, r4
 800586c:	2e00      	cmp	r6, #0
 800586e:	d145      	bne.n	80058fc <_malloc_r+0xdc>
 8005870:	2c00      	cmp	r4, #0
 8005872:	d048      	beq.n	8005906 <_malloc_r+0xe6>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	4631      	mov	r1, r6
 8005878:	4638      	mov	r0, r7
 800587a:	eb04 0903 	add.w	r9, r4, r3
 800587e:	f000 fb5d 	bl	8005f3c <_sbrk_r>
 8005882:	4581      	cmp	r9, r0
 8005884:	d13f      	bne.n	8005906 <_malloc_r+0xe6>
 8005886:	6821      	ldr	r1, [r4, #0]
 8005888:	1a6d      	subs	r5, r5, r1
 800588a:	4629      	mov	r1, r5
 800588c:	4638      	mov	r0, r7
 800588e:	f7ff ffa7 	bl	80057e0 <sbrk_aligned>
 8005892:	3001      	adds	r0, #1
 8005894:	d037      	beq.n	8005906 <_malloc_r+0xe6>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	442b      	add	r3, r5
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	f8d8 3000 	ldr.w	r3, [r8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d038      	beq.n	8005916 <_malloc_r+0xf6>
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	42a2      	cmp	r2, r4
 80058a8:	d12b      	bne.n	8005902 <_malloc_r+0xe2>
 80058aa:	2200      	movs	r2, #0
 80058ac:	605a      	str	r2, [r3, #4]
 80058ae:	e00f      	b.n	80058d0 <_malloc_r+0xb0>
 80058b0:	6822      	ldr	r2, [r4, #0]
 80058b2:	1b52      	subs	r2, r2, r5
 80058b4:	d41f      	bmi.n	80058f6 <_malloc_r+0xd6>
 80058b6:	2a0b      	cmp	r2, #11
 80058b8:	d917      	bls.n	80058ea <_malloc_r+0xca>
 80058ba:	1961      	adds	r1, r4, r5
 80058bc:	42a3      	cmp	r3, r4
 80058be:	6025      	str	r5, [r4, #0]
 80058c0:	bf18      	it	ne
 80058c2:	6059      	strne	r1, [r3, #4]
 80058c4:	6863      	ldr	r3, [r4, #4]
 80058c6:	bf08      	it	eq
 80058c8:	f8c8 1000 	streq.w	r1, [r8]
 80058cc:	5162      	str	r2, [r4, r5]
 80058ce:	604b      	str	r3, [r1, #4]
 80058d0:	4638      	mov	r0, r7
 80058d2:	f104 060b 	add.w	r6, r4, #11
 80058d6:	f000 f829 	bl	800592c <__malloc_unlock>
 80058da:	f026 0607 	bic.w	r6, r6, #7
 80058de:	1d23      	adds	r3, r4, #4
 80058e0:	1af2      	subs	r2, r6, r3
 80058e2:	d0ae      	beq.n	8005842 <_malloc_r+0x22>
 80058e4:	1b9b      	subs	r3, r3, r6
 80058e6:	50a3      	str	r3, [r4, r2]
 80058e8:	e7ab      	b.n	8005842 <_malloc_r+0x22>
 80058ea:	42a3      	cmp	r3, r4
 80058ec:	6862      	ldr	r2, [r4, #4]
 80058ee:	d1dd      	bne.n	80058ac <_malloc_r+0x8c>
 80058f0:	f8c8 2000 	str.w	r2, [r8]
 80058f4:	e7ec      	b.n	80058d0 <_malloc_r+0xb0>
 80058f6:	4623      	mov	r3, r4
 80058f8:	6864      	ldr	r4, [r4, #4]
 80058fa:	e7ac      	b.n	8005856 <_malloc_r+0x36>
 80058fc:	4634      	mov	r4, r6
 80058fe:	6876      	ldr	r6, [r6, #4]
 8005900:	e7b4      	b.n	800586c <_malloc_r+0x4c>
 8005902:	4613      	mov	r3, r2
 8005904:	e7cc      	b.n	80058a0 <_malloc_r+0x80>
 8005906:	230c      	movs	r3, #12
 8005908:	603b      	str	r3, [r7, #0]
 800590a:	4638      	mov	r0, r7
 800590c:	f000 f80e 	bl	800592c <__malloc_unlock>
 8005910:	e797      	b.n	8005842 <_malloc_r+0x22>
 8005912:	6025      	str	r5, [r4, #0]
 8005914:	e7dc      	b.n	80058d0 <_malloc_r+0xb0>
 8005916:	605b      	str	r3, [r3, #4]
 8005918:	deff      	udf	#255	; 0xff
 800591a:	bf00      	nop
 800591c:	240002c4 	.word	0x240002c4

08005920 <__malloc_lock>:
 8005920:	4801      	ldr	r0, [pc, #4]	; (8005928 <__malloc_lock+0x8>)
 8005922:	f7ff bf0f 	b.w	8005744 <__retarget_lock_acquire_recursive>
 8005926:	bf00      	nop
 8005928:	240002c0 	.word	0x240002c0

0800592c <__malloc_unlock>:
 800592c:	4801      	ldr	r0, [pc, #4]	; (8005934 <__malloc_unlock+0x8>)
 800592e:	f7ff bf0a 	b.w	8005746 <__retarget_lock_release_recursive>
 8005932:	bf00      	nop
 8005934:	240002c0 	.word	0x240002c0

08005938 <__ssputs_r>:
 8005938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	688e      	ldr	r6, [r1, #8]
 800593e:	461f      	mov	r7, r3
 8005940:	42be      	cmp	r6, r7
 8005942:	680b      	ldr	r3, [r1, #0]
 8005944:	4682      	mov	sl, r0
 8005946:	460c      	mov	r4, r1
 8005948:	4690      	mov	r8, r2
 800594a:	d82c      	bhi.n	80059a6 <__ssputs_r+0x6e>
 800594c:	898a      	ldrh	r2, [r1, #12]
 800594e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005952:	d026      	beq.n	80059a2 <__ssputs_r+0x6a>
 8005954:	6965      	ldr	r5, [r4, #20]
 8005956:	6909      	ldr	r1, [r1, #16]
 8005958:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800595c:	eba3 0901 	sub.w	r9, r3, r1
 8005960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005964:	1c7b      	adds	r3, r7, #1
 8005966:	444b      	add	r3, r9
 8005968:	106d      	asrs	r5, r5, #1
 800596a:	429d      	cmp	r5, r3
 800596c:	bf38      	it	cc
 800596e:	461d      	movcc	r5, r3
 8005970:	0553      	lsls	r3, r2, #21
 8005972:	d527      	bpl.n	80059c4 <__ssputs_r+0x8c>
 8005974:	4629      	mov	r1, r5
 8005976:	f7ff ff53 	bl	8005820 <_malloc_r>
 800597a:	4606      	mov	r6, r0
 800597c:	b360      	cbz	r0, 80059d8 <__ssputs_r+0xa0>
 800597e:	6921      	ldr	r1, [r4, #16]
 8005980:	464a      	mov	r2, r9
 8005982:	f000 faeb 	bl	8005f5c <memcpy>
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800598c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005990:	81a3      	strh	r3, [r4, #12]
 8005992:	6126      	str	r6, [r4, #16]
 8005994:	6165      	str	r5, [r4, #20]
 8005996:	444e      	add	r6, r9
 8005998:	eba5 0509 	sub.w	r5, r5, r9
 800599c:	6026      	str	r6, [r4, #0]
 800599e:	60a5      	str	r5, [r4, #8]
 80059a0:	463e      	mov	r6, r7
 80059a2:	42be      	cmp	r6, r7
 80059a4:	d900      	bls.n	80059a8 <__ssputs_r+0x70>
 80059a6:	463e      	mov	r6, r7
 80059a8:	6820      	ldr	r0, [r4, #0]
 80059aa:	4632      	mov	r2, r6
 80059ac:	4641      	mov	r1, r8
 80059ae:	f000 faab 	bl	8005f08 <memmove>
 80059b2:	68a3      	ldr	r3, [r4, #8]
 80059b4:	1b9b      	subs	r3, r3, r6
 80059b6:	60a3      	str	r3, [r4, #8]
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	4433      	add	r3, r6
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	2000      	movs	r0, #0
 80059c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c4:	462a      	mov	r2, r5
 80059c6:	f000 fad7 	bl	8005f78 <_realloc_r>
 80059ca:	4606      	mov	r6, r0
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d1e0      	bne.n	8005992 <__ssputs_r+0x5a>
 80059d0:	6921      	ldr	r1, [r4, #16]
 80059d2:	4650      	mov	r0, sl
 80059d4:	f7ff feb8 	bl	8005748 <_free_r>
 80059d8:	230c      	movs	r3, #12
 80059da:	f8ca 3000 	str.w	r3, [sl]
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ea:	e7e9      	b.n	80059c0 <__ssputs_r+0x88>

080059ec <_svfiprintf_r>:
 80059ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f0:	4698      	mov	r8, r3
 80059f2:	898b      	ldrh	r3, [r1, #12]
 80059f4:	061b      	lsls	r3, r3, #24
 80059f6:	b09d      	sub	sp, #116	; 0x74
 80059f8:	4607      	mov	r7, r0
 80059fa:	460d      	mov	r5, r1
 80059fc:	4614      	mov	r4, r2
 80059fe:	d50e      	bpl.n	8005a1e <_svfiprintf_r+0x32>
 8005a00:	690b      	ldr	r3, [r1, #16]
 8005a02:	b963      	cbnz	r3, 8005a1e <_svfiprintf_r+0x32>
 8005a04:	2140      	movs	r1, #64	; 0x40
 8005a06:	f7ff ff0b 	bl	8005820 <_malloc_r>
 8005a0a:	6028      	str	r0, [r5, #0]
 8005a0c:	6128      	str	r0, [r5, #16]
 8005a0e:	b920      	cbnz	r0, 8005a1a <_svfiprintf_r+0x2e>
 8005a10:	230c      	movs	r3, #12
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295
 8005a18:	e0d0      	b.n	8005bbc <_svfiprintf_r+0x1d0>
 8005a1a:	2340      	movs	r3, #64	; 0x40
 8005a1c:	616b      	str	r3, [r5, #20]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	9309      	str	r3, [sp, #36]	; 0x24
 8005a22:	2320      	movs	r3, #32
 8005a24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a28:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a2c:	2330      	movs	r3, #48	; 0x30
 8005a2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005bd4 <_svfiprintf_r+0x1e8>
 8005a32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a36:	f04f 0901 	mov.w	r9, #1
 8005a3a:	4623      	mov	r3, r4
 8005a3c:	469a      	mov	sl, r3
 8005a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a42:	b10a      	cbz	r2, 8005a48 <_svfiprintf_r+0x5c>
 8005a44:	2a25      	cmp	r2, #37	; 0x25
 8005a46:	d1f9      	bne.n	8005a3c <_svfiprintf_r+0x50>
 8005a48:	ebba 0b04 	subs.w	fp, sl, r4
 8005a4c:	d00b      	beq.n	8005a66 <_svfiprintf_r+0x7a>
 8005a4e:	465b      	mov	r3, fp
 8005a50:	4622      	mov	r2, r4
 8005a52:	4629      	mov	r1, r5
 8005a54:	4638      	mov	r0, r7
 8005a56:	f7ff ff6f 	bl	8005938 <__ssputs_r>
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f000 80a9 	beq.w	8005bb2 <_svfiprintf_r+0x1c6>
 8005a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a62:	445a      	add	r2, fp
 8005a64:	9209      	str	r2, [sp, #36]	; 0x24
 8005a66:	f89a 3000 	ldrb.w	r3, [sl]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 80a1 	beq.w	8005bb2 <_svfiprintf_r+0x1c6>
 8005a70:	2300      	movs	r3, #0
 8005a72:	f04f 32ff 	mov.w	r2, #4294967295
 8005a76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a7a:	f10a 0a01 	add.w	sl, sl, #1
 8005a7e:	9304      	str	r3, [sp, #16]
 8005a80:	9307      	str	r3, [sp, #28]
 8005a82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a86:	931a      	str	r3, [sp, #104]	; 0x68
 8005a88:	4654      	mov	r4, sl
 8005a8a:	2205      	movs	r2, #5
 8005a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a90:	4850      	ldr	r0, [pc, #320]	; (8005bd4 <_svfiprintf_r+0x1e8>)
 8005a92:	f7fa fc2d 	bl	80002f0 <memchr>
 8005a96:	9a04      	ldr	r2, [sp, #16]
 8005a98:	b9d8      	cbnz	r0, 8005ad2 <_svfiprintf_r+0xe6>
 8005a9a:	06d0      	lsls	r0, r2, #27
 8005a9c:	bf44      	itt	mi
 8005a9e:	2320      	movmi	r3, #32
 8005aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aa4:	0711      	lsls	r1, r2, #28
 8005aa6:	bf44      	itt	mi
 8005aa8:	232b      	movmi	r3, #43	; 0x2b
 8005aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aae:	f89a 3000 	ldrb.w	r3, [sl]
 8005ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab4:	d015      	beq.n	8005ae2 <_svfiprintf_r+0xf6>
 8005ab6:	9a07      	ldr	r2, [sp, #28]
 8005ab8:	4654      	mov	r4, sl
 8005aba:	2000      	movs	r0, #0
 8005abc:	f04f 0c0a 	mov.w	ip, #10
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ac6:	3b30      	subs	r3, #48	; 0x30
 8005ac8:	2b09      	cmp	r3, #9
 8005aca:	d94d      	bls.n	8005b68 <_svfiprintf_r+0x17c>
 8005acc:	b1b0      	cbz	r0, 8005afc <_svfiprintf_r+0x110>
 8005ace:	9207      	str	r2, [sp, #28]
 8005ad0:	e014      	b.n	8005afc <_svfiprintf_r+0x110>
 8005ad2:	eba0 0308 	sub.w	r3, r0, r8
 8005ad6:	fa09 f303 	lsl.w	r3, r9, r3
 8005ada:	4313      	orrs	r3, r2
 8005adc:	9304      	str	r3, [sp, #16]
 8005ade:	46a2      	mov	sl, r4
 8005ae0:	e7d2      	b.n	8005a88 <_svfiprintf_r+0x9c>
 8005ae2:	9b03      	ldr	r3, [sp, #12]
 8005ae4:	1d19      	adds	r1, r3, #4
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	9103      	str	r1, [sp, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bfbb      	ittet	lt
 8005aee:	425b      	neglt	r3, r3
 8005af0:	f042 0202 	orrlt.w	r2, r2, #2
 8005af4:	9307      	strge	r3, [sp, #28]
 8005af6:	9307      	strlt	r3, [sp, #28]
 8005af8:	bfb8      	it	lt
 8005afa:	9204      	strlt	r2, [sp, #16]
 8005afc:	7823      	ldrb	r3, [r4, #0]
 8005afe:	2b2e      	cmp	r3, #46	; 0x2e
 8005b00:	d10c      	bne.n	8005b1c <_svfiprintf_r+0x130>
 8005b02:	7863      	ldrb	r3, [r4, #1]
 8005b04:	2b2a      	cmp	r3, #42	; 0x2a
 8005b06:	d134      	bne.n	8005b72 <_svfiprintf_r+0x186>
 8005b08:	9b03      	ldr	r3, [sp, #12]
 8005b0a:	1d1a      	adds	r2, r3, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	9203      	str	r2, [sp, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	bfb8      	it	lt
 8005b14:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b18:	3402      	adds	r4, #2
 8005b1a:	9305      	str	r3, [sp, #20]
 8005b1c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005be4 <_svfiprintf_r+0x1f8>
 8005b20:	7821      	ldrb	r1, [r4, #0]
 8005b22:	2203      	movs	r2, #3
 8005b24:	4650      	mov	r0, sl
 8005b26:	f7fa fbe3 	bl	80002f0 <memchr>
 8005b2a:	b138      	cbz	r0, 8005b3c <_svfiprintf_r+0x150>
 8005b2c:	9b04      	ldr	r3, [sp, #16]
 8005b2e:	eba0 000a 	sub.w	r0, r0, sl
 8005b32:	2240      	movs	r2, #64	; 0x40
 8005b34:	4082      	lsls	r2, r0
 8005b36:	4313      	orrs	r3, r2
 8005b38:	3401      	adds	r4, #1
 8005b3a:	9304      	str	r3, [sp, #16]
 8005b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b40:	4825      	ldr	r0, [pc, #148]	; (8005bd8 <_svfiprintf_r+0x1ec>)
 8005b42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b46:	2206      	movs	r2, #6
 8005b48:	f7fa fbd2 	bl	80002f0 <memchr>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d038      	beq.n	8005bc2 <_svfiprintf_r+0x1d6>
 8005b50:	4b22      	ldr	r3, [pc, #136]	; (8005bdc <_svfiprintf_r+0x1f0>)
 8005b52:	bb1b      	cbnz	r3, 8005b9c <_svfiprintf_r+0x1b0>
 8005b54:	9b03      	ldr	r3, [sp, #12]
 8005b56:	3307      	adds	r3, #7
 8005b58:	f023 0307 	bic.w	r3, r3, #7
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	9303      	str	r3, [sp, #12]
 8005b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b62:	4433      	add	r3, r6
 8005b64:	9309      	str	r3, [sp, #36]	; 0x24
 8005b66:	e768      	b.n	8005a3a <_svfiprintf_r+0x4e>
 8005b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	2001      	movs	r0, #1
 8005b70:	e7a6      	b.n	8005ac0 <_svfiprintf_r+0xd4>
 8005b72:	2300      	movs	r3, #0
 8005b74:	3401      	adds	r4, #1
 8005b76:	9305      	str	r3, [sp, #20]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	f04f 0c0a 	mov.w	ip, #10
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b84:	3a30      	subs	r2, #48	; 0x30
 8005b86:	2a09      	cmp	r2, #9
 8005b88:	d903      	bls.n	8005b92 <_svfiprintf_r+0x1a6>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0c6      	beq.n	8005b1c <_svfiprintf_r+0x130>
 8005b8e:	9105      	str	r1, [sp, #20]
 8005b90:	e7c4      	b.n	8005b1c <_svfiprintf_r+0x130>
 8005b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b96:	4604      	mov	r4, r0
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e7f0      	b.n	8005b7e <_svfiprintf_r+0x192>
 8005b9c:	ab03      	add	r3, sp, #12
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	462a      	mov	r2, r5
 8005ba2:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <_svfiprintf_r+0x1f4>)
 8005ba4:	a904      	add	r1, sp, #16
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	f3af 8000 	nop.w
 8005bac:	1c42      	adds	r2, r0, #1
 8005bae:	4606      	mov	r6, r0
 8005bb0:	d1d6      	bne.n	8005b60 <_svfiprintf_r+0x174>
 8005bb2:	89ab      	ldrh	r3, [r5, #12]
 8005bb4:	065b      	lsls	r3, r3, #25
 8005bb6:	f53f af2d 	bmi.w	8005a14 <_svfiprintf_r+0x28>
 8005bba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bbc:	b01d      	add	sp, #116	; 0x74
 8005bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc2:	ab03      	add	r3, sp, #12
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	462a      	mov	r2, r5
 8005bc8:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <_svfiprintf_r+0x1f4>)
 8005bca:	a904      	add	r1, sp, #16
 8005bcc:	4638      	mov	r0, r7
 8005bce:	f000 f879 	bl	8005cc4 <_printf_i>
 8005bd2:	e7eb      	b.n	8005bac <_svfiprintf_r+0x1c0>
 8005bd4:	08006050 	.word	0x08006050
 8005bd8:	0800605a 	.word	0x0800605a
 8005bdc:	00000000 	.word	0x00000000
 8005be0:	08005939 	.word	0x08005939
 8005be4:	08006056 	.word	0x08006056

08005be8 <_printf_common>:
 8005be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bec:	4616      	mov	r6, r2
 8005bee:	4699      	mov	r9, r3
 8005bf0:	688a      	ldr	r2, [r1, #8]
 8005bf2:	690b      	ldr	r3, [r1, #16]
 8005bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	bfb8      	it	lt
 8005bfc:	4613      	movlt	r3, r2
 8005bfe:	6033      	str	r3, [r6, #0]
 8005c00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c04:	4607      	mov	r7, r0
 8005c06:	460c      	mov	r4, r1
 8005c08:	b10a      	cbz	r2, 8005c0e <_printf_common+0x26>
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	6033      	str	r3, [r6, #0]
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	0699      	lsls	r1, r3, #26
 8005c12:	bf42      	ittt	mi
 8005c14:	6833      	ldrmi	r3, [r6, #0]
 8005c16:	3302      	addmi	r3, #2
 8005c18:	6033      	strmi	r3, [r6, #0]
 8005c1a:	6825      	ldr	r5, [r4, #0]
 8005c1c:	f015 0506 	ands.w	r5, r5, #6
 8005c20:	d106      	bne.n	8005c30 <_printf_common+0x48>
 8005c22:	f104 0a19 	add.w	sl, r4, #25
 8005c26:	68e3      	ldr	r3, [r4, #12]
 8005c28:	6832      	ldr	r2, [r6, #0]
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	42ab      	cmp	r3, r5
 8005c2e:	dc26      	bgt.n	8005c7e <_printf_common+0x96>
 8005c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c34:	1e13      	subs	r3, r2, #0
 8005c36:	6822      	ldr	r2, [r4, #0]
 8005c38:	bf18      	it	ne
 8005c3a:	2301      	movne	r3, #1
 8005c3c:	0692      	lsls	r2, r2, #26
 8005c3e:	d42b      	bmi.n	8005c98 <_printf_common+0xb0>
 8005c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c44:	4649      	mov	r1, r9
 8005c46:	4638      	mov	r0, r7
 8005c48:	47c0      	blx	r8
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	d01e      	beq.n	8005c8c <_printf_common+0xa4>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	6922      	ldr	r2, [r4, #16]
 8005c52:	f003 0306 	and.w	r3, r3, #6
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	bf02      	ittt	eq
 8005c5a:	68e5      	ldreq	r5, [r4, #12]
 8005c5c:	6833      	ldreq	r3, [r6, #0]
 8005c5e:	1aed      	subeq	r5, r5, r3
 8005c60:	68a3      	ldr	r3, [r4, #8]
 8005c62:	bf0c      	ite	eq
 8005c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c68:	2500      	movne	r5, #0
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	bfc4      	itt	gt
 8005c6e:	1a9b      	subgt	r3, r3, r2
 8005c70:	18ed      	addgt	r5, r5, r3
 8005c72:	2600      	movs	r6, #0
 8005c74:	341a      	adds	r4, #26
 8005c76:	42b5      	cmp	r5, r6
 8005c78:	d11a      	bne.n	8005cb0 <_printf_common+0xc8>
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	e008      	b.n	8005c90 <_printf_common+0xa8>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4652      	mov	r2, sl
 8005c82:	4649      	mov	r1, r9
 8005c84:	4638      	mov	r0, r7
 8005c86:	47c0      	blx	r8
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d103      	bne.n	8005c94 <_printf_common+0xac>
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c94:	3501      	adds	r5, #1
 8005c96:	e7c6      	b.n	8005c26 <_printf_common+0x3e>
 8005c98:	18e1      	adds	r1, r4, r3
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	2030      	movs	r0, #48	; 0x30
 8005c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ca2:	4422      	add	r2, r4
 8005ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cac:	3302      	adds	r3, #2
 8005cae:	e7c7      	b.n	8005c40 <_printf_common+0x58>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	47c0      	blx	r8
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d0e6      	beq.n	8005c8c <_printf_common+0xa4>
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7d9      	b.n	8005c76 <_printf_common+0x8e>
	...

08005cc4 <_printf_i>:
 8005cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc8:	7e0f      	ldrb	r7, [r1, #24]
 8005cca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ccc:	2f78      	cmp	r7, #120	; 0x78
 8005cce:	4691      	mov	r9, r2
 8005cd0:	4680      	mov	r8, r0
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	469a      	mov	sl, r3
 8005cd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cda:	d807      	bhi.n	8005cec <_printf_i+0x28>
 8005cdc:	2f62      	cmp	r7, #98	; 0x62
 8005cde:	d80a      	bhi.n	8005cf6 <_printf_i+0x32>
 8005ce0:	2f00      	cmp	r7, #0
 8005ce2:	f000 80d4 	beq.w	8005e8e <_printf_i+0x1ca>
 8005ce6:	2f58      	cmp	r7, #88	; 0x58
 8005ce8:	f000 80c0 	beq.w	8005e6c <_printf_i+0x1a8>
 8005cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cf4:	e03a      	b.n	8005d6c <_printf_i+0xa8>
 8005cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cfa:	2b15      	cmp	r3, #21
 8005cfc:	d8f6      	bhi.n	8005cec <_printf_i+0x28>
 8005cfe:	a101      	add	r1, pc, #4	; (adr r1, 8005d04 <_printf_i+0x40>)
 8005d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d04:	08005d5d 	.word	0x08005d5d
 8005d08:	08005d71 	.word	0x08005d71
 8005d0c:	08005ced 	.word	0x08005ced
 8005d10:	08005ced 	.word	0x08005ced
 8005d14:	08005ced 	.word	0x08005ced
 8005d18:	08005ced 	.word	0x08005ced
 8005d1c:	08005d71 	.word	0x08005d71
 8005d20:	08005ced 	.word	0x08005ced
 8005d24:	08005ced 	.word	0x08005ced
 8005d28:	08005ced 	.word	0x08005ced
 8005d2c:	08005ced 	.word	0x08005ced
 8005d30:	08005e75 	.word	0x08005e75
 8005d34:	08005d9d 	.word	0x08005d9d
 8005d38:	08005e2f 	.word	0x08005e2f
 8005d3c:	08005ced 	.word	0x08005ced
 8005d40:	08005ced 	.word	0x08005ced
 8005d44:	08005e97 	.word	0x08005e97
 8005d48:	08005ced 	.word	0x08005ced
 8005d4c:	08005d9d 	.word	0x08005d9d
 8005d50:	08005ced 	.word	0x08005ced
 8005d54:	08005ced 	.word	0x08005ced
 8005d58:	08005e37 	.word	0x08005e37
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	1d1a      	adds	r2, r3, #4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	602a      	str	r2, [r5, #0]
 8005d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e09f      	b.n	8005eb0 <_printf_i+0x1ec>
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	682b      	ldr	r3, [r5, #0]
 8005d74:	0607      	lsls	r7, r0, #24
 8005d76:	f103 0104 	add.w	r1, r3, #4
 8005d7a:	6029      	str	r1, [r5, #0]
 8005d7c:	d501      	bpl.n	8005d82 <_printf_i+0xbe>
 8005d7e:	681e      	ldr	r6, [r3, #0]
 8005d80:	e003      	b.n	8005d8a <_printf_i+0xc6>
 8005d82:	0646      	lsls	r6, r0, #25
 8005d84:	d5fb      	bpl.n	8005d7e <_printf_i+0xba>
 8005d86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d8a:	2e00      	cmp	r6, #0
 8005d8c:	da03      	bge.n	8005d96 <_printf_i+0xd2>
 8005d8e:	232d      	movs	r3, #45	; 0x2d
 8005d90:	4276      	negs	r6, r6
 8005d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d96:	485a      	ldr	r0, [pc, #360]	; (8005f00 <_printf_i+0x23c>)
 8005d98:	230a      	movs	r3, #10
 8005d9a:	e012      	b.n	8005dc2 <_printf_i+0xfe>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	6820      	ldr	r0, [r4, #0]
 8005da0:	1d19      	adds	r1, r3, #4
 8005da2:	6029      	str	r1, [r5, #0]
 8005da4:	0605      	lsls	r5, r0, #24
 8005da6:	d501      	bpl.n	8005dac <_printf_i+0xe8>
 8005da8:	681e      	ldr	r6, [r3, #0]
 8005daa:	e002      	b.n	8005db2 <_printf_i+0xee>
 8005dac:	0641      	lsls	r1, r0, #25
 8005dae:	d5fb      	bpl.n	8005da8 <_printf_i+0xe4>
 8005db0:	881e      	ldrh	r6, [r3, #0]
 8005db2:	4853      	ldr	r0, [pc, #332]	; (8005f00 <_printf_i+0x23c>)
 8005db4:	2f6f      	cmp	r7, #111	; 0x6f
 8005db6:	bf0c      	ite	eq
 8005db8:	2308      	moveq	r3, #8
 8005dba:	230a      	movne	r3, #10
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dc2:	6865      	ldr	r5, [r4, #4]
 8005dc4:	60a5      	str	r5, [r4, #8]
 8005dc6:	2d00      	cmp	r5, #0
 8005dc8:	bfa2      	ittt	ge
 8005dca:	6821      	ldrge	r1, [r4, #0]
 8005dcc:	f021 0104 	bicge.w	r1, r1, #4
 8005dd0:	6021      	strge	r1, [r4, #0]
 8005dd2:	b90e      	cbnz	r6, 8005dd8 <_printf_i+0x114>
 8005dd4:	2d00      	cmp	r5, #0
 8005dd6:	d04b      	beq.n	8005e70 <_printf_i+0x1ac>
 8005dd8:	4615      	mov	r5, r2
 8005dda:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dde:	fb03 6711 	mls	r7, r3, r1, r6
 8005de2:	5dc7      	ldrb	r7, [r0, r7]
 8005de4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005de8:	4637      	mov	r7, r6
 8005dea:	42bb      	cmp	r3, r7
 8005dec:	460e      	mov	r6, r1
 8005dee:	d9f4      	bls.n	8005dda <_printf_i+0x116>
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d10b      	bne.n	8005e0c <_printf_i+0x148>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	07de      	lsls	r6, r3, #31
 8005df8:	d508      	bpl.n	8005e0c <_printf_i+0x148>
 8005dfa:	6923      	ldr	r3, [r4, #16]
 8005dfc:	6861      	ldr	r1, [r4, #4]
 8005dfe:	4299      	cmp	r1, r3
 8005e00:	bfde      	ittt	le
 8005e02:	2330      	movle	r3, #48	; 0x30
 8005e04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e0c:	1b52      	subs	r2, r2, r5
 8005e0e:	6122      	str	r2, [r4, #16]
 8005e10:	f8cd a000 	str.w	sl, [sp]
 8005e14:	464b      	mov	r3, r9
 8005e16:	aa03      	add	r2, sp, #12
 8005e18:	4621      	mov	r1, r4
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	f7ff fee4 	bl	8005be8 <_printf_common>
 8005e20:	3001      	adds	r0, #1
 8005e22:	d14a      	bne.n	8005eba <_printf_i+0x1f6>
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295
 8005e28:	b004      	add	sp, #16
 8005e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	f043 0320 	orr.w	r3, r3, #32
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	4833      	ldr	r0, [pc, #204]	; (8005f04 <_printf_i+0x240>)
 8005e38:	2778      	movs	r7, #120	; 0x78
 8005e3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	6829      	ldr	r1, [r5, #0]
 8005e42:	061f      	lsls	r7, r3, #24
 8005e44:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e48:	d402      	bmi.n	8005e50 <_printf_i+0x18c>
 8005e4a:	065f      	lsls	r7, r3, #25
 8005e4c:	bf48      	it	mi
 8005e4e:	b2b6      	uxthmi	r6, r6
 8005e50:	07df      	lsls	r7, r3, #31
 8005e52:	bf48      	it	mi
 8005e54:	f043 0320 	orrmi.w	r3, r3, #32
 8005e58:	6029      	str	r1, [r5, #0]
 8005e5a:	bf48      	it	mi
 8005e5c:	6023      	strmi	r3, [r4, #0]
 8005e5e:	b91e      	cbnz	r6, 8005e68 <_printf_i+0x1a4>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	f023 0320 	bic.w	r3, r3, #32
 8005e66:	6023      	str	r3, [r4, #0]
 8005e68:	2310      	movs	r3, #16
 8005e6a:	e7a7      	b.n	8005dbc <_printf_i+0xf8>
 8005e6c:	4824      	ldr	r0, [pc, #144]	; (8005f00 <_printf_i+0x23c>)
 8005e6e:	e7e4      	b.n	8005e3a <_printf_i+0x176>
 8005e70:	4615      	mov	r5, r2
 8005e72:	e7bd      	b.n	8005df0 <_printf_i+0x12c>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	6826      	ldr	r6, [r4, #0]
 8005e78:	6961      	ldr	r1, [r4, #20]
 8005e7a:	1d18      	adds	r0, r3, #4
 8005e7c:	6028      	str	r0, [r5, #0]
 8005e7e:	0635      	lsls	r5, r6, #24
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	d501      	bpl.n	8005e88 <_printf_i+0x1c4>
 8005e84:	6019      	str	r1, [r3, #0]
 8005e86:	e002      	b.n	8005e8e <_printf_i+0x1ca>
 8005e88:	0670      	lsls	r0, r6, #25
 8005e8a:	d5fb      	bpl.n	8005e84 <_printf_i+0x1c0>
 8005e8c:	8019      	strh	r1, [r3, #0]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	6123      	str	r3, [r4, #16]
 8005e92:	4615      	mov	r5, r2
 8005e94:	e7bc      	b.n	8005e10 <_printf_i+0x14c>
 8005e96:	682b      	ldr	r3, [r5, #0]
 8005e98:	1d1a      	adds	r2, r3, #4
 8005e9a:	602a      	str	r2, [r5, #0]
 8005e9c:	681d      	ldr	r5, [r3, #0]
 8005e9e:	6862      	ldr	r2, [r4, #4]
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f7fa fa24 	bl	80002f0 <memchr>
 8005ea8:	b108      	cbz	r0, 8005eae <_printf_i+0x1ea>
 8005eaa:	1b40      	subs	r0, r0, r5
 8005eac:	6060      	str	r0, [r4, #4]
 8005eae:	6863      	ldr	r3, [r4, #4]
 8005eb0:	6123      	str	r3, [r4, #16]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb8:	e7aa      	b.n	8005e10 <_printf_i+0x14c>
 8005eba:	6923      	ldr	r3, [r4, #16]
 8005ebc:	462a      	mov	r2, r5
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	4640      	mov	r0, r8
 8005ec2:	47d0      	blx	sl
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d0ad      	beq.n	8005e24 <_printf_i+0x160>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	079b      	lsls	r3, r3, #30
 8005ecc:	d413      	bmi.n	8005ef6 <_printf_i+0x232>
 8005ece:	68e0      	ldr	r0, [r4, #12]
 8005ed0:	9b03      	ldr	r3, [sp, #12]
 8005ed2:	4298      	cmp	r0, r3
 8005ed4:	bfb8      	it	lt
 8005ed6:	4618      	movlt	r0, r3
 8005ed8:	e7a6      	b.n	8005e28 <_printf_i+0x164>
 8005eda:	2301      	movs	r3, #1
 8005edc:	4632      	mov	r2, r6
 8005ede:	4649      	mov	r1, r9
 8005ee0:	4640      	mov	r0, r8
 8005ee2:	47d0      	blx	sl
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d09d      	beq.n	8005e24 <_printf_i+0x160>
 8005ee8:	3501      	adds	r5, #1
 8005eea:	68e3      	ldr	r3, [r4, #12]
 8005eec:	9903      	ldr	r1, [sp, #12]
 8005eee:	1a5b      	subs	r3, r3, r1
 8005ef0:	42ab      	cmp	r3, r5
 8005ef2:	dcf2      	bgt.n	8005eda <_printf_i+0x216>
 8005ef4:	e7eb      	b.n	8005ece <_printf_i+0x20a>
 8005ef6:	2500      	movs	r5, #0
 8005ef8:	f104 0619 	add.w	r6, r4, #25
 8005efc:	e7f5      	b.n	8005eea <_printf_i+0x226>
 8005efe:	bf00      	nop
 8005f00:	08006061 	.word	0x08006061
 8005f04:	08006072 	.word	0x08006072

08005f08 <memmove>:
 8005f08:	4288      	cmp	r0, r1
 8005f0a:	b510      	push	{r4, lr}
 8005f0c:	eb01 0402 	add.w	r4, r1, r2
 8005f10:	d902      	bls.n	8005f18 <memmove+0x10>
 8005f12:	4284      	cmp	r4, r0
 8005f14:	4623      	mov	r3, r4
 8005f16:	d807      	bhi.n	8005f28 <memmove+0x20>
 8005f18:	1e43      	subs	r3, r0, #1
 8005f1a:	42a1      	cmp	r1, r4
 8005f1c:	d008      	beq.n	8005f30 <memmove+0x28>
 8005f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f26:	e7f8      	b.n	8005f1a <memmove+0x12>
 8005f28:	4402      	add	r2, r0
 8005f2a:	4601      	mov	r1, r0
 8005f2c:	428a      	cmp	r2, r1
 8005f2e:	d100      	bne.n	8005f32 <memmove+0x2a>
 8005f30:	bd10      	pop	{r4, pc}
 8005f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f3a:	e7f7      	b.n	8005f2c <memmove+0x24>

08005f3c <_sbrk_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d06      	ldr	r5, [pc, #24]	; (8005f58 <_sbrk_r+0x1c>)
 8005f40:	2300      	movs	r3, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	602b      	str	r3, [r5, #0]
 8005f48:	f7fa fe76 	bl	8000c38 <_sbrk>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d102      	bne.n	8005f56 <_sbrk_r+0x1a>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	b103      	cbz	r3, 8005f56 <_sbrk_r+0x1a>
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
 8005f58:	240002bc 	.word	0x240002bc

08005f5c <memcpy>:
 8005f5c:	440a      	add	r2, r1
 8005f5e:	4291      	cmp	r1, r2
 8005f60:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f64:	d100      	bne.n	8005f68 <memcpy+0xc>
 8005f66:	4770      	bx	lr
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f72:	4291      	cmp	r1, r2
 8005f74:	d1f9      	bne.n	8005f6a <memcpy+0xe>
 8005f76:	bd10      	pop	{r4, pc}

08005f78 <_realloc_r>:
 8005f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	4614      	mov	r4, r2
 8005f80:	460e      	mov	r6, r1
 8005f82:	b921      	cbnz	r1, 8005f8e <_realloc_r+0x16>
 8005f84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f88:	4611      	mov	r1, r2
 8005f8a:	f7ff bc49 	b.w	8005820 <_malloc_r>
 8005f8e:	b92a      	cbnz	r2, 8005f9c <_realloc_r+0x24>
 8005f90:	f7ff fbda 	bl	8005748 <_free_r>
 8005f94:	4625      	mov	r5, r4
 8005f96:	4628      	mov	r0, r5
 8005f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f9c:	f000 f81b 	bl	8005fd6 <_malloc_usable_size_r>
 8005fa0:	4284      	cmp	r4, r0
 8005fa2:	4607      	mov	r7, r0
 8005fa4:	d802      	bhi.n	8005fac <_realloc_r+0x34>
 8005fa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005faa:	d812      	bhi.n	8005fd2 <_realloc_r+0x5a>
 8005fac:	4621      	mov	r1, r4
 8005fae:	4640      	mov	r0, r8
 8005fb0:	f7ff fc36 	bl	8005820 <_malloc_r>
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d0ed      	beq.n	8005f96 <_realloc_r+0x1e>
 8005fba:	42bc      	cmp	r4, r7
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	bf28      	it	cs
 8005fc2:	463a      	movcs	r2, r7
 8005fc4:	f7ff ffca 	bl	8005f5c <memcpy>
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4640      	mov	r0, r8
 8005fcc:	f7ff fbbc 	bl	8005748 <_free_r>
 8005fd0:	e7e1      	b.n	8005f96 <_realloc_r+0x1e>
 8005fd2:	4635      	mov	r5, r6
 8005fd4:	e7df      	b.n	8005f96 <_realloc_r+0x1e>

08005fd6 <_malloc_usable_size_r>:
 8005fd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fda:	1f18      	subs	r0, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	bfbc      	itt	lt
 8005fe0:	580b      	ldrlt	r3, [r1, r0]
 8005fe2:	18c0      	addlt	r0, r0, r3
 8005fe4:	4770      	bx	lr
	...

08005fe8 <_init>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	bf00      	nop
 8005fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fee:	bc08      	pop	{r3}
 8005ff0:	469e      	mov	lr, r3
 8005ff2:	4770      	bx	lr

08005ff4 <_fini>:
 8005ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff6:	bf00      	nop
 8005ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffa:	bc08      	pop	{r3}
 8005ffc:	469e      	mov	lr, r3
 8005ffe:	4770      	bx	lr
