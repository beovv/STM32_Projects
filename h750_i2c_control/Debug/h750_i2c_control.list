
h750_i2c_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e40  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  080070e0  080070e0  000170e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007384  08007384  00017384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800738c  0800738c  0001738c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007390  08007390  00017390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  08007394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b0  240000b8  0800744c  000200b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000368  0800744c  00020368  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200e6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012822  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000021a1  00000000  00000000  0003294b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000d20  00000000  00000000  00034af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000a3a  00000000  00000000  00035810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003655c  00000000  00000000  0003624a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000129f6  00000000  00000000  0006c7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00158d04  00000000  00000000  0007f19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003be8  00000000  00000000  001d7ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000058  00000000  00000000  001dba88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000b8 	.word	0x240000b8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080070c8 	.word	0x080070c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000bc 	.word	0x240000bc
 80002dc:	080070c8 	.word	0x080070c8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068e:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8000692:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint8_t Buf20[20]   = {0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x1C};
 8000694:	4b61      	ldr	r3, [pc, #388]	; (800081c <main+0x190>)
 8000696:	f507 7408 	add.w	r4, r7, #544	; 0x220
 800069a:	461d      	mov	r5, r3
 800069c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a0:	682b      	ldr	r3, [r5, #0]
 80006a2:	6023      	str	r3, [r4, #0]
	uint8_t Init10[20]  = {0xB0,0x8B,0x43,0x40,0x40,0x11,0x06,0x00,0x01,0xB1,0x41,0x22,0xA9,0x41,0x22,0xFF,0xFF,0x00,0x30,0x00};
 80006a4:	4b5e      	ldr	r3, [pc, #376]	; (8000820 <main+0x194>)
 80006a6:	f507 7403 	add.w	r4, r7, #524	; 0x20c
 80006aa:	461d      	mov	r5, r3
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	682b      	ldr	r3, [r5, #0]
 80006b2:	6023      	str	r3, [r4, #0]
	uint8_t Init11[20]  = {0xB0,0x8B,0x43,0x40,0x40,0x11,0x06,0x01,0x01,0xB1,0x41,0x22,0xA9,0x41,0x22,0xFF,0xFF,0x00,0x30,0x00};
 80006b4:	4b5b      	ldr	r3, [pc, #364]	; (8000824 <main+0x198>)
 80006b6:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 80006ba:	461d      	mov	r5, r3
 80006bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c0:	682b      	ldr	r3, [r5, #0]
 80006c2:	6023      	str	r3, [r4, #0]
	uint8_t Init12[20]  = {0xB0,0x8B,0x43,0x40,0x40,0x11,0x06,0x02,0x01,0xB1,0x41,0x22,0xA9,0x41,0x22,0xFF,0xFF,0x00,0x30,0x00};
 80006c4:	4b58      	ldr	r3, [pc, #352]	; (8000828 <main+0x19c>)
 80006c6:	f507 74f2 	add.w	r4, r7, #484	; 0x1e4
 80006ca:	461d      	mov	r5, r3
 80006cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d0:	682b      	ldr	r3, [r5, #0]
 80006d2:	6023      	str	r3, [r4, #0]
	char strs[20][20] = {"POWER_CTRL","AMP_DAC_CTRL","DAC_CTRL","VOL_LEFT_CTRL","VOL_RIGHT_CTRL",
 80006d4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80006d8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80006dc:	4a53      	ldr	r2, [pc, #332]	; (800082c <main+0x1a0>)
 80006de:	4618      	mov	r0, r3
 80006e0:	4611      	mov	r1, r2
 80006e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006e6:	461a      	mov	r2, r3
 80006e8:	f006 f89e 	bl	8006828 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f000 fe2c 	bl	8001348 <HAL_Init>

  /* USER CODE BEGIN Init */
	uint8_t i = 0, ret;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	uint8_t Buf1[1];
	uint8_t Buf2[1];
	uint8_t dB10[1];
	uint8_t dB11[1];
	uint8_t dB12[1];
	char log[55] = {0,};
 80006f6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80006fa:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	3304      	adds	r3, #4
 8000704:	2233      	movs	r2, #51	; 0x33
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f006 f859 	bl	80067c0 <memset>
	//bool send_usart = 0;
	//uint16_t count = 190;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070e:	f000 fa47 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000712:	f000 fb8d 	bl	8000e30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000716:	f000 fabf 	bl	8000c98 <MX_I2C1_Init>
  MX_I2C2_Init();
 800071a:	f000 fafd 	bl	8000d18 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800071e:	f000 fb3b 	bl	8000d98 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(50);
 8000722:	2032      	movs	r0, #50	; 0x32
 8000724:	f000 fea2 	bl	800146c <HAL_Delay>
  HAL_UART_Transmit(&huart1, StartMSG1, sizeof(StartMSG1), 10000);
 8000728:	f242 7310 	movw	r3, #10000	; 0x2710
 800072c:	221f      	movs	r2, #31
 800072e:	4940      	ldr	r1, [pc, #256]	; (8000830 <main+0x1a4>)
 8000730:	4840      	ldr	r0, [pc, #256]	; (8000834 <main+0x1a8>)
 8000732:	f004 ff11 	bl	8005558 <HAL_UART_Transmit>
  for(i=16; i<19; i++)
 8000736:	2310      	movs	r3, #16
 8000738:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 800073c:	e023      	b.n	8000786 <main+0xfa>
  {
     ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 800073e:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000742:	b29b      	uxth	r3, r3
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	b299      	uxth	r1, r3
 8000748:	2305      	movs	r3, #5
 800074a:	2203      	movs	r2, #3
 800074c:	483a      	ldr	r0, [pc, #232]	; (8000838 <main+0x1ac>)
 800074e:	f001 fc0f 	bl	8001f70 <HAL_I2C_IsDeviceReady>
 8000752:	4603      	mov	r3, r0
 8000754:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
      //if (ret != HAL_OK) // No ACK Received At That Address
      //{
      //    HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
      //}
      //else if(ret == HAL_OK)
       if (ret == HAL_OK)
 8000758:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 800075c:	2b00      	cmp	r3, #0
 800075e:	d10d      	bne.n	800077c <main+0xf0>
     {
    	  sprintf(buf, "0x%X \r\n", i);
 8000760:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000764:	461a      	mov	r2, r3
 8000766:	4935      	ldr	r1, [pc, #212]	; (800083c <main+0x1b0>)
 8000768:	4835      	ldr	r0, [pc, #212]	; (8000840 <main+0x1b4>)
 800076a:	f006 f809 	bl	8006780 <siprintf>
          HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 10000);
 800076e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000772:	2208      	movs	r2, #8
 8000774:	4932      	ldr	r1, [pc, #200]	; (8000840 <main+0x1b4>)
 8000776:	482f      	ldr	r0, [pc, #188]	; (8000834 <main+0x1a8>)
 8000778:	f004 feee 	bl	8005558 <HAL_UART_Transmit>
  for(i=16; i<19; i++)
 800077c:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000780:	3301      	adds	r3, #1
 8000782:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 8000786:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800078a:	2b12      	cmp	r3, #18
 800078c:	d9d7      	bls.n	800073e <main+0xb2>
      }
  };
  HAL_UART_Transmit(&huart1, StartMSG2, sizeof(StartMSG2), 10000);
 800078e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000792:	221f      	movs	r2, #31
 8000794:	492b      	ldr	r1, [pc, #172]	; (8000844 <main+0x1b8>)
 8000796:	4827      	ldr	r0, [pc, #156]	; (8000834 <main+0x1a8>)
 8000798:	f004 fede 	bl	8005558 <HAL_UART_Transmit>
  HAL_Delay(50);
 800079c:	2032      	movs	r0, #50	; 0x32
 800079e:	f000 fe65 	bl	800146c <HAL_Delay>
  for(i=16; i<19; i++)
 80007a2:	2310      	movs	r3, #16
 80007a4:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 80007a8:	e023      	b.n	80007f2 <main+0x166>
  {
     ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 80007aa:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	b299      	uxth	r1, r3
 80007b4:	2305      	movs	r3, #5
 80007b6:	2203      	movs	r2, #3
 80007b8:	4823      	ldr	r0, [pc, #140]	; (8000848 <main+0x1bc>)
 80007ba:	f001 fbd9 	bl	8001f70 <HAL_I2C_IsDeviceReady>
 80007be:	4603      	mov	r3, r0
 80007c0:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
      //if (ret != HAL_OK) // No ACK Received At That Address
      //{
      //    HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
      //}
      //else if(ret == HAL_OK)
       if (ret == HAL_OK)
 80007c4:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10d      	bne.n	80007e8 <main+0x15c>
     {
    	  sprintf(buf, "0x%X \r\n", i);
 80007cc:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80007d0:	461a      	mov	r2, r3
 80007d2:	491a      	ldr	r1, [pc, #104]	; (800083c <main+0x1b0>)
 80007d4:	481a      	ldr	r0, [pc, #104]	; (8000840 <main+0x1b4>)
 80007d6:	f005 ffd3 	bl	8006780 <siprintf>
          HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 10000);
 80007da:	f242 7310 	movw	r3, #10000	; 0x2710
 80007de:	2208      	movs	r2, #8
 80007e0:	4917      	ldr	r1, [pc, #92]	; (8000840 <main+0x1b4>)
 80007e2:	4814      	ldr	r0, [pc, #80]	; (8000834 <main+0x1a8>)
 80007e4:	f004 feb8 	bl	8005558 <HAL_UART_Transmit>
  for(i=16; i<19; i++)
 80007e8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80007ec:	3301      	adds	r3, #1
 80007ee:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 80007f2:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80007f6:	2b12      	cmp	r3, #18
 80007f8:	d9d7      	bls.n	80007aa <main+0x11e>
      }
  };
  HAL_Delay(50);
 80007fa:	2032      	movs	r0, #50	; 0x32
 80007fc:	f000 fe36 	bl	800146c <HAL_Delay>
  HAL_UART_Transmit(&huart1, NewLine, sizeof(NewLine), 10000);
 8000800:	f242 7310 	movw	r3, #10000	; 0x2710
 8000804:	2218      	movs	r2, #24
 8000806:	4911      	ldr	r1, [pc, #68]	; (800084c <main+0x1c0>)
 8000808:	480a      	ldr	r0, [pc, #40]	; (8000834 <main+0x1a8>)
 800080a:	f004 fea5 	bl	8005558 <HAL_UART_Transmit>
  HAL_Delay(100);
 800080e:	2064      	movs	r0, #100	; 0x64
 8000810:	f000 fe2c 	bl	800146c <HAL_Delay>
  for(i=0; i<20; i++)
 8000814:	2300      	movs	r3, #0
 8000816:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 800081a:	e1b0      	b.n	8000b7e <main+0x4f2>
 800081c:	08007138 	.word	0x08007138
 8000820:	0800714c 	.word	0x0800714c
 8000824:	08007160 	.word	0x08007160
 8000828:	08007174 	.word	0x08007174
 800082c:	08007188 	.word	0x08007188
 8000830:	24000018 	.word	0x24000018
 8000834:	2400017c 	.word	0x2400017c
 8000838:	240000d4 	.word	0x240000d4
 800083c:	080070e0 	.word	0x080070e0
 8000840:	24000210 	.word	0x24000210
 8000844:	24000038 	.word	0x24000038
 8000848:	24000128 	.word	0x24000128
 800084c:	24000000 	.word	0x24000000
  {
	  dB10[0] = Init10[i]; dB11[0] = Init11[i]; dB12[0] = Init12[i];
 8000850:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000854:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000858:	443b      	add	r3, r7
 800085a:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 800085e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000862:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800086c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000870:	443b      	add	r3, r7
 8000872:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8000876:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800087a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000884:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000888:	443b      	add	r3, r7
 800088a:	f813 2c54 	ldrb.w	r2, [r3, #-84]
 800088e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000896:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, (0x10 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, dB10, 1, 100);
 8000898:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800089c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80008a0:	443b      	add	r3, r7
 80008a2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	2364      	movs	r3, #100	; 0x64
 80008aa:	9302      	str	r3, [sp, #8]
 80008ac:	2301      	movs	r3, #1
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2301      	movs	r3, #1
 80008b8:	2120      	movs	r1, #32
 80008ba:	48b4      	ldr	r0, [pc, #720]	; (8000b8c <main+0x500>)
 80008bc:	f001 f92a 	bl	8001b14 <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 80008c0:	2002      	movs	r0, #2
 80008c2:	f000 fdd3 	bl	800146c <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, (0x10 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, Buf0, 1, 100);
 80008c6:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80008ca:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80008ce:	443b      	add	r3, r7
 80008d0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	2364      	movs	r3, #100	; 0x64
 80008d8:	9302      	str	r3, [sp, #8]
 80008da:	2301      	movs	r3, #1
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2301      	movs	r3, #1
 80008e6:	2120      	movs	r1, #32
 80008e8:	48a8      	ldr	r0, [pc, #672]	; (8000b8c <main+0x500>)
 80008ea:	f001 fa27 	bl	8001d3c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Write(&hi2c1, (0x11 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, dB11, 1, 100);
 80008ee:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80008f2:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80008f6:	443b      	add	r3, r7
 80008f8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	2364      	movs	r3, #100	; 0x64
 8000900:	9302      	str	r3, [sp, #8]
 8000902:	2301      	movs	r3, #1
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2301      	movs	r3, #1
 800090e:	2122      	movs	r1, #34	; 0x22
 8000910:	489e      	ldr	r0, [pc, #632]	; (8000b8c <main+0x500>)
 8000912:	f001 f8ff 	bl	8001b14 <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 8000916:	2002      	movs	r0, #2
 8000918:	f000 fda8 	bl	800146c <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, (0x11 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, Buf1, 1, 100);
 800091c:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000920:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000924:	443b      	add	r3, r7
 8000926:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800092a:	b29a      	uxth	r2, r3
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	9302      	str	r3, [sp, #8]
 8000930:	2301      	movs	r3, #1
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2301      	movs	r3, #1
 800093c:	2122      	movs	r1, #34	; 0x22
 800093e:	4893      	ldr	r0, [pc, #588]	; (8000b8c <main+0x500>)
 8000940:	f001 f9fc 	bl	8001d3c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Write(&hi2c1, (0x12 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, dB12, 1, 100);
 8000944:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000948:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800094c:	443b      	add	r3, r7
 800094e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000952:	b29a      	uxth	r2, r3
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	9302      	str	r3, [sp, #8]
 8000958:	2301      	movs	r3, #1
 800095a:	9301      	str	r3, [sp, #4]
 800095c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	2301      	movs	r3, #1
 8000964:	2124      	movs	r1, #36	; 0x24
 8000966:	4889      	ldr	r0, [pc, #548]	; (8000b8c <main+0x500>)
 8000968:	f001 f8d4 	bl	8001b14 <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 800096c:	2002      	movs	r0, #2
 800096e:	f000 fd7d 	bl	800146c <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, (0x12 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, Buf2, 1, 100);
 8000972:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000976:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800097a:	443b      	add	r3, r7
 800097c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000980:	b29a      	uxth	r2, r3
 8000982:	2364      	movs	r3, #100	; 0x64
 8000984:	9302      	str	r3, [sp, #8]
 8000986:	2301      	movs	r3, #1
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2301      	movs	r3, #1
 8000992:	2124      	movs	r1, #36	; 0x24
 8000994:	487d      	ldr	r0, [pc, #500]	; (8000b8c <main+0x500>)
 8000996:	f001 f9d1 	bl	8001d3c <HAL_I2C_Mem_Read>
	  sprintf(log, " 0x%X 0x%X 0x%X : %s I2C1 Adrs 0x%X\r\n", Buf0[0], Buf1[0], Buf2[0], strs[i], Buf20[i]);
 800099a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800099e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461d      	mov	r5, r3
 80009a6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80009aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461e      	mov	r6, r3
 80009b2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80009b6:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461c      	mov	r4, r3
 80009be:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 80009c2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80009c6:	4613      	mov	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	440b      	add	r3, r1
 80009d0:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 80009d4:	f502 720e 	add.w	r2, r2, #568	; 0x238
 80009d8:	443a      	add	r2, r7
 80009da:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80009de:	1d38      	adds	r0, r7, #4
 80009e0:	9202      	str	r2, [sp, #8]
 80009e2:	9301      	str	r3, [sp, #4]
 80009e4:	9400      	str	r4, [sp, #0]
 80009e6:	4633      	mov	r3, r6
 80009e8:	462a      	mov	r2, r5
 80009ea:	4969      	ldr	r1, [pc, #420]	; (8000b90 <main+0x504>)
 80009ec:	f005 fec8 	bl	8006780 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)log, strlen(log), 100);
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fc74 	bl	80002e0 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	1d39      	adds	r1, r7, #4
 80009fe:	2364      	movs	r3, #100	; 0x64
 8000a00:	4864      	ldr	r0, [pc, #400]	; (8000b94 <main+0x508>)
 8000a02:	f004 fda9 	bl	8005558 <HAL_UART_Transmit>
	  HAL_I2C_Mem_Write(&hi2c2, (0x10 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, dB10, 1, 100);
 8000a06:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000a0a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000a0e:	443b      	add	r3, r7
 8000a10:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	2364      	movs	r3, #100	; 0x64
 8000a18:	9302      	str	r3, [sp, #8]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2301      	movs	r3, #1
 8000a26:	2120      	movs	r1, #32
 8000a28:	485b      	ldr	r0, [pc, #364]	; (8000b98 <main+0x50c>)
 8000a2a:	f001 f873 	bl	8001b14 <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f000 fd1c 	bl	800146c <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c2, (0x10 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, Buf0, 1, 100);
 8000a34:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000a38:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000a3c:	443b      	add	r3, r7
 8000a3e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	2364      	movs	r3, #100	; 0x64
 8000a46:	9302      	str	r3, [sp, #8]
 8000a48:	2301      	movs	r3, #1
 8000a4a:	9301      	str	r3, [sp, #4]
 8000a4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	2120      	movs	r1, #32
 8000a56:	4850      	ldr	r0, [pc, #320]	; (8000b98 <main+0x50c>)
 8000a58:	f001 f970 	bl	8001d3c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Write(&hi2c2, (0x11 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, dB11, 1, 100);
 8000a5c:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000a60:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000a64:	443b      	add	r3, r7
 8000a66:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	2364      	movs	r3, #100	; 0x64
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	2301      	movs	r3, #1
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	2122      	movs	r1, #34	; 0x22
 8000a7e:	4846      	ldr	r0, [pc, #280]	; (8000b98 <main+0x50c>)
 8000a80:	f001 f848 	bl	8001b14 <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 8000a84:	2002      	movs	r0, #2
 8000a86:	f000 fcf1 	bl	800146c <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c2, (0x11 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, Buf1, 1, 100);
 8000a8a:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000a8e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000a92:	443b      	add	r3, r7
 8000a94:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	2364      	movs	r3, #100	; 0x64
 8000a9c:	9302      	str	r3, [sp, #8]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	2122      	movs	r1, #34	; 0x22
 8000aac:	483a      	ldr	r0, [pc, #232]	; (8000b98 <main+0x50c>)
 8000aae:	f001 f945 	bl	8001d3c <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Write(&hi2c2, (0x12 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, dB12, 1, 100);
 8000ab2:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000ab6:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000aba:	443b      	add	r3, r7
 8000abc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	2364      	movs	r3, #100	; 0x64
 8000ac4:	9302      	str	r3, [sp, #8]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	2124      	movs	r1, #36	; 0x24
 8000ad4:	4830      	ldr	r0, [pc, #192]	; (8000b98 <main+0x50c>)
 8000ad6:	f001 f81d 	bl	8001b14 <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 8000ada:	2002      	movs	r0, #2
 8000adc:	f000 fcc6 	bl	800146c <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c2, (0x12 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, Buf2, 1, 100);
 8000ae0:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000ae4:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000ae8:	443b      	add	r3, r7
 8000aea:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	2364      	movs	r3, #100	; 0x64
 8000af2:	9302      	str	r3, [sp, #8]
 8000af4:	2301      	movs	r3, #1
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2301      	movs	r3, #1
 8000b00:	2124      	movs	r1, #36	; 0x24
 8000b02:	4825      	ldr	r0, [pc, #148]	; (8000b98 <main+0x50c>)
 8000b04:	f001 f91a 	bl	8001d3c <HAL_I2C_Mem_Read>
	  sprintf(log, " 0x%X 0x%X 0x%X : %s I2C2 Adrs 0x%X\r\n", Buf0[0], Buf1[0], Buf2[0], strs[i], Buf20[i]);
 8000b08:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000b0c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461d      	mov	r5, r3
 8000b14:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000b18:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	461e      	mov	r6, r3
 8000b20:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000b24:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461c      	mov	r4, r3
 8000b2c:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 8000b30:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000b34:	4613      	mov	r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4413      	add	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 8000b42:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8000b46:	443a      	add	r2, r7
 8000b48:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8000b4c:	1d38      	adds	r0, r7, #4
 8000b4e:	9202      	str	r2, [sp, #8]
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	9400      	str	r4, [sp, #0]
 8000b54:	4633      	mov	r3, r6
 8000b56:	462a      	mov	r2, r5
 8000b58:	4910      	ldr	r1, [pc, #64]	; (8000b9c <main+0x510>)
 8000b5a:	f005 fe11 	bl	8006780 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)log, strlen(log), 100);
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fbbd 	bl	80002e0 <strlen>
 8000b66:	4603      	mov	r3, r0
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	1d39      	adds	r1, r7, #4
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	4809      	ldr	r0, [pc, #36]	; (8000b94 <main+0x508>)
 8000b70:	f004 fcf2 	bl	8005558 <HAL_UART_Transmit>
  for(i=0; i<20; i++)
 8000b74:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000b78:	3301      	adds	r3, #1
 8000b7a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 8000b7e:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000b82:	2b13      	cmp	r3, #19
 8000b84:	f67f ae64 	bls.w	8000850 <main+0x1c4>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <main+0x4fc>
 8000b8a:	bf00      	nop
 8000b8c:	240000d4 	.word	0x240000d4
 8000b90:	080070e8 	.word	0x080070e8
 8000b94:	2400017c 	.word	0x2400017c
 8000b98:	24000128 	.word	0x24000128
 8000b9c:	08007110 	.word	0x08007110

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b09c      	sub	sp, #112	; 0x70
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	224c      	movs	r2, #76	; 0x4c
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f005 fe06 	bl	80067c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f005 fe00 	bl	80067c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f001 fe2d 	bl	8002820 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b31      	ldr	r3, [pc, #196]	; (8000c90 <SystemClock_Config+0xf0>)
 8000bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bce:	4a30      	ldr	r2, [pc, #192]	; (8000c90 <SystemClock_Config+0xf0>)
 8000bd0:	f023 0301 	bic.w	r3, r3, #1
 8000bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bd6:	4b2e      	ldr	r3, [pc, #184]	; (8000c90 <SystemClock_Config+0xf0>)
 8000bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <SystemClock_Config+0xf4>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000be8:	4a2a      	ldr	r2, [pc, #168]	; (8000c94 <SystemClock_Config+0xf4>)
 8000bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <SystemClock_Config+0xf4>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bfc:	bf00      	nop
 8000bfe:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <SystemClock_Config+0xf4>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c0a:	d1f8      	bne.n	8000bfe <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c16:	2302      	movs	r3, #2
 8000c18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000c22:	2320      	movs	r3, #32
 8000c24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c32:	230c      	movs	r3, #12
 8000c34:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fe26 	bl	8002894 <HAL_RCC_OscConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000c4e:	f000 f927 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c52:	233f      	movs	r3, #63	; 0x3f
 8000c54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c56:	2303      	movs	r3, #3
 8000c58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c62:	2340      	movs	r3, #64	; 0x40
 8000c64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000c66:	2350      	movs	r3, #80	; 0x50
 8000c68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000c6a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000c6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c70:	2340      	movs	r3, #64	; 0x40
 8000c72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2104      	movs	r1, #4
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fa65 	bl	8003148 <HAL_RCC_ClockConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000c84:	f000 f90c 	bl	8000ea0 <Error_Handler>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3770      	adds	r7, #112	; 0x70
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	58000400 	.word	0x58000400
 8000c94:	58024800 	.word	0x58024800

08000c98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000c9e:	4a1c      	ldr	r2, [pc, #112]	; (8000d10 <MX_I2C1_Init+0x78>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <MX_I2C1_Init+0x7c>)
 8000ca6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd2:	480e      	ldr	r0, [pc, #56]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cd4:	f000 fe8e 	bl	80019f4 <HAL_I2C_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cde:	f000 f8df 	bl	8000ea0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4809      	ldr	r0, [pc, #36]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000ce6:	f001 fd03 	bl	80026f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cf0:	f000 f8d6 	bl	8000ea0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_I2C1_Init+0x74>)
 8000cf8:	f001 fd45 	bl	8002786 <HAL_I2CEx_ConfigDigitalFilter>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d02:	f000 f8cd 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	240000d4 	.word	0x240000d4
 8000d10:	40005400 	.word	0x40005400
 8000d14:	00c0eaff 	.word	0x00c0eaff

08000d18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <MX_I2C2_Init+0x78>)
 8000d20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d24:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <MX_I2C2_Init+0x7c>)
 8000d26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d52:	480e      	ldr	r0, [pc, #56]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d54:	f000 fe4e 	bl	80019f4 <HAL_I2C_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d5e:	f000 f89f 	bl	8000ea0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d62:	2100      	movs	r1, #0
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d66:	f001 fcc3 	bl	80026f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d70:	f000 f896 	bl	8000ea0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d78:	f001 fd05 	bl	8002786 <HAL_I2CEx_ConfigDigitalFilter>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f000 f88d 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	24000128 	.word	0x24000128
 8000d90:	40005800 	.word	0x40005800
 8000d94:	00c0eaff 	.word	0x00c0eaff

08000d98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000d9e:	4a23      	ldr	r2, [pc, #140]	; (8000e2c <MX_USART1_UART_Init+0x94>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000de0:	4811      	ldr	r0, [pc, #68]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000de2:	f004 fb69 	bl	80054b8 <HAL_UART_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000dec:	f000 f858 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df0:	2100      	movs	r1, #0
 8000df2:	480d      	ldr	r0, [pc, #52]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000df4:	f005 fbf9 	bl	80065ea <HAL_UARTEx_SetTxFifoThreshold>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dfe:	f000 f84f 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4808      	ldr	r0, [pc, #32]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000e06:	f005 fc2e 	bl	8006666 <HAL_UARTEx_SetRxFifoThreshold>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e10:	f000 f846 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_USART1_UART_Init+0x90>)
 8000e16:	f005 fbaf 	bl	8006578 <HAL_UARTEx_DisableFifoMode>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e20:	f000 f83e 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2400017c 	.word	0x2400017c
 8000e2c:	40011000 	.word	0x40011000

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_GPIO_Init+0x6c>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <MX_GPIO_Init+0x6c>)
 8000e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_GPIO_Init+0x6c>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_GPIO_Init+0x6c>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <MX_GPIO_Init+0x6c>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <MX_GPIO_Init+0x6c>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_GPIO_Init+0x6c>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <MX_GPIO_Init+0x6c>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_GPIO_Init+0x6c>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	58024400 	.word	0x58024400

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <Error_Handler+0x8>
	...

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_MspInit+0x30>)
 8000eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb8:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_MspInit+0x30>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_MspInit+0x30>)
 8000ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	58024400 	.word	0x58024400

08000ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b0bc      	sub	sp, #240	; 0xf0
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef8:	f107 0318 	add.w	r3, r7, #24
 8000efc:	22c0      	movs	r2, #192	; 0xc0
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f005 fc5d 	bl	80067c0 <memset>
  if(hi2c->Instance==I2C1)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a4d      	ldr	r2, [pc, #308]	; (8001040 <HAL_I2C_MspInit+0x160>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d147      	bne.n	8000fa0 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f10:	f04f 0208 	mov.w	r2, #8
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f22:	f107 0318 	add.w	r3, r7, #24
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 fc9a 	bl	8003860 <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000f32:	f7ff ffb5 	bl	8000ea0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b43      	ldr	r3, [pc, #268]	; (8001044 <HAL_I2C_MspInit+0x164>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	4a41      	ldr	r2, [pc, #260]	; (8001044 <HAL_I2C_MspInit+0x164>)
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f46:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <HAL_I2C_MspInit+0x164>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5c:	2312      	movs	r3, #18
 8000f5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4833      	ldr	r0, [pc, #204]	; (8001048 <HAL_I2C_MspInit+0x168>)
 8000f7c:	f000 fb8a 	bl	8001694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <HAL_I2C_MspInit+0x164>)
 8000f82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f86:	4a2f      	ldr	r2, [pc, #188]	; (8001044 <HAL_I2C_MspInit+0x164>)
 8000f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f90:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <HAL_I2C_MspInit+0x164>)
 8000f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f9e:	e04b      	b.n	8001038 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a29      	ldr	r2, [pc, #164]	; (800104c <HAL_I2C_MspInit+0x16c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d146      	bne.n	8001038 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000faa:	f04f 0208 	mov.w	r2, #8
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 fc4d 	bl	8003860 <HAL_RCCEx_PeriphCLKConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8000fcc:	f7ff ff68 	bl	8000ea0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <HAL_I2C_MspInit+0x164>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd6:	4a1b      	ldr	r2, [pc, #108]	; (8001044 <HAL_I2C_MspInit+0x164>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_I2C_MspInit+0x164>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff6:	2312      	movs	r3, #18
 8000ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001008:	2304      	movs	r3, #4
 800100a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <HAL_I2C_MspInit+0x168>)
 8001016:	f000 fb3d 	bl	8001694 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_I2C_MspInit+0x164>)
 800101c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001020:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_I2C_MspInit+0x164>)
 8001022:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001026:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_I2C_MspInit+0x164>)
 800102c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
}
 8001038:	bf00      	nop
 800103a:	37f0      	adds	r7, #240	; 0xf0
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40005400 	.word	0x40005400
 8001044:	58024400 	.word	0x58024400
 8001048:	58020400 	.word	0x58020400
 800104c:	40005800 	.word	0x40005800

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0ba      	sub	sp, #232	; 0xe8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	22c0      	movs	r2, #192	; 0xc0
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f005 fba5 	bl	80067c0 <memset>
  if(huart->Instance==USART1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a27      	ldr	r2, [pc, #156]	; (8001118 <HAL_UART_MspInit+0xc8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d146      	bne.n	800110e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001080:	f04f 0201 	mov.w	r2, #1
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	4618      	mov	r0, r3
 8001098:	f002 fbe2 	bl	8003860 <HAL_RCCEx_PeriphCLKConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010a2:	f7ff fefd 	bl	8000ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <HAL_UART_MspInit+0xcc>)
 80010a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010ac:	4a1b      	ldr	r2, [pc, #108]	; (800111c <HAL_UART_MspInit+0xcc>)
 80010ae:	f043 0310 	orr.w	r3, r3, #16
 80010b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_UART_MspInit+0xcc>)
 80010b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010bc:	f003 0310 	and.w	r3, r3, #16
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_UART_MspInit+0xcc>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_UART_MspInit+0xcc>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_UART_MspInit+0xcc>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010fc:	2307      	movs	r3, #7
 80010fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_UART_MspInit+0xd0>)
 800110a:	f000 fac3 	bl	8001694 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	37e8      	adds	r7, #232	; 0xe8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40011000 	.word	0x40011000
 800111c:	58024400 	.word	0x58024400
 8001120:	58020000 	.word	0x58020000

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001128:	e7fe      	b.n	8001128 <NMI_Handler+0x4>

0800112a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <MemManage_Handler+0x4>

08001136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <UsageFault_Handler+0x4>

08001142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001170:	f000 f95c 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a8:	f005 fb12 	bl	80067d0 <__errno>
 80011ac:	4603      	mov	r3, r0
 80011ae:	220c      	movs	r2, #12
 80011b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <_sbrk+0x64>)
 80011c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	24080000 	.word	0x24080000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	24000218 	.word	0x24000218
 80011e0:	24000368 	.word	0x24000368

080011e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011e8:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <SystemInit+0xe4>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ee:	4a36      	ldr	r2, [pc, #216]	; (80012c8 <SystemInit+0xe4>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011f8:	4b34      	ldr	r3, [pc, #208]	; (80012cc <SystemInit+0xe8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	2b06      	cmp	r3, #6
 8001202:	d807      	bhi.n	8001214 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <SystemInit+0xe8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f023 030f 	bic.w	r3, r3, #15
 800120c:	4a2f      	ldr	r2, [pc, #188]	; (80012cc <SystemInit+0xe8>)
 800120e:	f043 0307 	orr.w	r3, r3, #7
 8001212:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001214:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <SystemInit+0xec>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <SystemInit+0xec>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001220:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <SystemInit+0xec>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <SystemInit+0xec>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4929      	ldr	r1, [pc, #164]	; (80012d0 <SystemInit+0xec>)
 800122c:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <SystemInit+0xf0>)
 800122e:	4013      	ands	r3, r2
 8001230:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <SystemInit+0xe8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d007      	beq.n	800124e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <SystemInit+0xe8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 030f 	bic.w	r3, r3, #15
 8001246:	4a21      	ldr	r2, [pc, #132]	; (80012cc <SystemInit+0xe8>)
 8001248:	f043 0307 	orr.w	r3, r3, #7
 800124c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <SystemInit+0xec>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <SystemInit+0xec>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <SystemInit+0xec>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <SystemInit+0xec>)
 8001262:	4a1d      	ldr	r2, [pc, #116]	; (80012d8 <SystemInit+0xf4>)
 8001264:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <SystemInit+0xec>)
 8001268:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <SystemInit+0xf8>)
 800126a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <SystemInit+0xec>)
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <SystemInit+0xfc>)
 8001270:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <SystemInit+0xec>)
 8001274:	2200      	movs	r2, #0
 8001276:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <SystemInit+0xec>)
 800127a:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <SystemInit+0xfc>)
 800127c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <SystemInit+0xec>)
 8001280:	2200      	movs	r2, #0
 8001282:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <SystemInit+0xec>)
 8001286:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <SystemInit+0xfc>)
 8001288:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <SystemInit+0xec>)
 800128c:	2200      	movs	r2, #0
 800128e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <SystemInit+0xec>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <SystemInit+0xec>)
 8001296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <SystemInit+0xec>)
 800129e:	2200      	movs	r2, #0
 80012a0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <SystemInit+0x100>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <SystemInit+0x104>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012ae:	d202      	bcs.n	80012b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <SystemInit+0x108>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <SystemInit+0x10c>)
 80012b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012bc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00
 80012cc:	52002000 	.word	0x52002000
 80012d0:	58024400 	.word	0x58024400
 80012d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80012d8:	02020200 	.word	0x02020200
 80012dc:	01ff0000 	.word	0x01ff0000
 80012e0:	01010280 	.word	0x01010280
 80012e4:	5c001000 	.word	0x5c001000
 80012e8:	ffff0000 	.word	0xffff0000
 80012ec:	51008108 	.word	0x51008108
 80012f0:	52004000 	.word	0x52004000

080012f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800132c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012f8:	f7ff ff74 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012fe:	490d      	ldr	r1, [pc, #52]	; (8001334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001314:	4c0a      	ldr	r4, [pc, #40]	; (8001340 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001322:	f005 fa5b 	bl	80067dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001326:	f7ff f9b1 	bl	800068c <main>
  bx  lr
 800132a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800132c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001330:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001334:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 8001338:	08007394 	.word	0x08007394
  ldr r2, =_sbss
 800133c:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 8001340:	24000368 	.word	0x24000368

08001344 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC3_IRQHandler>
	...

08001348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134e:	2003      	movs	r0, #3
 8001350:	f000 f96e 	bl	8001630 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001354:	f002 f8ae 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 8001358:	4602      	mov	r2, r0
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_Init+0x68>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	0a1b      	lsrs	r3, r3, #8
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	4913      	ldr	r1, [pc, #76]	; (80013b4 <HAL_Init+0x6c>)
 8001366:	5ccb      	ldrb	r3, [r1, r3]
 8001368:	f003 031f 	and.w	r3, r3, #31
 800136c:	fa22 f303 	lsr.w	r3, r2, r3
 8001370:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <HAL_Init+0x68>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_Init+0x6c>)
 800137c:	5cd3      	ldrb	r3, [r2, r3]
 800137e:	f003 031f 	and.w	r3, r3, #31
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <HAL_Init+0x70>)
 800138a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <HAL_Init+0x74>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001392:	200f      	movs	r0, #15
 8001394:	f000 f814 	bl	80013c0 <HAL_InitTick>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e002      	b.n	80013a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013a2:	f7ff fd83 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	58024400 	.word	0x58024400
 80013b4:	08007318 	.word	0x08007318
 80013b8:	2400005c 	.word	0x2400005c
 80013bc:	24000058 	.word	0x24000058

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_InitTick+0x60>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e021      	b.n	8001418 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_InitTick+0x64>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_InitTick+0x60>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f945 	bl	800167a <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00e      	b.n	8001418 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d80a      	bhi.n	8001416 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f000 f91d 	bl	8001646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800140c:	4a06      	ldr	r2, [pc, #24]	; (8001428 <HAL_InitTick+0x68>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	24000064 	.word	0x24000064
 8001424:	24000058 	.word	0x24000058
 8001428:	24000060 	.word	0x24000060

0800142c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x20>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x24>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_IncTick+0x24>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	24000064 	.word	0x24000064
 8001450:	2400021c 	.word	0x2400021c

08001454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_GetTick+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	2400021c 	.word	0x2400021c

0800146c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001474:	f7ff ffee 	bl	8001454 <HAL_GetTick>
 8001478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d005      	beq.n	8001492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_Delay+0x44>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001492:	bf00      	nop
 8001494:	f7ff ffde 	bl	8001454 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8f7      	bhi.n	8001494 <HAL_Delay+0x28>
  {
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	24000064 	.word	0x24000064

080014b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_GetREVID+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0c1b      	lsrs	r3, r3, #16
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	5c001000 	.word	0x5c001000

080014cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <__NVIC_SetPriorityGrouping+0x40>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <__NVIC_SetPriorityGrouping+0x40>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	05fa0000 	.word	0x05fa0000

08001514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <__NVIC_GetPriorityGrouping+0x18>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	f003 0307 	and.w	r3, r3, #7
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800153c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db0a      	blt.n	800155a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	490c      	ldr	r1, [pc, #48]	; (800157c <__NVIC_SetPriority+0x4c>)
 800154a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	440b      	add	r3, r1
 8001554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001558:	e00a      	b.n	8001570 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4908      	ldr	r1, [pc, #32]	; (8001580 <__NVIC_SetPriority+0x50>)
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3b04      	subs	r3, #4
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	440b      	add	r3, r1
 800156e:	761a      	strb	r2, [r3, #24]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f1c3 0307 	rsb	r3, r3, #7
 800159e:	2b04      	cmp	r3, #4
 80015a0:	bf28      	it	cs
 80015a2:	2304      	movcs	r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3304      	adds	r3, #4
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d902      	bls.n	80015b4 <NVIC_EncodePriority+0x30>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3b03      	subs	r3, #3
 80015b2:	e000      	b.n	80015b6 <NVIC_EncodePriority+0x32>
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43d9      	mvns	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	4313      	orrs	r3, r2
         );
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3724      	adds	r7, #36	; 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015fc:	d301      	bcc.n	8001602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fe:	2301      	movs	r3, #1
 8001600:	e00f      	b.n	8001622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <SysTick_Config+0x40>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160a:	210f      	movs	r1, #15
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f7ff ff8e 	bl	8001530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <SysTick_Config+0x40>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <SysTick_Config+0x40>)
 800161c:	2207      	movs	r2, #7
 800161e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	e000e010 	.word	0xe000e010

08001630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff47 	bl	80014cc <__NVIC_SetPriorityGrouping>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001654:	f7ff ff5e 	bl	8001514 <__NVIC_GetPriorityGrouping>
 8001658:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f7ff ff90 	bl	8001584 <NVIC_EncodePriority>
 8001664:	4602      	mov	r2, r0
 8001666:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff5f 	bl	8001530 <__NVIC_SetPriority>
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffb2 	bl	80015ec <SysTick_Config>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016a2:	4b89      	ldr	r3, [pc, #548]	; (80018c8 <HAL_GPIO_Init+0x234>)
 80016a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016a6:	e194      	b.n	80019d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2101      	movs	r1, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8186 	beq.w	80019cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d005      	beq.n	80016d8 <HAL_GPIO_Init+0x44>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d130      	bne.n	800173a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800170e:	2201      	movs	r2, #1
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	091b      	lsrs	r3, r3, #4
 8001724:	f003 0201 	and.w	r2, r3, #1
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b03      	cmp	r3, #3
 8001744:	d017      	beq.n	8001776 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	2203      	movs	r2, #3
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d123      	bne.n	80017ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	69b9      	ldr	r1, [r7, #24]
 80017c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0203 	and.w	r2, r3, #3
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80e0 	beq.w	80019cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180c:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <HAL_GPIO_Init+0x238>)
 800180e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001812:	4a2e      	ldr	r2, [pc, #184]	; (80018cc <HAL_GPIO_Init+0x238>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800181c:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_GPIO_Init+0x238>)
 800181e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800182a:	4a29      	ldr	r2, [pc, #164]	; (80018d0 <HAL_GPIO_Init+0x23c>)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3302      	adds	r3, #2
 8001832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	220f      	movs	r2, #15
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a20      	ldr	r2, [pc, #128]	; (80018d4 <HAL_GPIO_Init+0x240>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d052      	beq.n	80018fc <HAL_GPIO_Init+0x268>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <HAL_GPIO_Init+0x244>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d031      	beq.n	80018c2 <HAL_GPIO_Init+0x22e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <HAL_GPIO_Init+0x248>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d02b      	beq.n	80018be <HAL_GPIO_Init+0x22a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <HAL_GPIO_Init+0x24c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d025      	beq.n	80018ba <HAL_GPIO_Init+0x226>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <HAL_GPIO_Init+0x250>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d01f      	beq.n	80018b6 <HAL_GPIO_Init+0x222>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <HAL_GPIO_Init+0x254>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d019      	beq.n	80018b2 <HAL_GPIO_Init+0x21e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a1a      	ldr	r2, [pc, #104]	; (80018ec <HAL_GPIO_Init+0x258>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_GPIO_Init+0x21a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <HAL_GPIO_Init+0x25c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d00d      	beq.n	80018aa <HAL_GPIO_Init+0x216>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <HAL_GPIO_Init+0x260>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d007      	beq.n	80018a6 <HAL_GPIO_Init+0x212>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a17      	ldr	r2, [pc, #92]	; (80018f8 <HAL_GPIO_Init+0x264>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d101      	bne.n	80018a2 <HAL_GPIO_Init+0x20e>
 800189e:	2309      	movs	r3, #9
 80018a0:	e02d      	b.n	80018fe <HAL_GPIO_Init+0x26a>
 80018a2:	230a      	movs	r3, #10
 80018a4:	e02b      	b.n	80018fe <HAL_GPIO_Init+0x26a>
 80018a6:	2308      	movs	r3, #8
 80018a8:	e029      	b.n	80018fe <HAL_GPIO_Init+0x26a>
 80018aa:	2307      	movs	r3, #7
 80018ac:	e027      	b.n	80018fe <HAL_GPIO_Init+0x26a>
 80018ae:	2306      	movs	r3, #6
 80018b0:	e025      	b.n	80018fe <HAL_GPIO_Init+0x26a>
 80018b2:	2305      	movs	r3, #5
 80018b4:	e023      	b.n	80018fe <HAL_GPIO_Init+0x26a>
 80018b6:	2304      	movs	r3, #4
 80018b8:	e021      	b.n	80018fe <HAL_GPIO_Init+0x26a>
 80018ba:	2303      	movs	r3, #3
 80018bc:	e01f      	b.n	80018fe <HAL_GPIO_Init+0x26a>
 80018be:	2302      	movs	r3, #2
 80018c0:	e01d      	b.n	80018fe <HAL_GPIO_Init+0x26a>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e01b      	b.n	80018fe <HAL_GPIO_Init+0x26a>
 80018c6:	bf00      	nop
 80018c8:	58000080 	.word	0x58000080
 80018cc:	58024400 	.word	0x58024400
 80018d0:	58000400 	.word	0x58000400
 80018d4:	58020000 	.word	0x58020000
 80018d8:	58020400 	.word	0x58020400
 80018dc:	58020800 	.word	0x58020800
 80018e0:	58020c00 	.word	0x58020c00
 80018e4:	58021000 	.word	0x58021000
 80018e8:	58021400 	.word	0x58021400
 80018ec:	58021800 	.word	0x58021800
 80018f0:	58021c00 	.word	0x58021c00
 80018f4:	58022000 	.word	0x58022000
 80018f8:	58022400 	.word	0x58022400
 80018fc:	2300      	movs	r3, #0
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	f002 0203 	and.w	r2, r2, #3
 8001904:	0092      	lsls	r2, r2, #2
 8001906:	4093      	lsls	r3, r2
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800190e:	4938      	ldr	r1, [pc, #224]	; (80019f0 <HAL_GPIO_Init+0x35c>)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	3302      	adds	r3, #2
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800191c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800194a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	3301      	adds	r3, #1
 80019d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa22 f303 	lsr.w	r3, r2, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f47f ae63 	bne.w	80016a8 <HAL_GPIO_Init+0x14>
  }
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3724      	adds	r7, #36	; 0x24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	58000400 	.word	0x58000400

080019f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e07f      	b.n	8001b06 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d106      	bne.n	8001a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fa60 	bl	8000ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2224      	movs	r2, #36	; 0x24
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0201 	bic.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d107      	bne.n	8001a6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	e006      	b.n	8001a7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d104      	bne.n	8001a8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <HAL_I2C_Init+0x11c>)
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69d9      	ldr	r1, [r3, #28]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1a      	ldr	r2, [r3, #32]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2220      	movs	r2, #32
 8001af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	02008000 	.word	0x02008000

08001b14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	4608      	mov	r0, r1
 8001b1e:	4611      	mov	r1, r2
 8001b20:	461a      	mov	r2, r3
 8001b22:	4603      	mov	r3, r0
 8001b24:	817b      	strh	r3, [r7, #10]
 8001b26:	460b      	mov	r3, r1
 8001b28:	813b      	strh	r3, [r7, #8]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b20      	cmp	r3, #32
 8001b38:	f040 80f9 	bne.w	8001d2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <HAL_I2C_Mem_Write+0x34>
 8001b42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0ed      	b.n	8001d30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_I2C_Mem_Write+0x4e>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e0e6      	b.n	8001d30 <HAL_I2C_Mem_Write+0x21c>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b6a:	f7ff fc73 	bl	8001454 <HAL_GetTick>
 8001b6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2319      	movs	r3, #25
 8001b76:	2201      	movs	r2, #1
 8001b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 fbcb 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0d1      	b.n	8001d30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2221      	movs	r2, #33	; 0x21
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2240      	movs	r2, #64	; 0x40
 8001b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a3a      	ldr	r2, [r7, #32]
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bb4:	88f8      	ldrh	r0, [r7, #6]
 8001bb6:	893a      	ldrh	r2, [r7, #8]
 8001bb8:	8979      	ldrh	r1, [r7, #10]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 fadb 	bl	8002180 <I2C_RequestMemoryWrite>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0a9      	b.n	8001d30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2bff      	cmp	r3, #255	; 0xff
 8001be4:	d90e      	bls.n	8001c04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	22ff      	movs	r2, #255	; 0xff
 8001bea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	8979      	ldrh	r1, [r7, #10]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 fd45 	bl	800268c <I2C_TransferConfig>
 8001c02:	e00f      	b.n	8001c24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	8979      	ldrh	r1, [r7, #10]
 8001c16:	2300      	movs	r3, #0
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 fd34 	bl	800268c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 fbc4 	bl	80023b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e07b      	b.n	8001d30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	781a      	ldrb	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d034      	beq.n	8001cdc <HAL_I2C_Mem_Write+0x1c8>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d130      	bne.n	8001cdc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	2200      	movs	r2, #0
 8001c82:	2180      	movs	r1, #128	; 0x80
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 fb47 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e04d      	b.n	8001d30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2bff      	cmp	r3, #255	; 0xff
 8001c9c:	d90e      	bls.n	8001cbc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	22ff      	movs	r2, #255	; 0xff
 8001ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	8979      	ldrh	r1, [r7, #10]
 8001cac:	2300      	movs	r3, #0
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 fce9 	bl	800268c <I2C_TransferConfig>
 8001cba:	e00f      	b.n	8001cdc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	8979      	ldrh	r1, [r7, #10]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 fcd8 	bl	800268c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d19e      	bne.n	8001c24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 fbaa 	bl	8002444 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e01a      	b.n	8001d30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_I2C_Mem_Write+0x224>)
 8001d0e:	400b      	ands	r3, r1
 8001d10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e000      	b.n	8001d30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001d2e:	2302      	movs	r3, #2
  }
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	fe00e800 	.word	0xfe00e800

08001d3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	817b      	strh	r3, [r7, #10]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	813b      	strh	r3, [r7, #8]
 8001d52:	4613      	mov	r3, r2
 8001d54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b20      	cmp	r3, #32
 8001d60:	f040 80fd 	bne.w	8001f5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_I2C_Mem_Read+0x34>
 8001d6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0f1      	b.n	8001f60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_I2C_Mem_Read+0x4e>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e0ea      	b.n	8001f60 <HAL_I2C_Mem_Read+0x224>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d92:	f7ff fb5f 	bl	8001454 <HAL_GetTick>
 8001d96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2319      	movs	r3, #25
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 fab7 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0d5      	b.n	8001f60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2222      	movs	r2, #34	; 0x22
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2240      	movs	r2, #64	; 0x40
 8001dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a3a      	ldr	r2, [r7, #32]
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ddc:	88f8      	ldrh	r0, [r7, #6]
 8001dde:	893a      	ldrh	r2, [r7, #8]
 8001de0:	8979      	ldrh	r1, [r7, #10]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	4603      	mov	r3, r0
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 fa1b 	bl	8002228 <I2C_RequestMemoryRead>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0ad      	b.n	8001f60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	2bff      	cmp	r3, #255	; 0xff
 8001e0c:	d90e      	bls.n	8001e2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	22ff      	movs	r2, #255	; 0xff
 8001e12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	8979      	ldrh	r1, [r7, #10]
 8001e1c:	4b52      	ldr	r3, [pc, #328]	; (8001f68 <HAL_I2C_Mem_Read+0x22c>)
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 fc31 	bl	800268c <I2C_TransferConfig>
 8001e2a:	e00f      	b.n	8001e4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	8979      	ldrh	r1, [r7, #10]
 8001e3e:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <HAL_I2C_Mem_Read+0x22c>)
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 fc20 	bl	800268c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e52:	2200      	movs	r2, #0
 8001e54:	2104      	movs	r1, #4
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fa5e 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e07c      	b.n	8001f60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d034      	beq.n	8001f0c <HAL_I2C_Mem_Read+0x1d0>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d130      	bne.n	8001f0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2180      	movs	r1, #128	; 0x80
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 fa2f 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e04d      	b.n	8001f60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2bff      	cmp	r3, #255	; 0xff
 8001ecc:	d90e      	bls.n	8001eec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	22ff      	movs	r2, #255	; 0xff
 8001ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	8979      	ldrh	r1, [r7, #10]
 8001edc:	2300      	movs	r3, #0
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 fbd1 	bl	800268c <I2C_TransferConfig>
 8001eea:	e00f      	b.n	8001f0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	8979      	ldrh	r1, [r7, #10]
 8001efe:	2300      	movs	r3, #0
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 fbc0 	bl	800268c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d19a      	bne.n	8001e4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 fa92 	bl	8002444 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e01a      	b.n	8001f60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_I2C_Mem_Read+0x230>)
 8001f3e:	400b      	ands	r3, r1
 8001f40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e000      	b.n	8001f60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001f5e:	2302      	movs	r3, #2
  }
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	80002400 	.word	0x80002400
 8001f6c:	fe00e800 	.word	0xfe00e800

08001f70 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	f040 80ef 	bne.w	8002170 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fa0:	d101      	bne.n	8001fa6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e0e5      	b.n	8002172 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_I2C_IsDeviceReady+0x44>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e0de      	b.n	8002172 <HAL_I2C_IsDeviceReady+0x202>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2224      	movs	r2, #36	; 0x24
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d105      	bne.n	8001fde <HAL_I2C_IsDeviceReady+0x6e>
 8001fd2:	897b      	ldrh	r3, [r7, #10]
 8001fd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fd8:	4b68      	ldr	r3, [pc, #416]	; (800217c <HAL_I2C_IsDeviceReady+0x20c>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	e004      	b.n	8001fe8 <HAL_I2C_IsDeviceReady+0x78>
 8001fde:	897b      	ldrh	r3, [r7, #10]
 8001fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001fee:	f7ff fa31 	bl	8001454 <HAL_GetTick>
 8001ff2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b20      	cmp	r3, #32
 8002000:	bf0c      	ite	eq
 8002002:	2301      	moveq	r3, #1
 8002004:	2300      	movne	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b10      	cmp	r3, #16
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002020:	e034      	b.n	800208c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d01a      	beq.n	8002060 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800202a:	f7ff fa13 	bl	8001454 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d302      	bcc.n	8002040 <HAL_I2C_IsDeviceReady+0xd0>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10f      	bne.n	8002060 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e088      	b.n	8002172 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b20      	cmp	r3, #32
 800206c:	bf0c      	ite	eq
 800206e:	2301      	moveq	r3, #1
 8002070:	2300      	movne	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b10      	cmp	r3, #16
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800208c:	7ffb      	ldrb	r3, [r7, #31]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <HAL_I2C_IsDeviceReady+0x128>
 8002092:	7fbb      	ldrb	r3, [r7, #30]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0c4      	beq.n	8002022 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d01a      	beq.n	80020dc <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	2120      	movs	r1, #32
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f931 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e058      	b.n	8002172 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2220      	movs	r2, #32
 80020c6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	e04a      	b.n	8002172 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2200      	movs	r2, #0
 80020e4:	2120      	movs	r1, #32
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f916 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e03d      	b.n	8002172 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2210      	movs	r2, #16
 80020fc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2220      	movs	r2, #32
 8002104:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d118      	bne.n	8002140 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800211c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	2120      	movs	r1, #32
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 f8f5 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e01c      	b.n	8002172 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2220      	movs	r2, #32
 800213e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	f63f af3d 	bhi.w	8001fca <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	f043 0220 	orr.w	r2, r3, #32
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002170:	2302      	movs	r3, #2
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	02002000 	.word	0x02002000

08002180 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4603      	mov	r3, r0
 8002190:	817b      	strh	r3, [r7, #10]
 8002192:	460b      	mov	r3, r1
 8002194:	813b      	strh	r3, [r7, #8]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	8979      	ldrh	r1, [r7, #10]
 80021a0:	4b20      	ldr	r3, [pc, #128]	; (8002224 <I2C_RequestMemoryWrite+0xa4>)
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fa6f 	bl	800268c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	69b9      	ldr	r1, [r7, #24]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f8ff 	bl	80023b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e02c      	b.n	800221c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021c8:	893b      	ldrh	r3, [r7, #8]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
 80021d2:	e015      	b.n	8002200 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021d4:	893b      	ldrh	r3, [r7, #8]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	b29b      	uxth	r3, r3
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	69b9      	ldr	r1, [r7, #24]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f8e5 	bl	80023b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e012      	b.n	800221c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021f6:	893b      	ldrh	r3, [r7, #8]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2200      	movs	r2, #0
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f884 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	80002000 	.word	0x80002000

08002228 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	4608      	mov	r0, r1
 8002232:	4611      	mov	r1, r2
 8002234:	461a      	mov	r2, r3
 8002236:	4603      	mov	r3, r0
 8002238:	817b      	strh	r3, [r7, #10]
 800223a:	460b      	mov	r3, r1
 800223c:	813b      	strh	r3, [r7, #8]
 800223e:	4613      	mov	r3, r2
 8002240:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	8979      	ldrh	r1, [r7, #10]
 8002248:	4b20      	ldr	r3, [pc, #128]	; (80022cc <I2C_RequestMemoryRead+0xa4>)
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2300      	movs	r3, #0
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fa1c 	bl	800268c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	69b9      	ldr	r1, [r7, #24]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f8ac 	bl	80023b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e02c      	b.n	80022c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d105      	bne.n	800227a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800226e:	893b      	ldrh	r3, [r7, #8]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	629a      	str	r2, [r3, #40]	; 0x28
 8002278:	e015      	b.n	80022a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800227a:	893b      	ldrh	r3, [r7, #8]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	b29b      	uxth	r3, r3
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	69b9      	ldr	r1, [r7, #24]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f892 	bl	80023b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e012      	b.n	80022c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800229c:	893b      	ldrh	r3, [r7, #8]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2200      	movs	r2, #0
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f831 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	80002000 	.word	0x80002000

080022d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d103      	bne.n	80022ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2200      	movs	r2, #0
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d007      	beq.n	800230c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	619a      	str	r2, [r3, #24]
  }
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	4613      	mov	r3, r2
 8002326:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002328:	e031      	b.n	800238e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d02d      	beq.n	800238e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002332:	f7ff f88f 	bl	8001454 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d302      	bcc.n	8002348 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d122      	bne.n	800238e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	4013      	ands	r3, r2
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	429a      	cmp	r2, r3
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	429a      	cmp	r2, r3
 8002364:	d113      	bne.n	800238e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f043 0220 	orr.w	r2, r3, #32
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e00f      	b.n	80023ae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699a      	ldr	r2, [r3, #24]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4013      	ands	r3, r2
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	429a      	cmp	r2, r3
 800239c:	bf0c      	ite	eq
 800239e:	2301      	moveq	r3, #1
 80023a0:	2300      	movne	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d0be      	beq.n	800232a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023c2:	e033      	b.n	800242c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f87f 	bl	80024cc <I2C_IsErrorOccurred>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e031      	b.n	800243c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023de:	d025      	beq.n	800242c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e0:	f7ff f838 	bl	8001454 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d302      	bcc.n	80023f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11a      	bne.n	800242c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b02      	cmp	r3, #2
 8002402:	d013      	beq.n	800242c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	f043 0220 	orr.w	r2, r3, #32
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e007      	b.n	800243c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b02      	cmp	r3, #2
 8002438:	d1c4      	bne.n	80023c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002450:	e02f      	b.n	80024b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f838 	bl	80024cc <I2C_IsErrorOccurred>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e02d      	b.n	80024c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002466:	f7fe fff5 	bl	8001454 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	429a      	cmp	r2, r3
 8002474:	d302      	bcc.n	800247c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d11a      	bne.n	80024b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b20      	cmp	r3, #32
 8002488:	d013      	beq.n	80024b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f043 0220 	orr.w	r2, r3, #32
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e007      	b.n	80024c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d1c8      	bne.n	8002452 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d068      	beq.n	80025ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2210      	movs	r2, #16
 80024fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002500:	e049      	b.n	8002596 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d045      	beq.n	8002596 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800250a:	f7fe ffa3 	bl	8001454 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <I2C_IsErrorOccurred+0x54>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d13a      	bne.n	8002596 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002532:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800253e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002542:	d121      	bne.n	8002588 <I2C_IsErrorOccurred+0xbc>
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800254a:	d01d      	beq.n	8002588 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	2b20      	cmp	r3, #32
 8002550:	d01a      	beq.n	8002588 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002560:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002562:	f7fe ff77 	bl	8001454 <HAL_GetTick>
 8002566:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002568:	e00e      	b.n	8002588 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800256a:	f7fe ff73 	bl	8001454 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b19      	cmp	r3, #25
 8002576:	d907      	bls.n	8002588 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	f043 0320 	orr.w	r3, r3, #32
 800257e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002586:	e006      	b.n	8002596 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b20      	cmp	r3, #32
 8002594:	d1e9      	bne.n	800256a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d003      	beq.n	80025ac <I2C_IsErrorOccurred+0xe0>
 80025a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0aa      	beq.n	8002502 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d103      	bne.n	80025bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2220      	movs	r2, #32
 80025ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00b      	beq.n	80025f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	f043 0308 	orr.w	r3, r3, #8
 8002604:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800260e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00b      	beq.n	8002638 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	f043 0302 	orr.w	r3, r3, #2
 8002626:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002630:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01c      	beq.n	800267a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff fe45 	bl	80022d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <I2C_IsErrorOccurred+0x1bc>)
 8002652:	400b      	ands	r3, r1
 8002654:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	431a      	orrs	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800267a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800267e:	4618      	mov	r0, r3
 8002680:	3728      	adds	r7, #40	; 0x28
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	fe00e800 	.word	0xfe00e800

0800268c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	817b      	strh	r3, [r7, #10]
 800269a:	4613      	mov	r3, r2
 800269c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026a4:	7a7b      	ldrb	r3, [r7, #9]
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	0d5b      	lsrs	r3, r3, #21
 80026c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <I2C_TransferConfig+0x60>)
 80026cc:	430b      	orrs	r3, r1
 80026ce:	43db      	mvns	r3, r3
 80026d0:	ea02 0103 	and.w	r1, r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026de:	bf00      	nop
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	03ff63ff 	.word	0x03ff63ff

080026f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b20      	cmp	r3, #32
 8002704:	d138      	bne.n	8002778 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002710:	2302      	movs	r3, #2
 8002712:	e032      	b.n	800277a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2224      	movs	r2, #36	; 0x24
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002742:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b20      	cmp	r3, #32
 800279a:	d139      	bne.n	8002810 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e033      	b.n	8002812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2224      	movs	r2, #36	; 0x24
 80027b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	e000      	b.n	8002812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002810:	2302      	movs	r3, #2
  }
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_PWREx_ConfigSupply+0x70>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b04      	cmp	r3, #4
 8002832:	d00a      	beq.n	800284a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <HAL_PWREx_ConfigSupply+0x70>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e01f      	b.n	8002886 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	e01d      	b.n	8002886 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_PWREx_ConfigSupply+0x70>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f023 0207 	bic.w	r2, r3, #7
 8002852:	490f      	ldr	r1, [pc, #60]	; (8002890 <HAL_PWREx_ConfigSupply+0x70>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4313      	orrs	r3, r2
 8002858:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800285a:	f7fe fdfb 	bl	8001454 <HAL_GetTick>
 800285e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002860:	e009      	b.n	8002876 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002862:	f7fe fdf7 	bl	8001454 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002870:	d901      	bls.n	8002876 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e007      	b.n	8002886 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_PWREx_ConfigSupply+0x70>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800287e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002882:	d1ee      	bne.n	8002862 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	58024800 	.word	0x58024800

08002894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08c      	sub	sp, #48	; 0x30
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d102      	bne.n	80028a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f000 bc48 	b.w	8003138 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8088 	beq.w	80029c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b6:	4b99      	ldr	r3, [pc, #612]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028c0:	4b96      	ldr	r3, [pc, #600]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	2b10      	cmp	r3, #16
 80028ca:	d007      	beq.n	80028dc <HAL_RCC_OscConfig+0x48>
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	2b18      	cmp	r3, #24
 80028d0:	d111      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62>
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d10c      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	4b8f      	ldr	r3, [pc, #572]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d06d      	beq.n	80029c4 <HAL_RCC_OscConfig+0x130>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d169      	bne.n	80029c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	f000 bc21 	b.w	8003138 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fe:	d106      	bne.n	800290e <HAL_RCC_OscConfig+0x7a>
 8002900:	4b86      	ldr	r3, [pc, #536]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a85      	ldr	r2, [pc, #532]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	e02e      	b.n	800296c <HAL_RCC_OscConfig+0xd8>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x9c>
 8002916:	4b81      	ldr	r3, [pc, #516]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a80      	ldr	r2, [pc, #512]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 800291c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b7e      	ldr	r3, [pc, #504]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7d      	ldr	r2, [pc, #500]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e01d      	b.n	800296c <HAL_RCC_OscConfig+0xd8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0xc0>
 800293a:	4b78      	ldr	r3, [pc, #480]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a77      	ldr	r2, [pc, #476]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b75      	ldr	r3, [pc, #468]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a74      	ldr	r2, [pc, #464]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0xd8>
 8002954:	4b71      	ldr	r3, [pc, #452]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a70      	ldr	r2, [pc, #448]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b6e      	ldr	r3, [pc, #440]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a6d      	ldr	r2, [pc, #436]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d013      	beq.n	800299c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fd6e 	bl	8001454 <HAL_GetTick>
 8002978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe fd6a 	bl	8001454 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e3d4      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800298e:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0xe8>
 800299a:	e014      	b.n	80029c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fd5a 	bl	8001454 <HAL_GetTick>
 80029a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fe fd56 	bl	8001454 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e3c0      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029b6:	4b59      	ldr	r3, [pc, #356]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x110>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80ca 	beq.w	8002b68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d4:	4b51      	ldr	r3, [pc, #324]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029de:	4b4f      	ldr	r3, [pc, #316]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <HAL_RCC_OscConfig+0x166>
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	2b18      	cmp	r3, #24
 80029ee:	d156      	bne.n	8002a9e <HAL_RCC_OscConfig+0x20a>
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d151      	bne.n	8002a9e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029fa:	4b48      	ldr	r3, [pc, #288]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_RCC_OscConfig+0x17e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e392      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a12:	4b42      	ldr	r3, [pc, #264]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 0219 	bic.w	r2, r3, #25
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	493f      	ldr	r1, [pc, #252]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fd16 	bl	8001454 <HAL_GetTick>
 8002a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2c:	f7fe fd12 	bl	8001454 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e37c      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a3e:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4a:	f7fe fd33 	bl	80014b4 <HAL_GetREVID>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d817      	bhi.n	8002a88 <HAL_RCC_OscConfig+0x1f4>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b40      	cmp	r3, #64	; 0x40
 8002a5e:	d108      	bne.n	8002a72 <HAL_RCC_OscConfig+0x1de>
 8002a60:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a68:	4a2c      	ldr	r2, [pc, #176]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a70:	e07a      	b.n	8002b68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a72:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	031b      	lsls	r3, r3, #12
 8002a80:	4926      	ldr	r1, [pc, #152]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a86:	e06f      	b.n	8002b68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a88:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	4921      	ldr	r1, [pc, #132]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a9c:	e064      	b.n	8002b68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d047      	beq.n	8002b36 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 0219 	bic.w	r2, r3, #25
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	491a      	ldr	r1, [pc, #104]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fccc 	bl	8001454 <HAL_GetTick>
 8002abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac0:	f7fe fcc8 	bl	8001454 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e332      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	f7fe fce9 	bl	80014b4 <HAL_GetREVID>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d819      	bhi.n	8002b20 <HAL_RCC_OscConfig+0x28c>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d108      	bne.n	8002b06 <HAL_RCC_OscConfig+0x272>
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002afc:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b02:	6053      	str	r3, [r2, #4]
 8002b04:	e030      	b.n	8002b68 <HAL_RCC_OscConfig+0x2d4>
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	031b      	lsls	r3, r3, #12
 8002b14:	4901      	ldr	r1, [pc, #4]	; (8002b1c <HAL_RCC_OscConfig+0x288>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
 8002b1a:	e025      	b.n	8002b68 <HAL_RCC_OscConfig+0x2d4>
 8002b1c:	58024400 	.word	0x58024400
 8002b20:	4b9a      	ldr	r3, [pc, #616]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	061b      	lsls	r3, r3, #24
 8002b2e:	4997      	ldr	r1, [pc, #604]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
 8002b34:	e018      	b.n	8002b68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b36:	4b95      	ldr	r3, [pc, #596]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a94      	ldr	r2, [pc, #592]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7fe fc87 	bl	8001454 <HAL_GetTick>
 8002b46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7fe fc83 	bl	8001454 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e2ed      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b5c:	4b8b      	ldr	r3, [pc, #556]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f0      	bne.n	8002b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80a9 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b76:	4b85      	ldr	r3, [pc, #532]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b80:	4b82      	ldr	r3, [pc, #520]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d007      	beq.n	8002b9c <HAL_RCC_OscConfig+0x308>
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b18      	cmp	r3, #24
 8002b90:	d13a      	bne.n	8002c08 <HAL_RCC_OscConfig+0x374>
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d135      	bne.n	8002c08 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b9c:	4b7b      	ldr	r3, [pc, #492]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x320>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	2b80      	cmp	r3, #128	; 0x80
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e2c1      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bb4:	f7fe fc7e 	bl	80014b4 <HAL_GetREVID>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d817      	bhi.n	8002bf2 <HAL_RCC_OscConfig+0x35e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d108      	bne.n	8002bdc <HAL_RCC_OscConfig+0x348>
 8002bca:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002bd2:	4a6e      	ldr	r2, [pc, #440]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bd8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bda:	e075      	b.n	8002cc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bdc:	4b6b      	ldr	r3, [pc, #428]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	069b      	lsls	r3, r3, #26
 8002bea:	4968      	ldr	r1, [pc, #416]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bf0:	e06a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bf2:	4b66      	ldr	r3, [pc, #408]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	061b      	lsls	r3, r3, #24
 8002c00:	4962      	ldr	r1, [pc, #392]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c06:	e05f      	b.n	8002cc8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d042      	beq.n	8002c96 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c10:	4b5e      	ldr	r3, [pc, #376]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a5d      	ldr	r2, [pc, #372]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fc1a 	bl	8001454 <HAL_GetTick>
 8002c20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c24:	f7fe fc16 	bl	8001454 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e280      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c36:	4b55      	ldr	r3, [pc, #340]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c42:	f7fe fc37 	bl	80014b4 <HAL_GetREVID>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d817      	bhi.n	8002c80 <HAL_RCC_OscConfig+0x3ec>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d108      	bne.n	8002c6a <HAL_RCC_OscConfig+0x3d6>
 8002c58:	4b4c      	ldr	r3, [pc, #304]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c60:	4a4a      	ldr	r2, [pc, #296]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002c62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c66:	6053      	str	r3, [r2, #4]
 8002c68:	e02e      	b.n	8002cc8 <HAL_RCC_OscConfig+0x434>
 8002c6a:	4b48      	ldr	r3, [pc, #288]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	069b      	lsls	r3, r3, #26
 8002c78:	4944      	ldr	r1, [pc, #272]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	604b      	str	r3, [r1, #4]
 8002c7e:	e023      	b.n	8002cc8 <HAL_RCC_OscConfig+0x434>
 8002c80:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	493f      	ldr	r1, [pc, #252]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60cb      	str	r3, [r1, #12]
 8002c94:	e018      	b.n	8002cc8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c96:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a3c      	ldr	r2, [pc, #240]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fbd7 	bl	8001454 <HAL_GetTick>
 8002ca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002caa:	f7fe fbd3 	bl	8001454 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e23d      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cbc:	4b33      	ldr	r3, [pc, #204]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d036      	beq.n	8002d42 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d019      	beq.n	8002d10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce0:	4a2a      	ldr	r2, [pc, #168]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fbb4 	bl	8001454 <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fbb0 	bl	8001454 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e21a      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d02:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x45c>
 8002d0e:	e018      	b.n	8002d42 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d10:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d14:	4a1d      	ldr	r2, [pc, #116]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1c:	f7fe fb9a 	bl	8001454 <HAL_GetTick>
 8002d20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d24:	f7fe fb96 	bl	8001454 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e200      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d039      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d01c      	beq.n	8002d90 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d56:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a0c      	ldr	r2, [pc, #48]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d62:	f7fe fb77 	bl	8001454 <HAL_GetTick>
 8002d66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d6a:	f7fe fb73 	bl	8001454 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e1dd      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x4d6>
 8002d88:	e01b      	b.n	8002dc2 <HAL_RCC_OscConfig+0x52e>
 8002d8a:	bf00      	nop
 8002d8c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d90:	4b9b      	ldr	r3, [pc, #620]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a9a      	ldr	r2, [pc, #616]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d9c:	f7fe fb5a 	bl	8001454 <HAL_GetTick>
 8002da0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da4:	f7fe fb56 	bl	8001454 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1c0      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002db6:	4b92      	ldr	r3, [pc, #584]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 8081 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dd0:	4b8c      	ldr	r3, [pc, #560]	; (8003004 <HAL_RCC_OscConfig+0x770>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a8b      	ldr	r2, [pc, #556]	; (8003004 <HAL_RCC_OscConfig+0x770>)
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ddc:	f7fe fb3a 	bl	8001454 <HAL_GetTick>
 8002de0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de4:	f7fe fb36 	bl	8001454 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e1a0      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df6:	4b83      	ldr	r3, [pc, #524]	; (8003004 <HAL_RCC_OscConfig+0x770>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d106      	bne.n	8002e18 <HAL_RCC_OscConfig+0x584>
 8002e0a:	4b7d      	ldr	r3, [pc, #500]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a7c      	ldr	r2, [pc, #496]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
 8002e16:	e02d      	b.n	8002e74 <HAL_RCC_OscConfig+0x5e0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10c      	bne.n	8002e3a <HAL_RCC_OscConfig+0x5a6>
 8002e20:	4b77      	ldr	r3, [pc, #476]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	4a76      	ldr	r2, [pc, #472]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2c:	4b74      	ldr	r3, [pc, #464]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	4a73      	ldr	r2, [pc, #460]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e32:	f023 0304 	bic.w	r3, r3, #4
 8002e36:	6713      	str	r3, [r2, #112]	; 0x70
 8002e38:	e01c      	b.n	8002e74 <HAL_RCC_OscConfig+0x5e0>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b05      	cmp	r3, #5
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x5c8>
 8002e42:	4b6f      	ldr	r3, [pc, #444]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a6e      	ldr	r2, [pc, #440]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4e:	4b6c      	ldr	r3, [pc, #432]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a6b      	ldr	r2, [pc, #428]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5a:	e00b      	b.n	8002e74 <HAL_RCC_OscConfig+0x5e0>
 8002e5c:	4b68      	ldr	r3, [pc, #416]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	4a67      	ldr	r2, [pc, #412]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	6713      	str	r3, [r2, #112]	; 0x70
 8002e68:	4b65      	ldr	r3, [pc, #404]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	4a64      	ldr	r2, [pc, #400]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e6e:	f023 0304 	bic.w	r3, r3, #4
 8002e72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d015      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7c:	f7fe faea 	bl	8001454 <HAL_GetTick>
 8002e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e84:	f7fe fae6 	bl	8001454 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e14e      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e9a:	4b59      	ldr	r3, [pc, #356]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0ee      	beq.n	8002e84 <HAL_RCC_OscConfig+0x5f0>
 8002ea6:	e014      	b.n	8002ed2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fad4 	bl	8001454 <HAL_GetTick>
 8002eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb0:	f7fe fad0 	bl	8001454 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e138      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ec6:	4b4e      	ldr	r3, [pc, #312]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1ee      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 812d 	beq.w	8003136 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002edc:	4b48      	ldr	r3, [pc, #288]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ee4:	2b18      	cmp	r3, #24
 8002ee6:	f000 80bd 	beq.w	8003064 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	f040 809e 	bne.w	8003030 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef4:	4b42      	ldr	r3, [pc, #264]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a41      	ldr	r2, [pc, #260]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe faa8 	bl	8001454 <HAL_GetTick>
 8002f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe faa4 	bl	8001454 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e10e      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f1a:	4b39      	ldr	r3, [pc, #228]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f26:	4b36      	ldr	r3, [pc, #216]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f2a:	4b37      	ldr	r3, [pc, #220]	; (8003008 <HAL_RCC_OscConfig+0x774>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f36:	0112      	lsls	r2, r2, #4
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	4931      	ldr	r1, [pc, #196]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	628b      	str	r3, [r1, #40]	; 0x28
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	3b01      	subs	r3, #1
 8002f46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	025b      	lsls	r3, r3, #9
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	041b      	lsls	r3, r3, #16
 8002f5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	061b      	lsls	r3, r3, #24
 8002f6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f70:	4923      	ldr	r1, [pc, #140]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002f76:	4b22      	ldr	r3, [pc, #136]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	4a21      	ldr	r2, [pc, #132]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f82:	4b1f      	ldr	r3, [pc, #124]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f86:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_RCC_OscConfig+0x778>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f8e:	00d2      	lsls	r2, r2, #3
 8002f90:	491b      	ldr	r1, [pc, #108]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f96:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	f023 020c 	bic.w	r2, r3, #12
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4917      	ldr	r1, [pc, #92]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fa8:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	f023 0202 	bic.w	r2, r3, #2
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb4:	4912      	ldr	r1, [pc, #72]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fba:	4b11      	ldr	r3, [pc, #68]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	4a10      	ldr	r2, [pc, #64]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	4a07      	ldr	r2, [pc, #28]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a04      	ldr	r2, [pc, #16]	; (8003000 <HAL_RCC_OscConfig+0x76c>)
 8002ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fa2d 	bl	8001454 <HAL_GetTick>
 8002ffa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ffc:	e011      	b.n	8003022 <HAL_RCC_OscConfig+0x78e>
 8002ffe:	bf00      	nop
 8003000:	58024400 	.word	0x58024400
 8003004:	58024800 	.word	0x58024800
 8003008:	fffffc0c 	.word	0xfffffc0c
 800300c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003010:	f7fe fa20 	bl	8001454 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e08a      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003022:	4b47      	ldr	r3, [pc, #284]	; (8003140 <HAL_RCC_OscConfig+0x8ac>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x77c>
 800302e:	e082      	b.n	8003136 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003030:	4b43      	ldr	r3, [pc, #268]	; (8003140 <HAL_RCC_OscConfig+0x8ac>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a42      	ldr	r2, [pc, #264]	; (8003140 <HAL_RCC_OscConfig+0x8ac>)
 8003036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800303a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fa0a 	bl	8001454 <HAL_GetTick>
 8003040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7fe fa06 	bl	8001454 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e070      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003056:	4b3a      	ldr	r3, [pc, #232]	; (8003140 <HAL_RCC_OscConfig+0x8ac>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x7b0>
 8003062:	e068      	b.n	8003136 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003064:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_RCC_OscConfig+0x8ac>)
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800306a:	4b35      	ldr	r3, [pc, #212]	; (8003140 <HAL_RCC_OscConfig+0x8ac>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	2b01      	cmp	r3, #1
 8003076:	d031      	beq.n	80030dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f003 0203 	and.w	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d12a      	bne.n	80030dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d122      	bne.n	80030dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d11a      	bne.n	80030dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	0a5b      	lsrs	r3, r3, #9
 80030aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d111      	bne.n	80030dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	0c1b      	lsrs	r3, r3, #16
 80030bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d108      	bne.n	80030dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	0e1b      	lsrs	r3, r3, #24
 80030ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e02b      	b.n	8003138 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80030e0:	4b17      	ldr	r3, [pc, #92]	; (8003140 <HAL_RCC_OscConfig+0x8ac>)
 80030e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e4:	08db      	lsrs	r3, r3, #3
 80030e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d01f      	beq.n	8003136 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_RCC_OscConfig+0x8ac>)
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	4a11      	ldr	r2, [pc, #68]	; (8003140 <HAL_RCC_OscConfig+0x8ac>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003102:	f7fe f9a7 	bl	8001454 <HAL_GetTick>
 8003106:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003108:	bf00      	nop
 800310a:	f7fe f9a3 	bl	8001454 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	4293      	cmp	r3, r2
 8003114:	d0f9      	beq.n	800310a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_RCC_OscConfig+0x8ac>)
 8003118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <HAL_RCC_OscConfig+0x8b0>)
 800311c:	4013      	ands	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003122:	00d2      	lsls	r2, r2, #3
 8003124:	4906      	ldr	r1, [pc, #24]	; (8003140 <HAL_RCC_OscConfig+0x8ac>)
 8003126:	4313      	orrs	r3, r2
 8003128:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800312a:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_RCC_OscConfig+0x8ac>)
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	4a04      	ldr	r2, [pc, #16]	; (8003140 <HAL_RCC_OscConfig+0x8ac>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3730      	adds	r7, #48	; 0x30
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	58024400 	.word	0x58024400
 8003144:	ffff0007 	.word	0xffff0007

08003148 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e19c      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800315c:	4b8a      	ldr	r3, [pc, #552]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d910      	bls.n	800318c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b87      	ldr	r3, [pc, #540]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 020f 	bic.w	r2, r3, #15
 8003172:	4985      	ldr	r1, [pc, #532]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b83      	ldr	r3, [pc, #524]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e184      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d010      	beq.n	80031ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	4b7b      	ldr	r3, [pc, #492]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d908      	bls.n	80031ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031a8:	4b78      	ldr	r3, [pc, #480]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	4975      	ldr	r1, [pc, #468]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d010      	beq.n	80031e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	4b70      	ldr	r3, [pc, #448]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d908      	bls.n	80031e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031d6:	4b6d      	ldr	r3, [pc, #436]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	496a      	ldr	r1, [pc, #424]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d010      	beq.n	8003216 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699a      	ldr	r2, [r3, #24]
 80031f8:	4b64      	ldr	r3, [pc, #400]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003200:	429a      	cmp	r2, r3
 8003202:	d908      	bls.n	8003216 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003204:	4b61      	ldr	r3, [pc, #388]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	495e      	ldr	r1, [pc, #376]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003212:	4313      	orrs	r3, r2
 8003214:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d010      	beq.n	8003244 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800322e:	429a      	cmp	r2, r3
 8003230:	d908      	bls.n	8003244 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003232:	4b56      	ldr	r3, [pc, #344]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	4953      	ldr	r1, [pc, #332]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003240:	4313      	orrs	r3, r2
 8003242:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d010      	beq.n	8003272 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	4b4d      	ldr	r3, [pc, #308]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	429a      	cmp	r2, r3
 800325e:	d908      	bls.n	8003272 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003260:	4b4a      	ldr	r3, [pc, #296]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f023 020f 	bic.w	r2, r3, #15
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4947      	ldr	r1, [pc, #284]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800326e:	4313      	orrs	r3, r2
 8003270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d055      	beq.n	800332a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800327e:	4b43      	ldr	r3, [pc, #268]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	4940      	ldr	r1, [pc, #256]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800328c:	4313      	orrs	r3, r2
 800328e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d107      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003298:	4b3c      	ldr	r3, [pc, #240]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d121      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0f6      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032b0:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d115      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0ea      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032c8:	4b30      	ldr	r3, [pc, #192]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d109      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0de      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032d8:	4b2c      	ldr	r3, [pc, #176]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0d6      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032e8:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f023 0207 	bic.w	r2, r3, #7
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4925      	ldr	r1, [pc, #148]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fa:	f7fe f8ab 	bl	8001454 <HAL_GetTick>
 80032fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003300:	e00a      	b.n	8003318 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003302:	f7fe f8a7 	bl	8001454 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e0be      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003318:	4b1c      	ldr	r3, [pc, #112]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	429a      	cmp	r2, r3
 8003328:	d1eb      	bne.n	8003302 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d010      	beq.n	8003358 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	429a      	cmp	r2, r3
 8003344:	d208      	bcs.n	8003358 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f023 020f 	bic.w	r2, r3, #15
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	490e      	ldr	r1, [pc, #56]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003354:	4313      	orrs	r3, r2
 8003356:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d214      	bcs.n	8003390 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b08      	ldr	r3, [pc, #32]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 020f 	bic.w	r2, r3, #15
 800336e:	4906      	ldr	r1, [pc, #24]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b04      	ldr	r3, [pc, #16]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e086      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
 8003388:	52002000 	.word	0x52002000
 800338c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d010      	beq.n	80033be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	4b3f      	ldr	r3, [pc, #252]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d208      	bcs.n	80033be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033ac:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	4939      	ldr	r1, [pc, #228]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d010      	beq.n	80033ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d208      	bcs.n	80033ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033da:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	492e      	ldr	r1, [pc, #184]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d010      	beq.n	800341a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003404:	429a      	cmp	r2, r3
 8003406:	d208      	bcs.n	800341a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	4922      	ldr	r1, [pc, #136]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003416:	4313      	orrs	r3, r2
 8003418:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d010      	beq.n	8003448 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003432:	429a      	cmp	r2, r3
 8003434:	d208      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003436:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	4917      	ldr	r1, [pc, #92]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003444:	4313      	orrs	r3, r2
 8003446:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003448:	f000 f834 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	4912      	ldr	r1, [pc, #72]	; (80034a4 <HAL_RCC_ClockConfig+0x35c>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
 8003464:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <HAL_RCC_ClockConfig+0x35c>)
 8003470:	5cd3      	ldrb	r3, [r2, r3]
 8003472:	f003 031f 	and.w	r3, r3, #31
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <HAL_RCC_ClockConfig+0x360>)
 800347e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003480:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <HAL_RCC_ClockConfig+0x364>)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <HAL_RCC_ClockConfig+0x368>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd ff98 	bl	80013c0 <HAL_InitTick>
 8003490:	4603      	mov	r3, r0
 8003492:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	58024400 	.word	0x58024400
 80034a4:	08007318 	.word	0x08007318
 80034a8:	2400005c 	.word	0x2400005c
 80034ac:	24000058 	.word	0x24000058
 80034b0:	24000060 	.word	0x24000060

080034b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ba:	4bb3      	ldr	r3, [pc, #716]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034c2:	2b18      	cmp	r3, #24
 80034c4:	f200 8155 	bhi.w	8003772 <HAL_RCC_GetSysClockFreq+0x2be>
 80034c8:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	08003535 	.word	0x08003535
 80034d4:	08003773 	.word	0x08003773
 80034d8:	08003773 	.word	0x08003773
 80034dc:	08003773 	.word	0x08003773
 80034e0:	08003773 	.word	0x08003773
 80034e4:	08003773 	.word	0x08003773
 80034e8:	08003773 	.word	0x08003773
 80034ec:	08003773 	.word	0x08003773
 80034f0:	0800355b 	.word	0x0800355b
 80034f4:	08003773 	.word	0x08003773
 80034f8:	08003773 	.word	0x08003773
 80034fc:	08003773 	.word	0x08003773
 8003500:	08003773 	.word	0x08003773
 8003504:	08003773 	.word	0x08003773
 8003508:	08003773 	.word	0x08003773
 800350c:	08003773 	.word	0x08003773
 8003510:	08003561 	.word	0x08003561
 8003514:	08003773 	.word	0x08003773
 8003518:	08003773 	.word	0x08003773
 800351c:	08003773 	.word	0x08003773
 8003520:	08003773 	.word	0x08003773
 8003524:	08003773 	.word	0x08003773
 8003528:	08003773 	.word	0x08003773
 800352c:	08003773 	.word	0x08003773
 8003530:	08003567 	.word	0x08003567
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003534:	4b94      	ldr	r3, [pc, #592]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d009      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003540:	4b91      	ldr	r3, [pc, #580]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	08db      	lsrs	r3, r3, #3
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	4a90      	ldr	r2, [pc, #576]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
 8003550:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003552:	e111      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003554:	4b8d      	ldr	r3, [pc, #564]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003556:	61bb      	str	r3, [r7, #24]
      break;
 8003558:	e10e      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800355a:	4b8d      	ldr	r3, [pc, #564]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800355c:	61bb      	str	r3, [r7, #24]
      break;
 800355e:	e10b      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003560:	4b8c      	ldr	r3, [pc, #560]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003562:	61bb      	str	r3, [r7, #24]
      break;
 8003564:	e108      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003566:	4b88      	ldr	r3, [pc, #544]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003570:	4b85      	ldr	r3, [pc, #532]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	091b      	lsrs	r3, r3, #4
 8003576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800357a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800357c:	4b82      	ldr	r3, [pc, #520]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003586:	4b80      	ldr	r3, [pc, #512]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358a:	08db      	lsrs	r3, r3, #3
 800358c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80e1 	beq.w	800376c <HAL_RCC_GetSysClockFreq+0x2b8>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	f000 8083 	beq.w	80036b8 <HAL_RCC_GetSysClockFreq+0x204>
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	f200 80a1 	bhi.w	80036fc <HAL_RCC_GetSysClockFreq+0x248>
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x114>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d056      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x1c0>
 80035c6:	e099      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035c8:	4b6f      	ldr	r3, [pc, #444]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d02d      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035d4:	4b6c      	ldr	r3, [pc, #432]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	08db      	lsrs	r3, r3, #3
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	4a6b      	ldr	r2, [pc, #428]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
 80035e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	ee07 3a90 	vmov	s15, r3
 80035ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035fe:	4b62      	ldr	r3, [pc, #392]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003606:	ee07 3a90 	vmov	s15, r3
 800360a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800360e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003612:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800361a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800361e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800362e:	e087      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800379c <HAL_RCC_GetSysClockFreq+0x2e8>
 800363e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003642:	4b51      	ldr	r3, [pc, #324]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003652:	ed97 6a02 	vldr	s12, [r7, #8]
 8003656:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2e4>
 800365a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800365e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800366e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003672:	e065      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800367e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003686:	4b40      	ldr	r3, [pc, #256]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003696:	ed97 6a02 	vldr	s12, [r7, #8]
 800369a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2e4>
 800369e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036b6:	e043      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80037a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80036c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ca:	4b2f      	ldr	r3, [pc, #188]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036da:	ed97 6a02 	vldr	s12, [r7, #8]
 80036de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036fa:	e021      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003706:	eddf 6a26 	vldr	s13, [pc, #152]	; 80037a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800370a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370e:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003722:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800372e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800373e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	0a5b      	lsrs	r3, r3, #9
 8003746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800374a:	3301      	adds	r3, #1
 800374c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	ee07 3a90 	vmov	s15, r3
 8003754:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003758:	edd7 6a07 	vldr	s13, [r7, #28]
 800375c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003764:	ee17 3a90 	vmov	r3, s15
 8003768:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800376a:	e005      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	61bb      	str	r3, [r7, #24]
      break;
 8003770:	e002      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003774:	61bb      	str	r3, [r7, #24]
      break;
 8003776:	bf00      	nop
  }

  return sysclockfreq;
 8003778:	69bb      	ldr	r3, [r7, #24]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3724      	adds	r7, #36	; 0x24
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	58024400 	.word	0x58024400
 800378c:	03d09000 	.word	0x03d09000
 8003790:	003d0900 	.word	0x003d0900
 8003794:	017d7840 	.word	0x017d7840
 8003798:	46000000 	.word	0x46000000
 800379c:	4c742400 	.word	0x4c742400
 80037a0:	4a742400 	.word	0x4a742400
 80037a4:	4bbebc20 	.word	0x4bbebc20

080037a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037ae:	f7ff fe81 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 80037b2:	4602      	mov	r2, r0
 80037b4:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	0a1b      	lsrs	r3, r3, #8
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	490f      	ldr	r1, [pc, #60]	; (80037fc <HAL_RCC_GetHCLKFreq+0x54>)
 80037c0:	5ccb      	ldrb	r3, [r1, r3]
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	4a09      	ldr	r2, [pc, #36]	; (80037fc <HAL_RCC_GetHCLKFreq+0x54>)
 80037d6:	5cd3      	ldrb	r3, [r2, r3]
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	4a07      	ldr	r2, [pc, #28]	; (8003800 <HAL_RCC_GetHCLKFreq+0x58>)
 80037e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037e6:	4a07      	ldr	r2, [pc, #28]	; (8003804 <HAL_RCC_GetHCLKFreq+0x5c>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80037ec:	4b04      	ldr	r3, [pc, #16]	; (8003800 <HAL_RCC_GetHCLKFreq+0x58>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	58024400 	.word	0x58024400
 80037fc:	08007318 	.word	0x08007318
 8003800:	2400005c 	.word	0x2400005c
 8003804:	24000058 	.word	0x24000058

08003808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800380c:	f7ff ffcc 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4904      	ldr	r1, [pc, #16]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x28>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	58024400 	.word	0x58024400
 8003830:	08007318 	.word	0x08007318

08003834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003838:	f7ff ffb6 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	4904      	ldr	r1, [pc, #16]	; (800385c <HAL_RCC_GetPCLK2Freq+0x28>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	58024400 	.word	0x58024400
 800385c:	08007318 	.word	0x08007318

08003860 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003864:	b0ca      	sub	sp, #296	; 0x128
 8003866:	af00      	add	r7, sp, #0
 8003868:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800386c:	2300      	movs	r3, #0
 800386e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003872:	2300      	movs	r3, #0
 8003874:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003884:	2500      	movs	r5, #0
 8003886:	ea54 0305 	orrs.w	r3, r4, r5
 800388a:	d049      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003890:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003892:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003896:	d02f      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003898:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800389c:	d828      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800389e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038a2:	d01a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80038a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038a8:	d822      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80038ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b2:	d007      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038b4:	e01c      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b6:	4bb8      	ldr	r3, [pc, #736]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	4ab7      	ldr	r2, [pc, #732]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038c2:	e01a      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c8:	3308      	adds	r3, #8
 80038ca:	2102      	movs	r1, #2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f001 fc8f 	bl	80051f0 <RCCEx_PLL2_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038d8:	e00f      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038de:	3328      	adds	r3, #40	; 0x28
 80038e0:	2102      	movs	r1, #2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 fd36 	bl	8005354 <RCCEx_PLL3_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038ee:	e004      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038f6:	e000      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80038f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003902:	4ba5      	ldr	r3, [pc, #660]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003906:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800390a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003910:	4aa1      	ldr	r2, [pc, #644]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003912:	430b      	orrs	r3, r1
 8003914:	6513      	str	r3, [r2, #80]	; 0x50
 8003916:	e003      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003918:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800391c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800392c:	f04f 0900 	mov.w	r9, #0
 8003930:	ea58 0309 	orrs.w	r3, r8, r9
 8003934:	d047      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	2b04      	cmp	r3, #4
 800393e:	d82a      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	0800395d 	.word	0x0800395d
 800394c:	0800396b 	.word	0x0800396b
 8003950:	08003981 	.word	0x08003981
 8003954:	0800399f 	.word	0x0800399f
 8003958:	0800399f 	.word	0x0800399f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395c:	4b8e      	ldr	r3, [pc, #568]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	4a8d      	ldr	r2, [pc, #564]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003966:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003968:	e01a      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396e:	3308      	adds	r3, #8
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f001 fc3c 	bl	80051f0 <RCCEx_PLL2_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800397e:	e00f      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003984:	3328      	adds	r3, #40	; 0x28
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f001 fce3 	bl	8005354 <RCCEx_PLL3_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003994:	e004      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800399c:	e000      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800399e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039a8:	4b7b      	ldr	r3, [pc, #492]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ac:	f023 0107 	bic.w	r1, r3, #7
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b6:	4a78      	ldr	r2, [pc, #480]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6513      	str	r3, [r2, #80]	; 0x50
 80039bc:	e003      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80039d2:	f04f 0b00 	mov.w	fp, #0
 80039d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80039da:	d04c      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80039dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e6:	d030      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80039e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ec:	d829      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039ee:	2bc0      	cmp	r3, #192	; 0xc0
 80039f0:	d02d      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039f2:	2bc0      	cmp	r3, #192	; 0xc0
 80039f4:	d825      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039f6:	2b80      	cmp	r3, #128	; 0x80
 80039f8:	d018      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80039fa:	2b80      	cmp	r3, #128	; 0x80
 80039fc:	d821      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003a02:	2b40      	cmp	r3, #64	; 0x40
 8003a04:	d007      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003a06:	e01c      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a08:	4b63      	ldr	r3, [pc, #396]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	4a62      	ldr	r2, [pc, #392]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a14:	e01c      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 fbe6 	bl	80051f0 <RCCEx_PLL2_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a2a:	e011      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a30:	3328      	adds	r3, #40	; 0x28
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f001 fc8d 	bl	8005354 <RCCEx_PLL3_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a40:	e006      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a48:	e002      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a58:	4b4f      	ldr	r3, [pc, #316]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	4a4c      	ldr	r2, [pc, #304]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6513      	str	r3, [r2, #80]	; 0x50
 8003a6c:	e003      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003a82:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003a86:	2300      	movs	r3, #0
 8003a88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003a8c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003a90:	460b      	mov	r3, r1
 8003a92:	4313      	orrs	r3, r2
 8003a94:	d053      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aa2:	d035      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003aa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aa8:	d82e      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003aaa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003aae:	d031      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003ab0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ab4:	d828      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aba:	d01a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac0:	d822      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003ac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aca:	d007      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003acc:	e01c      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ace:	4b32      	ldr	r3, [pc, #200]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	4a31      	ldr	r2, [pc, #196]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ada:	e01c      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 fb83 	bl	80051f0 <RCCEx_PLL2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003af0:	e011      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af6:	3328      	adds	r3, #40	; 0x28
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 fc2a 	bl	8005354 <RCCEx_PLL3_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b06:	e006      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b0e:	e002      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003b10:	bf00      	nop
 8003b12:	e000      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10b      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b2e:	4a1a      	ldr	r2, [pc, #104]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6593      	str	r3, [r2, #88]	; 0x58
 8003b34:	e003      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003b4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b54:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	d056      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b6a:	d038      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b70:	d831      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b76:	d034      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003b78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b7c:	d82b      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b82:	d01d      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b88:	d825      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d006      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003b8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003b94:	e01f      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b96:	bf00      	nop
 8003b98:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b9c:	4ba2      	ldr	r3, [pc, #648]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	4aa1      	ldr	r2, [pc, #644]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ba8:	e01c      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bae:	3308      	adds	r3, #8
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 fb1c 	bl	80051f0 <RCCEx_PLL2_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003bbe:	e011      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc4:	3328      	adds	r3, #40	; 0x28
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f001 fbc3 	bl	8005354 <RCCEx_PLL3_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bd4:	e006      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bdc:	e002      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10b      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bec:	4b8e      	ldr	r3, [pc, #568]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bfc:	4a8a      	ldr	r2, [pc, #552]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	6593      	str	r3, [r2, #88]	; 0x58
 8003c02:	e003      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003c18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003c26:	460b      	mov	r3, r1
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	d03a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	2b30      	cmp	r3, #48	; 0x30
 8003c34:	d01f      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003c36:	2b30      	cmp	r3, #48	; 0x30
 8003c38:	d819      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d00c      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	d815      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d019      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d111      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c4a:	4b77      	ldr	r3, [pc, #476]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	4a76      	ldr	r2, [pc, #472]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c56:	e011      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	2102      	movs	r1, #2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 fac5 	bl	80051f0 <RCCEx_PLL2_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c6c:	e006      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c74:	e002      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c84:	4b68      	ldr	r3, [pc, #416]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c88:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c92:	4a65      	ldr	r2, [pc, #404]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c94:	430b      	orrs	r3, r1
 8003c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c98:	e003      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003cae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003cb8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	d051      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ccc:	d035      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003cce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cd2:	d82e      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003cd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cd8:	d031      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003cda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cde:	d828      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce4:	d01a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cea:	d822      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf4:	d007      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003cf6:	e01c      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	4a4a      	ldr	r2, [pc, #296]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d04:	e01c      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 fa6e 	bl	80051f0 <RCCEx_PLL2_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d1a:	e011      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d20:	3328      	adds	r3, #40	; 0x28
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 fb15 	bl	8005354 <RCCEx_PLL3_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d30:	e006      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d38:	e002      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d48:	4b37      	ldr	r3, [pc, #220]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d56:	4a34      	ldr	r2, [pc, #208]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6513      	str	r3, [r2, #80]	; 0x50
 8003d5c:	e003      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003d72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d76:	2300      	movs	r3, #0
 8003d78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003d7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003d80:	460b      	mov	r3, r1
 8003d82:	4313      	orrs	r3, r2
 8003d84:	d056      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d90:	d033      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003d92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d96:	d82c      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d9c:	d02f      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003d9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003da2:	d826      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003da4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003da8:	d02b      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003daa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dae:	d820      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003db4:	d012      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003db6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dba:	d81a      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d022      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc4:	d115      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dca:	3308      	adds	r3, #8
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f001 fa0e 	bl	80051f0 <RCCEx_PLL2_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003dda:	e015      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de0:	3328      	adds	r3, #40	; 0x28
 8003de2:	2101      	movs	r1, #1
 8003de4:	4618      	mov	r0, r3
 8003de6:	f001 fab5 	bl	8005354 <RCCEx_PLL3_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003df0:	e00a      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003df8:	e006      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dfa:	bf00      	nop
 8003dfc:	e004      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dfe:	bf00      	nop
 8003e00:	e002      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e02:	bf00      	nop
 8003e04:	e000      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10d      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e14:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e1e:	4a02      	ldr	r2, [pc, #8]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6513      	str	r3, [r2, #80]	; 0x50
 8003e24:	e006      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003e26:	bf00      	nop
 8003e28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e44:	2300      	movs	r3, #0
 8003e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e4a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	d055      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e60:	d033      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e66:	d82c      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6c:	d02f      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e72:	d826      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e78:	d02b      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003e7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e7e:	d820      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e84:	d012      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e8a:	d81a      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d022      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e94:	d115      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 f9a6 	bl	80051f0 <RCCEx_PLL2_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003eaa:	e015      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb0:	3328      	adds	r3, #40	; 0x28
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 fa4d 	bl	8005354 <RCCEx_PLL3_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ec8:	e006      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003eca:	bf00      	nop
 8003ecc:	e004      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e002      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ed2:	bf00      	nop
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10b      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ee0:	4ba3      	ldr	r3, [pc, #652]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ef0:	4a9f      	ldr	r2, [pc, #636]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef2:	430b      	orrs	r3, r1
 8003ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef6:	e003      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003efc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003f16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	d037      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f2a:	d00e      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f30:	d816      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d018      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f3a:	d111      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f3c:	4b8c      	ldr	r3, [pc, #560]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4a8b      	ldr	r2, [pc, #556]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f48:	e00f      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4e:	3308      	adds	r3, #8
 8003f50:	2101      	movs	r1, #1
 8003f52:	4618      	mov	r0, r3
 8003f54:	f001 f94c 	bl	80051f0 <RCCEx_PLL2_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f5e:	e004      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f66:	e000      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f72:	4b7f      	ldr	r3, [pc, #508]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f76:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f80:	4a7b      	ldr	r2, [pc, #492]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f82:	430b      	orrs	r3, r1
 8003f84:	6513      	str	r3, [r2, #80]	; 0x50
 8003f86:	e003      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003fa6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	d039      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d81c      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003fba:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	08003ffd 	.word	0x08003ffd
 8003fc4:	08003fd1 	.word	0x08003fd1
 8003fc8:	08003fdf 	.word	0x08003fdf
 8003fcc:	08003ffd 	.word	0x08003ffd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd0:	4b67      	ldr	r3, [pc, #412]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	4a66      	ldr	r2, [pc, #408]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003fdc:	e00f      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f001 f902 	bl	80051f0 <RCCEx_PLL2_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ff2:	e004      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ffa:	e000      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004006:	4b5a      	ldr	r3, [pc, #360]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400a:	f023 0103 	bic.w	r1, r3, #3
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004014:	4a56      	ldr	r2, [pc, #344]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004016:	430b      	orrs	r3, r1
 8004018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800401a:	e003      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004020:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004030:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800403a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800403e:	460b      	mov	r3, r1
 8004040:	4313      	orrs	r3, r2
 8004042:	f000 809f 	beq.w	8004184 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004046:	4b4b      	ldr	r3, [pc, #300]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a4a      	ldr	r2, [pc, #296]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800404c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004050:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004052:	f7fd f9ff 	bl	8001454 <HAL_GetTick>
 8004056:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800405a:	e00b      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405c:	f7fd f9fa 	bl	8001454 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b64      	cmp	r3, #100	; 0x64
 800406a:	d903      	bls.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004072:	e005      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004074:	4b3f      	ldr	r3, [pc, #252]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0ed      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004084:	2b00      	cmp	r3, #0
 8004086:	d179      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004088:	4b39      	ldr	r3, [pc, #228]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800408a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004090:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004094:	4053      	eors	r3, r2
 8004096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409a:	2b00      	cmp	r3, #0
 800409c:	d015      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800409e:	4b34      	ldr	r3, [pc, #208]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040aa:	4b31      	ldr	r3, [pc, #196]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a30      	ldr	r2, [pc, #192]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b6:	4b2e      	ldr	r3, [pc, #184]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a2d      	ldr	r2, [pc, #180]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80040c2:	4a2b      	ldr	r2, [pc, #172]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d6:	d118      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd f9bc 	bl	8001454 <HAL_GetTick>
 80040dc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040e0:	e00d      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fd f9b7 	bl	8001454 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040ec:	1ad2      	subs	r2, r2, r3
 80040ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d903      	bls.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80040fc:	e005      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040fe:	4b1c      	ldr	r3, [pc, #112]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0eb      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800410a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800410e:	2b00      	cmp	r3, #0
 8004110:	d129      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800411a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004122:	d10e      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004124:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004130:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004134:	091a      	lsrs	r2, r3, #4
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004138:	4013      	ands	r3, r2
 800413a:	4a0d      	ldr	r2, [pc, #52]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800413c:	430b      	orrs	r3, r1
 800413e:	6113      	str	r3, [r2, #16]
 8004140:	e005      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	4a0a      	ldr	r2, [pc, #40]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004148:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800414c:	6113      	str	r3, [r2, #16]
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004150:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004156:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800415a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415e:	4a04      	ldr	r2, [pc, #16]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004160:	430b      	orrs	r3, r1
 8004162:	6713      	str	r3, [r2, #112]	; 0x70
 8004164:	e00e      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800416a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800416e:	e009      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004170:	58024400 	.word	0x58024400
 8004174:	58024800 	.word	0x58024800
 8004178:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004180:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f002 0301 	and.w	r3, r2, #1
 8004190:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800419a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800419e:	460b      	mov	r3, r1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f000 8089 	beq.w	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ac:	2b28      	cmp	r3, #40	; 0x28
 80041ae:	d86b      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80041b0:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	08004291 	.word	0x08004291
 80041bc:	08004289 	.word	0x08004289
 80041c0:	08004289 	.word	0x08004289
 80041c4:	08004289 	.word	0x08004289
 80041c8:	08004289 	.word	0x08004289
 80041cc:	08004289 	.word	0x08004289
 80041d0:	08004289 	.word	0x08004289
 80041d4:	08004289 	.word	0x08004289
 80041d8:	0800425d 	.word	0x0800425d
 80041dc:	08004289 	.word	0x08004289
 80041e0:	08004289 	.word	0x08004289
 80041e4:	08004289 	.word	0x08004289
 80041e8:	08004289 	.word	0x08004289
 80041ec:	08004289 	.word	0x08004289
 80041f0:	08004289 	.word	0x08004289
 80041f4:	08004289 	.word	0x08004289
 80041f8:	08004273 	.word	0x08004273
 80041fc:	08004289 	.word	0x08004289
 8004200:	08004289 	.word	0x08004289
 8004204:	08004289 	.word	0x08004289
 8004208:	08004289 	.word	0x08004289
 800420c:	08004289 	.word	0x08004289
 8004210:	08004289 	.word	0x08004289
 8004214:	08004289 	.word	0x08004289
 8004218:	08004291 	.word	0x08004291
 800421c:	08004289 	.word	0x08004289
 8004220:	08004289 	.word	0x08004289
 8004224:	08004289 	.word	0x08004289
 8004228:	08004289 	.word	0x08004289
 800422c:	08004289 	.word	0x08004289
 8004230:	08004289 	.word	0x08004289
 8004234:	08004289 	.word	0x08004289
 8004238:	08004291 	.word	0x08004291
 800423c:	08004289 	.word	0x08004289
 8004240:	08004289 	.word	0x08004289
 8004244:	08004289 	.word	0x08004289
 8004248:	08004289 	.word	0x08004289
 800424c:	08004289 	.word	0x08004289
 8004250:	08004289 	.word	0x08004289
 8004254:	08004289 	.word	0x08004289
 8004258:	08004291 	.word	0x08004291
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800425c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004260:	3308      	adds	r3, #8
 8004262:	2101      	movs	r1, #1
 8004264:	4618      	mov	r0, r3
 8004266:	f000 ffc3 	bl	80051f0 <RCCEx_PLL2_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004270:	e00f      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004276:	3328      	adds	r3, #40	; 0x28
 8004278:	2101      	movs	r1, #1
 800427a:	4618      	mov	r0, r3
 800427c:	f001 f86a 	bl	8005354 <RCCEx_PLL3_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004286:	e004      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800428e:	e000      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800429a:	4bbf      	ldr	r3, [pc, #764]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a8:	4abb      	ldr	r2, [pc, #748]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042aa:	430b      	orrs	r3, r1
 80042ac:	6553      	str	r3, [r2, #84]	; 0x54
 80042ae:	e003      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f002 0302 	and.w	r3, r2, #2
 80042c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80042ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80042d2:	460b      	mov	r3, r1
 80042d4:	4313      	orrs	r3, r2
 80042d6:	d041      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042de:	2b05      	cmp	r3, #5
 80042e0:	d824      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80042e2:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80042e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e8:	08004335 	.word	0x08004335
 80042ec:	08004301 	.word	0x08004301
 80042f0:	08004317 	.word	0x08004317
 80042f4:	08004335 	.word	0x08004335
 80042f8:	08004335 	.word	0x08004335
 80042fc:	08004335 	.word	0x08004335
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004304:	3308      	adds	r3, #8
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f000 ff71 	bl	80051f0 <RCCEx_PLL2_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004314:	e00f      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431a:	3328      	adds	r3, #40	; 0x28
 800431c:	2101      	movs	r1, #1
 800431e:	4618      	mov	r0, r3
 8004320:	f001 f818 	bl	8005354 <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800432a:	e004      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004332:	e000      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800433e:	4b96      	ldr	r3, [pc, #600]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	f023 0107 	bic.w	r1, r3, #7
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800434a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800434c:	4a92      	ldr	r2, [pc, #584]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800434e:	430b      	orrs	r3, r1
 8004350:	6553      	str	r3, [r2, #84]	; 0x54
 8004352:	e003      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004358:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f002 0304 	and.w	r3, r2, #4
 8004368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004372:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d044      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004384:	2b05      	cmp	r3, #5
 8004386:	d825      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004388:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043dd 	.word	0x080043dd
 8004394:	080043a9 	.word	0x080043a9
 8004398:	080043bf 	.word	0x080043bf
 800439c:	080043dd 	.word	0x080043dd
 80043a0:	080043dd 	.word	0x080043dd
 80043a4:	080043dd 	.word	0x080043dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ac:	3308      	adds	r3, #8
 80043ae:	2101      	movs	r1, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 ff1d 	bl	80051f0 <RCCEx_PLL2_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80043bc:	e00f      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c2:	3328      	adds	r3, #40	; 0x28
 80043c4:	2101      	movs	r1, #1
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 ffc4 	bl	8005354 <RCCEx_PLL3_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80043d2:	e004      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043da:	e000      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80043dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043e6:	4b6c      	ldr	r3, [pc, #432]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ea:	f023 0107 	bic.w	r1, r3, #7
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f6:	4a68      	ldr	r2, [pc, #416]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6593      	str	r3, [r2, #88]	; 0x58
 80043fc:	e003      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004402:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440e:	f002 0320 	and.w	r3, r2, #32
 8004412:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004416:	2300      	movs	r3, #0
 8004418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800441c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004420:	460b      	mov	r3, r1
 8004422:	4313      	orrs	r3, r2
 8004424:	d055      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004432:	d033      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004438:	d82c      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800443a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443e:	d02f      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004444:	d826      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004446:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800444a:	d02b      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800444c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004450:	d820      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004456:	d012      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800445c:	d81a      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d022      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004466:	d115      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446c:	3308      	adds	r3, #8
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f000 febd 	bl	80051f0 <RCCEx_PLL2_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800447c:	e015      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004482:	3328      	adds	r3, #40	; 0x28
 8004484:	2102      	movs	r1, #2
 8004486:	4618      	mov	r0, r3
 8004488:	f000 ff64 	bl	8005354 <RCCEx_PLL3_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004492:	e00a      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800449a:	e006      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800449c:	bf00      	nop
 800449e:	e004      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044a0:	bf00      	nop
 80044a2:	e002      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044a4:	bf00      	nop
 80044a6:	e000      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80044a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10b      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044b2:	4b39      	ldr	r3, [pc, #228]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	4a35      	ldr	r2, [pc, #212]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c4:	430b      	orrs	r3, r1
 80044c6:	6553      	str	r3, [r2, #84]	; 0x54
 80044c8:	e003      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80044de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044e2:	2300      	movs	r3, #0
 80044e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80044e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4313      	orrs	r3, r2
 80044f0:	d058      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80044fe:	d033      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004500:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004504:	d82c      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450a:	d02f      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800450c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004510:	d826      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004512:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004516:	d02b      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004518:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800451c:	d820      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800451e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004522:	d012      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004528:	d81a      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d022      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800452e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004532:	d115      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004538:	3308      	adds	r3, #8
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fe57 	bl	80051f0 <RCCEx_PLL2_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004548:	e015      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454e:	3328      	adds	r3, #40	; 0x28
 8004550:	2102      	movs	r1, #2
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fefe 	bl	8005354 <RCCEx_PLL3_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800455e:	e00a      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004566:	e006      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004568:	bf00      	nop
 800456a:	e004      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800456c:	bf00      	nop
 800456e:	e002      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004570:	bf00      	nop
 8004572:	e000      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10e      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800458e:	4a02      	ldr	r2, [pc, #8]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004590:	430b      	orrs	r3, r1
 8004592:	6593      	str	r3, [r2, #88]	; 0x58
 8004594:	e006      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004596:	bf00      	nop
 8004598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80045b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80045be:	460b      	mov	r3, r1
 80045c0:	4313      	orrs	r3, r2
 80045c2:	d055      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80045cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80045d0:	d033      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80045d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80045d6:	d82c      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045dc:	d02f      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80045de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e2:	d826      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045e8:	d02b      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80045ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045ee:	d820      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045f4:	d012      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80045f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045fa:	d81a      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d022      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004604:	d115      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460a:	3308      	adds	r3, #8
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fdee 	bl	80051f0 <RCCEx_PLL2_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800461a:	e015      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004620:	3328      	adds	r3, #40	; 0x28
 8004622:	2102      	movs	r1, #2
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fe95 	bl	8005354 <RCCEx_PLL3_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004630:	e00a      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004638:	e006      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800463a:	bf00      	nop
 800463c:	e004      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800463e:	bf00      	nop
 8004640:	e002      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004642:	bf00      	nop
 8004644:	e000      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004648:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004650:	4ba1      	ldr	r3, [pc, #644]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004654:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004660:	4a9d      	ldr	r2, [pc, #628]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004662:	430b      	orrs	r3, r1
 8004664:	6593      	str	r3, [r2, #88]	; 0x58
 8004666:	e003      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800466c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f002 0308 	and.w	r3, r2, #8
 800467c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004686:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800468a:	460b      	mov	r3, r1
 800468c:	4313      	orrs	r3, r2
 800468e:	d01e      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469c:	d10c      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a2:	3328      	adds	r3, #40	; 0x28
 80046a4:	2102      	movs	r1, #2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fe54 	bl	8005354 <RCCEx_PLL3_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80046b8:	4b87      	ldr	r3, [pc, #540]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c8:	4a83      	ldr	r2, [pc, #524]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ca:	430b      	orrs	r3, r1
 80046cc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f002 0310 	and.w	r3, r2, #16
 80046da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046de:	2300      	movs	r3, #0
 80046e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80046e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80046e8:	460b      	mov	r3, r1
 80046ea:	4313      	orrs	r3, r2
 80046ec:	d01e      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fa:	d10c      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004700:	3328      	adds	r3, #40	; 0x28
 8004702:	2102      	movs	r1, #2
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fe25 	bl	8005354 <RCCEx_PLL3_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004716:	4b70      	ldr	r3, [pc, #448]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004722:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004726:	4a6c      	ldr	r2, [pc, #432]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004728:	430b      	orrs	r3, r1
 800472a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800473c:	2300      	movs	r3, #0
 800473e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004742:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004746:	460b      	mov	r3, r1
 8004748:	4313      	orrs	r3, r2
 800474a:	d03e      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800474c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004758:	d022      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800475a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800475e:	d81b      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004768:	d00b      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800476a:	e015      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800476c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004770:	3308      	adds	r3, #8
 8004772:	2100      	movs	r1, #0
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fd3b 	bl	80051f0 <RCCEx_PLL2_Config>
 800477a:	4603      	mov	r3, r0
 800477c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004780:	e00f      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004786:	3328      	adds	r3, #40	; 0x28
 8004788:	2102      	movs	r1, #2
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fde2 	bl	8005354 <RCCEx_PLL3_Config>
 8004790:	4603      	mov	r3, r0
 8004792:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004796:	e004      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800479e:	e000      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80047a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047aa:	4b4b      	ldr	r3, [pc, #300]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047ba:	4a47      	ldr	r2, [pc, #284]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047bc:	430b      	orrs	r3, r1
 80047be:	6593      	str	r3, [r2, #88]	; 0x58
 80047c0:	e003      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80047d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80047d8:	2300      	movs	r3, #0
 80047da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80047e0:	460b      	mov	r3, r1
 80047e2:	4313      	orrs	r3, r2
 80047e4:	d03b      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047f2:	d01f      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80047f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047f8:	d818      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80047fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fe:	d003      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004800:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004804:	d007      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004806:	e011      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004808:	4b33      	ldr	r3, [pc, #204]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	4a32      	ldr	r2, [pc, #200]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800480e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004814:	e00f      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481a:	3328      	adds	r3, #40	; 0x28
 800481c:	2101      	movs	r1, #1
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fd98 	bl	8005354 <RCCEx_PLL3_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800482a:	e004      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004832:	e000      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800483e:	4b26      	ldr	r3, [pc, #152]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	4a22      	ldr	r2, [pc, #136]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004850:	430b      	orrs	r3, r1
 8004852:	6553      	str	r3, [r2, #84]	; 0x54
 8004854:	e003      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800485a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800485e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004866:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800486a:	673b      	str	r3, [r7, #112]	; 0x70
 800486c:	2300      	movs	r3, #0
 800486e:	677b      	str	r3, [r7, #116]	; 0x74
 8004870:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004874:	460b      	mov	r3, r1
 8004876:	4313      	orrs	r3, r2
 8004878:	d034      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d007      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800488a:	e011      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800488c:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	4a11      	ldr	r2, [pc, #68]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004898:	e00e      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800489e:	3308      	adds	r3, #8
 80048a0:	2102      	movs	r1, #2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fca4 	bl	80051f0 <RCCEx_PLL2_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80048ae:	e003      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10d      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ce:	4a02      	ldr	r2, [pc, #8]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d0:	430b      	orrs	r3, r1
 80048d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048d4:	e006      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80048d6:	bf00      	nop
 80048d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80048f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80048f2:	2300      	movs	r3, #0
 80048f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80048fa:	460b      	mov	r3, r1
 80048fc:	4313      	orrs	r3, r2
 80048fe:	d00c      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004904:	3328      	adds	r3, #40	; 0x28
 8004906:	2102      	movs	r1, #2
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fd23 	bl	8005354 <RCCEx_PLL3_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004926:	663b      	str	r3, [r7, #96]	; 0x60
 8004928:	2300      	movs	r3, #0
 800492a:	667b      	str	r3, [r7, #100]	; 0x64
 800492c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004930:	460b      	mov	r3, r1
 8004932:	4313      	orrs	r3, r2
 8004934:	d038      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800493e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004942:	d018      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004948:	d811      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800494a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800494e:	d014      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004954:	d80b      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d011      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800495a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495e:	d106      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004960:	4bc3      	ldr	r3, [pc, #780]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	4ac2      	ldr	r2, [pc, #776]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800496a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800496c:	e008      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004974:	e004      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004976:	bf00      	nop
 8004978:	e002      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800497a:	bf00      	nop
 800497c:	e000      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800497e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004980:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004988:	4bb9      	ldr	r3, [pc, #740]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004998:	4ab5      	ldr	r2, [pc, #724]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800499a:	430b      	orrs	r3, r1
 800499c:	6553      	str	r3, [r2, #84]	; 0x54
 800499e:	e003      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80049b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80049b6:	2300      	movs	r3, #0
 80049b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80049be:	460b      	mov	r3, r1
 80049c0:	4313      	orrs	r3, r2
 80049c2:	d009      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049c4:	4baa      	ldr	r3, [pc, #680]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d2:	4aa7      	ldr	r2, [pc, #668]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80049e4:	653b      	str	r3, [r7, #80]	; 0x50
 80049e6:	2300      	movs	r3, #0
 80049e8:	657b      	str	r3, [r7, #84]	; 0x54
 80049ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80049ee:	460b      	mov	r3, r1
 80049f0:	4313      	orrs	r3, r2
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80049f4:	4b9e      	ldr	r3, [pc, #632]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80049fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a04:	4a9a      	ldr	r2, [pc, #616]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a06:	430b      	orrs	r3, r1
 8004a08:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a18:	2300      	movs	r3, #0
 8004a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a1c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004a20:	460b      	mov	r3, r1
 8004a22:	4313      	orrs	r3, r2
 8004a24:	d009      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a26:	4b92      	ldr	r3, [pc, #584]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a34:	4a8e      	ldr	r2, [pc, #568]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a36:	430b      	orrs	r3, r1
 8004a38:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004a46:	643b      	str	r3, [r7, #64]	; 0x40
 8004a48:	2300      	movs	r3, #0
 8004a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a4c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004a50:	460b      	mov	r3, r1
 8004a52:	4313      	orrs	r3, r2
 8004a54:	d00e      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a56:	4b86      	ldr	r3, [pc, #536]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	4a85      	ldr	r2, [pc, #532]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a60:	6113      	str	r3, [r2, #16]
 8004a62:	4b83      	ldr	r3, [pc, #524]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a64:	6919      	ldr	r1, [r3, #16]
 8004a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004a6e:	4a80      	ldr	r2, [pc, #512]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004a80:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a82:	2300      	movs	r3, #0
 8004a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a86:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	d009      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a90:	4b77      	ldr	r3, [pc, #476]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a94:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	4a74      	ldr	r2, [pc, #464]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004aba:	460b      	mov	r3, r1
 8004abc:	4313      	orrs	r3, r2
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ac0:	4b6b      	ldr	r3, [pc, #428]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad0:	4a67      	ldr	r2, [pc, #412]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	2100      	movs	r1, #0
 8004ae0:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004aec:	460b      	mov	r3, r1
 8004aee:	4313      	orrs	r3, r2
 8004af0:	d011      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af6:	3308      	adds	r3, #8
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fb78 	bl	80051f0 <RCCEx_PLL2_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	2100      	movs	r1, #0
 8004b20:	6239      	str	r1, [r7, #32]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
 8004b28:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	d011      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b36:	3308      	adds	r3, #8
 8004b38:	2101      	movs	r1, #1
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fb58 	bl	80051f0 <RCCEx_PLL2_Config>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004b46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	2100      	movs	r1, #0
 8004b60:	61b9      	str	r1, [r7, #24]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	61fb      	str	r3, [r7, #28]
 8004b68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	d011      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b76:	3308      	adds	r3, #8
 8004b78:	2102      	movs	r1, #2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fb38 	bl	80051f0 <RCCEx_PLL2_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004b86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	6139      	str	r1, [r7, #16]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004bac:	460b      	mov	r3, r1
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	d011      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb6:	3328      	adds	r3, #40	; 0x28
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fbca 	bl	8005354 <RCCEx_PLL3_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	2100      	movs	r1, #0
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004bec:	460b      	mov	r3, r1
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	d011      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf6:	3328      	adds	r3, #40	; 0x28
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fbaa 	bl	8005354 <RCCEx_PLL3_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	2100      	movs	r1, #0
 8004c20:	6039      	str	r1, [r7, #0]
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	d011      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c36:	3328      	adds	r3, #40	; 0x28
 8004c38:	2102      	movs	r1, #2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fb8a 	bl	8005354 <RCCEx_PLL3_Config>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004c56:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e000      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c70:	58024400 	.word	0x58024400

08004c74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004c78:	f7fe fd96 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	091b      	lsrs	r3, r3, #4
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	4904      	ldr	r1, [pc, #16]	; (8004c9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004c8a:	5ccb      	ldrb	r3, [r1, r3]
 8004c8c:	f003 031f 	and.w	r3, r3, #31
 8004c90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	58024400 	.word	0x58024400
 8004c9c:	08007318 	.word	0x08007318

08004ca0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b089      	sub	sp, #36	; 0x24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ca8:	4ba1      	ldr	r3, [pc, #644]	; (8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004cb2:	4b9f      	ldr	r3, [pc, #636]	; (8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	0b1b      	lsrs	r3, r3, #12
 8004cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004cbe:	4b9c      	ldr	r3, [pc, #624]	; (8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	091b      	lsrs	r3, r3, #4
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004cca:	4b99      	ldr	r3, [pc, #612]	; (8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cce:	08db      	lsrs	r3, r3, #3
 8004cd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8111 	beq.w	8004f10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	f000 8083 	beq.w	8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	f200 80a1 	bhi.w	8004e40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d056      	beq.n	8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d0a:	e099      	b.n	8004e40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d0c:	4b88      	ldr	r3, [pc, #544]	; (8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d02d      	beq.n	8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d18:	4b85      	ldr	r3, [pc, #532]	; (8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	08db      	lsrs	r3, r3, #3
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	4a84      	ldr	r2, [pc, #528]	; (8004f34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
 8004d28:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d42:	4b7b      	ldr	r3, [pc, #492]	; (8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d72:	e087      	b.n	8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d86:	4b6a      	ldr	r3, [pc, #424]	; (8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004db6:	e065      	b.n	8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dca:	4b59      	ldr	r3, [pc, #356]	; (8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dde:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dfa:	e043      	b.n	8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0e:	4b48      	ldr	r3, [pc, #288]	; (8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e3e:	e021      	b.n	8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e52:	4b37      	ldr	r3, [pc, #220]	; (8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004e84:	4b2a      	ldr	r3, [pc, #168]	; (8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	0a5b      	lsrs	r3, r3, #9
 8004e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eaa:	ee17 2a90 	vmov	r2, s15
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004eb2:	4b1f      	ldr	r3, [pc, #124]	; (8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	0c1b      	lsrs	r3, r3, #16
 8004eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ebc:	ee07 3a90 	vmov	s15, r3
 8004ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ec8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ecc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ed8:	ee17 2a90 	vmov	r2, s15
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004ee0:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	0e1b      	lsrs	r3, r3, #24
 8004ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f06:	ee17 2a90 	vmov	r2, s15
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f0e:	e008      	b.n	8004f22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
}
 8004f22:	bf00      	nop
 8004f24:	3724      	adds	r7, #36	; 0x24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	58024400 	.word	0x58024400
 8004f34:	03d09000 	.word	0x03d09000
 8004f38:	46000000 	.word	0x46000000
 8004f3c:	4c742400 	.word	0x4c742400
 8004f40:	4a742400 	.word	0x4a742400
 8004f44:	4bbebc20 	.word	0x4bbebc20

08004f48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b089      	sub	sp, #36	; 0x24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f50:	4ba1      	ldr	r3, [pc, #644]	; (80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004f5a:	4b9f      	ldr	r3, [pc, #636]	; (80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5e:	0d1b      	lsrs	r3, r3, #20
 8004f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004f66:	4b9c      	ldr	r3, [pc, #624]	; (80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	0a1b      	lsrs	r3, r3, #8
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004f72:	4b99      	ldr	r3, [pc, #612]	; (80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	08db      	lsrs	r3, r3, #3
 8004f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8111 	beq.w	80051b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	f000 8083 	beq.w	80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	f200 80a1 	bhi.w	80050e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d056      	beq.n	8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004fb2:	e099      	b.n	80050e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fb4:	4b88      	ldr	r3, [pc, #544]	; (80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d02d      	beq.n	800501c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fc0:	4b85      	ldr	r3, [pc, #532]	; (80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	08db      	lsrs	r3, r3, #3
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	4a84      	ldr	r2, [pc, #528]	; (80051dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	ee07 3a90 	vmov	s15, r3
 8004fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fea:	4b7b      	ldr	r3, [pc, #492]	; (80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ffe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800500e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005016:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800501a:	e087      	b.n	800512c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005026:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80051e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800502a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800502e:	4b6a      	ldr	r3, [pc, #424]	; (80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005036:	ee07 3a90 	vmov	s15, r3
 800503a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800503e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005042:	eddf 5a67 	vldr	s11, [pc, #412]	; 80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800504a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800504e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800505e:	e065      	b.n	800512c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800506e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005072:	4b59      	ldr	r3, [pc, #356]	; (80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005082:	ed97 6a03 	vldr	s12, [r7, #12]
 8005086:	eddf 5a56 	vldr	s11, [pc, #344]	; 80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800508a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800508e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800509a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800509e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050a2:	e043      	b.n	800512c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80051ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80050b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050b6:	4b48      	ldr	r3, [pc, #288]	; (80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050e6:	e021      	b.n	800512c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80050f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050fa:	4b37      	ldr	r3, [pc, #220]	; (80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800510a:	ed97 6a03 	vldr	s12, [r7, #12]
 800510e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80051e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800511a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800511e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800512a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800512c:	4b2a      	ldr	r3, [pc, #168]	; (80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	0a5b      	lsrs	r3, r3, #9
 8005132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005142:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005146:	edd7 6a07 	vldr	s13, [r7, #28]
 800514a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800514e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005152:	ee17 2a90 	vmov	r2, s15
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800515a:	4b1f      	ldr	r3, [pc, #124]	; (80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	0c1b      	lsrs	r3, r3, #16
 8005160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005164:	ee07 3a90 	vmov	s15, r3
 8005168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005170:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005174:	edd7 6a07 	vldr	s13, [r7, #28]
 8005178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800517c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005180:	ee17 2a90 	vmov	r2, s15
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005188:	4b13      	ldr	r3, [pc, #76]	; (80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	0e1b      	lsrs	r3, r3, #24
 800518e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800519e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80051a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ae:	ee17 2a90 	vmov	r2, s15
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80051b6:	e008      	b.n	80051ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	609a      	str	r2, [r3, #8]
}
 80051ca:	bf00      	nop
 80051cc:	3724      	adds	r7, #36	; 0x24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	58024400 	.word	0x58024400
 80051dc:	03d09000 	.word	0x03d09000
 80051e0:	46000000 	.word	0x46000000
 80051e4:	4c742400 	.word	0x4c742400
 80051e8:	4a742400 	.word	0x4a742400
 80051ec:	4bbebc20 	.word	0x4bbebc20

080051f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051fe:	4b53      	ldr	r3, [pc, #332]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	2b03      	cmp	r3, #3
 8005208:	d101      	bne.n	800520e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e099      	b.n	8005342 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800520e:	4b4f      	ldr	r3, [pc, #316]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a4e      	ldr	r2, [pc, #312]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 8005214:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800521a:	f7fc f91b 	bl	8001454 <HAL_GetTick>
 800521e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005220:	e008      	b.n	8005234 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005222:	f7fc f917 	bl	8001454 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e086      	b.n	8005342 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005234:	4b45      	ldr	r3, [pc, #276]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f0      	bne.n	8005222 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005240:	4b42      	ldr	r3, [pc, #264]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	031b      	lsls	r3, r3, #12
 800524e:	493f      	ldr	r1, [pc, #252]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 8005250:	4313      	orrs	r3, r2
 8005252:	628b      	str	r3, [r1, #40]	; 0x28
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	3b01      	subs	r3, #1
 800525a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	3b01      	subs	r3, #1
 8005264:	025b      	lsls	r3, r3, #9
 8005266:	b29b      	uxth	r3, r3
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	3b01      	subs	r3, #1
 8005270:	041b      	lsls	r3, r3, #16
 8005272:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	3b01      	subs	r3, #1
 800527e:	061b      	lsls	r3, r3, #24
 8005280:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005284:	4931      	ldr	r1, [pc, #196]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 8005286:	4313      	orrs	r3, r2
 8005288:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800528a:	4b30      	ldr	r3, [pc, #192]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	492d      	ldr	r1, [pc, #180]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 8005298:	4313      	orrs	r3, r2
 800529a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800529c:	4b2b      	ldr	r3, [pc, #172]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	f023 0220 	bic.w	r2, r3, #32
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	4928      	ldr	r1, [pc, #160]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80052ae:	4b27      	ldr	r3, [pc, #156]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	4a26      	ldr	r2, [pc, #152]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 80052b4:	f023 0310 	bic.w	r3, r3, #16
 80052b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80052ba:	4b24      	ldr	r3, [pc, #144]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 80052bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052be:	4b24      	ldr	r3, [pc, #144]	; (8005350 <RCCEx_PLL2_Config+0x160>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	69d2      	ldr	r2, [r2, #28]
 80052c6:	00d2      	lsls	r2, r2, #3
 80052c8:	4920      	ldr	r1, [pc, #128]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80052ce:	4b1f      	ldr	r3, [pc, #124]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	4a1e      	ldr	r2, [pc, #120]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 80052d4:	f043 0310 	orr.w	r3, r3, #16
 80052d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d106      	bne.n	80052ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80052e0:	4b1a      	ldr	r3, [pc, #104]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	4a19      	ldr	r2, [pc, #100]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 80052e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052ec:	e00f      	b.n	800530e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d106      	bne.n	8005302 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80052f4:	4b15      	ldr	r3, [pc, #84]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	4a14      	ldr	r2, [pc, #80]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 80052fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005300:	e005      	b.n	800530e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005302:	4b12      	ldr	r3, [pc, #72]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	4a11      	ldr	r2, [pc, #68]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 8005308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800530c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800530e:	4b0f      	ldr	r3, [pc, #60]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a0e      	ldr	r2, [pc, #56]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 8005314:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800531a:	f7fc f89b 	bl	8001454 <HAL_GetTick>
 800531e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005320:	e008      	b.n	8005334 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005322:	f7fc f897 	bl	8001454 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e006      	b.n	8005342 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <RCCEx_PLL2_Config+0x15c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f0      	beq.n	8005322 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	58024400 	.word	0x58024400
 8005350:	ffff0007 	.word	0xffff0007

08005354 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005362:	4b53      	ldr	r3, [pc, #332]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	2b03      	cmp	r3, #3
 800536c:	d101      	bne.n	8005372 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e099      	b.n	80054a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005372:	4b4f      	ldr	r3, [pc, #316]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a4e      	ldr	r2, [pc, #312]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 8005378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800537c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800537e:	f7fc f869 	bl	8001454 <HAL_GetTick>
 8005382:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005384:	e008      	b.n	8005398 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005386:	f7fc f865 	bl	8001454 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e086      	b.n	80054a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005398:	4b45      	ldr	r3, [pc, #276]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1f0      	bne.n	8005386 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80053a4:	4b42      	ldr	r3, [pc, #264]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	051b      	lsls	r3, r3, #20
 80053b2:	493f      	ldr	r1, [pc, #252]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	628b      	str	r3, [r1, #40]	; 0x28
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	3b01      	subs	r3, #1
 80053be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	025b      	lsls	r3, r3, #9
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	061b      	lsls	r3, r3, #24
 80053e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80053e8:	4931      	ldr	r1, [pc, #196]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80053ee:	4b30      	ldr	r3, [pc, #192]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	492d      	ldr	r1, [pc, #180]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005400:	4b2b      	ldr	r3, [pc, #172]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	4928      	ldr	r1, [pc, #160]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 800540e:	4313      	orrs	r3, r2
 8005410:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005412:	4b27      	ldr	r3, [pc, #156]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	4a26      	ldr	r2, [pc, #152]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 8005418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800541c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800541e:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 8005420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005422:	4b24      	ldr	r3, [pc, #144]	; (80054b4 <RCCEx_PLL3_Config+0x160>)
 8005424:	4013      	ands	r3, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	69d2      	ldr	r2, [r2, #28]
 800542a:	00d2      	lsls	r2, r2, #3
 800542c:	4920      	ldr	r1, [pc, #128]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 800542e:	4313      	orrs	r3, r2
 8005430:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005432:	4b1f      	ldr	r3, [pc, #124]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	4a1e      	ldr	r2, [pc, #120]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 8005438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d106      	bne.n	8005452 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005444:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	4a19      	ldr	r2, [pc, #100]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 800544a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800544e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005450:	e00f      	b.n	8005472 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d106      	bne.n	8005466 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005458:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	4a14      	ldr	r2, [pc, #80]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 800545e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005462:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005464:	e005      	b.n	8005472 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005466:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546a:	4a11      	ldr	r2, [pc, #68]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 800546c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005470:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005472:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a0e      	ldr	r2, [pc, #56]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 8005478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800547e:	f7fb ffe9 	bl	8001454 <HAL_GetTick>
 8005482:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005484:	e008      	b.n	8005498 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005486:	f7fb ffe5 	bl	8001454 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e006      	b.n	80054a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005498:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <RCCEx_PLL3_Config+0x15c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0f0      	beq.n	8005486 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	58024400 	.word	0x58024400
 80054b4:	ffff0007 	.word	0xffff0007

080054b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e042      	b.n	8005550 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d106      	bne.n	80054e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7fb fdb7 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2224      	movs	r2, #36	; 0x24
 80054e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0201 	bic.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f8ba 	bl	8005674 <UART_SetConfig>
 8005500:	4603      	mov	r3, r0
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e022      	b.n	8005550 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fe16 	bl	8006144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fe9d 	bl	8006288 <UART_CheckIdleState>
 800554e:	4603      	mov	r3, r0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	; 0x28
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556e:	2b20      	cmp	r3, #32
 8005570:	d17b      	bne.n	800566a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <HAL_UART_Transmit+0x26>
 8005578:	88fb      	ldrh	r3, [r7, #6]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e074      	b.n	800566c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2221      	movs	r2, #33	; 0x21
 800558e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005592:	f7fb ff5f 	bl	8001454 <HAL_GetTick>
 8005596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b0:	d108      	bne.n	80055c4 <HAL_UART_Transmit+0x6c>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d104      	bne.n	80055c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	e003      	b.n	80055cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055cc:	e030      	b.n	8005630 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	2180      	movs	r1, #128	; 0x80
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 feff 	bl	80063dc <UART_WaitOnFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e03d      	b.n	800566c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005604:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	3302      	adds	r3, #2
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	e007      	b.n	800561e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	3301      	adds	r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1c8      	bne.n	80055ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2200      	movs	r2, #0
 8005644:	2140      	movs	r1, #64	; 0x40
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fec8 	bl	80063dc <UART_WaitOnFlagUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e006      	b.n	800566c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e000      	b.n	800566c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800566a:	2302      	movs	r3, #2
  }
}
 800566c:	4618      	mov	r0, r3
 800566e:	3720      	adds	r7, #32
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005678:	b092      	sub	sp, #72	; 0x48
 800567a:	af00      	add	r7, sp, #0
 800567c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	431a      	orrs	r2, r3
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	431a      	orrs	r2, r3
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	4313      	orrs	r3, r2
 800569a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4bbe      	ldr	r3, [pc, #760]	; (800599c <UART_SetConfig+0x328>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	6812      	ldr	r2, [r2, #0]
 80056aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056ac:	430b      	orrs	r3, r1
 80056ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4ab3      	ldr	r2, [pc, #716]	; (80059a0 <UART_SetConfig+0x32c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d004      	beq.n	80056e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056dc:	4313      	orrs	r3, r2
 80056de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	4baf      	ldr	r3, [pc, #700]	; (80059a4 <UART_SetConfig+0x330>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	6812      	ldr	r2, [r2, #0]
 80056ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056f0:	430b      	orrs	r3, r1
 80056f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	f023 010f 	bic.w	r1, r3, #15
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4aa6      	ldr	r2, [pc, #664]	; (80059a8 <UART_SetConfig+0x334>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d177      	bne.n	8005804 <UART_SetConfig+0x190>
 8005714:	4ba5      	ldr	r3, [pc, #660]	; (80059ac <UART_SetConfig+0x338>)
 8005716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800571c:	2b28      	cmp	r3, #40	; 0x28
 800571e:	d86d      	bhi.n	80057fc <UART_SetConfig+0x188>
 8005720:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <UART_SetConfig+0xb4>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	080057cd 	.word	0x080057cd
 800572c:	080057fd 	.word	0x080057fd
 8005730:	080057fd 	.word	0x080057fd
 8005734:	080057fd 	.word	0x080057fd
 8005738:	080057fd 	.word	0x080057fd
 800573c:	080057fd 	.word	0x080057fd
 8005740:	080057fd 	.word	0x080057fd
 8005744:	080057fd 	.word	0x080057fd
 8005748:	080057d5 	.word	0x080057d5
 800574c:	080057fd 	.word	0x080057fd
 8005750:	080057fd 	.word	0x080057fd
 8005754:	080057fd 	.word	0x080057fd
 8005758:	080057fd 	.word	0x080057fd
 800575c:	080057fd 	.word	0x080057fd
 8005760:	080057fd 	.word	0x080057fd
 8005764:	080057fd 	.word	0x080057fd
 8005768:	080057dd 	.word	0x080057dd
 800576c:	080057fd 	.word	0x080057fd
 8005770:	080057fd 	.word	0x080057fd
 8005774:	080057fd 	.word	0x080057fd
 8005778:	080057fd 	.word	0x080057fd
 800577c:	080057fd 	.word	0x080057fd
 8005780:	080057fd 	.word	0x080057fd
 8005784:	080057fd 	.word	0x080057fd
 8005788:	080057e5 	.word	0x080057e5
 800578c:	080057fd 	.word	0x080057fd
 8005790:	080057fd 	.word	0x080057fd
 8005794:	080057fd 	.word	0x080057fd
 8005798:	080057fd 	.word	0x080057fd
 800579c:	080057fd 	.word	0x080057fd
 80057a0:	080057fd 	.word	0x080057fd
 80057a4:	080057fd 	.word	0x080057fd
 80057a8:	080057ed 	.word	0x080057ed
 80057ac:	080057fd 	.word	0x080057fd
 80057b0:	080057fd 	.word	0x080057fd
 80057b4:	080057fd 	.word	0x080057fd
 80057b8:	080057fd 	.word	0x080057fd
 80057bc:	080057fd 	.word	0x080057fd
 80057c0:	080057fd 	.word	0x080057fd
 80057c4:	080057fd 	.word	0x080057fd
 80057c8:	080057f5 	.word	0x080057f5
 80057cc:	2301      	movs	r3, #1
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057d2:	e222      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80057d4:	2304      	movs	r3, #4
 80057d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057da:	e21e      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80057dc:	2308      	movs	r3, #8
 80057de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e2:	e21a      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80057e4:	2310      	movs	r3, #16
 80057e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ea:	e216      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80057ec:	2320      	movs	r3, #32
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f2:	e212      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80057f4:	2340      	movs	r3, #64	; 0x40
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fa:	e20e      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005802:	e20a      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a69      	ldr	r2, [pc, #420]	; (80059b0 <UART_SetConfig+0x33c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d130      	bne.n	8005870 <UART_SetConfig+0x1fc>
 800580e:	4b67      	ldr	r3, [pc, #412]	; (80059ac <UART_SetConfig+0x338>)
 8005810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	2b05      	cmp	r3, #5
 8005818:	d826      	bhi.n	8005868 <UART_SetConfig+0x1f4>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <UART_SetConfig+0x1ac>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005839 	.word	0x08005839
 8005824:	08005841 	.word	0x08005841
 8005828:	08005849 	.word	0x08005849
 800582c:	08005851 	.word	0x08005851
 8005830:	08005859 	.word	0x08005859
 8005834:	08005861 	.word	0x08005861
 8005838:	2300      	movs	r3, #0
 800583a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583e:	e1ec      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005840:	2304      	movs	r3, #4
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005846:	e1e8      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005848:	2308      	movs	r3, #8
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584e:	e1e4      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005850:	2310      	movs	r3, #16
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005856:	e1e0      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005858:	2320      	movs	r3, #32
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585e:	e1dc      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005860:	2340      	movs	r3, #64	; 0x40
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005866:	e1d8      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586e:	e1d4      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a4f      	ldr	r2, [pc, #316]	; (80059b4 <UART_SetConfig+0x340>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d130      	bne.n	80058dc <UART_SetConfig+0x268>
 800587a:	4b4c      	ldr	r3, [pc, #304]	; (80059ac <UART_SetConfig+0x338>)
 800587c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	2b05      	cmp	r3, #5
 8005884:	d826      	bhi.n	80058d4 <UART_SetConfig+0x260>
 8005886:	a201      	add	r2, pc, #4	; (adr r2, 800588c <UART_SetConfig+0x218>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	080058a5 	.word	0x080058a5
 8005890:	080058ad 	.word	0x080058ad
 8005894:	080058b5 	.word	0x080058b5
 8005898:	080058bd 	.word	0x080058bd
 800589c:	080058c5 	.word	0x080058c5
 80058a0:	080058cd 	.word	0x080058cd
 80058a4:	2300      	movs	r3, #0
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058aa:	e1b6      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80058ac:	2304      	movs	r3, #4
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b2:	e1b2      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80058b4:	2308      	movs	r3, #8
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ba:	e1ae      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80058bc:	2310      	movs	r3, #16
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c2:	e1aa      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80058c4:	2320      	movs	r3, #32
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ca:	e1a6      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80058cc:	2340      	movs	r3, #64	; 0x40
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d2:	e1a2      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80058d4:	2380      	movs	r3, #128	; 0x80
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058da:	e19e      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a35      	ldr	r2, [pc, #212]	; (80059b8 <UART_SetConfig+0x344>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d130      	bne.n	8005948 <UART_SetConfig+0x2d4>
 80058e6:	4b31      	ldr	r3, [pc, #196]	; (80059ac <UART_SetConfig+0x338>)
 80058e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d826      	bhi.n	8005940 <UART_SetConfig+0x2cc>
 80058f2:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <UART_SetConfig+0x284>)
 80058f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f8:	08005911 	.word	0x08005911
 80058fc:	08005919 	.word	0x08005919
 8005900:	08005921 	.word	0x08005921
 8005904:	08005929 	.word	0x08005929
 8005908:	08005931 	.word	0x08005931
 800590c:	08005939 	.word	0x08005939
 8005910:	2300      	movs	r3, #0
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005916:	e180      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005918:	2304      	movs	r3, #4
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800591e:	e17c      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005920:	2308      	movs	r3, #8
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005926:	e178      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005928:	2310      	movs	r3, #16
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592e:	e174      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005930:	2320      	movs	r3, #32
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005936:	e170      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005938:	2340      	movs	r3, #64	; 0x40
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593e:	e16c      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005946:	e168      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1b      	ldr	r2, [pc, #108]	; (80059bc <UART_SetConfig+0x348>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d142      	bne.n	80059d8 <UART_SetConfig+0x364>
 8005952:	4b16      	ldr	r3, [pc, #88]	; (80059ac <UART_SetConfig+0x338>)
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b05      	cmp	r3, #5
 800595c:	d838      	bhi.n	80059d0 <UART_SetConfig+0x35c>
 800595e:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <UART_SetConfig+0x2f0>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	0800597d 	.word	0x0800597d
 8005968:	08005985 	.word	0x08005985
 800596c:	0800598d 	.word	0x0800598d
 8005970:	08005995 	.word	0x08005995
 8005974:	080059c1 	.word	0x080059c1
 8005978:	080059c9 	.word	0x080059c9
 800597c:	2300      	movs	r3, #0
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005982:	e14a      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005984:	2304      	movs	r3, #4
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598a:	e146      	b.n	8005c1a <UART_SetConfig+0x5a6>
 800598c:	2308      	movs	r3, #8
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005992:	e142      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005994:	2310      	movs	r3, #16
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599a:	e13e      	b.n	8005c1a <UART_SetConfig+0x5a6>
 800599c:	cfff69f3 	.word	0xcfff69f3
 80059a0:	58000c00 	.word	0x58000c00
 80059a4:	11fff4ff 	.word	0x11fff4ff
 80059a8:	40011000 	.word	0x40011000
 80059ac:	58024400 	.word	0x58024400
 80059b0:	40004400 	.word	0x40004400
 80059b4:	40004800 	.word	0x40004800
 80059b8:	40004c00 	.word	0x40004c00
 80059bc:	40005000 	.word	0x40005000
 80059c0:	2320      	movs	r3, #32
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059c6:	e128      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80059c8:	2340      	movs	r3, #64	; 0x40
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ce:	e124      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059d6:	e120      	b.n	8005c1a <UART_SetConfig+0x5a6>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4acb      	ldr	r2, [pc, #812]	; (8005d0c <UART_SetConfig+0x698>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d176      	bne.n	8005ad0 <UART_SetConfig+0x45c>
 80059e2:	4bcb      	ldr	r3, [pc, #812]	; (8005d10 <UART_SetConfig+0x69c>)
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059ea:	2b28      	cmp	r3, #40	; 0x28
 80059ec:	d86c      	bhi.n	8005ac8 <UART_SetConfig+0x454>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <UART_SetConfig+0x380>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a99 	.word	0x08005a99
 80059f8:	08005ac9 	.word	0x08005ac9
 80059fc:	08005ac9 	.word	0x08005ac9
 8005a00:	08005ac9 	.word	0x08005ac9
 8005a04:	08005ac9 	.word	0x08005ac9
 8005a08:	08005ac9 	.word	0x08005ac9
 8005a0c:	08005ac9 	.word	0x08005ac9
 8005a10:	08005ac9 	.word	0x08005ac9
 8005a14:	08005aa1 	.word	0x08005aa1
 8005a18:	08005ac9 	.word	0x08005ac9
 8005a1c:	08005ac9 	.word	0x08005ac9
 8005a20:	08005ac9 	.word	0x08005ac9
 8005a24:	08005ac9 	.word	0x08005ac9
 8005a28:	08005ac9 	.word	0x08005ac9
 8005a2c:	08005ac9 	.word	0x08005ac9
 8005a30:	08005ac9 	.word	0x08005ac9
 8005a34:	08005aa9 	.word	0x08005aa9
 8005a38:	08005ac9 	.word	0x08005ac9
 8005a3c:	08005ac9 	.word	0x08005ac9
 8005a40:	08005ac9 	.word	0x08005ac9
 8005a44:	08005ac9 	.word	0x08005ac9
 8005a48:	08005ac9 	.word	0x08005ac9
 8005a4c:	08005ac9 	.word	0x08005ac9
 8005a50:	08005ac9 	.word	0x08005ac9
 8005a54:	08005ab1 	.word	0x08005ab1
 8005a58:	08005ac9 	.word	0x08005ac9
 8005a5c:	08005ac9 	.word	0x08005ac9
 8005a60:	08005ac9 	.word	0x08005ac9
 8005a64:	08005ac9 	.word	0x08005ac9
 8005a68:	08005ac9 	.word	0x08005ac9
 8005a6c:	08005ac9 	.word	0x08005ac9
 8005a70:	08005ac9 	.word	0x08005ac9
 8005a74:	08005ab9 	.word	0x08005ab9
 8005a78:	08005ac9 	.word	0x08005ac9
 8005a7c:	08005ac9 	.word	0x08005ac9
 8005a80:	08005ac9 	.word	0x08005ac9
 8005a84:	08005ac9 	.word	0x08005ac9
 8005a88:	08005ac9 	.word	0x08005ac9
 8005a8c:	08005ac9 	.word	0x08005ac9
 8005a90:	08005ac9 	.word	0x08005ac9
 8005a94:	08005ac1 	.word	0x08005ac1
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a9e:	e0bc      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aa6:	e0b8      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005aa8:	2308      	movs	r3, #8
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aae:	e0b4      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005ab0:	2310      	movs	r3, #16
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ab6:	e0b0      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005ab8:	2320      	movs	r3, #32
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005abe:	e0ac      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005ac0:	2340      	movs	r3, #64	; 0x40
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ac6:	e0a8      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005ac8:	2380      	movs	r3, #128	; 0x80
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ace:	e0a4      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a8f      	ldr	r2, [pc, #572]	; (8005d14 <UART_SetConfig+0x6a0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d130      	bne.n	8005b3c <UART_SetConfig+0x4c8>
 8005ada:	4b8d      	ldr	r3, [pc, #564]	; (8005d10 <UART_SetConfig+0x69c>)
 8005adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	2b05      	cmp	r3, #5
 8005ae4:	d826      	bhi.n	8005b34 <UART_SetConfig+0x4c0>
 8005ae6:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <UART_SetConfig+0x478>)
 8005ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aec:	08005b05 	.word	0x08005b05
 8005af0:	08005b0d 	.word	0x08005b0d
 8005af4:	08005b15 	.word	0x08005b15
 8005af8:	08005b1d 	.word	0x08005b1d
 8005afc:	08005b25 	.word	0x08005b25
 8005b00:	08005b2d 	.word	0x08005b2d
 8005b04:	2300      	movs	r3, #0
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b0a:	e086      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b12:	e082      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005b14:	2308      	movs	r3, #8
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1a:	e07e      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005b1c:	2310      	movs	r3, #16
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b22:	e07a      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005b24:	2320      	movs	r3, #32
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2a:	e076      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005b2c:	2340      	movs	r3, #64	; 0x40
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b32:	e072      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005b34:	2380      	movs	r3, #128	; 0x80
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3a:	e06e      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a75      	ldr	r2, [pc, #468]	; (8005d18 <UART_SetConfig+0x6a4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d130      	bne.n	8005ba8 <UART_SetConfig+0x534>
 8005b46:	4b72      	ldr	r3, [pc, #456]	; (8005d10 <UART_SetConfig+0x69c>)
 8005b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	d826      	bhi.n	8005ba0 <UART_SetConfig+0x52c>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <UART_SetConfig+0x4e4>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b71 	.word	0x08005b71
 8005b5c:	08005b79 	.word	0x08005b79
 8005b60:	08005b81 	.word	0x08005b81
 8005b64:	08005b89 	.word	0x08005b89
 8005b68:	08005b91 	.word	0x08005b91
 8005b6c:	08005b99 	.word	0x08005b99
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b76:	e050      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7e:	e04c      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005b80:	2308      	movs	r3, #8
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b86:	e048      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8e:	e044      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005b90:	2320      	movs	r3, #32
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b96:	e040      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005b98:	2340      	movs	r3, #64	; 0x40
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9e:	e03c      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005ba0:	2380      	movs	r3, #128	; 0x80
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba6:	e038      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a5b      	ldr	r2, [pc, #364]	; (8005d1c <UART_SetConfig+0x6a8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d130      	bne.n	8005c14 <UART_SetConfig+0x5a0>
 8005bb2:	4b57      	ldr	r3, [pc, #348]	; (8005d10 <UART_SetConfig+0x69c>)
 8005bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	2b05      	cmp	r3, #5
 8005bbc:	d826      	bhi.n	8005c0c <UART_SetConfig+0x598>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0x550>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005bdd 	.word	0x08005bdd
 8005bc8:	08005be5 	.word	0x08005be5
 8005bcc:	08005bed 	.word	0x08005bed
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005bfd 	.word	0x08005bfd
 8005bd8:	08005c05 	.word	0x08005c05
 8005bdc:	2302      	movs	r3, #2
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be2:	e01a      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005be4:	2304      	movs	r3, #4
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bea:	e016      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005bec:	2308      	movs	r3, #8
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf2:	e012      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfa:	e00e      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005bfc:	2320      	movs	r3, #32
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c02:	e00a      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005c04:	2340      	movs	r3, #64	; 0x40
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0a:	e006      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c12:	e002      	b.n	8005c1a <UART_SetConfig+0x5a6>
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a3f      	ldr	r2, [pc, #252]	; (8005d1c <UART_SetConfig+0x6a8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	f040 80f8 	bne.w	8005e16 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	dc46      	bgt.n	8005cbc <UART_SetConfig+0x648>
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	f2c0 8082 	blt.w	8005d38 <UART_SetConfig+0x6c4>
 8005c34:	3b02      	subs	r3, #2
 8005c36:	2b1e      	cmp	r3, #30
 8005c38:	d87e      	bhi.n	8005d38 <UART_SetConfig+0x6c4>
 8005c3a:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <UART_SetConfig+0x5cc>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005cc3 	.word	0x08005cc3
 8005c44:	08005d39 	.word	0x08005d39
 8005c48:	08005ccb 	.word	0x08005ccb
 8005c4c:	08005d39 	.word	0x08005d39
 8005c50:	08005d39 	.word	0x08005d39
 8005c54:	08005d39 	.word	0x08005d39
 8005c58:	08005cdb 	.word	0x08005cdb
 8005c5c:	08005d39 	.word	0x08005d39
 8005c60:	08005d39 	.word	0x08005d39
 8005c64:	08005d39 	.word	0x08005d39
 8005c68:	08005d39 	.word	0x08005d39
 8005c6c:	08005d39 	.word	0x08005d39
 8005c70:	08005d39 	.word	0x08005d39
 8005c74:	08005d39 	.word	0x08005d39
 8005c78:	08005ceb 	.word	0x08005ceb
 8005c7c:	08005d39 	.word	0x08005d39
 8005c80:	08005d39 	.word	0x08005d39
 8005c84:	08005d39 	.word	0x08005d39
 8005c88:	08005d39 	.word	0x08005d39
 8005c8c:	08005d39 	.word	0x08005d39
 8005c90:	08005d39 	.word	0x08005d39
 8005c94:	08005d39 	.word	0x08005d39
 8005c98:	08005d39 	.word	0x08005d39
 8005c9c:	08005d39 	.word	0x08005d39
 8005ca0:	08005d39 	.word	0x08005d39
 8005ca4:	08005d39 	.word	0x08005d39
 8005ca8:	08005d39 	.word	0x08005d39
 8005cac:	08005d39 	.word	0x08005d39
 8005cb0:	08005d39 	.word	0x08005d39
 8005cb4:	08005d39 	.word	0x08005d39
 8005cb8:	08005d2b 	.word	0x08005d2b
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d037      	beq.n	8005d30 <UART_SetConfig+0x6bc>
 8005cc0:	e03a      	b.n	8005d38 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005cc2:	f7fe ffd7 	bl	8004c74 <HAL_RCCEx_GetD3PCLK1Freq>
 8005cc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005cc8:	e03c      	b.n	8005d44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe ffe6 	bl	8004ca0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cd8:	e034      	b.n	8005d44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cda:	f107 0318 	add.w	r3, r7, #24
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff f932 	bl	8004f48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce8:	e02c      	b.n	8005d44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <UART_SetConfig+0x69c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d016      	beq.n	8005d24 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cf6:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <UART_SetConfig+0x69c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	08db      	lsrs	r3, r3, #3
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	4a07      	ldr	r2, [pc, #28]	; (8005d20 <UART_SetConfig+0x6ac>)
 8005d02:	fa22 f303 	lsr.w	r3, r2, r3
 8005d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d08:	e01c      	b.n	8005d44 <UART_SetConfig+0x6d0>
 8005d0a:	bf00      	nop
 8005d0c:	40011400 	.word	0x40011400
 8005d10:	58024400 	.word	0x58024400
 8005d14:	40007800 	.word	0x40007800
 8005d18:	40007c00 	.word	0x40007c00
 8005d1c:	58000c00 	.word	0x58000c00
 8005d20:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005d24:	4b9d      	ldr	r3, [pc, #628]	; (8005f9c <UART_SetConfig+0x928>)
 8005d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d28:	e00c      	b.n	8005d44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d2a:	4b9d      	ldr	r3, [pc, #628]	; (8005fa0 <UART_SetConfig+0x92c>)
 8005d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d2e:	e009      	b.n	8005d44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d36:	e005      	b.n	8005d44 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 81de 	beq.w	8006108 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	4a94      	ldr	r2, [pc, #592]	; (8005fa4 <UART_SetConfig+0x930>)
 8005d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d56:	461a      	mov	r2, r3
 8005d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d5e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	4613      	mov	r3, r2
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	4413      	add	r3, r2
 8005d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d305      	bcc.n	8005d7c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d903      	bls.n	8005d84 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d82:	e1c1      	b.n	8006108 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d86:	2200      	movs	r2, #0
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	60fa      	str	r2, [r7, #12]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	4a84      	ldr	r2, [pc, #528]	; (8005fa4 <UART_SetConfig+0x930>)
 8005d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2200      	movs	r2, #0
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	607a      	str	r2, [r7, #4]
 8005d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005da2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005da6:	f7fa faf3 	bl	8000390 <__aeabi_uldivmod>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4610      	mov	r0, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	f04f 0200 	mov.w	r2, #0
 8005db6:	f04f 0300 	mov.w	r3, #0
 8005dba:	020b      	lsls	r3, r1, #8
 8005dbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005dc0:	0202      	lsls	r2, r0, #8
 8005dc2:	6979      	ldr	r1, [r7, #20]
 8005dc4:	6849      	ldr	r1, [r1, #4]
 8005dc6:	0849      	lsrs	r1, r1, #1
 8005dc8:	2000      	movs	r0, #0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	4605      	mov	r5, r0
 8005dce:	eb12 0804 	adds.w	r8, r2, r4
 8005dd2:	eb43 0905 	adc.w	r9, r3, r5
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	469a      	mov	sl, r3
 8005dde:	4693      	mov	fp, r2
 8005de0:	4652      	mov	r2, sl
 8005de2:	465b      	mov	r3, fp
 8005de4:	4640      	mov	r0, r8
 8005de6:	4649      	mov	r1, r9
 8005de8:	f7fa fad2 	bl	8000390 <__aeabi_uldivmod>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4613      	mov	r3, r2
 8005df2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dfa:	d308      	bcc.n	8005e0e <UART_SetConfig+0x79a>
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e02:	d204      	bcs.n	8005e0e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e0a:	60da      	str	r2, [r3, #12]
 8005e0c:	e17c      	b.n	8006108 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005e14:	e178      	b.n	8006108 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e1e:	f040 80c5 	bne.w	8005fac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005e22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	dc48      	bgt.n	8005ebc <UART_SetConfig+0x848>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	db7b      	blt.n	8005f26 <UART_SetConfig+0x8b2>
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	d879      	bhi.n	8005f26 <UART_SetConfig+0x8b2>
 8005e32:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <UART_SetConfig+0x7c4>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005ec3 	.word	0x08005ec3
 8005e3c:	08005ecb 	.word	0x08005ecb
 8005e40:	08005f27 	.word	0x08005f27
 8005e44:	08005f27 	.word	0x08005f27
 8005e48:	08005ed3 	.word	0x08005ed3
 8005e4c:	08005f27 	.word	0x08005f27
 8005e50:	08005f27 	.word	0x08005f27
 8005e54:	08005f27 	.word	0x08005f27
 8005e58:	08005ee3 	.word	0x08005ee3
 8005e5c:	08005f27 	.word	0x08005f27
 8005e60:	08005f27 	.word	0x08005f27
 8005e64:	08005f27 	.word	0x08005f27
 8005e68:	08005f27 	.word	0x08005f27
 8005e6c:	08005f27 	.word	0x08005f27
 8005e70:	08005f27 	.word	0x08005f27
 8005e74:	08005f27 	.word	0x08005f27
 8005e78:	08005ef3 	.word	0x08005ef3
 8005e7c:	08005f27 	.word	0x08005f27
 8005e80:	08005f27 	.word	0x08005f27
 8005e84:	08005f27 	.word	0x08005f27
 8005e88:	08005f27 	.word	0x08005f27
 8005e8c:	08005f27 	.word	0x08005f27
 8005e90:	08005f27 	.word	0x08005f27
 8005e94:	08005f27 	.word	0x08005f27
 8005e98:	08005f27 	.word	0x08005f27
 8005e9c:	08005f27 	.word	0x08005f27
 8005ea0:	08005f27 	.word	0x08005f27
 8005ea4:	08005f27 	.word	0x08005f27
 8005ea8:	08005f27 	.word	0x08005f27
 8005eac:	08005f27 	.word	0x08005f27
 8005eb0:	08005f27 	.word	0x08005f27
 8005eb4:	08005f27 	.word	0x08005f27
 8005eb8:	08005f19 	.word	0x08005f19
 8005ebc:	2b40      	cmp	r3, #64	; 0x40
 8005ebe:	d02e      	beq.n	8005f1e <UART_SetConfig+0x8aa>
 8005ec0:	e031      	b.n	8005f26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec2:	f7fd fca1 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8005ec6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ec8:	e033      	b.n	8005f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eca:	f7fd fcb3 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 8005ece:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ed0:	e02f      	b.n	8005f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe fee2 	bl	8004ca0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ee0:	e027      	b.n	8005f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ee2:	f107 0318 	add.w	r3, r7, #24
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff f82e 	bl	8004f48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ef0:	e01f      	b.n	8005f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ef2:	4b2d      	ldr	r3, [pc, #180]	; (8005fa8 <UART_SetConfig+0x934>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d009      	beq.n	8005f12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005efe:	4b2a      	ldr	r3, [pc, #168]	; (8005fa8 <UART_SetConfig+0x934>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	08db      	lsrs	r3, r3, #3
 8005f04:	f003 0303 	and.w	r3, r3, #3
 8005f08:	4a24      	ldr	r2, [pc, #144]	; (8005f9c <UART_SetConfig+0x928>)
 8005f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f10:	e00f      	b.n	8005f32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005f12:	4b22      	ldr	r3, [pc, #136]	; (8005f9c <UART_SetConfig+0x928>)
 8005f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f16:	e00c      	b.n	8005f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f18:	4b21      	ldr	r3, [pc, #132]	; (8005fa0 <UART_SetConfig+0x92c>)
 8005f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f1c:	e009      	b.n	8005f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f24:	e005      	b.n	8005f32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80e7 	beq.w	8006108 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	4a19      	ldr	r2, [pc, #100]	; (8005fa4 <UART_SetConfig+0x930>)
 8005f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f44:	461a      	mov	r2, r3
 8005f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f4c:	005a      	lsls	r2, r3, #1
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	441a      	add	r2, r3
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	2b0f      	cmp	r3, #15
 8005f64:	d916      	bls.n	8005f94 <UART_SetConfig+0x920>
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6c:	d212      	bcs.n	8005f94 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	f023 030f 	bic.w	r3, r3, #15
 8005f76:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7a:	085b      	lsrs	r3, r3, #1
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f86:	4313      	orrs	r3, r2
 8005f88:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005f90:	60da      	str	r2, [r3, #12]
 8005f92:	e0b9      	b.n	8006108 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005f9a:	e0b5      	b.n	8006108 <UART_SetConfig+0xa94>
 8005f9c:	03d09000 	.word	0x03d09000
 8005fa0:	003d0900 	.word	0x003d0900
 8005fa4:	08007328 	.word	0x08007328
 8005fa8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	dc49      	bgt.n	8006048 <UART_SetConfig+0x9d4>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	db7c      	blt.n	80060b2 <UART_SetConfig+0xa3e>
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d87a      	bhi.n	80060b2 <UART_SetConfig+0xa3e>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UART_SetConfig+0x950>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	0800604f 	.word	0x0800604f
 8005fc8:	08006057 	.word	0x08006057
 8005fcc:	080060b3 	.word	0x080060b3
 8005fd0:	080060b3 	.word	0x080060b3
 8005fd4:	0800605f 	.word	0x0800605f
 8005fd8:	080060b3 	.word	0x080060b3
 8005fdc:	080060b3 	.word	0x080060b3
 8005fe0:	080060b3 	.word	0x080060b3
 8005fe4:	0800606f 	.word	0x0800606f
 8005fe8:	080060b3 	.word	0x080060b3
 8005fec:	080060b3 	.word	0x080060b3
 8005ff0:	080060b3 	.word	0x080060b3
 8005ff4:	080060b3 	.word	0x080060b3
 8005ff8:	080060b3 	.word	0x080060b3
 8005ffc:	080060b3 	.word	0x080060b3
 8006000:	080060b3 	.word	0x080060b3
 8006004:	0800607f 	.word	0x0800607f
 8006008:	080060b3 	.word	0x080060b3
 800600c:	080060b3 	.word	0x080060b3
 8006010:	080060b3 	.word	0x080060b3
 8006014:	080060b3 	.word	0x080060b3
 8006018:	080060b3 	.word	0x080060b3
 800601c:	080060b3 	.word	0x080060b3
 8006020:	080060b3 	.word	0x080060b3
 8006024:	080060b3 	.word	0x080060b3
 8006028:	080060b3 	.word	0x080060b3
 800602c:	080060b3 	.word	0x080060b3
 8006030:	080060b3 	.word	0x080060b3
 8006034:	080060b3 	.word	0x080060b3
 8006038:	080060b3 	.word	0x080060b3
 800603c:	080060b3 	.word	0x080060b3
 8006040:	080060b3 	.word	0x080060b3
 8006044:	080060a5 	.word	0x080060a5
 8006048:	2b40      	cmp	r3, #64	; 0x40
 800604a:	d02e      	beq.n	80060aa <UART_SetConfig+0xa36>
 800604c:	e031      	b.n	80060b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800604e:	f7fd fbdb 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8006052:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006054:	e033      	b.n	80060be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006056:	f7fd fbed 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 800605a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800605c:	e02f      	b.n	80060be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800605e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fe1c 	bl	8004ca0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800606c:	e027      	b.n	80060be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800606e:	f107 0318 	add.w	r3, r7, #24
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe ff68 	bl	8004f48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800607c:	e01f      	b.n	80060be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800607e:	4b2d      	ldr	r3, [pc, #180]	; (8006134 <UART_SetConfig+0xac0>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0320 	and.w	r3, r3, #32
 8006086:	2b00      	cmp	r3, #0
 8006088:	d009      	beq.n	800609e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800608a:	4b2a      	ldr	r3, [pc, #168]	; (8006134 <UART_SetConfig+0xac0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	08db      	lsrs	r3, r3, #3
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	4a28      	ldr	r2, [pc, #160]	; (8006138 <UART_SetConfig+0xac4>)
 8006096:	fa22 f303 	lsr.w	r3, r2, r3
 800609a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800609c:	e00f      	b.n	80060be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800609e:	4b26      	ldr	r3, [pc, #152]	; (8006138 <UART_SetConfig+0xac4>)
 80060a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060a2:	e00c      	b.n	80060be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060a4:	4b25      	ldr	r3, [pc, #148]	; (800613c <UART_SetConfig+0xac8>)
 80060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060a8:	e009      	b.n	80060be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060b0:	e005      	b.n	80060be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80060bc:	bf00      	nop
    }

    if (pclk != 0U)
 80060be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d021      	beq.n	8006108 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	4a1d      	ldr	r2, [pc, #116]	; (8006140 <UART_SetConfig+0xacc>)
 80060ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ce:	461a      	mov	r2, r3
 80060d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	085b      	lsrs	r3, r3, #1
 80060dc:	441a      	add	r2, r3
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	2b0f      	cmp	r3, #15
 80060ec:	d909      	bls.n	8006102 <UART_SetConfig+0xa8e>
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f4:	d205      	bcs.n	8006102 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60da      	str	r2, [r3, #12]
 8006100:	e002      	b.n	8006108 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2201      	movs	r2, #1
 800610c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2201      	movs	r2, #1
 8006114:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2200      	movs	r2, #0
 800611c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2200      	movs	r2, #0
 8006122:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006124:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006128:	4618      	mov	r0, r3
 800612a:	3748      	adds	r7, #72	; 0x48
 800612c:	46bd      	mov	sp, r7
 800612e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006132:	bf00      	nop
 8006134:	58024400 	.word	0x58024400
 8006138:	03d09000 	.word	0x03d09000
 800613c:	003d0900 	.word	0x003d0900
 8006140:	08007328 	.word	0x08007328

08006144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01a      	beq.n	800625a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006242:	d10a      	bne.n	800625a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	605a      	str	r2, [r3, #4]
  }
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b098      	sub	sp, #96	; 0x60
 800628c:	af02      	add	r7, sp, #8
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006298:	f7fb f8dc 	bl	8001454 <HAL_GetTick>
 800629c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d12f      	bne.n	800630c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062b4:	2200      	movs	r2, #0
 80062b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f88e 	bl	80063dc <UART_WaitOnFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d022      	beq.n	800630c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062da:	653b      	str	r3, [r7, #80]	; 0x50
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e4:	647b      	str	r3, [r7, #68]	; 0x44
 80062e6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ec:	e841 2300 	strex	r3, r2, [r1]
 80062f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e6      	bne.n	80062c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e063      	b.n	80063d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	2b04      	cmp	r3, #4
 8006318:	d149      	bne.n	80063ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800631a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006322:	2200      	movs	r2, #0
 8006324:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f857 	bl	80063dc <UART_WaitOnFlagUntilTimeout>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d03c      	beq.n	80063ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	623b      	str	r3, [r7, #32]
   return(result);
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006348:	64fb      	str	r3, [r7, #76]	; 0x4c
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006352:	633b      	str	r3, [r7, #48]	; 0x30
 8006354:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e6      	bne.n	8006334 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3308      	adds	r3, #8
 800636c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	60fb      	str	r3, [r7, #12]
   return(result);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	64bb      	str	r3, [r7, #72]	; 0x48
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3308      	adds	r3, #8
 8006384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006386:	61fa      	str	r2, [r7, #28]
 8006388:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	69b9      	ldr	r1, [r7, #24]
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	617b      	str	r3, [r7, #20]
   return(result);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e5      	bne.n	8006366 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e012      	b.n	80063d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3758      	adds	r7, #88	; 0x58
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	4613      	mov	r3, r2
 80063ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ec:	e049      	b.n	8006482 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f4:	d045      	beq.n	8006482 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f6:	f7fb f82d 	bl	8001454 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	429a      	cmp	r2, r3
 8006404:	d302      	bcc.n	800640c <UART_WaitOnFlagUntilTimeout+0x30>
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e048      	b.n	80064a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0304 	and.w	r3, r3, #4
 800641a:	2b00      	cmp	r3, #0
 800641c:	d031      	beq.n	8006482 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	f003 0308 	and.w	r3, r3, #8
 8006428:	2b08      	cmp	r3, #8
 800642a:	d110      	bne.n	800644e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2208      	movs	r2, #8
 8006432:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 f839 	bl	80064ac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2208      	movs	r2, #8
 800643e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e029      	b.n	80064a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800645c:	d111      	bne.n	8006482 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f81f 	bl	80064ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e00f      	b.n	80064a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69da      	ldr	r2, [r3, #28]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4013      	ands	r3, r2
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	429a      	cmp	r2, r3
 8006490:	bf0c      	ite	eq
 8006492:	2301      	moveq	r3, #1
 8006494:	2300      	movne	r3, #0
 8006496:	b2db      	uxtb	r3, r3
 8006498:	461a      	mov	r2, r3
 800649a:	79fb      	ldrb	r3, [r7, #7]
 800649c:	429a      	cmp	r2, r3
 800649e:	d0a6      	beq.n	80063ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b095      	sub	sp, #84	; 0x54
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064d2:	643b      	str	r3, [r7, #64]	; 0x40
 80064d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e6      	bne.n	80064b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3308      	adds	r3, #8
 80064ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80064f6:	69fa      	ldr	r2, [r7, #28]
 80064f8:	4b1e      	ldr	r3, [pc, #120]	; (8006574 <UART_EndRxTransfer+0xc8>)
 80064fa:	4013      	ands	r3, r2
 80064fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3308      	adds	r3, #8
 8006504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006506:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800650c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e5      	bne.n	80064e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800651e:	2b01      	cmp	r3, #1
 8006520:	d118      	bne.n	8006554 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	e853 3f00 	ldrex	r3, [r3]
 800652e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f023 0310 	bic.w	r3, r3, #16
 8006536:	647b      	str	r3, [r7, #68]	; 0x44
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006544:	6979      	ldr	r1, [r7, #20]
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	e841 2300 	strex	r3, r2, [r1]
 800654c:	613b      	str	r3, [r7, #16]
   return(result);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1e6      	bne.n	8006522 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2220      	movs	r2, #32
 8006558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006568:	bf00      	nop
 800656a:	3754      	adds	r7, #84	; 0x54
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	effffffe 	.word	0xeffffffe

08006578 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_UARTEx_DisableFifoMode+0x16>
 800658a:	2302      	movs	r3, #2
 800658c:	e027      	b.n	80065de <HAL_UARTEx_DisableFifoMode+0x66>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2224      	movs	r2, #36	; 0x24
 800659a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0201 	bic.w	r2, r2, #1
 80065b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065fe:	2302      	movs	r3, #2
 8006600:	e02d      	b.n	800665e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2224      	movs	r2, #36	; 0x24
 800660e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0201 	bic.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f850 	bl	80066e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800667a:	2302      	movs	r3, #2
 800667c:	e02d      	b.n	80066da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2224      	movs	r2, #36	; 0x24
 800668a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0201 	bic.w	r2, r2, #1
 80066a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f812 	bl	80066e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d108      	bne.n	8006706 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006704:	e031      	b.n	800676a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006706:	2310      	movs	r3, #16
 8006708:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800670a:	2310      	movs	r3, #16
 800670c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	0e5b      	lsrs	r3, r3, #25
 8006716:	b2db      	uxtb	r3, r3
 8006718:	f003 0307 	and.w	r3, r3, #7
 800671c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	0f5b      	lsrs	r3, r3, #29
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	7b3a      	ldrb	r2, [r7, #12]
 8006732:	4911      	ldr	r1, [pc, #68]	; (8006778 <UARTEx_SetNbDataToProcess+0x94>)
 8006734:	5c8a      	ldrb	r2, [r1, r2]
 8006736:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800673a:	7b3a      	ldrb	r2, [r7, #12]
 800673c:	490f      	ldr	r1, [pc, #60]	; (800677c <UARTEx_SetNbDataToProcess+0x98>)
 800673e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006740:	fb93 f3f2 	sdiv	r3, r3, r2
 8006744:	b29a      	uxth	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	7b7a      	ldrb	r2, [r7, #13]
 8006750:	4909      	ldr	r1, [pc, #36]	; (8006778 <UARTEx_SetNbDataToProcess+0x94>)
 8006752:	5c8a      	ldrb	r2, [r1, r2]
 8006754:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006758:	7b7a      	ldrb	r2, [r7, #13]
 800675a:	4908      	ldr	r1, [pc, #32]	; (800677c <UARTEx_SetNbDataToProcess+0x98>)
 800675c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800675e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006762:	b29a      	uxth	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800676a:	bf00      	nop
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	08007340 	.word	0x08007340
 800677c:	08007348 	.word	0x08007348

08006780 <siprintf>:
 8006780:	b40e      	push	{r1, r2, r3}
 8006782:	b500      	push	{lr}
 8006784:	b09c      	sub	sp, #112	; 0x70
 8006786:	ab1d      	add	r3, sp, #116	; 0x74
 8006788:	9002      	str	r0, [sp, #8]
 800678a:	9006      	str	r0, [sp, #24]
 800678c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006790:	4809      	ldr	r0, [pc, #36]	; (80067b8 <siprintf+0x38>)
 8006792:	9107      	str	r1, [sp, #28]
 8006794:	9104      	str	r1, [sp, #16]
 8006796:	4909      	ldr	r1, [pc, #36]	; (80067bc <siprintf+0x3c>)
 8006798:	f853 2b04 	ldr.w	r2, [r3], #4
 800679c:	9105      	str	r1, [sp, #20]
 800679e:	6800      	ldr	r0, [r0, #0]
 80067a0:	9301      	str	r3, [sp, #4]
 80067a2:	a902      	add	r1, sp, #8
 80067a4:	f000 f9a0 	bl	8006ae8 <_svfiprintf_r>
 80067a8:	9b02      	ldr	r3, [sp, #8]
 80067aa:	2200      	movs	r2, #0
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	b01c      	add	sp, #112	; 0x70
 80067b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067b4:	b003      	add	sp, #12
 80067b6:	4770      	bx	lr
 80067b8:	240000b4 	.word	0x240000b4
 80067bc:	ffff0208 	.word	0xffff0208

080067c0 <memset>:
 80067c0:	4402      	add	r2, r0
 80067c2:	4603      	mov	r3, r0
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d100      	bne.n	80067ca <memset+0xa>
 80067c8:	4770      	bx	lr
 80067ca:	f803 1b01 	strb.w	r1, [r3], #1
 80067ce:	e7f9      	b.n	80067c4 <memset+0x4>

080067d0 <__errno>:
 80067d0:	4b01      	ldr	r3, [pc, #4]	; (80067d8 <__errno+0x8>)
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	240000b4 	.word	0x240000b4

080067dc <__libc_init_array>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	4d0d      	ldr	r5, [pc, #52]	; (8006814 <__libc_init_array+0x38>)
 80067e0:	4c0d      	ldr	r4, [pc, #52]	; (8006818 <__libc_init_array+0x3c>)
 80067e2:	1b64      	subs	r4, r4, r5
 80067e4:	10a4      	asrs	r4, r4, #2
 80067e6:	2600      	movs	r6, #0
 80067e8:	42a6      	cmp	r6, r4
 80067ea:	d109      	bne.n	8006800 <__libc_init_array+0x24>
 80067ec:	4d0b      	ldr	r5, [pc, #44]	; (800681c <__libc_init_array+0x40>)
 80067ee:	4c0c      	ldr	r4, [pc, #48]	; (8006820 <__libc_init_array+0x44>)
 80067f0:	f000 fc6a 	bl	80070c8 <_init>
 80067f4:	1b64      	subs	r4, r4, r5
 80067f6:	10a4      	asrs	r4, r4, #2
 80067f8:	2600      	movs	r6, #0
 80067fa:	42a6      	cmp	r6, r4
 80067fc:	d105      	bne.n	800680a <__libc_init_array+0x2e>
 80067fe:	bd70      	pop	{r4, r5, r6, pc}
 8006800:	f855 3b04 	ldr.w	r3, [r5], #4
 8006804:	4798      	blx	r3
 8006806:	3601      	adds	r6, #1
 8006808:	e7ee      	b.n	80067e8 <__libc_init_array+0xc>
 800680a:	f855 3b04 	ldr.w	r3, [r5], #4
 800680e:	4798      	blx	r3
 8006810:	3601      	adds	r6, #1
 8006812:	e7f2      	b.n	80067fa <__libc_init_array+0x1e>
 8006814:	0800738c 	.word	0x0800738c
 8006818:	0800738c 	.word	0x0800738c
 800681c:	0800738c 	.word	0x0800738c
 8006820:	08007390 	.word	0x08007390

08006824 <__retarget_lock_acquire_recursive>:
 8006824:	4770      	bx	lr

08006826 <__retarget_lock_release_recursive>:
 8006826:	4770      	bx	lr

08006828 <memcpy>:
 8006828:	440a      	add	r2, r1
 800682a:	4291      	cmp	r1, r2
 800682c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006830:	d100      	bne.n	8006834 <memcpy+0xc>
 8006832:	4770      	bx	lr
 8006834:	b510      	push	{r4, lr}
 8006836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800683a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800683e:	4291      	cmp	r1, r2
 8006840:	d1f9      	bne.n	8006836 <memcpy+0xe>
 8006842:	bd10      	pop	{r4, pc}

08006844 <_free_r>:
 8006844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006846:	2900      	cmp	r1, #0
 8006848:	d044      	beq.n	80068d4 <_free_r+0x90>
 800684a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800684e:	9001      	str	r0, [sp, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	f1a1 0404 	sub.w	r4, r1, #4
 8006856:	bfb8      	it	lt
 8006858:	18e4      	addlt	r4, r4, r3
 800685a:	f000 f8df 	bl	8006a1c <__malloc_lock>
 800685e:	4a1e      	ldr	r2, [pc, #120]	; (80068d8 <_free_r+0x94>)
 8006860:	9801      	ldr	r0, [sp, #4]
 8006862:	6813      	ldr	r3, [r2, #0]
 8006864:	b933      	cbnz	r3, 8006874 <_free_r+0x30>
 8006866:	6063      	str	r3, [r4, #4]
 8006868:	6014      	str	r4, [r2, #0]
 800686a:	b003      	add	sp, #12
 800686c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006870:	f000 b8da 	b.w	8006a28 <__malloc_unlock>
 8006874:	42a3      	cmp	r3, r4
 8006876:	d908      	bls.n	800688a <_free_r+0x46>
 8006878:	6825      	ldr	r5, [r4, #0]
 800687a:	1961      	adds	r1, r4, r5
 800687c:	428b      	cmp	r3, r1
 800687e:	bf01      	itttt	eq
 8006880:	6819      	ldreq	r1, [r3, #0]
 8006882:	685b      	ldreq	r3, [r3, #4]
 8006884:	1949      	addeq	r1, r1, r5
 8006886:	6021      	streq	r1, [r4, #0]
 8006888:	e7ed      	b.n	8006866 <_free_r+0x22>
 800688a:	461a      	mov	r2, r3
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	b10b      	cbz	r3, 8006894 <_free_r+0x50>
 8006890:	42a3      	cmp	r3, r4
 8006892:	d9fa      	bls.n	800688a <_free_r+0x46>
 8006894:	6811      	ldr	r1, [r2, #0]
 8006896:	1855      	adds	r5, r2, r1
 8006898:	42a5      	cmp	r5, r4
 800689a:	d10b      	bne.n	80068b4 <_free_r+0x70>
 800689c:	6824      	ldr	r4, [r4, #0]
 800689e:	4421      	add	r1, r4
 80068a0:	1854      	adds	r4, r2, r1
 80068a2:	42a3      	cmp	r3, r4
 80068a4:	6011      	str	r1, [r2, #0]
 80068a6:	d1e0      	bne.n	800686a <_free_r+0x26>
 80068a8:	681c      	ldr	r4, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	6053      	str	r3, [r2, #4]
 80068ae:	440c      	add	r4, r1
 80068b0:	6014      	str	r4, [r2, #0]
 80068b2:	e7da      	b.n	800686a <_free_r+0x26>
 80068b4:	d902      	bls.n	80068bc <_free_r+0x78>
 80068b6:	230c      	movs	r3, #12
 80068b8:	6003      	str	r3, [r0, #0]
 80068ba:	e7d6      	b.n	800686a <_free_r+0x26>
 80068bc:	6825      	ldr	r5, [r4, #0]
 80068be:	1961      	adds	r1, r4, r5
 80068c0:	428b      	cmp	r3, r1
 80068c2:	bf04      	itt	eq
 80068c4:	6819      	ldreq	r1, [r3, #0]
 80068c6:	685b      	ldreq	r3, [r3, #4]
 80068c8:	6063      	str	r3, [r4, #4]
 80068ca:	bf04      	itt	eq
 80068cc:	1949      	addeq	r1, r1, r5
 80068ce:	6021      	streq	r1, [r4, #0]
 80068d0:	6054      	str	r4, [r2, #4]
 80068d2:	e7ca      	b.n	800686a <_free_r+0x26>
 80068d4:	b003      	add	sp, #12
 80068d6:	bd30      	pop	{r4, r5, pc}
 80068d8:	24000360 	.word	0x24000360

080068dc <sbrk_aligned>:
 80068dc:	b570      	push	{r4, r5, r6, lr}
 80068de:	4e0e      	ldr	r6, [pc, #56]	; (8006918 <sbrk_aligned+0x3c>)
 80068e0:	460c      	mov	r4, r1
 80068e2:	6831      	ldr	r1, [r6, #0]
 80068e4:	4605      	mov	r5, r0
 80068e6:	b911      	cbnz	r1, 80068ee <sbrk_aligned+0x12>
 80068e8:	f000 fba6 	bl	8007038 <_sbrk_r>
 80068ec:	6030      	str	r0, [r6, #0]
 80068ee:	4621      	mov	r1, r4
 80068f0:	4628      	mov	r0, r5
 80068f2:	f000 fba1 	bl	8007038 <_sbrk_r>
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	d00a      	beq.n	8006910 <sbrk_aligned+0x34>
 80068fa:	1cc4      	adds	r4, r0, #3
 80068fc:	f024 0403 	bic.w	r4, r4, #3
 8006900:	42a0      	cmp	r0, r4
 8006902:	d007      	beq.n	8006914 <sbrk_aligned+0x38>
 8006904:	1a21      	subs	r1, r4, r0
 8006906:	4628      	mov	r0, r5
 8006908:	f000 fb96 	bl	8007038 <_sbrk_r>
 800690c:	3001      	adds	r0, #1
 800690e:	d101      	bne.n	8006914 <sbrk_aligned+0x38>
 8006910:	f04f 34ff 	mov.w	r4, #4294967295
 8006914:	4620      	mov	r0, r4
 8006916:	bd70      	pop	{r4, r5, r6, pc}
 8006918:	24000364 	.word	0x24000364

0800691c <_malloc_r>:
 800691c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006920:	1ccd      	adds	r5, r1, #3
 8006922:	f025 0503 	bic.w	r5, r5, #3
 8006926:	3508      	adds	r5, #8
 8006928:	2d0c      	cmp	r5, #12
 800692a:	bf38      	it	cc
 800692c:	250c      	movcc	r5, #12
 800692e:	2d00      	cmp	r5, #0
 8006930:	4607      	mov	r7, r0
 8006932:	db01      	blt.n	8006938 <_malloc_r+0x1c>
 8006934:	42a9      	cmp	r1, r5
 8006936:	d905      	bls.n	8006944 <_malloc_r+0x28>
 8006938:	230c      	movs	r3, #12
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	2600      	movs	r6, #0
 800693e:	4630      	mov	r0, r6
 8006940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006944:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a18 <_malloc_r+0xfc>
 8006948:	f000 f868 	bl	8006a1c <__malloc_lock>
 800694c:	f8d8 3000 	ldr.w	r3, [r8]
 8006950:	461c      	mov	r4, r3
 8006952:	bb5c      	cbnz	r4, 80069ac <_malloc_r+0x90>
 8006954:	4629      	mov	r1, r5
 8006956:	4638      	mov	r0, r7
 8006958:	f7ff ffc0 	bl	80068dc <sbrk_aligned>
 800695c:	1c43      	adds	r3, r0, #1
 800695e:	4604      	mov	r4, r0
 8006960:	d155      	bne.n	8006a0e <_malloc_r+0xf2>
 8006962:	f8d8 4000 	ldr.w	r4, [r8]
 8006966:	4626      	mov	r6, r4
 8006968:	2e00      	cmp	r6, #0
 800696a:	d145      	bne.n	80069f8 <_malloc_r+0xdc>
 800696c:	2c00      	cmp	r4, #0
 800696e:	d048      	beq.n	8006a02 <_malloc_r+0xe6>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	4631      	mov	r1, r6
 8006974:	4638      	mov	r0, r7
 8006976:	eb04 0903 	add.w	r9, r4, r3
 800697a:	f000 fb5d 	bl	8007038 <_sbrk_r>
 800697e:	4581      	cmp	r9, r0
 8006980:	d13f      	bne.n	8006a02 <_malloc_r+0xe6>
 8006982:	6821      	ldr	r1, [r4, #0]
 8006984:	1a6d      	subs	r5, r5, r1
 8006986:	4629      	mov	r1, r5
 8006988:	4638      	mov	r0, r7
 800698a:	f7ff ffa7 	bl	80068dc <sbrk_aligned>
 800698e:	3001      	adds	r0, #1
 8006990:	d037      	beq.n	8006a02 <_malloc_r+0xe6>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	442b      	add	r3, r5
 8006996:	6023      	str	r3, [r4, #0]
 8006998:	f8d8 3000 	ldr.w	r3, [r8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d038      	beq.n	8006a12 <_malloc_r+0xf6>
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	42a2      	cmp	r2, r4
 80069a4:	d12b      	bne.n	80069fe <_malloc_r+0xe2>
 80069a6:	2200      	movs	r2, #0
 80069a8:	605a      	str	r2, [r3, #4]
 80069aa:	e00f      	b.n	80069cc <_malloc_r+0xb0>
 80069ac:	6822      	ldr	r2, [r4, #0]
 80069ae:	1b52      	subs	r2, r2, r5
 80069b0:	d41f      	bmi.n	80069f2 <_malloc_r+0xd6>
 80069b2:	2a0b      	cmp	r2, #11
 80069b4:	d917      	bls.n	80069e6 <_malloc_r+0xca>
 80069b6:	1961      	adds	r1, r4, r5
 80069b8:	42a3      	cmp	r3, r4
 80069ba:	6025      	str	r5, [r4, #0]
 80069bc:	bf18      	it	ne
 80069be:	6059      	strne	r1, [r3, #4]
 80069c0:	6863      	ldr	r3, [r4, #4]
 80069c2:	bf08      	it	eq
 80069c4:	f8c8 1000 	streq.w	r1, [r8]
 80069c8:	5162      	str	r2, [r4, r5]
 80069ca:	604b      	str	r3, [r1, #4]
 80069cc:	4638      	mov	r0, r7
 80069ce:	f104 060b 	add.w	r6, r4, #11
 80069d2:	f000 f829 	bl	8006a28 <__malloc_unlock>
 80069d6:	f026 0607 	bic.w	r6, r6, #7
 80069da:	1d23      	adds	r3, r4, #4
 80069dc:	1af2      	subs	r2, r6, r3
 80069de:	d0ae      	beq.n	800693e <_malloc_r+0x22>
 80069e0:	1b9b      	subs	r3, r3, r6
 80069e2:	50a3      	str	r3, [r4, r2]
 80069e4:	e7ab      	b.n	800693e <_malloc_r+0x22>
 80069e6:	42a3      	cmp	r3, r4
 80069e8:	6862      	ldr	r2, [r4, #4]
 80069ea:	d1dd      	bne.n	80069a8 <_malloc_r+0x8c>
 80069ec:	f8c8 2000 	str.w	r2, [r8]
 80069f0:	e7ec      	b.n	80069cc <_malloc_r+0xb0>
 80069f2:	4623      	mov	r3, r4
 80069f4:	6864      	ldr	r4, [r4, #4]
 80069f6:	e7ac      	b.n	8006952 <_malloc_r+0x36>
 80069f8:	4634      	mov	r4, r6
 80069fa:	6876      	ldr	r6, [r6, #4]
 80069fc:	e7b4      	b.n	8006968 <_malloc_r+0x4c>
 80069fe:	4613      	mov	r3, r2
 8006a00:	e7cc      	b.n	800699c <_malloc_r+0x80>
 8006a02:	230c      	movs	r3, #12
 8006a04:	603b      	str	r3, [r7, #0]
 8006a06:	4638      	mov	r0, r7
 8006a08:	f000 f80e 	bl	8006a28 <__malloc_unlock>
 8006a0c:	e797      	b.n	800693e <_malloc_r+0x22>
 8006a0e:	6025      	str	r5, [r4, #0]
 8006a10:	e7dc      	b.n	80069cc <_malloc_r+0xb0>
 8006a12:	605b      	str	r3, [r3, #4]
 8006a14:	deff      	udf	#255	; 0xff
 8006a16:	bf00      	nop
 8006a18:	24000360 	.word	0x24000360

08006a1c <__malloc_lock>:
 8006a1c:	4801      	ldr	r0, [pc, #4]	; (8006a24 <__malloc_lock+0x8>)
 8006a1e:	f7ff bf01 	b.w	8006824 <__retarget_lock_acquire_recursive>
 8006a22:	bf00      	nop
 8006a24:	2400035c 	.word	0x2400035c

08006a28 <__malloc_unlock>:
 8006a28:	4801      	ldr	r0, [pc, #4]	; (8006a30 <__malloc_unlock+0x8>)
 8006a2a:	f7ff befc 	b.w	8006826 <__retarget_lock_release_recursive>
 8006a2e:	bf00      	nop
 8006a30:	2400035c 	.word	0x2400035c

08006a34 <__ssputs_r>:
 8006a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a38:	688e      	ldr	r6, [r1, #8]
 8006a3a:	461f      	mov	r7, r3
 8006a3c:	42be      	cmp	r6, r7
 8006a3e:	680b      	ldr	r3, [r1, #0]
 8006a40:	4682      	mov	sl, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	4690      	mov	r8, r2
 8006a46:	d82c      	bhi.n	8006aa2 <__ssputs_r+0x6e>
 8006a48:	898a      	ldrh	r2, [r1, #12]
 8006a4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a4e:	d026      	beq.n	8006a9e <__ssputs_r+0x6a>
 8006a50:	6965      	ldr	r5, [r4, #20]
 8006a52:	6909      	ldr	r1, [r1, #16]
 8006a54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a58:	eba3 0901 	sub.w	r9, r3, r1
 8006a5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a60:	1c7b      	adds	r3, r7, #1
 8006a62:	444b      	add	r3, r9
 8006a64:	106d      	asrs	r5, r5, #1
 8006a66:	429d      	cmp	r5, r3
 8006a68:	bf38      	it	cc
 8006a6a:	461d      	movcc	r5, r3
 8006a6c:	0553      	lsls	r3, r2, #21
 8006a6e:	d527      	bpl.n	8006ac0 <__ssputs_r+0x8c>
 8006a70:	4629      	mov	r1, r5
 8006a72:	f7ff ff53 	bl	800691c <_malloc_r>
 8006a76:	4606      	mov	r6, r0
 8006a78:	b360      	cbz	r0, 8006ad4 <__ssputs_r+0xa0>
 8006a7a:	6921      	ldr	r1, [r4, #16]
 8006a7c:	464a      	mov	r2, r9
 8006a7e:	f7ff fed3 	bl	8006828 <memcpy>
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	6126      	str	r6, [r4, #16]
 8006a90:	6165      	str	r5, [r4, #20]
 8006a92:	444e      	add	r6, r9
 8006a94:	eba5 0509 	sub.w	r5, r5, r9
 8006a98:	6026      	str	r6, [r4, #0]
 8006a9a:	60a5      	str	r5, [r4, #8]
 8006a9c:	463e      	mov	r6, r7
 8006a9e:	42be      	cmp	r6, r7
 8006aa0:	d900      	bls.n	8006aa4 <__ssputs_r+0x70>
 8006aa2:	463e      	mov	r6, r7
 8006aa4:	6820      	ldr	r0, [r4, #0]
 8006aa6:	4632      	mov	r2, r6
 8006aa8:	4641      	mov	r1, r8
 8006aaa:	f000 faab 	bl	8007004 <memmove>
 8006aae:	68a3      	ldr	r3, [r4, #8]
 8006ab0:	1b9b      	subs	r3, r3, r6
 8006ab2:	60a3      	str	r3, [r4, #8]
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	4433      	add	r3, r6
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	2000      	movs	r0, #0
 8006abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac0:	462a      	mov	r2, r5
 8006ac2:	f000 fac9 	bl	8007058 <_realloc_r>
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d1e0      	bne.n	8006a8e <__ssputs_r+0x5a>
 8006acc:	6921      	ldr	r1, [r4, #16]
 8006ace:	4650      	mov	r0, sl
 8006ad0:	f7ff feb8 	bl	8006844 <_free_r>
 8006ad4:	230c      	movs	r3, #12
 8006ad6:	f8ca 3000 	str.w	r3, [sl]
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ae0:	81a3      	strh	r3, [r4, #12]
 8006ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae6:	e7e9      	b.n	8006abc <__ssputs_r+0x88>

08006ae8 <_svfiprintf_r>:
 8006ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	4698      	mov	r8, r3
 8006aee:	898b      	ldrh	r3, [r1, #12]
 8006af0:	061b      	lsls	r3, r3, #24
 8006af2:	b09d      	sub	sp, #116	; 0x74
 8006af4:	4607      	mov	r7, r0
 8006af6:	460d      	mov	r5, r1
 8006af8:	4614      	mov	r4, r2
 8006afa:	d50e      	bpl.n	8006b1a <_svfiprintf_r+0x32>
 8006afc:	690b      	ldr	r3, [r1, #16]
 8006afe:	b963      	cbnz	r3, 8006b1a <_svfiprintf_r+0x32>
 8006b00:	2140      	movs	r1, #64	; 0x40
 8006b02:	f7ff ff0b 	bl	800691c <_malloc_r>
 8006b06:	6028      	str	r0, [r5, #0]
 8006b08:	6128      	str	r0, [r5, #16]
 8006b0a:	b920      	cbnz	r0, 8006b16 <_svfiprintf_r+0x2e>
 8006b0c:	230c      	movs	r3, #12
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	e0d0      	b.n	8006cb8 <_svfiprintf_r+0x1d0>
 8006b16:	2340      	movs	r3, #64	; 0x40
 8006b18:	616b      	str	r3, [r5, #20]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b1e:	2320      	movs	r3, #32
 8006b20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b24:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b28:	2330      	movs	r3, #48	; 0x30
 8006b2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006cd0 <_svfiprintf_r+0x1e8>
 8006b2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b32:	f04f 0901 	mov.w	r9, #1
 8006b36:	4623      	mov	r3, r4
 8006b38:	469a      	mov	sl, r3
 8006b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b3e:	b10a      	cbz	r2, 8006b44 <_svfiprintf_r+0x5c>
 8006b40:	2a25      	cmp	r2, #37	; 0x25
 8006b42:	d1f9      	bne.n	8006b38 <_svfiprintf_r+0x50>
 8006b44:	ebba 0b04 	subs.w	fp, sl, r4
 8006b48:	d00b      	beq.n	8006b62 <_svfiprintf_r+0x7a>
 8006b4a:	465b      	mov	r3, fp
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	4629      	mov	r1, r5
 8006b50:	4638      	mov	r0, r7
 8006b52:	f7ff ff6f 	bl	8006a34 <__ssputs_r>
 8006b56:	3001      	adds	r0, #1
 8006b58:	f000 80a9 	beq.w	8006cae <_svfiprintf_r+0x1c6>
 8006b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b5e:	445a      	add	r2, fp
 8006b60:	9209      	str	r2, [sp, #36]	; 0x24
 8006b62:	f89a 3000 	ldrb.w	r3, [sl]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 80a1 	beq.w	8006cae <_svfiprintf_r+0x1c6>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b76:	f10a 0a01 	add.w	sl, sl, #1
 8006b7a:	9304      	str	r3, [sp, #16]
 8006b7c:	9307      	str	r3, [sp, #28]
 8006b7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b82:	931a      	str	r3, [sp, #104]	; 0x68
 8006b84:	4654      	mov	r4, sl
 8006b86:	2205      	movs	r2, #5
 8006b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b8c:	4850      	ldr	r0, [pc, #320]	; (8006cd0 <_svfiprintf_r+0x1e8>)
 8006b8e:	f7f9 fbaf 	bl	80002f0 <memchr>
 8006b92:	9a04      	ldr	r2, [sp, #16]
 8006b94:	b9d8      	cbnz	r0, 8006bce <_svfiprintf_r+0xe6>
 8006b96:	06d0      	lsls	r0, r2, #27
 8006b98:	bf44      	itt	mi
 8006b9a:	2320      	movmi	r3, #32
 8006b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ba0:	0711      	lsls	r1, r2, #28
 8006ba2:	bf44      	itt	mi
 8006ba4:	232b      	movmi	r3, #43	; 0x2b
 8006ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006baa:	f89a 3000 	ldrb.w	r3, [sl]
 8006bae:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb0:	d015      	beq.n	8006bde <_svfiprintf_r+0xf6>
 8006bb2:	9a07      	ldr	r2, [sp, #28]
 8006bb4:	4654      	mov	r4, sl
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	f04f 0c0a 	mov.w	ip, #10
 8006bbc:	4621      	mov	r1, r4
 8006bbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bc2:	3b30      	subs	r3, #48	; 0x30
 8006bc4:	2b09      	cmp	r3, #9
 8006bc6:	d94d      	bls.n	8006c64 <_svfiprintf_r+0x17c>
 8006bc8:	b1b0      	cbz	r0, 8006bf8 <_svfiprintf_r+0x110>
 8006bca:	9207      	str	r2, [sp, #28]
 8006bcc:	e014      	b.n	8006bf8 <_svfiprintf_r+0x110>
 8006bce:	eba0 0308 	sub.w	r3, r0, r8
 8006bd2:	fa09 f303 	lsl.w	r3, r9, r3
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	9304      	str	r3, [sp, #16]
 8006bda:	46a2      	mov	sl, r4
 8006bdc:	e7d2      	b.n	8006b84 <_svfiprintf_r+0x9c>
 8006bde:	9b03      	ldr	r3, [sp, #12]
 8006be0:	1d19      	adds	r1, r3, #4
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	9103      	str	r1, [sp, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bfbb      	ittet	lt
 8006bea:	425b      	neglt	r3, r3
 8006bec:	f042 0202 	orrlt.w	r2, r2, #2
 8006bf0:	9307      	strge	r3, [sp, #28]
 8006bf2:	9307      	strlt	r3, [sp, #28]
 8006bf4:	bfb8      	it	lt
 8006bf6:	9204      	strlt	r2, [sp, #16]
 8006bf8:	7823      	ldrb	r3, [r4, #0]
 8006bfa:	2b2e      	cmp	r3, #46	; 0x2e
 8006bfc:	d10c      	bne.n	8006c18 <_svfiprintf_r+0x130>
 8006bfe:	7863      	ldrb	r3, [r4, #1]
 8006c00:	2b2a      	cmp	r3, #42	; 0x2a
 8006c02:	d134      	bne.n	8006c6e <_svfiprintf_r+0x186>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	1d1a      	adds	r2, r3, #4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	9203      	str	r2, [sp, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bfb8      	it	lt
 8006c10:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c14:	3402      	adds	r4, #2
 8006c16:	9305      	str	r3, [sp, #20]
 8006c18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006ce0 <_svfiprintf_r+0x1f8>
 8006c1c:	7821      	ldrb	r1, [r4, #0]
 8006c1e:	2203      	movs	r2, #3
 8006c20:	4650      	mov	r0, sl
 8006c22:	f7f9 fb65 	bl	80002f0 <memchr>
 8006c26:	b138      	cbz	r0, 8006c38 <_svfiprintf_r+0x150>
 8006c28:	9b04      	ldr	r3, [sp, #16]
 8006c2a:	eba0 000a 	sub.w	r0, r0, sl
 8006c2e:	2240      	movs	r2, #64	; 0x40
 8006c30:	4082      	lsls	r2, r0
 8006c32:	4313      	orrs	r3, r2
 8006c34:	3401      	adds	r4, #1
 8006c36:	9304      	str	r3, [sp, #16]
 8006c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c3c:	4825      	ldr	r0, [pc, #148]	; (8006cd4 <_svfiprintf_r+0x1ec>)
 8006c3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c42:	2206      	movs	r2, #6
 8006c44:	f7f9 fb54 	bl	80002f0 <memchr>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d038      	beq.n	8006cbe <_svfiprintf_r+0x1d6>
 8006c4c:	4b22      	ldr	r3, [pc, #136]	; (8006cd8 <_svfiprintf_r+0x1f0>)
 8006c4e:	bb1b      	cbnz	r3, 8006c98 <_svfiprintf_r+0x1b0>
 8006c50:	9b03      	ldr	r3, [sp, #12]
 8006c52:	3307      	adds	r3, #7
 8006c54:	f023 0307 	bic.w	r3, r3, #7
 8006c58:	3308      	adds	r3, #8
 8006c5a:	9303      	str	r3, [sp, #12]
 8006c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c5e:	4433      	add	r3, r6
 8006c60:	9309      	str	r3, [sp, #36]	; 0x24
 8006c62:	e768      	b.n	8006b36 <_svfiprintf_r+0x4e>
 8006c64:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c68:	460c      	mov	r4, r1
 8006c6a:	2001      	movs	r0, #1
 8006c6c:	e7a6      	b.n	8006bbc <_svfiprintf_r+0xd4>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	3401      	adds	r4, #1
 8006c72:	9305      	str	r3, [sp, #20]
 8006c74:	4619      	mov	r1, r3
 8006c76:	f04f 0c0a 	mov.w	ip, #10
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c80:	3a30      	subs	r2, #48	; 0x30
 8006c82:	2a09      	cmp	r2, #9
 8006c84:	d903      	bls.n	8006c8e <_svfiprintf_r+0x1a6>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0c6      	beq.n	8006c18 <_svfiprintf_r+0x130>
 8006c8a:	9105      	str	r1, [sp, #20]
 8006c8c:	e7c4      	b.n	8006c18 <_svfiprintf_r+0x130>
 8006c8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c92:	4604      	mov	r4, r0
 8006c94:	2301      	movs	r3, #1
 8006c96:	e7f0      	b.n	8006c7a <_svfiprintf_r+0x192>
 8006c98:	ab03      	add	r3, sp, #12
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	462a      	mov	r2, r5
 8006c9e:	4b0f      	ldr	r3, [pc, #60]	; (8006cdc <_svfiprintf_r+0x1f4>)
 8006ca0:	a904      	add	r1, sp, #16
 8006ca2:	4638      	mov	r0, r7
 8006ca4:	f3af 8000 	nop.w
 8006ca8:	1c42      	adds	r2, r0, #1
 8006caa:	4606      	mov	r6, r0
 8006cac:	d1d6      	bne.n	8006c5c <_svfiprintf_r+0x174>
 8006cae:	89ab      	ldrh	r3, [r5, #12]
 8006cb0:	065b      	lsls	r3, r3, #25
 8006cb2:	f53f af2d 	bmi.w	8006b10 <_svfiprintf_r+0x28>
 8006cb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cb8:	b01d      	add	sp, #116	; 0x74
 8006cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbe:	ab03      	add	r3, sp, #12
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	462a      	mov	r2, r5
 8006cc4:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <_svfiprintf_r+0x1f4>)
 8006cc6:	a904      	add	r1, sp, #16
 8006cc8:	4638      	mov	r0, r7
 8006cca:	f000 f879 	bl	8006dc0 <_printf_i>
 8006cce:	e7eb      	b.n	8006ca8 <_svfiprintf_r+0x1c0>
 8006cd0:	08007350 	.word	0x08007350
 8006cd4:	0800735a 	.word	0x0800735a
 8006cd8:	00000000 	.word	0x00000000
 8006cdc:	08006a35 	.word	0x08006a35
 8006ce0:	08007356 	.word	0x08007356

08006ce4 <_printf_common>:
 8006ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce8:	4616      	mov	r6, r2
 8006cea:	4699      	mov	r9, r3
 8006cec:	688a      	ldr	r2, [r1, #8]
 8006cee:	690b      	ldr	r3, [r1, #16]
 8006cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	bfb8      	it	lt
 8006cf8:	4613      	movlt	r3, r2
 8006cfa:	6033      	str	r3, [r6, #0]
 8006cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d00:	4607      	mov	r7, r0
 8006d02:	460c      	mov	r4, r1
 8006d04:	b10a      	cbz	r2, 8006d0a <_printf_common+0x26>
 8006d06:	3301      	adds	r3, #1
 8006d08:	6033      	str	r3, [r6, #0]
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	0699      	lsls	r1, r3, #26
 8006d0e:	bf42      	ittt	mi
 8006d10:	6833      	ldrmi	r3, [r6, #0]
 8006d12:	3302      	addmi	r3, #2
 8006d14:	6033      	strmi	r3, [r6, #0]
 8006d16:	6825      	ldr	r5, [r4, #0]
 8006d18:	f015 0506 	ands.w	r5, r5, #6
 8006d1c:	d106      	bne.n	8006d2c <_printf_common+0x48>
 8006d1e:	f104 0a19 	add.w	sl, r4, #25
 8006d22:	68e3      	ldr	r3, [r4, #12]
 8006d24:	6832      	ldr	r2, [r6, #0]
 8006d26:	1a9b      	subs	r3, r3, r2
 8006d28:	42ab      	cmp	r3, r5
 8006d2a:	dc26      	bgt.n	8006d7a <_printf_common+0x96>
 8006d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d30:	1e13      	subs	r3, r2, #0
 8006d32:	6822      	ldr	r2, [r4, #0]
 8006d34:	bf18      	it	ne
 8006d36:	2301      	movne	r3, #1
 8006d38:	0692      	lsls	r2, r2, #26
 8006d3a:	d42b      	bmi.n	8006d94 <_printf_common+0xb0>
 8006d3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d40:	4649      	mov	r1, r9
 8006d42:	4638      	mov	r0, r7
 8006d44:	47c0      	blx	r8
 8006d46:	3001      	adds	r0, #1
 8006d48:	d01e      	beq.n	8006d88 <_printf_common+0xa4>
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	6922      	ldr	r2, [r4, #16]
 8006d4e:	f003 0306 	and.w	r3, r3, #6
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	bf02      	ittt	eq
 8006d56:	68e5      	ldreq	r5, [r4, #12]
 8006d58:	6833      	ldreq	r3, [r6, #0]
 8006d5a:	1aed      	subeq	r5, r5, r3
 8006d5c:	68a3      	ldr	r3, [r4, #8]
 8006d5e:	bf0c      	ite	eq
 8006d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d64:	2500      	movne	r5, #0
 8006d66:	4293      	cmp	r3, r2
 8006d68:	bfc4      	itt	gt
 8006d6a:	1a9b      	subgt	r3, r3, r2
 8006d6c:	18ed      	addgt	r5, r5, r3
 8006d6e:	2600      	movs	r6, #0
 8006d70:	341a      	adds	r4, #26
 8006d72:	42b5      	cmp	r5, r6
 8006d74:	d11a      	bne.n	8006dac <_printf_common+0xc8>
 8006d76:	2000      	movs	r0, #0
 8006d78:	e008      	b.n	8006d8c <_printf_common+0xa8>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4652      	mov	r2, sl
 8006d7e:	4649      	mov	r1, r9
 8006d80:	4638      	mov	r0, r7
 8006d82:	47c0      	blx	r8
 8006d84:	3001      	adds	r0, #1
 8006d86:	d103      	bne.n	8006d90 <_printf_common+0xac>
 8006d88:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d90:	3501      	adds	r5, #1
 8006d92:	e7c6      	b.n	8006d22 <_printf_common+0x3e>
 8006d94:	18e1      	adds	r1, r4, r3
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	2030      	movs	r0, #48	; 0x30
 8006d9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d9e:	4422      	add	r2, r4
 8006da0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006da4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006da8:	3302      	adds	r3, #2
 8006daa:	e7c7      	b.n	8006d3c <_printf_common+0x58>
 8006dac:	2301      	movs	r3, #1
 8006dae:	4622      	mov	r2, r4
 8006db0:	4649      	mov	r1, r9
 8006db2:	4638      	mov	r0, r7
 8006db4:	47c0      	blx	r8
 8006db6:	3001      	adds	r0, #1
 8006db8:	d0e6      	beq.n	8006d88 <_printf_common+0xa4>
 8006dba:	3601      	adds	r6, #1
 8006dbc:	e7d9      	b.n	8006d72 <_printf_common+0x8e>
	...

08006dc0 <_printf_i>:
 8006dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc4:	7e0f      	ldrb	r7, [r1, #24]
 8006dc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006dc8:	2f78      	cmp	r7, #120	; 0x78
 8006dca:	4691      	mov	r9, r2
 8006dcc:	4680      	mov	r8, r0
 8006dce:	460c      	mov	r4, r1
 8006dd0:	469a      	mov	sl, r3
 8006dd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dd6:	d807      	bhi.n	8006de8 <_printf_i+0x28>
 8006dd8:	2f62      	cmp	r7, #98	; 0x62
 8006dda:	d80a      	bhi.n	8006df2 <_printf_i+0x32>
 8006ddc:	2f00      	cmp	r7, #0
 8006dde:	f000 80d4 	beq.w	8006f8a <_printf_i+0x1ca>
 8006de2:	2f58      	cmp	r7, #88	; 0x58
 8006de4:	f000 80c0 	beq.w	8006f68 <_printf_i+0x1a8>
 8006de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006df0:	e03a      	b.n	8006e68 <_printf_i+0xa8>
 8006df2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006df6:	2b15      	cmp	r3, #21
 8006df8:	d8f6      	bhi.n	8006de8 <_printf_i+0x28>
 8006dfa:	a101      	add	r1, pc, #4	; (adr r1, 8006e00 <_printf_i+0x40>)
 8006dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e00:	08006e59 	.word	0x08006e59
 8006e04:	08006e6d 	.word	0x08006e6d
 8006e08:	08006de9 	.word	0x08006de9
 8006e0c:	08006de9 	.word	0x08006de9
 8006e10:	08006de9 	.word	0x08006de9
 8006e14:	08006de9 	.word	0x08006de9
 8006e18:	08006e6d 	.word	0x08006e6d
 8006e1c:	08006de9 	.word	0x08006de9
 8006e20:	08006de9 	.word	0x08006de9
 8006e24:	08006de9 	.word	0x08006de9
 8006e28:	08006de9 	.word	0x08006de9
 8006e2c:	08006f71 	.word	0x08006f71
 8006e30:	08006e99 	.word	0x08006e99
 8006e34:	08006f2b 	.word	0x08006f2b
 8006e38:	08006de9 	.word	0x08006de9
 8006e3c:	08006de9 	.word	0x08006de9
 8006e40:	08006f93 	.word	0x08006f93
 8006e44:	08006de9 	.word	0x08006de9
 8006e48:	08006e99 	.word	0x08006e99
 8006e4c:	08006de9 	.word	0x08006de9
 8006e50:	08006de9 	.word	0x08006de9
 8006e54:	08006f33 	.word	0x08006f33
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	1d1a      	adds	r2, r3, #4
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	602a      	str	r2, [r5, #0]
 8006e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e09f      	b.n	8006fac <_printf_i+0x1ec>
 8006e6c:	6820      	ldr	r0, [r4, #0]
 8006e6e:	682b      	ldr	r3, [r5, #0]
 8006e70:	0607      	lsls	r7, r0, #24
 8006e72:	f103 0104 	add.w	r1, r3, #4
 8006e76:	6029      	str	r1, [r5, #0]
 8006e78:	d501      	bpl.n	8006e7e <_printf_i+0xbe>
 8006e7a:	681e      	ldr	r6, [r3, #0]
 8006e7c:	e003      	b.n	8006e86 <_printf_i+0xc6>
 8006e7e:	0646      	lsls	r6, r0, #25
 8006e80:	d5fb      	bpl.n	8006e7a <_printf_i+0xba>
 8006e82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e86:	2e00      	cmp	r6, #0
 8006e88:	da03      	bge.n	8006e92 <_printf_i+0xd2>
 8006e8a:	232d      	movs	r3, #45	; 0x2d
 8006e8c:	4276      	negs	r6, r6
 8006e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e92:	485a      	ldr	r0, [pc, #360]	; (8006ffc <_printf_i+0x23c>)
 8006e94:	230a      	movs	r3, #10
 8006e96:	e012      	b.n	8006ebe <_printf_i+0xfe>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	6820      	ldr	r0, [r4, #0]
 8006e9c:	1d19      	adds	r1, r3, #4
 8006e9e:	6029      	str	r1, [r5, #0]
 8006ea0:	0605      	lsls	r5, r0, #24
 8006ea2:	d501      	bpl.n	8006ea8 <_printf_i+0xe8>
 8006ea4:	681e      	ldr	r6, [r3, #0]
 8006ea6:	e002      	b.n	8006eae <_printf_i+0xee>
 8006ea8:	0641      	lsls	r1, r0, #25
 8006eaa:	d5fb      	bpl.n	8006ea4 <_printf_i+0xe4>
 8006eac:	881e      	ldrh	r6, [r3, #0]
 8006eae:	4853      	ldr	r0, [pc, #332]	; (8006ffc <_printf_i+0x23c>)
 8006eb0:	2f6f      	cmp	r7, #111	; 0x6f
 8006eb2:	bf0c      	ite	eq
 8006eb4:	2308      	moveq	r3, #8
 8006eb6:	230a      	movne	r3, #10
 8006eb8:	2100      	movs	r1, #0
 8006eba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ebe:	6865      	ldr	r5, [r4, #4]
 8006ec0:	60a5      	str	r5, [r4, #8]
 8006ec2:	2d00      	cmp	r5, #0
 8006ec4:	bfa2      	ittt	ge
 8006ec6:	6821      	ldrge	r1, [r4, #0]
 8006ec8:	f021 0104 	bicge.w	r1, r1, #4
 8006ecc:	6021      	strge	r1, [r4, #0]
 8006ece:	b90e      	cbnz	r6, 8006ed4 <_printf_i+0x114>
 8006ed0:	2d00      	cmp	r5, #0
 8006ed2:	d04b      	beq.n	8006f6c <_printf_i+0x1ac>
 8006ed4:	4615      	mov	r5, r2
 8006ed6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eda:	fb03 6711 	mls	r7, r3, r1, r6
 8006ede:	5dc7      	ldrb	r7, [r0, r7]
 8006ee0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ee4:	4637      	mov	r7, r6
 8006ee6:	42bb      	cmp	r3, r7
 8006ee8:	460e      	mov	r6, r1
 8006eea:	d9f4      	bls.n	8006ed6 <_printf_i+0x116>
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d10b      	bne.n	8006f08 <_printf_i+0x148>
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	07de      	lsls	r6, r3, #31
 8006ef4:	d508      	bpl.n	8006f08 <_printf_i+0x148>
 8006ef6:	6923      	ldr	r3, [r4, #16]
 8006ef8:	6861      	ldr	r1, [r4, #4]
 8006efa:	4299      	cmp	r1, r3
 8006efc:	bfde      	ittt	le
 8006efe:	2330      	movle	r3, #48	; 0x30
 8006f00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f08:	1b52      	subs	r2, r2, r5
 8006f0a:	6122      	str	r2, [r4, #16]
 8006f0c:	f8cd a000 	str.w	sl, [sp]
 8006f10:	464b      	mov	r3, r9
 8006f12:	aa03      	add	r2, sp, #12
 8006f14:	4621      	mov	r1, r4
 8006f16:	4640      	mov	r0, r8
 8006f18:	f7ff fee4 	bl	8006ce4 <_printf_common>
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d14a      	bne.n	8006fb6 <_printf_i+0x1f6>
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295
 8006f24:	b004      	add	sp, #16
 8006f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	f043 0320 	orr.w	r3, r3, #32
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	4833      	ldr	r0, [pc, #204]	; (8007000 <_printf_i+0x240>)
 8006f34:	2778      	movs	r7, #120	; 0x78
 8006f36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	6829      	ldr	r1, [r5, #0]
 8006f3e:	061f      	lsls	r7, r3, #24
 8006f40:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f44:	d402      	bmi.n	8006f4c <_printf_i+0x18c>
 8006f46:	065f      	lsls	r7, r3, #25
 8006f48:	bf48      	it	mi
 8006f4a:	b2b6      	uxthmi	r6, r6
 8006f4c:	07df      	lsls	r7, r3, #31
 8006f4e:	bf48      	it	mi
 8006f50:	f043 0320 	orrmi.w	r3, r3, #32
 8006f54:	6029      	str	r1, [r5, #0]
 8006f56:	bf48      	it	mi
 8006f58:	6023      	strmi	r3, [r4, #0]
 8006f5a:	b91e      	cbnz	r6, 8006f64 <_printf_i+0x1a4>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	f023 0320 	bic.w	r3, r3, #32
 8006f62:	6023      	str	r3, [r4, #0]
 8006f64:	2310      	movs	r3, #16
 8006f66:	e7a7      	b.n	8006eb8 <_printf_i+0xf8>
 8006f68:	4824      	ldr	r0, [pc, #144]	; (8006ffc <_printf_i+0x23c>)
 8006f6a:	e7e4      	b.n	8006f36 <_printf_i+0x176>
 8006f6c:	4615      	mov	r5, r2
 8006f6e:	e7bd      	b.n	8006eec <_printf_i+0x12c>
 8006f70:	682b      	ldr	r3, [r5, #0]
 8006f72:	6826      	ldr	r6, [r4, #0]
 8006f74:	6961      	ldr	r1, [r4, #20]
 8006f76:	1d18      	adds	r0, r3, #4
 8006f78:	6028      	str	r0, [r5, #0]
 8006f7a:	0635      	lsls	r5, r6, #24
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	d501      	bpl.n	8006f84 <_printf_i+0x1c4>
 8006f80:	6019      	str	r1, [r3, #0]
 8006f82:	e002      	b.n	8006f8a <_printf_i+0x1ca>
 8006f84:	0670      	lsls	r0, r6, #25
 8006f86:	d5fb      	bpl.n	8006f80 <_printf_i+0x1c0>
 8006f88:	8019      	strh	r1, [r3, #0]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	6123      	str	r3, [r4, #16]
 8006f8e:	4615      	mov	r5, r2
 8006f90:	e7bc      	b.n	8006f0c <_printf_i+0x14c>
 8006f92:	682b      	ldr	r3, [r5, #0]
 8006f94:	1d1a      	adds	r2, r3, #4
 8006f96:	602a      	str	r2, [r5, #0]
 8006f98:	681d      	ldr	r5, [r3, #0]
 8006f9a:	6862      	ldr	r2, [r4, #4]
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f7f9 f9a6 	bl	80002f0 <memchr>
 8006fa4:	b108      	cbz	r0, 8006faa <_printf_i+0x1ea>
 8006fa6:	1b40      	subs	r0, r0, r5
 8006fa8:	6060      	str	r0, [r4, #4]
 8006faa:	6863      	ldr	r3, [r4, #4]
 8006fac:	6123      	str	r3, [r4, #16]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fb4:	e7aa      	b.n	8006f0c <_printf_i+0x14c>
 8006fb6:	6923      	ldr	r3, [r4, #16]
 8006fb8:	462a      	mov	r2, r5
 8006fba:	4649      	mov	r1, r9
 8006fbc:	4640      	mov	r0, r8
 8006fbe:	47d0      	blx	sl
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d0ad      	beq.n	8006f20 <_printf_i+0x160>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	079b      	lsls	r3, r3, #30
 8006fc8:	d413      	bmi.n	8006ff2 <_printf_i+0x232>
 8006fca:	68e0      	ldr	r0, [r4, #12]
 8006fcc:	9b03      	ldr	r3, [sp, #12]
 8006fce:	4298      	cmp	r0, r3
 8006fd0:	bfb8      	it	lt
 8006fd2:	4618      	movlt	r0, r3
 8006fd4:	e7a6      	b.n	8006f24 <_printf_i+0x164>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	4632      	mov	r2, r6
 8006fda:	4649      	mov	r1, r9
 8006fdc:	4640      	mov	r0, r8
 8006fde:	47d0      	blx	sl
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d09d      	beq.n	8006f20 <_printf_i+0x160>
 8006fe4:	3501      	adds	r5, #1
 8006fe6:	68e3      	ldr	r3, [r4, #12]
 8006fe8:	9903      	ldr	r1, [sp, #12]
 8006fea:	1a5b      	subs	r3, r3, r1
 8006fec:	42ab      	cmp	r3, r5
 8006fee:	dcf2      	bgt.n	8006fd6 <_printf_i+0x216>
 8006ff0:	e7eb      	b.n	8006fca <_printf_i+0x20a>
 8006ff2:	2500      	movs	r5, #0
 8006ff4:	f104 0619 	add.w	r6, r4, #25
 8006ff8:	e7f5      	b.n	8006fe6 <_printf_i+0x226>
 8006ffa:	bf00      	nop
 8006ffc:	08007361 	.word	0x08007361
 8007000:	08007372 	.word	0x08007372

08007004 <memmove>:
 8007004:	4288      	cmp	r0, r1
 8007006:	b510      	push	{r4, lr}
 8007008:	eb01 0402 	add.w	r4, r1, r2
 800700c:	d902      	bls.n	8007014 <memmove+0x10>
 800700e:	4284      	cmp	r4, r0
 8007010:	4623      	mov	r3, r4
 8007012:	d807      	bhi.n	8007024 <memmove+0x20>
 8007014:	1e43      	subs	r3, r0, #1
 8007016:	42a1      	cmp	r1, r4
 8007018:	d008      	beq.n	800702c <memmove+0x28>
 800701a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800701e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007022:	e7f8      	b.n	8007016 <memmove+0x12>
 8007024:	4402      	add	r2, r0
 8007026:	4601      	mov	r1, r0
 8007028:	428a      	cmp	r2, r1
 800702a:	d100      	bne.n	800702e <memmove+0x2a>
 800702c:	bd10      	pop	{r4, pc}
 800702e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007036:	e7f7      	b.n	8007028 <memmove+0x24>

08007038 <_sbrk_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d06      	ldr	r5, [pc, #24]	; (8007054 <_sbrk_r+0x1c>)
 800703c:	2300      	movs	r3, #0
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	f7fa f898 	bl	8001178 <_sbrk>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_sbrk_r+0x1a>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	b103      	cbz	r3, 8007052 <_sbrk_r+0x1a>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	24000358 	.word	0x24000358

08007058 <_realloc_r>:
 8007058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800705c:	4680      	mov	r8, r0
 800705e:	4614      	mov	r4, r2
 8007060:	460e      	mov	r6, r1
 8007062:	b921      	cbnz	r1, 800706e <_realloc_r+0x16>
 8007064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007068:	4611      	mov	r1, r2
 800706a:	f7ff bc57 	b.w	800691c <_malloc_r>
 800706e:	b92a      	cbnz	r2, 800707c <_realloc_r+0x24>
 8007070:	f7ff fbe8 	bl	8006844 <_free_r>
 8007074:	4625      	mov	r5, r4
 8007076:	4628      	mov	r0, r5
 8007078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800707c:	f000 f81b 	bl	80070b6 <_malloc_usable_size_r>
 8007080:	4284      	cmp	r4, r0
 8007082:	4607      	mov	r7, r0
 8007084:	d802      	bhi.n	800708c <_realloc_r+0x34>
 8007086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800708a:	d812      	bhi.n	80070b2 <_realloc_r+0x5a>
 800708c:	4621      	mov	r1, r4
 800708e:	4640      	mov	r0, r8
 8007090:	f7ff fc44 	bl	800691c <_malloc_r>
 8007094:	4605      	mov	r5, r0
 8007096:	2800      	cmp	r0, #0
 8007098:	d0ed      	beq.n	8007076 <_realloc_r+0x1e>
 800709a:	42bc      	cmp	r4, r7
 800709c:	4622      	mov	r2, r4
 800709e:	4631      	mov	r1, r6
 80070a0:	bf28      	it	cs
 80070a2:	463a      	movcs	r2, r7
 80070a4:	f7ff fbc0 	bl	8006828 <memcpy>
 80070a8:	4631      	mov	r1, r6
 80070aa:	4640      	mov	r0, r8
 80070ac:	f7ff fbca 	bl	8006844 <_free_r>
 80070b0:	e7e1      	b.n	8007076 <_realloc_r+0x1e>
 80070b2:	4635      	mov	r5, r6
 80070b4:	e7df      	b.n	8007076 <_realloc_r+0x1e>

080070b6 <_malloc_usable_size_r>:
 80070b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ba:	1f18      	subs	r0, r3, #4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bfbc      	itt	lt
 80070c0:	580b      	ldrlt	r3, [r1, r0]
 80070c2:	18c0      	addlt	r0, r0, r3
 80070c4:	4770      	bx	lr
	...

080070c8 <_init>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	bf00      	nop
 80070cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ce:	bc08      	pop	{r3}
 80070d0:	469e      	mov	lr, r3
 80070d2:	4770      	bx	lr

080070d4 <_fini>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	bf00      	nop
 80070d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070da:	bc08      	pop	{r3}
 80070dc:	469e      	mov	lr, r3
 80070de:	4770      	bx	lr
