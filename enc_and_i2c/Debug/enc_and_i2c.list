
enc_and_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08007f54  08007f54  00017f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080081b0  080081b0  000181b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080081b4  080081b4  000181b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  080081b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000268  24000064  0800821c  00020064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002cc  0800821c  000202cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 11 .debug_info   000139aa  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000254b  00000000  00000000  00033a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000df0  00000000  00000000  00035fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000adb  00000000  00000000  00036dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002fe68  00000000  00000000  0003789b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014b65  00000000  00000000  00067703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001371df  00000000  00000000  0007c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003f30  00000000  00000000  001b3448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  001b7378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000064 	.word	0x24000064
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08007f3c 	.word	0x08007f3c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000068 	.word	0x24000068
 80002ec:	08007f3c 	.word	0x08007f3c

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80006a2:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint8_t Buf20[20]   = {0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x1C};
 80006a4:	4b6f      	ldr	r3, [pc, #444]	; (8000864 <main+0x1c8>)
 80006a6:	f507 7468 	add.w	r4, r7, #928	; 0x3a0
 80006aa:	461d      	mov	r5, r3
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	682b      	ldr	r3, [r5, #0]
 80006b2:	6023      	str	r3, [r4, #0]
	uint8_t Init20[20]  = {0xA0,0x8B,0x03,0x96,0x96,0x10,0x07,0x00,0x00,0xB1,0x41,0x22,0xA9,0x41,0x22,0xFF,0xFF,0x00,0x30,0x00};
 80006b4:	4b6c      	ldr	r3, [pc, #432]	; (8000868 <main+0x1cc>)
 80006b6:	f507 7463 	add.w	r4, r7, #908	; 0x38c
 80006ba:	461d      	mov	r5, r3
 80006bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c0:	682b      	ldr	r3, [r5, #0]
 80006c2:	6023      	str	r3, [r4, #0]
	char strs[20][20] = {"POWER_CTRL","AMP_DAC_CTRL","DAC_CTRL","VOL_LEFT_CTRL","VOL_RIGHT_CTRL",
 80006c4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80006c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80006cc:	4a67      	ldr	r2, [pc, #412]	; (800086c <main+0x1d0>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	4611      	mov	r1, r2
 80006d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006d6:	461a      	mov	r2, r3
 80006d8:	f006 ffe0 	bl	800769c <memcpy>

//	char Buffer[6];
//	uint8_t Space[] = " - ";
//	uint8_t StartMSG[] = "\r\n Starting I2C Scanning: \r\n";
//	uint8_t EndMSG[] = "Done! \r\n\r\n";
	uint8_t i = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	f887 33b7 	strb.w	r3, [r7, #951]	; 0x3b7
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e2:	f000 fcd3 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e6:	f000 f8d1 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ea:	f000 f9d3 	bl	8000a94 <MX_GPIO_Init>
  MX_I2C3_Init();
 80006ee:	f000 f945 	bl	800097c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80006f2:	f000 f983 	bl	80009fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  for(i=0; i<20; i++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	f887 33b7 	strb.w	r3, [r7, #951]	; 0x3b7
 80006fc:	e05f      	b.n	80007be <main+0x122>
  {
	  dB01[0] = Init20[i];
 80006fe:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 8000702:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8000706:	443b      	add	r3, r7
 8000708:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 800070c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8000710:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8000714:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c3, (0x12 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, dB01, 1, 100);
 8000716:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 800071a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800071e:	443b      	add	r3, r7
 8000720:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000724:	b29a      	uxth	r2, r3
 8000726:	2364      	movs	r3, #100	; 0x64
 8000728:	9302      	str	r3, [sp, #8]
 800072a:	2301      	movs	r3, #1
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	463b      	mov	r3, r7
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2301      	movs	r3, #1
 8000734:	2124      	movs	r1, #36	; 0x24
 8000736:	484e      	ldr	r0, [pc, #312]	; (8000870 <main+0x1d4>)
 8000738:	f001 fe20 	bl	800237c <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Read(&hi2c3, (0x12 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, Buf, 1, 100);
 800073c:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 8000740:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8000744:	443b      	add	r3, r7
 8000746:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800074a:	b29a      	uxth	r2, r3
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	9302      	str	r3, [sp, #8]
 8000750:	2301      	movs	r3, #1
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2301      	movs	r3, #1
 800075c:	2124      	movs	r1, #36	; 0x24
 800075e:	4844      	ldr	r0, [pc, #272]	; (8000870 <main+0x1d4>)
 8000760:	f001 ff20 	bl	80025a4 <HAL_I2C_Mem_Read>
	  log_len = sprintf(log, " 0x%X : %s Addr 0x%X\r\n", Buf[0], strs[i], Buf20[i]);
 8000764:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8000768:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	461c      	mov	r4, r3
 8000770:	f897 23b7 	ldrb.w	r2, [r7, #951]	; 0x3b7
 8000774:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 8000778:	4613      	mov	r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	4413      	add	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	18ca      	adds	r2, r1, r3
 8000782:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 8000786:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800078a:	443b      	add	r3, r7
 800078c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000790:	1d38      	adds	r0, r7, #4
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	4613      	mov	r3, r2
 8000796:	4622      	mov	r2, r4
 8000798:	4936      	ldr	r1, [pc, #216]	; (8000874 <main+0x1d8>)
 800079a:	f006 ff2b 	bl	80075f4 <siprintf>
 800079e:	4603      	mov	r3, r0
 80007a0:	f887 33b6 	strb.w	r3, [r7, #950]	; 0x3b6
	  HAL_UART_Transmit(&huart1, (uint8_t *)log, log_len, 100);
 80007a4:	f897 33b6 	ldrb.w	r3, [r7, #950]	; 0x3b6
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	1d39      	adds	r1, r7, #4
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	4832      	ldr	r0, [pc, #200]	; (8000878 <main+0x1dc>)
 80007b0:	f004 fe98 	bl	80054e4 <HAL_UART_Transmit>
  for(i=0; i<20; i++)
 80007b4:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 80007b8:	3301      	adds	r3, #1
 80007ba:	f887 33b7 	strb.w	r3, [r7, #951]	; 0x3b7
 80007be:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 80007c2:	2b13      	cmp	r3, #19
 80007c4:	d99b      	bls.n	80006fe <main+0x62>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (send_usart)
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <main+0x1e0>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0fb      	beq.n	80007c6 <main+0x12a>
	  {
		  count>=255? count=255:count;
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <main+0x1e4>)
 80007d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d4:	2bfe      	cmp	r3, #254	; 0xfe
 80007d6:	dd02      	ble.n	80007de <main+0x142>
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <main+0x1e4>)
 80007da:	22ff      	movs	r2, #255	; 0xff
 80007dc:	801a      	strh	r2, [r3, #0]
		  count<=95? count=95:count;
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <main+0x1e4>)
 80007e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007e4:	2b5f      	cmp	r3, #95	; 0x5f
 80007e6:	dc02      	bgt.n	80007ee <main+0x152>
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <main+0x1e4>)
 80007ea:	225f      	movs	r2, #95	; 0x5f
 80007ec:	801a      	strh	r2, [r3, #0]
		  sprintf(buf, "Testing : %d : %X \r\n", count,count);
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <main+0x1e4>)
 80007f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <main+0x1e4>)
 80007f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007fc:	4921      	ldr	r1, [pc, #132]	; (8000884 <main+0x1e8>)
 80007fe:	4822      	ldr	r0, [pc, #136]	; (8000888 <main+0x1ec>)
 8000800:	f006 fef8 	bl	80075f4 <siprintf>
		  HAL_UART_Transmit_IT(&huart1,(uint8_t*)buf, strlen(buf));
 8000804:	4820      	ldr	r0, [pc, #128]	; (8000888 <main+0x1ec>)
 8000806:	f7ff fd73 	bl	80002f0 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29b      	uxth	r3, r3
 800080e:	461a      	mov	r2, r3
 8000810:	491d      	ldr	r1, [pc, #116]	; (8000888 <main+0x1ec>)
 8000812:	4819      	ldr	r0, [pc, #100]	; (8000878 <main+0x1dc>)
 8000814:	f004 fefc 	bl	8005610 <HAL_UART_Transmit_IT>
		  dB01[0] = count;
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <main+0x1e4>)
 800081a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8000824:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8000828:	701a      	strb	r2, [r3, #0]
		  HAL_I2C_Mem_Write(&hi2c3, (0x12 << 1), 0x07, I2C_MEMADD_SIZE_8BIT, dB01, 1, 100);
 800082a:	2364      	movs	r3, #100	; 0x64
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	2301      	movs	r3, #1
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	463b      	mov	r3, r7
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2301      	movs	r3, #1
 8000838:	2207      	movs	r2, #7
 800083a:	2124      	movs	r1, #36	; 0x24
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <main+0x1d4>)
 800083e:	f001 fd9d 	bl	800237c <HAL_I2C_Mem_Write>
		  HAL_I2C_Mem_Write(&hi2c3, (0x12 << 1), 0x08, I2C_MEMADD_SIZE_8BIT, dB01, 1, 100);
 8000842:	2364      	movs	r3, #100	; 0x64
 8000844:	9302      	str	r3, [sp, #8]
 8000846:	2301      	movs	r3, #1
 8000848:	9301      	str	r3, [sp, #4]
 800084a:	463b      	mov	r3, r7
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2301      	movs	r3, #1
 8000850:	2208      	movs	r2, #8
 8000852:	2124      	movs	r1, #36	; 0x24
 8000854:	4806      	ldr	r0, [pc, #24]	; (8000870 <main+0x1d4>)
 8000856:	f001 fd91 	bl	800237c <HAL_I2C_Mem_Write>
		  send_usart=0;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <main+0x1e0>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
	  if (send_usart)
 8000860:	e7b1      	b.n	80007c6 <main+0x12a>
 8000862:	bf00      	nop
 8000864:	08007f84 	.word	0x08007f84
 8000868:	08007f98 	.word	0x08007f98
 800086c:	08007fac 	.word	0x08007fac
 8000870:	24000080 	.word	0x24000080
 8000874:	08007f54 	.word	0x08007f54
 8000878:	240000cc 	.word	0x240000cc
 800087c:	2400015c 	.word	0x2400015c
 8000880:	24000000 	.word	0x24000000
 8000884:	08007f6c 	.word	0x08007f6c
 8000888:	24000160 	.word	0x24000160

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b09c      	sub	sp, #112	; 0x70
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	224c      	movs	r2, #76	; 0x4c
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f006 feca 	bl	8007634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2220      	movs	r2, #32
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f006 fec4 	bl	8007634 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80008ac:	4b31      	ldr	r3, [pc, #196]	; (8000974 <SystemClock_Config+0xe8>)
 80008ae:	f04f 32ff 	mov.w	r2, #4294967295
 80008b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008b6:	2002      	movs	r0, #2
 80008b8:	f002 facc 	bl	8002e54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008bc:	2300      	movs	r3, #0
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <SystemClock_Config+0xec>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008c8:	4a2b      	ldr	r2, [pc, #172]	; (8000978 <SystemClock_Config+0xec>)
 80008ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <SystemClock_Config+0xec>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008dc:	bf00      	nop
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <SystemClock_Config+0xec>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ea:	d1f8      	bne.n	80008de <SystemClock_Config+0x52>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2340      	movs	r3, #64	; 0x40
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f8:	2302      	movs	r3, #2
 80008fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fc:	2300      	movs	r3, #0
 80008fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000900:	2320      	movs	r3, #32
 8000902:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000904:	2381      	movs	r3, #129	; 0x81
 8000906:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800090c:	2302      	movs	r3, #2
 800090e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000914:	2304      	movs	r3, #4
 8000916:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000918:	2300      	movs	r3, #0
 800091a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4618      	mov	r0, r3
 8000926:	f002 facf 	bl	8002ec8 <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000930:	f000 f978 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000934:	233f      	movs	r3, #63	; 0x3f
 8000936:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000938:	2303      	movs	r3, #3
 800093a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000944:	2340      	movs	r3, #64	; 0x40
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000948:	2340      	movs	r3, #64	; 0x40
 800094a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800094c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000950:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000952:	2340      	movs	r3, #64	; 0x40
 8000954:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2103      	movs	r1, #3
 800095a:	4618      	mov	r0, r3
 800095c:	f002 feb8 	bl	80036d0 <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000966:	f000 f95d 	bl	8000c24 <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3770      	adds	r7, #112	; 0x70
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	58024400 	.word	0x58024400
 8000978:	58024800 	.word	0x58024800

0800097c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_I2C3_Init+0x74>)
 8000982:	4a1c      	ldr	r2, [pc, #112]	; (80009f4 <MX_I2C3_Init+0x78>)
 8000984:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x4030324B;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_I2C3_Init+0x74>)
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <MX_I2C3_Init+0x7c>)
 800098a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_I2C3_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_I2C3_Init+0x74>)
 8000994:	2201      	movs	r2, #1
 8000996:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_I2C3_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_I2C3_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_I2C3_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_I2C3_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_I2C3_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009b6:	480e      	ldr	r0, [pc, #56]	; (80009f0 <MX_I2C3_Init+0x74>)
 80009b8:	f001 fc50 	bl	800225c <HAL_I2C_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80009c2:	f000 f92f 	bl	8000c24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <MX_I2C3_Init+0x74>)
 80009ca:	f002 f9ab 	bl	8002d24 <HAL_I2CEx_ConfigAnalogFilter>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009d4:	f000 f926 	bl	8000c24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_I2C3_Init+0x74>)
 80009dc:	f002 f9ed 	bl	8002dba <HAL_I2CEx_ConfigDigitalFilter>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80009e6:	f000 f91d 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	24000080 	.word	0x24000080
 80009f4:	40005c00 	.word	0x40005c00
 80009f8:	4030324b 	.word	0x4030324b

080009fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <MX_USART1_UART_Init+0x94>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a44:	4811      	ldr	r0, [pc, #68]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a46:	f004 fcfd 	bl	8005444 <HAL_UART_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a50:	f000 f8e8 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a58:	f006 fd02 	bl	8007460 <HAL_UARTEx_SetTxFifoThreshold>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a62:	f000 f8df 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a6a:	f006 fd37 	bl	80074dc <HAL_UARTEx_SetRxFifoThreshold>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a74:	f000 f8d6 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a7a:	f006 fcb8 	bl	80073ee <HAL_UARTEx_DisableFifoMode>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a84:	f000 f8ce 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	240000cc 	.word	0x240000cc
 8000a90:	40011000 	.word	0x40011000

08000a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <MX_GPIO_Init+0xb4>)
 8000aac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab0:	4a25      	ldr	r2, [pc, #148]	; (8000b48 <MX_GPIO_Init+0xb4>)
 8000ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aba:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <MX_GPIO_Init+0xb4>)
 8000abc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_GPIO_Init+0xb4>)
 8000aca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ace:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <MX_GPIO_Init+0xb4>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_GPIO_Init+0xb4>)
 8000ada:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_GPIO_Init+0xb4>)
 8000ae8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aec:	4a16      	ldr	r2, [pc, #88]	; (8000b48 <MX_GPIO_Init+0xb4>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_GPIO_Init+0xb4>)
 8000af8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RENC_A_Pin RENC_B_Pin */
  GPIO_InitStruct.Pin = RENC_A_Pin|RENC_B_Pin;
 8000b04:	2305      	movs	r3, #5
 8000b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b08:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <MX_GPIO_Init+0xb8>)
 8000b1a:	f001 f9bd 	bl	8001e98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2006      	movs	r0, #6
 8000b24:	f000 fc1f 	bl	8001366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b28:	2006      	movs	r0, #6
 8000b2a:	f000 fc36 	bl	800139a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2008      	movs	r0, #8
 8000b34:	f000 fc17 	bl	8001366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b38:	2008      	movs	r0, #8
 8000b3a:	f000 fc2e 	bl	800139a <HAL_NVIC_EnableIRQ>

}
 8000b3e:	bf00      	nop
 8000b40:	3720      	adds	r7, #32
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	58020000 	.word	0x58020000

08000b50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
		static GPIO_PinState A,B,prev_A=GPIO_PIN_SET,prev_B=GPIO_PIN_SET;

		if(GPIO_Pin==RENC_A_Pin)
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d125      	bne.n	8000bac <HAL_GPIO_EXTI_Callback+0x5c>
		{
			B=HAL_GPIO_ReadPin(RENC_B_GPIO_Port,RENC_B_Pin);
 8000b60:	2104      	movs	r1, #4
 8000b62:	4829      	ldr	r0, [pc, #164]	; (8000c08 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000b64:	f001 fb48 	bl	80021f8 <HAL_GPIO_ReadPin>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000b6e:	701a      	strb	r2, [r3, #0]
			// CCW decoder
			if(B!=prev_B)
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d017      	beq.n	8000bac <HAL_GPIO_EXTI_Callback+0x5c>
			{
				if(B==GPIO_PIN_SET)
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d10f      	bne.n	8000ba4 <HAL_GPIO_EXTI_Callback+0x54>
				{
					if(A==GPIO_PIN_RESET)
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d10b      	bne.n	8000ba4 <HAL_GPIO_EXTI_Callback+0x54>
					{
						count=count-8;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	3b08      	subs	r3, #8
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000b9c:	801a      	strh	r2, [r3, #0]
						send_usart=1;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <HAL_GPIO_EXTI_Callback+0xcc>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
					}
				}
				prev_B=B;
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000baa:	701a      	strb	r2, [r3, #0]
			}

		}

		if(GPIO_Pin==RENC_B_Pin)
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	d125      	bne.n	8000bfe <HAL_GPIO_EXTI_Callback+0xae>
		{
			A=HAL_GPIO_ReadPin(RENC_A_GPIO_Port,RENC_A_Pin);
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4814      	ldr	r0, [pc, #80]	; (8000c08 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000bb6:	f001 fb1f 	bl	80021f8 <HAL_GPIO_ReadPin>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000bc0:	701a      	strb	r2, [r3, #0]
			// CW decoder
			if(A!=prev_A)
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d017      	beq.n	8000bfe <HAL_GPIO_EXTI_Callback+0xae>
			{
				if(A==GPIO_PIN_SET)
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d10f      	bne.n	8000bf6 <HAL_GPIO_EXTI_Callback+0xa6>
				{
					if(B==GPIO_PIN_RESET)
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10b      	bne.n	8000bf6 <HAL_GPIO_EXTI_Callback+0xa6>
					{
						count=count+8;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	3308      	adds	r3, #8
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000bee:	801a      	strh	r2, [r3, #0]
						send_usart=1;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_GPIO_EXTI_Callback+0xcc>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
					}
				}
				prev_A=A;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000bfc:	701a      	strb	r2, [r3, #0]
			}

		}
	}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	58020000 	.word	0x58020000
 8000c0c:	24000179 	.word	0x24000179
 8000c10:	24000002 	.word	0x24000002
 8000c14:	2400017a 	.word	0x2400017a
 8000c18:	24000000 	.word	0x24000000
 8000c1c:	2400015c 	.word	0x2400015c
 8000c20:	24000003 	.word	0x24000003

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x8>
	...

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_MspInit+0x30>)
 8000c38:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_MspInit+0x30>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_MspInit+0x30>)
 8000c48:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	58024400 	.word	0x58024400

08000c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0b8      	sub	sp, #224	; 0xe0
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	22b8      	movs	r2, #184	; 0xb8
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f006 fcd5 	bl	8007634 <memset>
  if(hi2c->Instance==I2C3)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a37      	ldr	r2, [pc, #220]	; (8000d6c <HAL_I2C_MspInit+0x108>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d167      	bne.n	8000d64 <HAL_I2C_MspInit+0x100>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000c94:	2308      	movs	r3, #8
 8000c96:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 f8a0 	bl	8003de8 <HAL_RCCEx_PeriphCLKConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cae:	f7ff ffb9 	bl	8000c24 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <HAL_I2C_MspInit+0x10c>)
 8000cb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cb8:	4a2d      	ldr	r2, [pc, #180]	; (8000d70 <HAL_I2C_MspInit+0x10c>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <HAL_I2C_MspInit+0x10c>)
 8000cc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <HAL_I2C_MspInit+0x10c>)
 8000cd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd6:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <HAL_I2C_MspInit+0x10c>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <HAL_I2C_MspInit+0x10c>)
 8000ce2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf6:	2312      	movs	r3, #18
 8000cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d12:	4619      	mov	r1, r3
 8000d14:	4817      	ldr	r0, [pc, #92]	; (8000d74 <HAL_I2C_MspInit+0x110>)
 8000d16:	f001 f8bf 	bl	8001e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d22:	2312      	movs	r3, #18
 8000d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d34:	2304      	movs	r3, #4
 8000d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <HAL_I2C_MspInit+0x114>)
 8000d42:	f001 f8a9 	bl	8001e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_I2C_MspInit+0x10c>)
 8000d48:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d4c:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <HAL_I2C_MspInit+0x10c>)
 8000d4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d52:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_I2C_MspInit+0x10c>)
 8000d58:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	37e0      	adds	r7, #224	; 0xe0
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40005c00 	.word	0x40005c00
 8000d70:	58024400 	.word	0x58024400
 8000d74:	58020800 	.word	0x58020800
 8000d78:	58020000 	.word	0x58020000

08000d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0b8      	sub	sp, #224	; 0xe0
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	22b8      	movs	r2, #184	; 0xb8
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f006 fc49 	bl	8007634 <memset>
  if(huart->Instance==USART1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a29      	ldr	r2, [pc, #164]	; (8000e4c <HAL_UART_MspInit+0xd0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d14a      	bne.n	8000e42 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 f814 	bl	8003de8 <HAL_RCCEx_PeriphCLKConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dc6:	f7ff ff2d 	bl	8000c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <HAL_UART_MspInit+0xd4>)
 8000dcc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000dd0:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <HAL_UART_MspInit+0xd4>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <HAL_UART_MspInit+0xd4>)
 8000ddc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000de0:	f003 0310 	and.w	r3, r3, #16
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_UART_MspInit+0xd4>)
 8000dea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dee:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <HAL_UART_MspInit+0xd4>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_UART_MspInit+0xd4>)
 8000dfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e20:	2307      	movs	r3, #7
 8000e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <HAL_UART_MspInit+0xd8>)
 8000e2e:	f001 f833 	bl	8001e98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2025      	movs	r0, #37	; 0x25
 8000e38:	f000 fa95 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e3c:	2025      	movs	r0, #37	; 0x25
 8000e3e:	f000 faac 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	37e0      	adds	r7, #224	; 0xe0
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40011000 	.word	0x40011000
 8000e50:	58024400 	.word	0x58024400
 8000e54:	58020000 	.word	0x58020000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler+0x4>

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 f964 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RENC_A_Pin);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f001 f9b9 	bl	8002228 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RENC_B_Pin);
 8000ebe:	2004      	movs	r0, #4
 8000ec0:	f001 f9b2 	bl	8002228 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <USART1_IRQHandler+0x10>)
 8000ece:	f004 fc47 	bl	8005760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	240000cc 	.word	0x240000cc

08000edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee4:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <_sbrk+0x5c>)
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <_sbrk+0x60>)
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <_sbrk+0x64>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <_sbrk+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f0c:	f006 fb9a 	bl	8007644 <__errno>
 8000f10:	4603      	mov	r3, r0
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <_sbrk+0x64>)
 8000f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	24100000 	.word	0x24100000
 8000f3c:	00000400 	.word	0x00000400
 8000f40:	2400017c 	.word	0x2400017c
 8000f44:	240002d0 	.word	0x240002d0

08000f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b32      	ldr	r3, [pc, #200]	; (8001018 <SystemInit+0xd0>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a31      	ldr	r2, [pc, #196]	; (8001018 <SystemInit+0xd0>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <SystemInit+0xd4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 030f 	and.w	r3, r3, #15
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d807      	bhi.n	8000f78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <SystemInit+0xd4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f023 030f 	bic.w	r3, r3, #15
 8000f70:	4a2a      	ldr	r2, [pc, #168]	; (800101c <SystemInit+0xd4>)
 8000f72:	f043 0303 	orr.w	r3, r3, #3
 8000f76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <SystemInit+0xd8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a28      	ldr	r2, [pc, #160]	; (8001020 <SystemInit+0xd8>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <SystemInit+0xd8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <SystemInit+0xd8>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4924      	ldr	r1, [pc, #144]	; (8001020 <SystemInit+0xd8>)
 8000f90:	4b24      	ldr	r3, [pc, #144]	; (8001024 <SystemInit+0xdc>)
 8000f92:	4013      	ands	r3, r2
 8000f94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f96:	4b21      	ldr	r3, [pc, #132]	; (800101c <SystemInit+0xd4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d007      	beq.n	8000fb2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <SystemInit+0xd4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f023 030f 	bic.w	r3, r3, #15
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <SystemInit+0xd4>)
 8000fac:	f043 0303 	orr.w	r3, r3, #3
 8000fb0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <SystemInit+0xd8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <SystemInit+0xd8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <SystemInit+0xd8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <SystemInit+0xd8>)
 8000fc6:	4a18      	ldr	r2, [pc, #96]	; (8001028 <SystemInit+0xe0>)
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <SystemInit+0xd8>)
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <SystemInit+0xe4>)
 8000fce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <SystemInit+0xd8>)
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <SystemInit+0xe8>)
 8000fd4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <SystemInit+0xd8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <SystemInit+0xd8>)
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <SystemInit+0xe8>)
 8000fe0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <SystemInit+0xd8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <SystemInit+0xd8>)
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <SystemInit+0xe8>)
 8000fec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <SystemInit+0xd8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <SystemInit+0xd8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a09      	ldr	r2, [pc, #36]	; (8001020 <SystemInit+0xd8>)
 8000ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <SystemInit+0xd8>)
 8001002:	2200      	movs	r2, #0
 8001004:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <SystemInit+0xec>)
 8001008:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800100c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00
 800101c:	52002000 	.word	0x52002000
 8001020:	58024400 	.word	0x58024400
 8001024:	eaf6ed7f 	.word	0xeaf6ed7f
 8001028:	02020200 	.word	0x02020200
 800102c:	01ff0000 	.word	0x01ff0000
 8001030:	01010280 	.word	0x01010280
 8001034:	52004000 	.word	0x52004000

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800103c:	f7ff ff84 	bl	8000f48 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001042:	490d      	ldr	r1, [pc, #52]	; (8001078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001058:	4c0a      	ldr	r4, [pc, #40]	; (8001084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001066:	f006 faf3 	bl	8007650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff fb17 	bl	800069c <main>
  bx  lr
 800106e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001074:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001078:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 800107c:	080081b8 	.word	0x080081b8
  ldr r2, =_sbss
 8001080:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001084:	240002cc 	.word	0x240002cc

08001088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC_IRQHandler>
	...

0800108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001092:	2003      	movs	r0, #3
 8001094:	f000 f95c 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001098:	f002 fcd0 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 800109c:	4602      	mov	r2, r0
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_Init+0x68>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	4913      	ldr	r1, [pc, #76]	; (80010f8 <HAL_Init+0x6c>)
 80010aa:	5ccb      	ldrb	r3, [r1, r3]
 80010ac:	f003 031f 	and.w	r3, r3, #31
 80010b0:	fa22 f303 	lsr.w	r3, r2, r3
 80010b4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_Init+0x68>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <HAL_Init+0x6c>)
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	f003 031f 	and.w	r3, r3, #31
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	fa22 f303 	lsr.w	r3, r2, r3
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <HAL_Init+0x70>)
 80010ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010d0:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <HAL_Init+0x74>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d6:	200f      	movs	r0, #15
 80010d8:	f000 f814 	bl	8001104 <HAL_InitTick>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e002      	b.n	80010ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010e6:	f7ff fda3 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	58024400 	.word	0x58024400
 80010f8:	0800813c 	.word	0x0800813c
 80010fc:	24000008 	.word	0x24000008
 8001100:	24000004 	.word	0x24000004

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_InitTick+0x60>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e021      	b.n	800115c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <HAL_InitTick+0x64>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_InitTick+0x60>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f941 	bl	80013b6 <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 f90b 	bl	8001366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_InitTick+0x68>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	24000010 	.word	0x24000010
 8001168:	24000004 	.word	0x24000004
 800116c:	2400000c 	.word	0x2400000c

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	24000010 	.word	0x24000010
 8001194:	24000180 	.word	0x24000180

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	24000180 	.word	0x24000180

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <__NVIC_SetPriorityGrouping+0x40>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <__NVIC_SetPriorityGrouping+0x40>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00
 80011f4:	05fa0000 	.word	0x05fa0000

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4907      	ldr	r1, [pc, #28]	; (800124c <__NVIC_EnableIRQ+0x38>)
 800122e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff29 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff40 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff90 	bl	80012a4 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5f 	bl	8001250 <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff33 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa4 	bl	800130c <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff fede 	bl	8001198 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e2dc      	b.n	80019a2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d008      	beq.n	8001406 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e2cd      	b.n	80019a2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a76      	ldr	r2, [pc, #472]	; (80015e4 <HAL_DMA_Abort+0x214>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d04a      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a74      	ldr	r2, [pc, #464]	; (80015e8 <HAL_DMA_Abort+0x218>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d045      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a73      	ldr	r2, [pc, #460]	; (80015ec <HAL_DMA_Abort+0x21c>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d040      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a71      	ldr	r2, [pc, #452]	; (80015f0 <HAL_DMA_Abort+0x220>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d03b      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a70      	ldr	r2, [pc, #448]	; (80015f4 <HAL_DMA_Abort+0x224>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d036      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a6e      	ldr	r2, [pc, #440]	; (80015f8 <HAL_DMA_Abort+0x228>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d031      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a6d      	ldr	r2, [pc, #436]	; (80015fc <HAL_DMA_Abort+0x22c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d02c      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a6b      	ldr	r2, [pc, #428]	; (8001600 <HAL_DMA_Abort+0x230>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d027      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a6a      	ldr	r2, [pc, #424]	; (8001604 <HAL_DMA_Abort+0x234>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d022      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a68      	ldr	r2, [pc, #416]	; (8001608 <HAL_DMA_Abort+0x238>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01d      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a67      	ldr	r2, [pc, #412]	; (800160c <HAL_DMA_Abort+0x23c>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d018      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a65      	ldr	r2, [pc, #404]	; (8001610 <HAL_DMA_Abort+0x240>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d013      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a64      	ldr	r2, [pc, #400]	; (8001614 <HAL_DMA_Abort+0x244>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d00e      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a62      	ldr	r2, [pc, #392]	; (8001618 <HAL_DMA_Abort+0x248>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d009      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a61      	ldr	r2, [pc, #388]	; (800161c <HAL_DMA_Abort+0x24c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d004      	beq.n	80014a6 <HAL_DMA_Abort+0xd6>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a5f      	ldr	r2, [pc, #380]	; (8001620 <HAL_DMA_Abort+0x250>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_DMA_Abort+0xda>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_DMA_Abort+0xdc>
 80014aa:	2300      	movs	r3, #0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 021e 	bic.w	r2, r2, #30
 80014be:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014ce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e00a      	b.n	80014ee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 020e 	bic.w	r2, r2, #14
 80014e6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a3c      	ldr	r2, [pc, #240]	; (80015e4 <HAL_DMA_Abort+0x214>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d072      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a3a      	ldr	r2, [pc, #232]	; (80015e8 <HAL_DMA_Abort+0x218>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d06d      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a39      	ldr	r2, [pc, #228]	; (80015ec <HAL_DMA_Abort+0x21c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d068      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a37      	ldr	r2, [pc, #220]	; (80015f0 <HAL_DMA_Abort+0x220>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d063      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a36      	ldr	r2, [pc, #216]	; (80015f4 <HAL_DMA_Abort+0x224>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d05e      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a34      	ldr	r2, [pc, #208]	; (80015f8 <HAL_DMA_Abort+0x228>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d059      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a33      	ldr	r2, [pc, #204]	; (80015fc <HAL_DMA_Abort+0x22c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d054      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a31      	ldr	r2, [pc, #196]	; (8001600 <HAL_DMA_Abort+0x230>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d04f      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a30      	ldr	r2, [pc, #192]	; (8001604 <HAL_DMA_Abort+0x234>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d04a      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a2e      	ldr	r2, [pc, #184]	; (8001608 <HAL_DMA_Abort+0x238>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d045      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a2d      	ldr	r2, [pc, #180]	; (800160c <HAL_DMA_Abort+0x23c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d040      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a2b      	ldr	r2, [pc, #172]	; (8001610 <HAL_DMA_Abort+0x240>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d03b      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a2a      	ldr	r2, [pc, #168]	; (8001614 <HAL_DMA_Abort+0x244>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d036      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a28      	ldr	r2, [pc, #160]	; (8001618 <HAL_DMA_Abort+0x248>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d031      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a27      	ldr	r2, [pc, #156]	; (800161c <HAL_DMA_Abort+0x24c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d02c      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a25      	ldr	r2, [pc, #148]	; (8001620 <HAL_DMA_Abort+0x250>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d027      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a24      	ldr	r2, [pc, #144]	; (8001624 <HAL_DMA_Abort+0x254>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d022      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a22      	ldr	r2, [pc, #136]	; (8001628 <HAL_DMA_Abort+0x258>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d01d      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <HAL_DMA_Abort+0x25c>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d018      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <HAL_DMA_Abort+0x260>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d013      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <HAL_DMA_Abort+0x264>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d00e      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <HAL_DMA_Abort+0x268>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d009      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a1b      	ldr	r2, [pc, #108]	; (800163c <HAL_DMA_Abort+0x26c>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d004      	beq.n	80015de <HAL_DMA_Abort+0x20e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a19      	ldr	r2, [pc, #100]	; (8001640 <HAL_DMA_Abort+0x270>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d132      	bne.n	8001644 <HAL_DMA_Abort+0x274>
 80015de:	2301      	movs	r3, #1
 80015e0:	e031      	b.n	8001646 <HAL_DMA_Abort+0x276>
 80015e2:	bf00      	nop
 80015e4:	40020010 	.word	0x40020010
 80015e8:	40020028 	.word	0x40020028
 80015ec:	40020040 	.word	0x40020040
 80015f0:	40020058 	.word	0x40020058
 80015f4:	40020070 	.word	0x40020070
 80015f8:	40020088 	.word	0x40020088
 80015fc:	400200a0 	.word	0x400200a0
 8001600:	400200b8 	.word	0x400200b8
 8001604:	40020410 	.word	0x40020410
 8001608:	40020428 	.word	0x40020428
 800160c:	40020440 	.word	0x40020440
 8001610:	40020458 	.word	0x40020458
 8001614:	40020470 	.word	0x40020470
 8001618:	40020488 	.word	0x40020488
 800161c:	400204a0 	.word	0x400204a0
 8001620:	400204b8 	.word	0x400204b8
 8001624:	58025408 	.word	0x58025408
 8001628:	5802541c 	.word	0x5802541c
 800162c:	58025430 	.word	0x58025430
 8001630:	58025444 	.word	0x58025444
 8001634:	58025458 	.word	0x58025458
 8001638:	5802546c 	.word	0x5802546c
 800163c:	58025480 	.word	0x58025480
 8001640:	58025494 	.word	0x58025494
 8001644:	2300      	movs	r3, #0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001658:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a6d      	ldr	r2, [pc, #436]	; (8001814 <HAL_DMA_Abort+0x444>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d04a      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a6b      	ldr	r2, [pc, #428]	; (8001818 <HAL_DMA_Abort+0x448>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d045      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a6a      	ldr	r2, [pc, #424]	; (800181c <HAL_DMA_Abort+0x44c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d040      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a68      	ldr	r2, [pc, #416]	; (8001820 <HAL_DMA_Abort+0x450>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d03b      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a67      	ldr	r2, [pc, #412]	; (8001824 <HAL_DMA_Abort+0x454>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d036      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a65      	ldr	r2, [pc, #404]	; (8001828 <HAL_DMA_Abort+0x458>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d031      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a64      	ldr	r2, [pc, #400]	; (800182c <HAL_DMA_Abort+0x45c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d02c      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a62      	ldr	r2, [pc, #392]	; (8001830 <HAL_DMA_Abort+0x460>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d027      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a61      	ldr	r2, [pc, #388]	; (8001834 <HAL_DMA_Abort+0x464>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d022      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a5f      	ldr	r2, [pc, #380]	; (8001838 <HAL_DMA_Abort+0x468>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01d      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a5e      	ldr	r2, [pc, #376]	; (800183c <HAL_DMA_Abort+0x46c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d018      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a5c      	ldr	r2, [pc, #368]	; (8001840 <HAL_DMA_Abort+0x470>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d013      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a5b      	ldr	r2, [pc, #364]	; (8001844 <HAL_DMA_Abort+0x474>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d00e      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a59      	ldr	r2, [pc, #356]	; (8001848 <HAL_DMA_Abort+0x478>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d009      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a58      	ldr	r2, [pc, #352]	; (800184c <HAL_DMA_Abort+0x47c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d004      	beq.n	80016fa <HAL_DMA_Abort+0x32a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a56      	ldr	r2, [pc, #344]	; (8001850 <HAL_DMA_Abort+0x480>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d108      	bne.n	800170c <HAL_DMA_Abort+0x33c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0201 	bic.w	r2, r2, #1
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e007      	b.n	800171c <HAL_DMA_Abort+0x34c>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800171c:	e013      	b.n	8001746 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800171e:	f7ff fd3b 	bl	8001198 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b05      	cmp	r3, #5
 800172a:	d90c      	bls.n	8001746 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2220      	movs	r2, #32
 8001730:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2203      	movs	r2, #3
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e12d      	b.n	80019a2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1e5      	bne.n	800171e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a2f      	ldr	r2, [pc, #188]	; (8001814 <HAL_DMA_Abort+0x444>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d04a      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2d      	ldr	r2, [pc, #180]	; (8001818 <HAL_DMA_Abort+0x448>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d045      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a2c      	ldr	r2, [pc, #176]	; (800181c <HAL_DMA_Abort+0x44c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d040      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2a      	ldr	r2, [pc, #168]	; (8001820 <HAL_DMA_Abort+0x450>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d03b      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a29      	ldr	r2, [pc, #164]	; (8001824 <HAL_DMA_Abort+0x454>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d036      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a27      	ldr	r2, [pc, #156]	; (8001828 <HAL_DMA_Abort+0x458>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d031      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a26      	ldr	r2, [pc, #152]	; (800182c <HAL_DMA_Abort+0x45c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d02c      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a24      	ldr	r2, [pc, #144]	; (8001830 <HAL_DMA_Abort+0x460>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d027      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a23      	ldr	r2, [pc, #140]	; (8001834 <HAL_DMA_Abort+0x464>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d022      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a21      	ldr	r2, [pc, #132]	; (8001838 <HAL_DMA_Abort+0x468>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01d      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a20      	ldr	r2, [pc, #128]	; (800183c <HAL_DMA_Abort+0x46c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d018      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <HAL_DMA_Abort+0x470>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1d      	ldr	r2, [pc, #116]	; (8001844 <HAL_DMA_Abort+0x474>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d00e      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <HAL_DMA_Abort+0x478>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d009      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1a      	ldr	r2, [pc, #104]	; (800184c <HAL_DMA_Abort+0x47c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d004      	beq.n	80017f2 <HAL_DMA_Abort+0x422>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a18      	ldr	r2, [pc, #96]	; (8001850 <HAL_DMA_Abort+0x480>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <HAL_DMA_Abort+0x426>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_DMA_Abort+0x428>
 80017f6:	2300      	movs	r3, #0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d02b      	beq.n	8001854 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	223f      	movs	r2, #63	; 0x3f
 800180c:	409a      	lsls	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	e02a      	b.n	800186a <HAL_DMA_Abort+0x49a>
 8001814:	40020010 	.word	0x40020010
 8001818:	40020028 	.word	0x40020028
 800181c:	40020040 	.word	0x40020040
 8001820:	40020058 	.word	0x40020058
 8001824:	40020070 	.word	0x40020070
 8001828:	40020088 	.word	0x40020088
 800182c:	400200a0 	.word	0x400200a0
 8001830:	400200b8 	.word	0x400200b8
 8001834:	40020410 	.word	0x40020410
 8001838:	40020428 	.word	0x40020428
 800183c:	40020440 	.word	0x40020440
 8001840:	40020458 	.word	0x40020458
 8001844:	40020470 	.word	0x40020470
 8001848:	40020488 	.word	0x40020488
 800184c:	400204a0 	.word	0x400204a0
 8001850:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001858:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	2201      	movs	r2, #1
 8001864:	409a      	lsls	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a4f      	ldr	r2, [pc, #316]	; (80019ac <HAL_DMA_Abort+0x5dc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d072      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a4d      	ldr	r2, [pc, #308]	; (80019b0 <HAL_DMA_Abort+0x5e0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d06d      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a4c      	ldr	r2, [pc, #304]	; (80019b4 <HAL_DMA_Abort+0x5e4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d068      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a4a      	ldr	r2, [pc, #296]	; (80019b8 <HAL_DMA_Abort+0x5e8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d063      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a49      	ldr	r2, [pc, #292]	; (80019bc <HAL_DMA_Abort+0x5ec>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d05e      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a47      	ldr	r2, [pc, #284]	; (80019c0 <HAL_DMA_Abort+0x5f0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d059      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a46      	ldr	r2, [pc, #280]	; (80019c4 <HAL_DMA_Abort+0x5f4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d054      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a44      	ldr	r2, [pc, #272]	; (80019c8 <HAL_DMA_Abort+0x5f8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d04f      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a43      	ldr	r2, [pc, #268]	; (80019cc <HAL_DMA_Abort+0x5fc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d04a      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a41      	ldr	r2, [pc, #260]	; (80019d0 <HAL_DMA_Abort+0x600>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d045      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a40      	ldr	r2, [pc, #256]	; (80019d4 <HAL_DMA_Abort+0x604>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d040      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a3e      	ldr	r2, [pc, #248]	; (80019d8 <HAL_DMA_Abort+0x608>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d03b      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <HAL_DMA_Abort+0x60c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d036      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a3b      	ldr	r2, [pc, #236]	; (80019e0 <HAL_DMA_Abort+0x610>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d031      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a3a      	ldr	r2, [pc, #232]	; (80019e4 <HAL_DMA_Abort+0x614>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d02c      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a38      	ldr	r2, [pc, #224]	; (80019e8 <HAL_DMA_Abort+0x618>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d027      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a37      	ldr	r2, [pc, #220]	; (80019ec <HAL_DMA_Abort+0x61c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d022      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a35      	ldr	r2, [pc, #212]	; (80019f0 <HAL_DMA_Abort+0x620>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01d      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a34      	ldr	r2, [pc, #208]	; (80019f4 <HAL_DMA_Abort+0x624>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d018      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a32      	ldr	r2, [pc, #200]	; (80019f8 <HAL_DMA_Abort+0x628>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a31      	ldr	r2, [pc, #196]	; (80019fc <HAL_DMA_Abort+0x62c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00e      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2f      	ldr	r2, [pc, #188]	; (8001a00 <HAL_DMA_Abort+0x630>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d009      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a2e      	ldr	r2, [pc, #184]	; (8001a04 <HAL_DMA_Abort+0x634>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d004      	beq.n	800195a <HAL_DMA_Abort+0x58a>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a2c      	ldr	r2, [pc, #176]	; (8001a08 <HAL_DMA_Abort+0x638>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_DMA_Abort+0x58e>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_DMA_Abort+0x590>
 800195e:	2300      	movs	r3, #0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d015      	beq.n	8001990 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800196c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00c      	beq.n	8001990 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001980:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001984:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800198e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40020010 	.word	0x40020010
 80019b0:	40020028 	.word	0x40020028
 80019b4:	40020040 	.word	0x40020040
 80019b8:	40020058 	.word	0x40020058
 80019bc:	40020070 	.word	0x40020070
 80019c0:	40020088 	.word	0x40020088
 80019c4:	400200a0 	.word	0x400200a0
 80019c8:	400200b8 	.word	0x400200b8
 80019cc:	40020410 	.word	0x40020410
 80019d0:	40020428 	.word	0x40020428
 80019d4:	40020440 	.word	0x40020440
 80019d8:	40020458 	.word	0x40020458
 80019dc:	40020470 	.word	0x40020470
 80019e0:	40020488 	.word	0x40020488
 80019e4:	400204a0 	.word	0x400204a0
 80019e8:	400204b8 	.word	0x400204b8
 80019ec:	58025408 	.word	0x58025408
 80019f0:	5802541c 	.word	0x5802541c
 80019f4:	58025430 	.word	0x58025430
 80019f8:	58025444 	.word	0x58025444
 80019fc:	58025458 	.word	0x58025458
 8001a00:	5802546c 	.word	0x5802546c
 8001a04:	58025480 	.word	0x58025480
 8001a08:	58025494 	.word	0x58025494

08001a0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e237      	b.n	8001e8e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d004      	beq.n	8001a34 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e22c      	b.n	8001e8e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a5c      	ldr	r2, [pc, #368]	; (8001bac <HAL_DMA_Abort_IT+0x1a0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d04a      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a5b      	ldr	r2, [pc, #364]	; (8001bb0 <HAL_DMA_Abort_IT+0x1a4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d045      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a59      	ldr	r2, [pc, #356]	; (8001bb4 <HAL_DMA_Abort_IT+0x1a8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d040      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <HAL_DMA_Abort_IT+0x1ac>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d03b      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a56      	ldr	r2, [pc, #344]	; (8001bbc <HAL_DMA_Abort_IT+0x1b0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d036      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a55      	ldr	r2, [pc, #340]	; (8001bc0 <HAL_DMA_Abort_IT+0x1b4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d031      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a53      	ldr	r2, [pc, #332]	; (8001bc4 <HAL_DMA_Abort_IT+0x1b8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d02c      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_DMA_Abort_IT+0x1bc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d027      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a50      	ldr	r2, [pc, #320]	; (8001bcc <HAL_DMA_Abort_IT+0x1c0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d022      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a4f      	ldr	r2, [pc, #316]	; (8001bd0 <HAL_DMA_Abort_IT+0x1c4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d01d      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a4d      	ldr	r2, [pc, #308]	; (8001bd4 <HAL_DMA_Abort_IT+0x1c8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d018      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a4c      	ldr	r2, [pc, #304]	; (8001bd8 <HAL_DMA_Abort_IT+0x1cc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d013      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a4a      	ldr	r2, [pc, #296]	; (8001bdc <HAL_DMA_Abort_IT+0x1d0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00e      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a49      	ldr	r2, [pc, #292]	; (8001be0 <HAL_DMA_Abort_IT+0x1d4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d009      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a47      	ldr	r2, [pc, #284]	; (8001be4 <HAL_DMA_Abort_IT+0x1d8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d004      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xc8>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a46      	ldr	r2, [pc, #280]	; (8001be8 <HAL_DMA_Abort_IT+0x1dc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DMA_Abort_IT+0xcc>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_DMA_Abort_IT+0xce>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8086 	beq.w	8001bec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a2f      	ldr	r2, [pc, #188]	; (8001bac <HAL_DMA_Abort_IT+0x1a0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d04a      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2e      	ldr	r2, [pc, #184]	; (8001bb0 <HAL_DMA_Abort_IT+0x1a4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d045      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2c      	ldr	r2, [pc, #176]	; (8001bb4 <HAL_DMA_Abort_IT+0x1a8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d040      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a2b      	ldr	r2, [pc, #172]	; (8001bb8 <HAL_DMA_Abort_IT+0x1ac>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d03b      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a29      	ldr	r2, [pc, #164]	; (8001bbc <HAL_DMA_Abort_IT+0x1b0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d036      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a28      	ldr	r2, [pc, #160]	; (8001bc0 <HAL_DMA_Abort_IT+0x1b4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d031      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a26      	ldr	r2, [pc, #152]	; (8001bc4 <HAL_DMA_Abort_IT+0x1b8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d02c      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a25      	ldr	r2, [pc, #148]	; (8001bc8 <HAL_DMA_Abort_IT+0x1bc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d027      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a23      	ldr	r2, [pc, #140]	; (8001bcc <HAL_DMA_Abort_IT+0x1c0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d022      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a22      	ldr	r2, [pc, #136]	; (8001bd0 <HAL_DMA_Abort_IT+0x1c4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d01d      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a20      	ldr	r2, [pc, #128]	; (8001bd4 <HAL_DMA_Abort_IT+0x1c8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d018      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a1f      	ldr	r2, [pc, #124]	; (8001bd8 <HAL_DMA_Abort_IT+0x1cc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d013      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <HAL_DMA_Abort_IT+0x1d0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00e      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <HAL_DMA_Abort_IT+0x1d4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d009      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1a      	ldr	r2, [pc, #104]	; (8001be4 <HAL_DMA_Abort_IT+0x1d8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d004      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x17c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <HAL_DMA_Abort_IT+0x1dc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d108      	bne.n	8001b9a <HAL_DMA_Abort_IT+0x18e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e178      	b.n	8001e8c <HAL_DMA_Abort_IT+0x480>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0201 	bic.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e16f      	b.n	8001e8c <HAL_DMA_Abort_IT+0x480>
 8001bac:	40020010 	.word	0x40020010
 8001bb0:	40020028 	.word	0x40020028
 8001bb4:	40020040 	.word	0x40020040
 8001bb8:	40020058 	.word	0x40020058
 8001bbc:	40020070 	.word	0x40020070
 8001bc0:	40020088 	.word	0x40020088
 8001bc4:	400200a0 	.word	0x400200a0
 8001bc8:	400200b8 	.word	0x400200b8
 8001bcc:	40020410 	.word	0x40020410
 8001bd0:	40020428 	.word	0x40020428
 8001bd4:	40020440 	.word	0x40020440
 8001bd8:	40020458 	.word	0x40020458
 8001bdc:	40020470 	.word	0x40020470
 8001be0:	40020488 	.word	0x40020488
 8001be4:	400204a0 	.word	0x400204a0
 8001be8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 020e 	bic.w	r2, r2, #14
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a6c      	ldr	r2, [pc, #432]	; (8001db4 <HAL_DMA_Abort_IT+0x3a8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d04a      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6b      	ldr	r2, [pc, #428]	; (8001db8 <HAL_DMA_Abort_IT+0x3ac>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d045      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a69      	ldr	r2, [pc, #420]	; (8001dbc <HAL_DMA_Abort_IT+0x3b0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d040      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a68      	ldr	r2, [pc, #416]	; (8001dc0 <HAL_DMA_Abort_IT+0x3b4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d03b      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a66      	ldr	r2, [pc, #408]	; (8001dc4 <HAL_DMA_Abort_IT+0x3b8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d036      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a65      	ldr	r2, [pc, #404]	; (8001dc8 <HAL_DMA_Abort_IT+0x3bc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d031      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a63      	ldr	r2, [pc, #396]	; (8001dcc <HAL_DMA_Abort_IT+0x3c0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02c      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a62      	ldr	r2, [pc, #392]	; (8001dd0 <HAL_DMA_Abort_IT+0x3c4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d027      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a60      	ldr	r2, [pc, #384]	; (8001dd4 <HAL_DMA_Abort_IT+0x3c8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d022      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a5f      	ldr	r2, [pc, #380]	; (8001dd8 <HAL_DMA_Abort_IT+0x3cc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d01d      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a5d      	ldr	r2, [pc, #372]	; (8001ddc <HAL_DMA_Abort_IT+0x3d0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d018      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a5c      	ldr	r2, [pc, #368]	; (8001de0 <HAL_DMA_Abort_IT+0x3d4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d013      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a5a      	ldr	r2, [pc, #360]	; (8001de4 <HAL_DMA_Abort_IT+0x3d8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00e      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a59      	ldr	r2, [pc, #356]	; (8001de8 <HAL_DMA_Abort_IT+0x3dc>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d009      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a57      	ldr	r2, [pc, #348]	; (8001dec <HAL_DMA_Abort_IT+0x3e0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d004      	beq.n	8001c9c <HAL_DMA_Abort_IT+0x290>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a56      	ldr	r2, [pc, #344]	; (8001df0 <HAL_DMA_Abort_IT+0x3e4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d108      	bne.n	8001cae <HAL_DMA_Abort_IT+0x2a2>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e007      	b.n	8001cbe <HAL_DMA_Abort_IT+0x2b2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a3c      	ldr	r2, [pc, #240]	; (8001db4 <HAL_DMA_Abort_IT+0x3a8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d072      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a3a      	ldr	r2, [pc, #232]	; (8001db8 <HAL_DMA_Abort_IT+0x3ac>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d06d      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a39      	ldr	r2, [pc, #228]	; (8001dbc <HAL_DMA_Abort_IT+0x3b0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d068      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a37      	ldr	r2, [pc, #220]	; (8001dc0 <HAL_DMA_Abort_IT+0x3b4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d063      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a36      	ldr	r2, [pc, #216]	; (8001dc4 <HAL_DMA_Abort_IT+0x3b8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d05e      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a34      	ldr	r2, [pc, #208]	; (8001dc8 <HAL_DMA_Abort_IT+0x3bc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d059      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a33      	ldr	r2, [pc, #204]	; (8001dcc <HAL_DMA_Abort_IT+0x3c0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d054      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a31      	ldr	r2, [pc, #196]	; (8001dd0 <HAL_DMA_Abort_IT+0x3c4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d04f      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a30      	ldr	r2, [pc, #192]	; (8001dd4 <HAL_DMA_Abort_IT+0x3c8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d04a      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2e      	ldr	r2, [pc, #184]	; (8001dd8 <HAL_DMA_Abort_IT+0x3cc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d045      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a2d      	ldr	r2, [pc, #180]	; (8001ddc <HAL_DMA_Abort_IT+0x3d0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d040      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a2b      	ldr	r2, [pc, #172]	; (8001de0 <HAL_DMA_Abort_IT+0x3d4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d03b      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <HAL_DMA_Abort_IT+0x3d8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d036      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a28      	ldr	r2, [pc, #160]	; (8001de8 <HAL_DMA_Abort_IT+0x3dc>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d031      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a27      	ldr	r2, [pc, #156]	; (8001dec <HAL_DMA_Abort_IT+0x3e0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d02c      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <HAL_DMA_Abort_IT+0x3e4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d027      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a24      	ldr	r2, [pc, #144]	; (8001df4 <HAL_DMA_Abort_IT+0x3e8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d022      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <HAL_DMA_Abort_IT+0x3ec>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01d      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <HAL_DMA_Abort_IT+0x3f0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d018      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <HAL_DMA_Abort_IT+0x3f4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <HAL_DMA_Abort_IT+0x3f8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00e      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <HAL_DMA_Abort_IT+0x3fc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d009      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <HAL_DMA_Abort_IT+0x400>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d004      	beq.n	8001dae <HAL_DMA_Abort_IT+0x3a2>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <HAL_DMA_Abort_IT+0x404>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d132      	bne.n	8001e14 <HAL_DMA_Abort_IT+0x408>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e031      	b.n	8001e16 <HAL_DMA_Abort_IT+0x40a>
 8001db2:	bf00      	nop
 8001db4:	40020010 	.word	0x40020010
 8001db8:	40020028 	.word	0x40020028
 8001dbc:	40020040 	.word	0x40020040
 8001dc0:	40020058 	.word	0x40020058
 8001dc4:	40020070 	.word	0x40020070
 8001dc8:	40020088 	.word	0x40020088
 8001dcc:	400200a0 	.word	0x400200a0
 8001dd0:	400200b8 	.word	0x400200b8
 8001dd4:	40020410 	.word	0x40020410
 8001dd8:	40020428 	.word	0x40020428
 8001ddc:	40020440 	.word	0x40020440
 8001de0:	40020458 	.word	0x40020458
 8001de4:	40020470 	.word	0x40020470
 8001de8:	40020488 	.word	0x40020488
 8001dec:	400204a0 	.word	0x400204a0
 8001df0:	400204b8 	.word	0x400204b8
 8001df4:	58025408 	.word	0x58025408
 8001df8:	5802541c 	.word	0x5802541c
 8001dfc:	58025430 	.word	0x58025430
 8001e00:	58025444 	.word	0x58025444
 8001e04:	58025458 	.word	0x58025458
 8001e08:	5802546c 	.word	0x5802546c
 8001e0c:	58025480 	.word	0x58025480
 8001e10:	58025494 	.word	0x58025494
 8001e14:	2300      	movs	r3, #0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d028      	beq.n	8001e6c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e28:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2201      	movs	r2, #1
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e48:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00c      	beq.n	8001e6c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e60:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e6a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ea6:	4b89      	ldr	r3, [pc, #548]	; (80020cc <HAL_GPIO_Init+0x234>)
 8001ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eaa:	e194      	b.n	80021d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8186 	beq.w	80021d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d005      	beq.n	8001edc <HAL_GPIO_Init+0x44>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d130      	bne.n	8001f3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f12:	2201      	movs	r2, #1
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	f003 0201 	and.w	r2, r3, #1
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d017      	beq.n	8001f7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	2203      	movs	r2, #3
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d123      	bne.n	8001fce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	08da      	lsrs	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3208      	adds	r2, #8
 8001f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	08da      	lsrs	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3208      	adds	r2, #8
 8001fc8:	69b9      	ldr	r1, [r7, #24]
 8001fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0203 	and.w	r2, r3, #3
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80e0 	beq.w	80021d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002010:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_GPIO_Init+0x238>)
 8002012:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002016:	4a2e      	ldr	r2, [pc, #184]	; (80020d0 <HAL_GPIO_Init+0x238>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002020:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_GPIO_Init+0x238>)
 8002022:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800202e:	4a29      	ldr	r2, [pc, #164]	; (80020d4 <HAL_GPIO_Init+0x23c>)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	3302      	adds	r3, #2
 8002036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	220f      	movs	r2, #15
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a20      	ldr	r2, [pc, #128]	; (80020d8 <HAL_GPIO_Init+0x240>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d052      	beq.n	8002100 <HAL_GPIO_Init+0x268>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <HAL_GPIO_Init+0x244>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d031      	beq.n	80020c6 <HAL_GPIO_Init+0x22e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <HAL_GPIO_Init+0x248>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d02b      	beq.n	80020c2 <HAL_GPIO_Init+0x22a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_GPIO_Init+0x24c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d025      	beq.n	80020be <HAL_GPIO_Init+0x226>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a1c      	ldr	r2, [pc, #112]	; (80020e8 <HAL_GPIO_Init+0x250>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01f      	beq.n	80020ba <HAL_GPIO_Init+0x222>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_GPIO_Init+0x254>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d019      	beq.n	80020b6 <HAL_GPIO_Init+0x21e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1a      	ldr	r2, [pc, #104]	; (80020f0 <HAL_GPIO_Init+0x258>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_GPIO_Init+0x21a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a19      	ldr	r2, [pc, #100]	; (80020f4 <HAL_GPIO_Init+0x25c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00d      	beq.n	80020ae <HAL_GPIO_Init+0x216>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a18      	ldr	r2, [pc, #96]	; (80020f8 <HAL_GPIO_Init+0x260>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <HAL_GPIO_Init+0x212>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a17      	ldr	r2, [pc, #92]	; (80020fc <HAL_GPIO_Init+0x264>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_GPIO_Init+0x20e>
 80020a2:	2309      	movs	r3, #9
 80020a4:	e02d      	b.n	8002102 <HAL_GPIO_Init+0x26a>
 80020a6:	230a      	movs	r3, #10
 80020a8:	e02b      	b.n	8002102 <HAL_GPIO_Init+0x26a>
 80020aa:	2308      	movs	r3, #8
 80020ac:	e029      	b.n	8002102 <HAL_GPIO_Init+0x26a>
 80020ae:	2307      	movs	r3, #7
 80020b0:	e027      	b.n	8002102 <HAL_GPIO_Init+0x26a>
 80020b2:	2306      	movs	r3, #6
 80020b4:	e025      	b.n	8002102 <HAL_GPIO_Init+0x26a>
 80020b6:	2305      	movs	r3, #5
 80020b8:	e023      	b.n	8002102 <HAL_GPIO_Init+0x26a>
 80020ba:	2304      	movs	r3, #4
 80020bc:	e021      	b.n	8002102 <HAL_GPIO_Init+0x26a>
 80020be:	2303      	movs	r3, #3
 80020c0:	e01f      	b.n	8002102 <HAL_GPIO_Init+0x26a>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e01d      	b.n	8002102 <HAL_GPIO_Init+0x26a>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e01b      	b.n	8002102 <HAL_GPIO_Init+0x26a>
 80020ca:	bf00      	nop
 80020cc:	58000080 	.word	0x58000080
 80020d0:	58024400 	.word	0x58024400
 80020d4:	58000400 	.word	0x58000400
 80020d8:	58020000 	.word	0x58020000
 80020dc:	58020400 	.word	0x58020400
 80020e0:	58020800 	.word	0x58020800
 80020e4:	58020c00 	.word	0x58020c00
 80020e8:	58021000 	.word	0x58021000
 80020ec:	58021400 	.word	0x58021400
 80020f0:	58021800 	.word	0x58021800
 80020f4:	58021c00 	.word	0x58021c00
 80020f8:	58022000 	.word	0x58022000
 80020fc:	58022400 	.word	0x58022400
 8002100:	2300      	movs	r3, #0
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	f002 0203 	and.w	r2, r2, #3
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	4093      	lsls	r3, r2
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002112:	4938      	ldr	r1, [pc, #224]	; (80021f4 <HAL_GPIO_Init+0x35c>)
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	3302      	adds	r3, #2
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002146:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800214e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	3301      	adds	r3, #1
 80021d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f47f ae63 	bne.w	8001eac <HAL_GPIO_Init+0x14>
  }
}
 80021e6:	bf00      	nop
 80021e8:	bf00      	nop
 80021ea:	3724      	adds	r7, #36	; 0x24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	58000400 	.word	0x58000400

080021f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	e001      	b.n	800221a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002236:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fc7e 	bl	8000b50 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e07f      	b.n	800236e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fcee 	bl	8000c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	e006      	b.n	80022e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d104      	bne.n	80022f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_I2C_Init+0x11c>)
 8002302:	430b      	orrs	r3, r1
 8002304:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002314:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69d9      	ldr	r1, [r3, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1a      	ldr	r2, [r3, #32]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	02008000 	.word	0x02008000

0800237c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	4608      	mov	r0, r1
 8002386:	4611      	mov	r1, r2
 8002388:	461a      	mov	r2, r3
 800238a:	4603      	mov	r3, r0
 800238c:	817b      	strh	r3, [r7, #10]
 800238e:	460b      	mov	r3, r1
 8002390:	813b      	strh	r3, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b20      	cmp	r3, #32
 80023a0:	f040 80f9 	bne.w	8002596 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_I2C_Mem_Write+0x34>
 80023aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d105      	bne.n	80023bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0ed      	b.n	8002598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_I2C_Mem_Write+0x4e>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e0e6      	b.n	8002598 <HAL_I2C_Mem_Write+0x21c>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023d2:	f7fe fee1 	bl	8001198 <HAL_GetTick>
 80023d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2319      	movs	r3, #25
 80023de:	2201      	movs	r2, #1
 80023e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fac3 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0d1      	b.n	8002598 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2221      	movs	r2, #33	; 0x21
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2240      	movs	r2, #64	; 0x40
 8002400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a3a      	ldr	r2, [r7, #32]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002414:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800241c:	88f8      	ldrh	r0, [r7, #6]
 800241e:	893a      	ldrh	r2, [r7, #8]
 8002420:	8979      	ldrh	r1, [r7, #10]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	4603      	mov	r3, r0
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f9d3 	bl	80027d8 <I2C_RequestMemoryWrite>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0a9      	b.n	8002598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	2bff      	cmp	r3, #255	; 0xff
 800244c:	d90e      	bls.n	800246c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	22ff      	movs	r2, #255	; 0xff
 8002452:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	b2da      	uxtb	r2, r3
 800245a:	8979      	ldrh	r1, [r7, #10]
 800245c:	2300      	movs	r3, #0
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fc2b 	bl	8002cc0 <I2C_TransferConfig>
 800246a:	e00f      	b.n	800248c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	b2da      	uxtb	r2, r3
 800247c:	8979      	ldrh	r1, [r7, #10]
 800247e:	2300      	movs	r3, #0
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fc1a 	bl	8002cc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 faad 	bl	80029f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e07b      	b.n	8002598 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d034      	beq.n	8002544 <HAL_I2C_Mem_Write+0x1c8>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d130      	bne.n	8002544 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	2200      	movs	r2, #0
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fa3f 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e04d      	b.n	8002598 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	2bff      	cmp	r3, #255	; 0xff
 8002504:	d90e      	bls.n	8002524 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	22ff      	movs	r2, #255	; 0xff
 800250a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	b2da      	uxtb	r2, r3
 8002512:	8979      	ldrh	r1, [r7, #10]
 8002514:	2300      	movs	r3, #0
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 fbcf 	bl	8002cc0 <I2C_TransferConfig>
 8002522:	e00f      	b.n	8002544 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002532:	b2da      	uxtb	r2, r3
 8002534:	8979      	ldrh	r1, [r7, #10]
 8002536:	2300      	movs	r3, #0
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fbbe 	bl	8002cc0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d19e      	bne.n	800248c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fa8c 	bl	8002a70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e01a      	b.n	8002598 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2220      	movs	r2, #32
 8002568:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_I2C_Mem_Write+0x224>)
 8002576:	400b      	ands	r3, r1
 8002578:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e000      	b.n	8002598 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002596:	2302      	movs	r3, #2
  }
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	fe00e800 	.word	0xfe00e800

080025a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	4608      	mov	r0, r1
 80025ae:	4611      	mov	r1, r2
 80025b0:	461a      	mov	r2, r3
 80025b2:	4603      	mov	r3, r0
 80025b4:	817b      	strh	r3, [r7, #10]
 80025b6:	460b      	mov	r3, r1
 80025b8:	813b      	strh	r3, [r7, #8]
 80025ba:	4613      	mov	r3, r2
 80025bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	f040 80fd 	bne.w	80027c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <HAL_I2C_Mem_Read+0x34>
 80025d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0f1      	b.n	80027c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_I2C_Mem_Read+0x4e>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e0ea      	b.n	80027c8 <HAL_I2C_Mem_Read+0x224>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025fa:	f7fe fdcd 	bl	8001198 <HAL_GetTick>
 80025fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2319      	movs	r3, #25
 8002606:	2201      	movs	r2, #1
 8002608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f9af 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0d5      	b.n	80027c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2222      	movs	r2, #34	; 0x22
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2240      	movs	r2, #64	; 0x40
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a3a      	ldr	r2, [r7, #32]
 8002636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800263c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002644:	88f8      	ldrh	r0, [r7, #6]
 8002646:	893a      	ldrh	r2, [r7, #8]
 8002648:	8979      	ldrh	r1, [r7, #10]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	4603      	mov	r3, r0
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f913 	bl	8002880 <I2C_RequestMemoryRead>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0ad      	b.n	80027c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2bff      	cmp	r3, #255	; 0xff
 8002674:	d90e      	bls.n	8002694 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	22ff      	movs	r2, #255	; 0xff
 800267a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002680:	b2da      	uxtb	r2, r3
 8002682:	8979      	ldrh	r1, [r7, #10]
 8002684:	4b52      	ldr	r3, [pc, #328]	; (80027d0 <HAL_I2C_Mem_Read+0x22c>)
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 fb17 	bl	8002cc0 <I2C_TransferConfig>
 8002692:	e00f      	b.n	80026b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	8979      	ldrh	r1, [r7, #10]
 80026a6:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <HAL_I2C_Mem_Read+0x22c>)
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fb06 	bl	8002cc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ba:	2200      	movs	r2, #0
 80026bc:	2104      	movs	r1, #4
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f956 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e07c      	b.n	80027c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d034      	beq.n	8002774 <HAL_I2C_Mem_Read+0x1d0>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d130      	bne.n	8002774 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	2200      	movs	r2, #0
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f927 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e04d      	b.n	80027c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	2bff      	cmp	r3, #255	; 0xff
 8002734:	d90e      	bls.n	8002754 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	22ff      	movs	r2, #255	; 0xff
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	b2da      	uxtb	r2, r3
 8002742:	8979      	ldrh	r1, [r7, #10]
 8002744:	2300      	movs	r3, #0
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fab7 	bl	8002cc0 <I2C_TransferConfig>
 8002752:	e00f      	b.n	8002774 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	b2da      	uxtb	r2, r3
 8002764:	8979      	ldrh	r1, [r7, #10]
 8002766:	2300      	movs	r3, #0
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 faa6 	bl	8002cc0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d19a      	bne.n	80026b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f974 	bl	8002a70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e01a      	b.n	80027c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2220      	movs	r2, #32
 8002798:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_I2C_Mem_Read+0x230>)
 80027a6:	400b      	ands	r3, r1
 80027a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e000      	b.n	80027c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80027c6:	2302      	movs	r3, #2
  }
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	80002400 	.word	0x80002400
 80027d4:	fe00e800 	.word	0xfe00e800

080027d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	4608      	mov	r0, r1
 80027e2:	4611      	mov	r1, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	817b      	strh	r3, [r7, #10]
 80027ea:	460b      	mov	r3, r1
 80027ec:	813b      	strh	r3, [r7, #8]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	8979      	ldrh	r1, [r7, #10]
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <I2C_RequestMemoryWrite+0xa4>)
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fa5d 	bl	8002cc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	69b9      	ldr	r1, [r7, #24]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f8f0 	bl	80029f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e02c      	b.n	8002874 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002820:	893b      	ldrh	r3, [r7, #8]
 8002822:	b2da      	uxtb	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	629a      	str	r2, [r3, #40]	; 0x28
 800282a:	e015      	b.n	8002858 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800282c:	893b      	ldrh	r3, [r7, #8]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	b29b      	uxth	r3, r3
 8002832:	b2da      	uxtb	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	69b9      	ldr	r1, [r7, #24]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f8d6 	bl	80029f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e012      	b.n	8002874 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800284e:	893b      	ldrh	r3, [r7, #8]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2200      	movs	r2, #0
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f884 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	80002000 	.word	0x80002000

08002880 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	4608      	mov	r0, r1
 800288a:	4611      	mov	r1, r2
 800288c:	461a      	mov	r2, r3
 800288e:	4603      	mov	r3, r0
 8002890:	817b      	strh	r3, [r7, #10]
 8002892:	460b      	mov	r3, r1
 8002894:	813b      	strh	r3, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	8979      	ldrh	r1, [r7, #10]
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <I2C_RequestMemoryRead+0xa4>)
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2300      	movs	r3, #0
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fa0a 	bl	8002cc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	69b9      	ldr	r1, [r7, #24]
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f89d 	bl	80029f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e02c      	b.n	800291a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d105      	bne.n	80028d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028c6:	893b      	ldrh	r3, [r7, #8]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
 80028d0:	e015      	b.n	80028fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028d2:	893b      	ldrh	r3, [r7, #8]
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	69b9      	ldr	r1, [r7, #24]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f883 	bl	80029f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e012      	b.n	800291a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028f4:	893b      	ldrh	r3, [r7, #8]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	2200      	movs	r2, #0
 8002906:	2140      	movs	r1, #64	; 0x40
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f831 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	80002000 	.word	0x80002000

08002928 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d103      	bne.n	8002946 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d007      	beq.n	8002964 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	619a      	str	r2, [r3, #24]
  }
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002980:	e022      	b.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d01e      	beq.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7fe fc05 	bl	8001198 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d302      	bcc.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d113      	bne.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	f043 0220 	orr.w	r2, r3, #32
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e00f      	b.n	80029e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4013      	ands	r3, r2
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d0cd      	beq.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029fc:	e02c      	b.n	8002a58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f870 	bl	8002ae8 <I2C_IsErrorOccurred>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e02a      	b.n	8002a68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a18:	d01e      	beq.n	8002a58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1a:	f7fe fbbd 	bl	8001198 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d302      	bcc.n	8002a30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d113      	bne.n	8002a58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e007      	b.n	8002a68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d1cb      	bne.n	80029fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a7c:	e028      	b.n	8002ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f830 	bl	8002ae8 <I2C_IsErrorOccurred>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e026      	b.n	8002ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a92:	f7fe fb81 	bl	8001198 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d302      	bcc.n	8002aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d113      	bne.n	8002ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	f043 0220 	orr.w	r2, r3, #32
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e007      	b.n	8002ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d1cf      	bne.n	8002a7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	; 0x28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d075      	beq.n	8002c00 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2210      	movs	r2, #16
 8002b1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b1c:	e056      	b.n	8002bcc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d052      	beq.n	8002bcc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7fe fb37 	bl	8001198 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <I2C_IsErrorOccurred+0x54>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d147      	bne.n	8002bcc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5e:	d12e      	bne.n	8002bbe <I2C_IsErrorOccurred+0xd6>
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b66:	d02a      	beq.n	8002bbe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002b68:	7cfb      	ldrb	r3, [r7, #19]
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	d027      	beq.n	8002bbe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b7c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b7e:	f7fe fb0b 	bl	8001198 <HAL_GetTick>
 8002b82:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b84:	e01b      	b.n	8002bbe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b86:	f7fe fb07 	bl	8001198 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b19      	cmp	r3, #25
 8002b92:	d914      	bls.n	8002bbe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d1dc      	bne.n	8002b86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	d003      	beq.n	8002be2 <I2C_IsErrorOccurred+0xfa>
 8002bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d09d      	beq.n	8002b1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002be2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00b      	beq.n	8002c4c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f043 0308 	orr.w	r3, r3, #8
 8002c3a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d01c      	beq.n	8002cb0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f7ff fe56 	bl	8002928 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <I2C_IsErrorOccurred+0x1d4>)
 8002c88:	400b      	ands	r3, r1
 8002c8a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3728      	adds	r7, #40	; 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	fe00e800 	.word	0xfe00e800

08002cc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	817b      	strh	r3, [r7, #10]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cd2:	897b      	ldrh	r3, [r7, #10]
 8002cd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cd8:	7a7b      	ldrb	r3, [r7, #9]
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ce0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cee:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	0d5b      	lsrs	r3, r3, #21
 8002cfa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <I2C_TransferConfig+0x60>)
 8002d00:	430b      	orrs	r3, r1
 8002d02:	43db      	mvns	r3, r3
 8002d04:	ea02 0103 	and.w	r1, r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	03ff63ff 	.word	0x03ff63ff

08002d24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d138      	bne.n	8002dac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e032      	b.n	8002dae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	; 0x24
 8002d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e000      	b.n	8002dae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d139      	bne.n	8002e44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e033      	b.n	8002e46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2224      	movs	r2, #36	; 0x24
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0201 	bic.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d00a      	beq.n	8002e7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e68:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d001      	beq.n	8002e7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e01f      	b.n	8002eba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e01d      	b.n	8002eba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f023 0207 	bic.w	r2, r3, #7
 8002e86:	490f      	ldr	r1, [pc, #60]	; (8002ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e8e:	f7fe f983 	bl	8001198 <HAL_GetTick>
 8002e92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e94:	e009      	b.n	8002eaa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e96:	f7fe f97f 	bl	8001198 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ea4:	d901      	bls.n	8002eaa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e007      	b.n	8002eba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb6:	d1ee      	bne.n	8002e96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	58024800 	.word	0x58024800

08002ec8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08c      	sub	sp, #48	; 0x30
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e3f4      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 80b3 	beq.w	800304e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee8:	4b95      	ldr	r3, [pc, #596]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ef2:	4b93      	ldr	r3, [pc, #588]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efa:	2b10      	cmp	r3, #16
 8002efc:	d007      	beq.n	8002f0e <HAL_RCC_OscConfig+0x46>
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	2b18      	cmp	r3, #24
 8002f02:	d112      	bne.n	8002f2a <HAL_RCC_OscConfig+0x62>
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d10d      	bne.n	8002f2a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0e:	4b8c      	ldr	r3, [pc, #560]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8098 	beq.w	800304c <HAL_RCC_OscConfig+0x184>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 8093 	bne.w	800304c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e3cc      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x7a>
 8002f34:	4b82      	ldr	r3, [pc, #520]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a81      	ldr	r2, [pc, #516]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	e058      	b.n	8002ff4 <HAL_RCC_OscConfig+0x12c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d112      	bne.n	8002f70 <HAL_RCC_OscConfig+0xa8>
 8002f4a:	4b7d      	ldr	r3, [pc, #500]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7c      	ldr	r2, [pc, #496]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b7a      	ldr	r3, [pc, #488]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a79      	ldr	r2, [pc, #484]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b77      	ldr	r3, [pc, #476]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a76      	ldr	r2, [pc, #472]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e041      	b.n	8002ff4 <HAL_RCC_OscConfig+0x12c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f78:	d112      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xd8>
 8002f7a:	4b71      	ldr	r3, [pc, #452]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a70      	ldr	r2, [pc, #448]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b6e      	ldr	r3, [pc, #440]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a6d      	ldr	r2, [pc, #436]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4b6b      	ldr	r3, [pc, #428]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a6a      	ldr	r2, [pc, #424]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e029      	b.n	8002ff4 <HAL_RCC_OscConfig+0x12c>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002fa8:	d112      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x108>
 8002faa:	4b65      	ldr	r3, [pc, #404]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a64      	ldr	r2, [pc, #400]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	4b62      	ldr	r3, [pc, #392]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a61      	ldr	r2, [pc, #388]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b5f      	ldr	r3, [pc, #380]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a5e      	ldr	r2, [pc, #376]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e011      	b.n	8002ff4 <HAL_RCC_OscConfig+0x12c>
 8002fd0:	4b5b      	ldr	r3, [pc, #364]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a5a      	ldr	r2, [pc, #360]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b58      	ldr	r3, [pc, #352]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a57      	ldr	r2, [pc, #348]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b55      	ldr	r3, [pc, #340]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a54      	ldr	r2, [pc, #336]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8002fee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d013      	beq.n	8003024 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe f8cc 	bl	8001198 <HAL_GetTick>
 8003000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003004:	f7fe f8c8 	bl	8001198 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	; 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e356      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003016:	4b4a      	ldr	r3, [pc, #296]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0x13c>
 8003022:	e014      	b.n	800304e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe f8b8 	bl	8001198 <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800302c:	f7fe f8b4 	bl	8001198 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	; 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e342      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800303e:	4b40      	ldr	r3, [pc, #256]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x164>
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 808d 	beq.w	8003176 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800305c:	4b38      	ldr	r3, [pc, #224]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003064:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003066:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_RCC_OscConfig+0x1ba>
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2b18      	cmp	r3, #24
 8003076:	d137      	bne.n	80030e8 <HAL_RCC_OscConfig+0x220>
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d132      	bne.n	80030e8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003082:	4b2f      	ldr	r3, [pc, #188]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_RCC_OscConfig+0x1d2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e314      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800309a:	4b29      	ldr	r3, [pc, #164]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 0219 	bic.w	r2, r3, #25
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	4926      	ldr	r1, [pc, #152]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030ac:	f7fe f874 	bl	8001198 <HAL_GetTick>
 80030b0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b4:	f7fe f870 	bl	8001198 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e2fe      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030c6:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d2:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	061b      	lsls	r3, r3, #24
 80030e0:	4917      	ldr	r1, [pc, #92]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e6:	e046      	b.n	8003176 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d029      	beq.n	8003144 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030f0:	4b13      	ldr	r3, [pc, #76]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f023 0219 	bic.w	r2, r3, #25
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4910      	ldr	r1, [pc, #64]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe f849 	bl	8001198 <HAL_GetTick>
 8003106:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe f845 	bl	8001198 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e2d3      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800311c:	4b08      	ldr	r3, [pc, #32]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	4902      	ldr	r1, [pc, #8]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
 800313c:	e01b      	b.n	8003176 <HAL_RCC_OscConfig+0x2ae>
 800313e:	bf00      	nop
 8003140:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003144:	4b97      	ldr	r3, [pc, #604]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a96      	ldr	r2, [pc, #600]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 800314a:	f023 0301 	bic.w	r3, r3, #1
 800314e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe f822 	bl	8001198 <HAL_GetTick>
 8003154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003158:	f7fe f81e 	bl	8001198 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e2ac      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800316a:	4b8e      	ldr	r3, [pc, #568]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b00      	cmp	r3, #0
 8003180:	d06a      	beq.n	8003258 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003182:	4b88      	ldr	r3, [pc, #544]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800318a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800318c:	4b85      	ldr	r3, [pc, #532]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d007      	beq.n	80031a8 <HAL_RCC_OscConfig+0x2e0>
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b18      	cmp	r3, #24
 800319c:	d11b      	bne.n	80031d6 <HAL_RCC_OscConfig+0x30e>
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d116      	bne.n	80031d6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031a8:	4b7e      	ldr	r3, [pc, #504]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_OscConfig+0x2f8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e281      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031c0:	4b78      	ldr	r3, [pc, #480]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	061b      	lsls	r3, r3, #24
 80031ce:	4975      	ldr	r1, [pc, #468]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031d4:	e040      	b.n	8003258 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d023      	beq.n	8003226 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80031de:	4b71      	ldr	r3, [pc, #452]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a70      	ldr	r2, [pc, #448]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 80031e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ea:	f7fd ffd5 	bl	8001198 <HAL_GetTick>
 80031ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80031f2:	f7fd ffd1 	bl	8001198 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e25f      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003204:	4b67      	ldr	r3, [pc, #412]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003210:	4b64      	ldr	r3, [pc, #400]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	4961      	ldr	r1, [pc, #388]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 8003220:	4313      	orrs	r3, r2
 8003222:	60cb      	str	r3, [r1, #12]
 8003224:	e018      	b.n	8003258 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003226:	4b5f      	ldr	r3, [pc, #380]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a5e      	ldr	r2, [pc, #376]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 800322c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7fd ffb1 	bl	8001198 <HAL_GetTick>
 8003236:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800323a:	f7fd ffad 	bl	8001198 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e23b      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800324c:	4b55      	ldr	r3, [pc, #340]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d036      	beq.n	80032d2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d019      	beq.n	80032a0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800326c:	4b4d      	ldr	r3, [pc, #308]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 800326e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003270:	4a4c      	ldr	r2, [pc, #304]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7fd ff8e 	bl	8001198 <HAL_GetTick>
 800327c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003280:	f7fd ff8a 	bl	8001198 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e218      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003292:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 8003294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x3b8>
 800329e:	e018      	b.n	80032d2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a0:	4b40      	ldr	r3, [pc, #256]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 80032a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a4:	4a3f      	ldr	r2, [pc, #252]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 80032a6:	f023 0301 	bic.w	r3, r3, #1
 80032aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ac:	f7fd ff74 	bl	8001198 <HAL_GetTick>
 80032b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fd ff70 	bl	8001198 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e1fe      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032c6:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 80032c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d036      	beq.n	800334c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d019      	beq.n	800331a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032e6:	4b2f      	ldr	r3, [pc, #188]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2e      	ldr	r2, [pc, #184]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 80032ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032f2:	f7fd ff51 	bl	8001198 <HAL_GetTick>
 80032f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032fa:	f7fd ff4d 	bl	8001198 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e1db      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800330c:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x432>
 8003318:	e018      	b.n	800334c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a21      	ldr	r2, [pc, #132]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 8003320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003324:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003326:	f7fd ff37 	bl	8001198 <HAL_GetTick>
 800332a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800332e:	f7fd ff33 	bl	8001198 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e1c1      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003340:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f0      	bne.n	800332e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80af 	beq.w	80034b8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800335a:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <HAL_RCC_OscConfig+0x4e0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a12      	ldr	r2, [pc, #72]	; (80033a8 <HAL_RCC_OscConfig+0x4e0>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003364:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003366:	f7fd ff17 	bl	8001198 <HAL_GetTick>
 800336a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800336e:	f7fd ff13 	bl	8001198 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	; 0x64
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e1a1      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003380:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_OscConfig+0x4e0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d10b      	bne.n	80033ac <HAL_RCC_OscConfig+0x4e4>
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	4a02      	ldr	r2, [pc, #8]	; (80033a4 <HAL_RCC_OscConfig+0x4dc>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6713      	str	r3, [r2, #112]	; 0x70
 80033a0:	e05b      	b.n	800345a <HAL_RCC_OscConfig+0x592>
 80033a2:	bf00      	nop
 80033a4:	58024400 	.word	0x58024400
 80033a8:	58024800 	.word	0x58024800
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d112      	bne.n	80033da <HAL_RCC_OscConfig+0x512>
 80033b4:	4b9d      	ldr	r3, [pc, #628]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	4a9c      	ldr	r2, [pc, #624]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	6713      	str	r3, [r2, #112]	; 0x70
 80033c0:	4b9a      	ldr	r3, [pc, #616]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	4a99      	ldr	r2, [pc, #612]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80033c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ca:	6713      	str	r3, [r2, #112]	; 0x70
 80033cc:	4b97      	ldr	r3, [pc, #604]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	4a96      	ldr	r2, [pc, #600]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80033d2:	f023 0304 	bic.w	r3, r3, #4
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70
 80033d8:	e03f      	b.n	800345a <HAL_RCC_OscConfig+0x592>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d112      	bne.n	8003408 <HAL_RCC_OscConfig+0x540>
 80033e2:	4b92      	ldr	r3, [pc, #584]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a91      	ldr	r2, [pc, #580]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
 80033ee:	4b8f      	ldr	r3, [pc, #572]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a8e      	ldr	r2, [pc, #568]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80033f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
 80033fa:	4b8c      	ldr	r3, [pc, #560]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4a8b      	ldr	r2, [pc, #556]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6713      	str	r3, [r2, #112]	; 0x70
 8003406:	e028      	b.n	800345a <HAL_RCC_OscConfig+0x592>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b85      	cmp	r3, #133	; 0x85
 800340e:	d112      	bne.n	8003436 <HAL_RCC_OscConfig+0x56e>
 8003410:	4b86      	ldr	r3, [pc, #536]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	4a85      	ldr	r2, [pc, #532]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003416:	f043 0304 	orr.w	r3, r3, #4
 800341a:	6713      	str	r3, [r2, #112]	; 0x70
 800341c:	4b83      	ldr	r3, [pc, #524]	; (800362c <HAL_RCC_OscConfig+0x764>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	4a82      	ldr	r2, [pc, #520]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003426:	6713      	str	r3, [r2, #112]	; 0x70
 8003428:	4b80      	ldr	r3, [pc, #512]	; (800362c <HAL_RCC_OscConfig+0x764>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	4a7f      	ldr	r2, [pc, #508]	; (800362c <HAL_RCC_OscConfig+0x764>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6713      	str	r3, [r2, #112]	; 0x70
 8003434:	e011      	b.n	800345a <HAL_RCC_OscConfig+0x592>
 8003436:	4b7d      	ldr	r3, [pc, #500]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a7c      	ldr	r2, [pc, #496]	; (800362c <HAL_RCC_OscConfig+0x764>)
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
 8003442:	4b7a      	ldr	r3, [pc, #488]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	4a79      	ldr	r2, [pc, #484]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	6713      	str	r3, [r2, #112]	; 0x70
 800344e:	4b77      	ldr	r3, [pc, #476]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003452:	4a76      	ldr	r2, [pc, #472]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003458:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d015      	beq.n	800348e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003462:	f7fd fe99 	bl	8001198 <HAL_GetTick>
 8003466:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003468:	e00a      	b.n	8003480 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fd fe95 	bl	8001198 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	; 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e121      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003480:	4b6a      	ldr	r3, [pc, #424]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ee      	beq.n	800346a <HAL_RCC_OscConfig+0x5a2>
 800348c:	e014      	b.n	80034b8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fd fe83 	bl	8001198 <HAL_GetTick>
 8003492:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003494:	e00a      	b.n	80034ac <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fd fe7f 	bl	8001198 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e10b      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034ac:	4b5f      	ldr	r3, [pc, #380]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1ee      	bne.n	8003496 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8100 	beq.w	80036c2 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80034c2:	4b5a      	ldr	r3, [pc, #360]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ca:	2b18      	cmp	r3, #24
 80034cc:	f000 80bb 	beq.w	8003646 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	f040 8095 	bne.w	8003604 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	4b54      	ldr	r3, [pc, #336]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a53      	ldr	r2, [pc, #332]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80034e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fd fe57 	bl	8001198 <HAL_GetTick>
 80034ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fd fe53 	bl	8001198 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e0e1      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003500:	4b4a      	ldr	r3, [pc, #296]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350c:	4b47      	ldr	r3, [pc, #284]	; (800362c <HAL_RCC_OscConfig+0x764>)
 800350e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003510:	4b47      	ldr	r3, [pc, #284]	; (8003630 <HAL_RCC_OscConfig+0x768>)
 8003512:	4013      	ands	r3, r2
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800351c:	0112      	lsls	r2, r2, #4
 800351e:	430a      	orrs	r2, r1
 8003520:	4942      	ldr	r1, [pc, #264]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003522:	4313      	orrs	r3, r2
 8003524:	628b      	str	r3, [r1, #40]	; 0x28
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	3b01      	subs	r3, #1
 800352c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003534:	3b01      	subs	r3, #1
 8003536:	025b      	lsls	r3, r3, #9
 8003538:	b29b      	uxth	r3, r3
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	3b01      	subs	r3, #1
 8003542:	041b      	lsls	r3, r3, #16
 8003544:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354e:	3b01      	subs	r3, #1
 8003550:	061b      	lsls	r3, r3, #24
 8003552:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003556:	4935      	ldr	r1, [pc, #212]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003558:	4313      	orrs	r3, r2
 800355a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800355c:	4b33      	ldr	r3, [pc, #204]	; (800362c <HAL_RCC_OscConfig+0x764>)
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	4a32      	ldr	r2, [pc, #200]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003568:	4b30      	ldr	r3, [pc, #192]	; (800362c <HAL_RCC_OscConfig+0x764>)
 800356a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800356c:	4b31      	ldr	r3, [pc, #196]	; (8003634 <HAL_RCC_OscConfig+0x76c>)
 800356e:	4013      	ands	r3, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003574:	00d2      	lsls	r2, r2, #3
 8003576:	492d      	ldr	r1, [pc, #180]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003578:	4313      	orrs	r3, r2
 800357a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800357c:	4b2b      	ldr	r3, [pc, #172]	; (800362c <HAL_RCC_OscConfig+0x764>)
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	f023 020c 	bic.w	r2, r3, #12
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	4928      	ldr	r1, [pc, #160]	; (800362c <HAL_RCC_OscConfig+0x764>)
 800358a:	4313      	orrs	r3, r2
 800358c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800358e:	4b27      	ldr	r3, [pc, #156]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	f023 0202 	bic.w	r2, r3, #2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	4924      	ldr	r1, [pc, #144]	; (800362c <HAL_RCC_OscConfig+0x764>)
 800359c:	4313      	orrs	r3, r2
 800359e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035a0:	4b22      	ldr	r3, [pc, #136]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	4a21      	ldr	r2, [pc, #132]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80035a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ac:	4b1f      	ldr	r3, [pc, #124]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	4a1e      	ldr	r2, [pc, #120]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80035b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80035b8:	4b1c      	ldr	r3, [pc, #112]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	4a1b      	ldr	r2, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80035be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	4a18      	ldr	r2, [pc, #96]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d0:	4b16      	ldr	r3, [pc, #88]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a15      	ldr	r2, [pc, #84]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80035d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fd fddc 	bl	8001198 <HAL_GetTick>
 80035e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fd fdd8 	bl	8001198 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e066      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <HAL_RCC_OscConfig+0x764>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x71c>
 8003602:	e05e      	b.n	80036c2 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_OscConfig+0x764>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a08      	ldr	r2, [pc, #32]	; (800362c <HAL_RCC_OscConfig+0x764>)
 800360a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800360e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fd fdc2 	bl	8001198 <HAL_GetTick>
 8003614:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003616:	e00f      	b.n	8003638 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003618:	f7fd fdbe 	bl	8001198 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d908      	bls.n	8003638 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e04c      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
 800362a:	bf00      	nop
 800362c:	58024400 	.word	0x58024400
 8003630:	fffffc0c 	.word	0xfffffc0c
 8003634:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003638:	4b24      	ldr	r3, [pc, #144]	; (80036cc <HAL_RCC_OscConfig+0x804>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e9      	bne.n	8003618 <HAL_RCC_OscConfig+0x750>
 8003644:	e03d      	b.n	80036c2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003646:	4b21      	ldr	r3, [pc, #132]	; (80036cc <HAL_RCC_OscConfig+0x804>)
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800364c:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <HAL_RCC_OscConfig+0x804>)
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	2b01      	cmp	r3, #1
 8003658:	d031      	beq.n	80036be <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f003 0203 	and.w	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d12a      	bne.n	80036be <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d122      	bne.n	80036be <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d11a      	bne.n	80036be <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	0a5b      	lsrs	r3, r3, #9
 800368c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003696:	429a      	cmp	r2, r3
 8003698:	d111      	bne.n	80036be <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d108      	bne.n	80036be <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	0e1b      	lsrs	r3, r3, #24
 80036b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3730      	adds	r7, #48	; 0x30
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	58024400 	.word	0x58024400

080036d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e19c      	b.n	8003a1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b8a      	ldr	r3, [pc, #552]	; (8003910 <HAL_RCC_ClockConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d910      	bls.n	8003714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b87      	ldr	r3, [pc, #540]	; (8003910 <HAL_RCC_ClockConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 020f 	bic.w	r2, r3, #15
 80036fa:	4985      	ldr	r1, [pc, #532]	; (8003910 <HAL_RCC_ClockConfig+0x240>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b83      	ldr	r3, [pc, #524]	; (8003910 <HAL_RCC_ClockConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e184      	b.n	8003a1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d010      	beq.n	8003742 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	4b7b      	ldr	r3, [pc, #492]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800372c:	429a      	cmp	r2, r3
 800372e:	d908      	bls.n	8003742 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003730:	4b78      	ldr	r3, [pc, #480]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	4975      	ldr	r1, [pc, #468]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 800373e:	4313      	orrs	r3, r2
 8003740:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d010      	beq.n	8003770 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	4b70      	ldr	r3, [pc, #448]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800375a:	429a      	cmp	r2, r3
 800375c:	d908      	bls.n	8003770 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800375e:	4b6d      	ldr	r3, [pc, #436]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	496a      	ldr	r1, [pc, #424]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 800376c:	4313      	orrs	r3, r2
 800376e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	d010      	beq.n	800379e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	4b64      	ldr	r3, [pc, #400]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003788:	429a      	cmp	r2, r3
 800378a:	d908      	bls.n	800379e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800378c:	4b61      	ldr	r3, [pc, #388]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	495e      	ldr	r1, [pc, #376]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 800379a:	4313      	orrs	r3, r2
 800379c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d010      	beq.n	80037cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	4b59      	ldr	r3, [pc, #356]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d908      	bls.n	80037cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80037ba:	4b56      	ldr	r3, [pc, #344]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4953      	ldr	r1, [pc, #332]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d010      	beq.n	80037fa <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	4b4d      	ldr	r3, [pc, #308]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d908      	bls.n	80037fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e8:	4b4a      	ldr	r3, [pc, #296]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	f023 020f 	bic.w	r2, r3, #15
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4947      	ldr	r1, [pc, #284]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d055      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003806:	4b43      	ldr	r3, [pc, #268]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	4940      	ldr	r1, [pc, #256]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 8003814:	4313      	orrs	r3, r2
 8003816:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d107      	bne.n	8003830 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003820:	4b3c      	ldr	r3, [pc, #240]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d121      	bne.n	8003870 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0f6      	b.n	8003a1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b03      	cmp	r3, #3
 8003836:	d107      	bne.n	8003848 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003838:	4b36      	ldr	r3, [pc, #216]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d115      	bne.n	8003870 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0ea      	b.n	8003a1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d107      	bne.n	8003860 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003850:	4b30      	ldr	r3, [pc, #192]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0de      	b.n	8003a1e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003860:	4b2c      	ldr	r3, [pc, #176]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0d6      	b.n	8003a1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003870:	4b28      	ldr	r3, [pc, #160]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f023 0207 	bic.w	r2, r3, #7
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4925      	ldr	r1, [pc, #148]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 800387e:	4313      	orrs	r3, r2
 8003880:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003882:	f7fd fc89 	bl	8001198 <HAL_GetTick>
 8003886:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003888:	e00a      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388a:	f7fd fc85 	bl	8001198 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	; 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e0be      	b.n	8003a1e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a0:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d1eb      	bne.n	800388a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d010      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	4b14      	ldr	r3, [pc, #80]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d208      	bcs.n	80038e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ce:	4b11      	ldr	r3, [pc, #68]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f023 020f 	bic.w	r2, r3, #15
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	490e      	ldr	r1, [pc, #56]	; (8003914 <HAL_RCC_ClockConfig+0x244>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_RCC_ClockConfig+0x240>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d214      	bcs.n	8003918 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b08      	ldr	r3, [pc, #32]	; (8003910 <HAL_RCC_ClockConfig+0x240>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 020f 	bic.w	r2, r3, #15
 80038f6:	4906      	ldr	r1, [pc, #24]	; (8003910 <HAL_RCC_ClockConfig+0x240>)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b04      	ldr	r3, [pc, #16]	; (8003910 <HAL_RCC_ClockConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d005      	beq.n	8003918 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e086      	b.n	8003a1e <HAL_RCC_ClockConfig+0x34e>
 8003910:	52002000 	.word	0x52002000
 8003914:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d010      	beq.n	8003946 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	4b3f      	ldr	r3, [pc, #252]	; (8003a28 <HAL_RCC_ClockConfig+0x358>)
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003930:	429a      	cmp	r2, r3
 8003932:	d208      	bcs.n	8003946 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003934:	4b3c      	ldr	r3, [pc, #240]	; (8003a28 <HAL_RCC_ClockConfig+0x358>)
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	4939      	ldr	r1, [pc, #228]	; (8003a28 <HAL_RCC_ClockConfig+0x358>)
 8003942:	4313      	orrs	r3, r2
 8003944:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d010      	beq.n	8003974 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	4b34      	ldr	r3, [pc, #208]	; (8003a28 <HAL_RCC_ClockConfig+0x358>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800395e:	429a      	cmp	r2, r3
 8003960:	d208      	bcs.n	8003974 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003962:	4b31      	ldr	r3, [pc, #196]	; (8003a28 <HAL_RCC_ClockConfig+0x358>)
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	492e      	ldr	r1, [pc, #184]	; (8003a28 <HAL_RCC_ClockConfig+0x358>)
 8003970:	4313      	orrs	r3, r2
 8003972:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	d010      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <HAL_RCC_ClockConfig+0x358>)
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800398c:	429a      	cmp	r2, r3
 800398e:	d208      	bcs.n	80039a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003990:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <HAL_RCC_ClockConfig+0x358>)
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	4922      	ldr	r1, [pc, #136]	; (8003a28 <HAL_RCC_ClockConfig+0x358>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d010      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69da      	ldr	r2, [r3, #28]
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <HAL_RCC_ClockConfig+0x358>)
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d208      	bcs.n	80039d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80039be:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <HAL_RCC_ClockConfig+0x358>)
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	4917      	ldr	r1, [pc, #92]	; (8003a28 <HAL_RCC_ClockConfig+0x358>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80039d0:	f000 f834 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <HAL_RCC_ClockConfig+0x358>)
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	4912      	ldr	r1, [pc, #72]	; (8003a2c <HAL_RCC_ClockConfig+0x35c>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ec:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <HAL_RCC_ClockConfig+0x358>)
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <HAL_RCC_ClockConfig+0x35c>)
 80039f8:	5cd3      	ldrb	r3, [r2, r3]
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_RCC_ClockConfig+0x360>)
 8003a06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a08:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <HAL_RCC_ClockConfig+0x364>)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <HAL_RCC_ClockConfig+0x368>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd fb76 	bl	8001104 <HAL_InitTick>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	58024400 	.word	0x58024400
 8003a2c:	0800813c 	.word	0x0800813c
 8003a30:	24000008 	.word	0x24000008
 8003a34:	24000004 	.word	0x24000004
 8003a38:	2400000c 	.word	0x2400000c

08003a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	; 0x24
 8003a40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a42:	4bb3      	ldr	r3, [pc, #716]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a4a:	2b18      	cmp	r3, #24
 8003a4c:	f200 8155 	bhi.w	8003cfa <HAL_RCC_GetSysClockFreq+0x2be>
 8003a50:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a56:	bf00      	nop
 8003a58:	08003abd 	.word	0x08003abd
 8003a5c:	08003cfb 	.word	0x08003cfb
 8003a60:	08003cfb 	.word	0x08003cfb
 8003a64:	08003cfb 	.word	0x08003cfb
 8003a68:	08003cfb 	.word	0x08003cfb
 8003a6c:	08003cfb 	.word	0x08003cfb
 8003a70:	08003cfb 	.word	0x08003cfb
 8003a74:	08003cfb 	.word	0x08003cfb
 8003a78:	08003ae3 	.word	0x08003ae3
 8003a7c:	08003cfb 	.word	0x08003cfb
 8003a80:	08003cfb 	.word	0x08003cfb
 8003a84:	08003cfb 	.word	0x08003cfb
 8003a88:	08003cfb 	.word	0x08003cfb
 8003a8c:	08003cfb 	.word	0x08003cfb
 8003a90:	08003cfb 	.word	0x08003cfb
 8003a94:	08003cfb 	.word	0x08003cfb
 8003a98:	08003ae9 	.word	0x08003ae9
 8003a9c:	08003cfb 	.word	0x08003cfb
 8003aa0:	08003cfb 	.word	0x08003cfb
 8003aa4:	08003cfb 	.word	0x08003cfb
 8003aa8:	08003cfb 	.word	0x08003cfb
 8003aac:	08003cfb 	.word	0x08003cfb
 8003ab0:	08003cfb 	.word	0x08003cfb
 8003ab4:	08003cfb 	.word	0x08003cfb
 8003ab8:	08003aef 	.word	0x08003aef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003abc:	4b94      	ldr	r3, [pc, #592]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0320 	and.w	r3, r3, #32
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ac8:	4b91      	ldr	r3, [pc, #580]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	08db      	lsrs	r3, r3, #3
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	4a90      	ldr	r2, [pc, #576]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003ada:	e111      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003adc:	4b8d      	ldr	r3, [pc, #564]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ade:	61bb      	str	r3, [r7, #24]
    break;
 8003ae0:	e10e      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003ae2:	4b8d      	ldr	r3, [pc, #564]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ae4:	61bb      	str	r3, [r7, #24]
    break;
 8003ae6:	e10b      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003ae8:	4b8c      	ldr	r3, [pc, #560]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003aea:	61bb      	str	r3, [r7, #24]
    break;
 8003aec:	e108      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003aee:	4b88      	ldr	r3, [pc, #544]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003af8:	4b85      	ldr	r3, [pc, #532]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b04:	4b82      	ldr	r3, [pc, #520]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003b0e:	4b80      	ldr	r3, [pc, #512]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b12:	08db      	lsrs	r3, r3, #3
 8003b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80e1 	beq.w	8003cf4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	f000 8083 	beq.w	8003c40 <HAL_RCC_GetSysClockFreq+0x204>
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	f200 80a1 	bhi.w	8003c84 <HAL_RCC_GetSysClockFreq+0x248>
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0x114>
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d056      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b4e:	e099      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b50:	4b6f      	ldr	r3, [pc, #444]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d02d      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b5c:	4b6c      	ldr	r3, [pc, #432]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	08db      	lsrs	r3, r3, #3
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	4a6b      	ldr	r2, [pc, #428]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	ee07 3a90 	vmov	s15, r3
 8003b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b86:	4b62      	ldr	r3, [pc, #392]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003bb6:	e087      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003d24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bca:	4b51      	ldr	r3, [pc, #324]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bde:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bfa:	e065      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003d28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c0e:	4b40      	ldr	r3, [pc, #256]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c3e:	e043      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003d2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c52:	4b2f      	ldr	r3, [pc, #188]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c82:	e021      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003d28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c96:	4b1e      	ldr	r3, [pc, #120]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003caa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cc6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	0a5b      	lsrs	r3, r3, #9
 8003cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	ee07 3a90 	vmov	s15, r3
 8003cdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cec:	ee17 3a90 	vmov	r3, s15
 8003cf0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003cf2:	e005      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61bb      	str	r3, [r7, #24]
    break;
 8003cf8:	e002      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cfc:	61bb      	str	r3, [r7, #24]
    break;
 8003cfe:	bf00      	nop
  }

  return sysclockfreq;
 8003d00:	69bb      	ldr	r3, [r7, #24]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3724      	adds	r7, #36	; 0x24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	58024400 	.word	0x58024400
 8003d14:	03d09000 	.word	0x03d09000
 8003d18:	003d0900 	.word	0x003d0900
 8003d1c:	016e3600 	.word	0x016e3600
 8003d20:	46000000 	.word	0x46000000
 8003d24:	4c742400 	.word	0x4c742400
 8003d28:	4a742400 	.word	0x4a742400
 8003d2c:	4bb71b00 	.word	0x4bb71b00

08003d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003d36:	f7ff fe81 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	0a1b      	lsrs	r3, r3, #8
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	490f      	ldr	r1, [pc, #60]	; (8003d84 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d48:	5ccb      	ldrb	r3, [r1, r3]
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d52:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	4a09      	ldr	r2, [pc, #36]	; (8003d84 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d5e:	5cd3      	ldrb	r3, [r2, r3]
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6a:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d6e:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d76:	681b      	ldr	r3, [r3, #0]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	58024400 	.word	0x58024400
 8003d84:	0800813c 	.word	0x0800813c
 8003d88:	24000008 	.word	0x24000008
 8003d8c:	24000004 	.word	0x24000004

08003d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003d94:	f7ff ffcc 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	4904      	ldr	r1, [pc, #16]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	58024400 	.word	0x58024400
 8003db8:	0800813c 	.word	0x0800813c

08003dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003dc0:	f7ff ffb6 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	0a1b      	lsrs	r3, r3, #8
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4904      	ldr	r1, [pc, #16]	; (8003de4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	58024400 	.word	0x58024400
 8003de4:	0800813c 	.word	0x0800813c

08003de8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003df0:	2300      	movs	r3, #0
 8003df2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003df4:	2300      	movs	r3, #0
 8003df6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d03f      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e0c:	d02a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e12:	d824      	bhi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e18:	d018      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e1e:	d81e      	bhi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e28:	d007      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e2a:	e018      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e2c:	4b9f      	ldr	r3, [pc, #636]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	4a9e      	ldr	r2, [pc, #632]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e38:	e015      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	2102      	movs	r1, #2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 f99b 	bl	800517c <RCCEx_PLL2_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e4a:	e00c      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3324      	adds	r3, #36	; 0x24
 8003e50:	2102      	movs	r1, #2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f001 fa44 	bl	80052e0 <RCCEx_PLL3_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e5c:	e003      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	75fb      	strb	r3, [r7, #23]
      break;
 8003e62:	e000      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d109      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e6c:	4b8f      	ldr	r3, [pc, #572]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e78:	498c      	ldr	r1, [pc, #560]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	650b      	str	r3, [r1, #80]	; 0x50
 8003e7e:	e001      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
 8003e82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d03d      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d826      	bhi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e98:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003eb5 	.word	0x08003eb5
 8003ea4:	08003ec3 	.word	0x08003ec3
 8003ea8:	08003ed5 	.word	0x08003ed5
 8003eac:	08003eed 	.word	0x08003eed
 8003eb0:	08003eed 	.word	0x08003eed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb4:	4b7d      	ldr	r3, [pc, #500]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	4a7c      	ldr	r2, [pc, #496]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ec0:	e015      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f001 f957 	bl	800517c <RCCEx_PLL2_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ed2:	e00c      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3324      	adds	r3, #36	; 0x24
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 fa00 	bl	80052e0 <RCCEx_PLL3_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ee4:	e003      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eea:	e000      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ef4:	4b6d      	ldr	r3, [pc, #436]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef8:	f023 0207 	bic.w	r2, r3, #7
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	496a      	ldr	r1, [pc, #424]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	650b      	str	r3, [r1, #80]	; 0x50
 8003f06:	e001      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d04a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f20:	d031      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003f22:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f26:	d82b      	bhi.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2c:	d02d      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f32:	d825      	bhi.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f34:	2bc0      	cmp	r3, #192	; 0xc0
 8003f36:	d02a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003f38:	2bc0      	cmp	r3, #192	; 0xc0
 8003f3a:	d821      	bhi.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f3c:	2b80      	cmp	r3, #128	; 0x80
 8003f3e:	d016      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003f40:	2b80      	cmp	r3, #128	; 0x80
 8003f42:	d81d      	bhi.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d007      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003f4c:	e018      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f4e:	4b57      	ldr	r3, [pc, #348]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	4a56      	ldr	r2, [pc, #344]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003f5a:	e019      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f001 f90a 	bl	800517c <RCCEx_PLL2_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003f6c:	e010      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3324      	adds	r3, #36	; 0x24
 8003f72:	2100      	movs	r1, #0
 8003f74:	4618      	mov	r0, r3
 8003f76:	f001 f9b3 	bl	80052e0 <RCCEx_PLL3_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003f7e:	e007      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	75fb      	strb	r3, [r7, #23]
      break;
 8003f84:	e004      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003f86:	bf00      	nop
 8003f88:	e002      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003f8a:	bf00      	nop
 8003f8c:	e000      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f90:	7dfb      	ldrb	r3, [r7, #23]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d109      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003f96:	4b45      	ldr	r3, [pc, #276]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	4942      	ldr	r1, [pc, #264]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	650b      	str	r3, [r1, #80]	; 0x50
 8003fa8:	e001      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04f      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbe:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003fc2:	d036      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003fc4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003fc8:	d830      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fce:	d032      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd4:	d82a      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003fd6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fda:	d02e      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003fdc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fe0:	d824      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe6:	d018      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fec:	d81e      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff6:	d007      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003ff8:	e018      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ffa:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	4a2b      	ldr	r2, [pc, #172]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004004:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004006:	e019      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f001 f8b4 	bl	800517c <RCCEx_PLL2_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004018:	e010      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3324      	adds	r3, #36	; 0x24
 800401e:	2100      	movs	r1, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f001 f95d 	bl	80052e0 <RCCEx_PLL3_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800402a:	e007      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	75fb      	strb	r3, [r7, #23]
      break;
 8004030:	e004      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004032:	bf00      	nop
 8004034:	e002      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004036:	bf00      	nop
 8004038:	e000      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800403a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800403c:	7dfb      	ldrb	r3, [r7, #23]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004046:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404e:	4917      	ldr	r1, [pc, #92]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004050:	4313      	orrs	r3, r2
 8004052:	650b      	str	r3, [r1, #80]	; 0x50
 8004054:	e001      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004056:	7dfb      	ldrb	r3, [r7, #23]
 8004058:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d034      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406a:	2b30      	cmp	r3, #48	; 0x30
 800406c:	d01c      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800406e:	2b30      	cmp	r3, #48	; 0x30
 8004070:	d817      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004072:	2b20      	cmp	r3, #32
 8004074:	d00c      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004076:	2b20      	cmp	r3, #32
 8004078:	d813      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d018      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800407e:	2b10      	cmp	r3, #16
 8004080:	d10f      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004082:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	4a09      	ldr	r2, [pc, #36]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800408c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800408e:	e010      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f001 f870 	bl	800517c <RCCEx_PLL2_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80040a0:	e007      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	75fb      	strb	r3, [r7, #23]
      break;
 80040a6:	e004      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 80040a8:	bf00      	nop
 80040aa:	e002      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80040ac:	58024400 	.word	0x58024400
      break;
 80040b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040b2:	7dfb      	ldrb	r3, [r7, #23]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d109      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80040b8:	4b9b      	ldr	r3, [pc, #620]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c4:	4998      	ldr	r1, [pc, #608]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040ca:	e001      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d047      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040e4:	d030      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80040e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ea:	d82a      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80040ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040f0:	d02c      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x364>
 80040f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040f6:	d824      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80040f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fc:	d018      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80040fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004102:	d81e      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410c:	d007      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800410e:	e018      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004110:	4b85      	ldr	r3, [pc, #532]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	4a84      	ldr	r2, [pc, #528]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800411c:	e017      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3304      	adds	r3, #4
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f001 f829 	bl	800517c <RCCEx_PLL2_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800412e:	e00e      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3324      	adds	r3, #36	; 0x24
 8004134:	2100      	movs	r1, #0
 8004136:	4618      	mov	r0, r3
 8004138:	f001 f8d2 	bl	80052e0 <RCCEx_PLL3_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004140:	e005      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
      break;
 8004146:	e002      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004148:	bf00      	nop
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800414c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800414e:	7dfb      	ldrb	r3, [r7, #23]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004154:	4b74      	ldr	r3, [pc, #464]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004158:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004160:	4971      	ldr	r1, [pc, #452]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004162:	4313      	orrs	r3, r2
 8004164:	650b      	str	r3, [r1, #80]	; 0x50
 8004166:	e001      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004168:	7dfb      	ldrb	r3, [r7, #23]
 800416a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d049      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800417c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004180:	d02e      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004182:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004186:	d828      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004188:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800418c:	d02a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800418e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004192:	d822      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004194:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004198:	d026      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800419a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800419e:	d81c      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80041a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041a4:	d010      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80041a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041aa:	d816      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01d      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x404>
 80041b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b4:	d111      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3304      	adds	r3, #4
 80041ba:	2101      	movs	r1, #1
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 ffdd 	bl	800517c <RCCEx_PLL2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80041c6:	e012      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3324      	adds	r3, #36	; 0x24
 80041cc:	2101      	movs	r1, #1
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 f886 	bl	80052e0 <RCCEx_PLL3_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80041d8:	e009      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	75fb      	strb	r3, [r7, #23]
      break;
 80041de:	e006      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80041e0:	bf00      	nop
 80041e2:	e004      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80041e4:	bf00      	nop
 80041e6:	e002      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80041e8:	bf00      	nop
 80041ea:	e000      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80041ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ee:	7dfb      	ldrb	r3, [r7, #23]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80041f4:	4b4c      	ldr	r3, [pc, #304]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80041f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004200:	4949      	ldr	r1, [pc, #292]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004202:	4313      	orrs	r3, r2
 8004204:	650b      	str	r3, [r1, #80]	; 0x50
 8004206:	e001      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d053      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800421e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004222:	d034      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004224:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004228:	d82e      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800422a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800422e:	d030      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004234:	d828      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423a:	d02c      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800423c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004240:	d822      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004242:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004246:	d028      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004248:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800424c:	d81c      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800424e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004252:	d010      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004258:	d816      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01f      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800425e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004262:	d111      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	2101      	movs	r1, #1
 800426a:	4618      	mov	r0, r3
 800426c:	f000 ff86 	bl	800517c <RCCEx_PLL2_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004274:	e014      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3324      	adds	r3, #36	; 0x24
 800427a:	2101      	movs	r1, #1
 800427c:	4618      	mov	r0, r3
 800427e:	f001 f82f 	bl	80052e0 <RCCEx_PLL3_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004286:	e00b      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	75fb      	strb	r3, [r7, #23]
      break;
 800428c:	e008      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800428e:	bf00      	nop
 8004290:	e006      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004292:	bf00      	nop
 8004294:	e004      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004296:	bf00      	nop
 8004298:	e002      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800429a:	bf00      	nop
 800429c:	e000      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800429e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80042a6:	4b20      	ldr	r3, [pc, #128]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042b4:	491c      	ldr	r1, [pc, #112]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	658b      	str	r3, [r1, #88]	; 0x58
 80042ba:	e001      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d031      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d4:	d00e      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80042d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042da:	d814      	bhi.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d015      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80042e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042e4:	d10f      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e6:	4b10      	ldr	r3, [pc, #64]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ea:	4a0f      	ldr	r2, [pc, #60]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80042ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80042f2:	e00c      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3304      	adds	r3, #4
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 ff3e 	bl	800517c <RCCEx_PLL2_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004304:	e003      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	75fb      	strb	r3, [r7, #23]
      break;
 800430a:	e000      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 800430c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800430e:	7dfb      	ldrb	r3, [r7, #23]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10b      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004318:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004320:	4901      	ldr	r1, [pc, #4]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004322:	4313      	orrs	r3, r2
 8004324:	650b      	str	r3, [r1, #80]	; 0x50
 8004326:	e003      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004328:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d032      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004340:	2b03      	cmp	r3, #3
 8004342:	d81b      	bhi.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	08004383 	.word	0x08004383
 8004350:	0800435d 	.word	0x0800435d
 8004354:	0800436b 	.word	0x0800436b
 8004358:	08004383 	.word	0x08004383
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800435c:	4bb2      	ldr	r3, [pc, #712]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	4ab1      	ldr	r2, [pc, #708]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004366:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004368:	e00c      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3304      	adds	r3, #4
 800436e:	2102      	movs	r1, #2
 8004370:	4618      	mov	r0, r3
 8004372:	f000 ff03 	bl	800517c <RCCEx_PLL2_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800437a:	e003      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	75fb      	strb	r3, [r7, #23]
      break;
 8004380:	e000      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004384:	7dfb      	ldrb	r3, [r7, #23]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800438a:	4ba7      	ldr	r3, [pc, #668]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800438c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438e:	f023 0203 	bic.w	r2, r3, #3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	49a4      	ldr	r1, [pc, #656]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004398:	4313      	orrs	r3, r2
 800439a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800439c:	e001      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439e:	7dfb      	ldrb	r3, [r7, #23]
 80043a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8086 	beq.w	80044bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b0:	4b9e      	ldr	r3, [pc, #632]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a9d      	ldr	r2, [pc, #628]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80043b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043bc:	f7fc feec 	bl	8001198 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043c2:	e009      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c4:	f7fc fee8 	bl	8001198 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b64      	cmp	r3, #100	; 0x64
 80043d0:	d902      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	75fb      	strb	r3, [r7, #23]
        break;
 80043d6:	e005      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043d8:	4b94      	ldr	r3, [pc, #592]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ef      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d166      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043ea:	4b8f      	ldr	r3, [pc, #572]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043f4:	4053      	eors	r3, r2
 80043f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d013      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043fe:	4b8a      	ldr	r3, [pc, #552]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004406:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004408:	4b87      	ldr	r3, [pc, #540]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	4a86      	ldr	r2, [pc, #536]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800440e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004412:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004414:	4b84      	ldr	r3, [pc, #528]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004418:	4a83      	ldr	r2, [pc, #524]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800441a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004420:	4a81      	ldr	r2, [pc, #516]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800442c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004430:	d115      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fc feb1 	bl	8001198 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004438:	e00b      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443a:	f7fc fead 	bl	8001198 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f241 3288 	movw	r2, #5000	; 0x1388
 8004448:	4293      	cmp	r3, r2
 800444a:	d902      	bls.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	75fb      	strb	r3, [r7, #23]
            break;
 8004450:	e005      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004452:	4b75      	ldr	r3, [pc, #468]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0ed      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d126      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800446a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004472:	d10d      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8004474:	4b6c      	ldr	r3, [pc, #432]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004482:	0919      	lsrs	r1, r3, #4
 8004484:	4b6a      	ldr	r3, [pc, #424]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004486:	400b      	ands	r3, r1
 8004488:	4967      	ldr	r1, [pc, #412]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800448a:	4313      	orrs	r3, r2
 800448c:	610b      	str	r3, [r1, #16]
 800448e:	e005      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8004490:	4b65      	ldr	r3, [pc, #404]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	4a64      	ldr	r2, [pc, #400]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004496:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800449a:	6113      	str	r3, [r2, #16]
 800449c:	4b62      	ldr	r3, [pc, #392]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800449e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044aa:	495f      	ldr	r1, [pc, #380]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	670b      	str	r3, [r1, #112]	; 0x70
 80044b0:	e004      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	75bb      	strb	r3, [r7, #22]
 80044b6:	e001      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d07f      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ce:	2b28      	cmp	r3, #40	; 0x28
 80044d0:	d866      	bhi.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80044d2:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	080045a7 	.word	0x080045a7
 80044dc:	080045a1 	.word	0x080045a1
 80044e0:	080045a1 	.word	0x080045a1
 80044e4:	080045a1 	.word	0x080045a1
 80044e8:	080045a1 	.word	0x080045a1
 80044ec:	080045a1 	.word	0x080045a1
 80044f0:	080045a1 	.word	0x080045a1
 80044f4:	080045a1 	.word	0x080045a1
 80044f8:	0800457d 	.word	0x0800457d
 80044fc:	080045a1 	.word	0x080045a1
 8004500:	080045a1 	.word	0x080045a1
 8004504:	080045a1 	.word	0x080045a1
 8004508:	080045a1 	.word	0x080045a1
 800450c:	080045a1 	.word	0x080045a1
 8004510:	080045a1 	.word	0x080045a1
 8004514:	080045a1 	.word	0x080045a1
 8004518:	0800458f 	.word	0x0800458f
 800451c:	080045a1 	.word	0x080045a1
 8004520:	080045a1 	.word	0x080045a1
 8004524:	080045a1 	.word	0x080045a1
 8004528:	080045a1 	.word	0x080045a1
 800452c:	080045a1 	.word	0x080045a1
 8004530:	080045a1 	.word	0x080045a1
 8004534:	080045a1 	.word	0x080045a1
 8004538:	080045a7 	.word	0x080045a7
 800453c:	080045a1 	.word	0x080045a1
 8004540:	080045a1 	.word	0x080045a1
 8004544:	080045a1 	.word	0x080045a1
 8004548:	080045a1 	.word	0x080045a1
 800454c:	080045a1 	.word	0x080045a1
 8004550:	080045a1 	.word	0x080045a1
 8004554:	080045a1 	.word	0x080045a1
 8004558:	080045a7 	.word	0x080045a7
 800455c:	080045a1 	.word	0x080045a1
 8004560:	080045a1 	.word	0x080045a1
 8004564:	080045a1 	.word	0x080045a1
 8004568:	080045a1 	.word	0x080045a1
 800456c:	080045a1 	.word	0x080045a1
 8004570:	080045a1 	.word	0x080045a1
 8004574:	080045a1 	.word	0x080045a1
 8004578:	080045a7 	.word	0x080045a7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3304      	adds	r3, #4
 8004580:	2101      	movs	r1, #1
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fdfa 	bl	800517c <RCCEx_PLL2_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800458c:	e00c      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3324      	adds	r3, #36	; 0x24
 8004592:	2101      	movs	r1, #1
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fea3 	bl	80052e0 <RCCEx_PLL3_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800459e:	e003      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	75fb      	strb	r3, [r7, #23]
      break;
 80045a4:	e000      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80045a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10a      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045ae:	4b1e      	ldr	r3, [pc, #120]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045bc:	491a      	ldr	r1, [pc, #104]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	654b      	str	r3, [r1, #84]	; 0x54
 80045c2:	e001      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d03f      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d821      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80045dc:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	08004635 	.word	0x08004635
 80045e8:	080045fd 	.word	0x080045fd
 80045ec:	0800460f 	.word	0x0800460f
 80045f0:	08004635 	.word	0x08004635
 80045f4:	08004635 	.word	0x08004635
 80045f8:	08004635 	.word	0x08004635
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	2101      	movs	r1, #1
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fdba 	bl	800517c <RCCEx_PLL2_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800460c:	e013      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3324      	adds	r3, #36	; 0x24
 8004612:	2101      	movs	r1, #1
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fe63 	bl	80052e0 <RCCEx_PLL3_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800461e:	e00a      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	75fb      	strb	r3, [r7, #23]
      break;
 8004624:	e007      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004626:	bf00      	nop
 8004628:	58024400 	.word	0x58024400
 800462c:	58024800 	.word	0x58024800
 8004630:	00ffffcf 	.word	0x00ffffcf
      break;
 8004634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004636:	7dfb      	ldrb	r3, [r7, #23]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d109      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800463c:	4b9f      	ldr	r3, [pc, #636]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800463e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004640:	f023 0207 	bic.w	r2, r3, #7
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004648:	499c      	ldr	r1, [pc, #624]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800464a:	4313      	orrs	r3, r2
 800464c:	654b      	str	r3, [r1, #84]	; 0x54
 800464e:	e001      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d039      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004666:	2b05      	cmp	r3, #5
 8004668:	d820      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800466a:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	080046b3 	.word	0x080046b3
 8004674:	08004689 	.word	0x08004689
 8004678:	0800469b 	.word	0x0800469b
 800467c:	080046b3 	.word	0x080046b3
 8004680:	080046b3 	.word	0x080046b3
 8004684:	080046b3 	.word	0x080046b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	2101      	movs	r1, #1
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fd74 	bl	800517c <RCCEx_PLL2_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004698:	e00c      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3324      	adds	r3, #36	; 0x24
 800469e:	2101      	movs	r1, #1
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fe1d 	bl	80052e0 <RCCEx_PLL3_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80046aa:	e003      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	75fb      	strb	r3, [r7, #23]
      break;
 80046b0:	e000      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80046b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046ba:	4b80      	ldr	r3, [pc, #512]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	f023 0207 	bic.w	r2, r3, #7
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046c8:	497c      	ldr	r1, [pc, #496]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	658b      	str	r3, [r1, #88]	; 0x58
 80046ce:	e001      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d04b      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046ea:	d02e      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x962>
 80046ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046f0:	d828      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80046f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f6:	d02a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80046f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fc:	d822      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80046fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004702:	d026      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004704:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004708:	d81c      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800470a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800470e:	d010      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8004710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004714:	d816      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004716:	2b00      	cmp	r3, #0
 8004718:	d01d      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800471a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800471e:	d111      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fd28 	bl	800517c <RCCEx_PLL2_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004730:	e012      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3324      	adds	r3, #36	; 0x24
 8004736:	2102      	movs	r1, #2
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fdd1 	bl	80052e0 <RCCEx_PLL3_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004742:	e009      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	75fb      	strb	r3, [r7, #23]
      break;
 8004748:	e006      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800474a:	bf00      	nop
 800474c:	e004      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800474e:	bf00      	nop
 8004750:	e002      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004752:	bf00      	nop
 8004754:	e000      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004758:	7dfb      	ldrb	r3, [r7, #23]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800475e:	4b57      	ldr	r3, [pc, #348]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800476c:	4953      	ldr	r1, [pc, #332]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800476e:	4313      	orrs	r3, r2
 8004770:	654b      	str	r3, [r1, #84]	; 0x54
 8004772:	e001      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004774:	7dfb      	ldrb	r3, [r7, #23]
 8004776:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d04b      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800478a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800478e:	d02e      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8004790:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004794:	d828      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479a:	d02a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800479c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a0:	d822      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80047a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047a6:	d026      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80047a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047ac:	d81c      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80047ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b2:	d010      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80047b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b8:	d816      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01d      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80047be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c2:	d111      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	2100      	movs	r1, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fcd6 	bl	800517c <RCCEx_PLL2_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80047d4:	e012      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3324      	adds	r3, #36	; 0x24
 80047da:	2102      	movs	r1, #2
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fd7f 	bl	80052e0 <RCCEx_PLL3_Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80047e6:	e009      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	75fb      	strb	r3, [r7, #23]
      break;
 80047ec:	e006      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80047ee:	bf00      	nop
 80047f0:	e004      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80047f2:	bf00      	nop
 80047f4:	e002      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80047fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004802:	4b2e      	ldr	r3, [pc, #184]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004810:	492a      	ldr	r1, [pc, #168]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	658b      	str	r3, [r1, #88]	; 0x58
 8004816:	e001      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004824:	2b00      	cmp	r3, #0
 8004826:	d04d      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800482e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004832:	d02e      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004834:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004838:	d828      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800483a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800483e:	d02a      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004844:	d822      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004846:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800484a:	d026      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800484c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004850:	d81c      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004856:	d010      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800485c:	d816      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01d      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004866:	d111      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fc84 	bl	800517c <RCCEx_PLL2_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004878:	e012      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3324      	adds	r3, #36	; 0x24
 800487e:	2102      	movs	r1, #2
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fd2d 	bl	80052e0 <RCCEx_PLL3_Config>
 8004886:	4603      	mov	r3, r0
 8004888:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800488a:	e009      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	75fb      	strb	r3, [r7, #23]
      break;
 8004890:	e006      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004892:	bf00      	nop
 8004894:	e004      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004896:	bf00      	nop
 8004898:	e002      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800489a:	bf00      	nop
 800489c:	e000      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800489e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048b4:	4901      	ldr	r1, [pc, #4]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	658b      	str	r3, [r1, #88]	; 0x58
 80048ba:	e003      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80048bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
 80048c2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01a      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048da:	d10a      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3324      	adds	r3, #36	; 0x24
 80048e0:	2102      	movs	r1, #2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fcfc 	bl	80052e0 <RCCEx_PLL3_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048f2:	4b8c      	ldr	r3, [pc, #560]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	4988      	ldr	r1, [pc, #544]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004902:	4313      	orrs	r3, r2
 8004904:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	d01a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800491c:	d10a      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3324      	adds	r3, #36	; 0x24
 8004922:	2102      	movs	r1, #2
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fcdb 	bl	80052e0 <RCCEx_PLL3_Config>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004934:	4b7b      	ldr	r3, [pc, #492]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004942:	4978      	ldr	r1, [pc, #480]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004944:	4313      	orrs	r3, r2
 8004946:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d034      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800495a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800495e:	d01d      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004964:	d817      	bhi.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800496a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496e:	d009      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004970:	e011      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fbff 	bl	800517c <RCCEx_PLL2_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004982:	e00c      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3324      	adds	r3, #36	; 0x24
 8004988:	2102      	movs	r1, #2
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fca8 	bl	80052e0 <RCCEx_PLL3_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004994:	e003      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	75fb      	strb	r3, [r7, #23]
      break;
 800499a:	e000      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800499c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049a4:	4b5f      	ldr	r3, [pc, #380]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049b2:	495c      	ldr	r1, [pc, #368]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	658b      	str	r3, [r1, #88]	; 0x58
 80049b8:	e001      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
 80049bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d033      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049d4:	d01c      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80049d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049da:	d816      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80049dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e0:	d003      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80049e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049e6:	d007      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80049e8:	e00f      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ea:	4b4e      	ldr	r3, [pc, #312]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	4a4d      	ldr	r2, [pc, #308]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80049f6:	e00c      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3324      	adds	r3, #36	; 0x24
 80049fc:	2101      	movs	r1, #1
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fc6e 	bl	80052e0 <RCCEx_PLL3_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004a08:	e003      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a0e:	e000      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a18:	4b42      	ldr	r3, [pc, #264]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a26:	493f      	ldr	r1, [pc, #252]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	654b      	str	r3, [r1, #84]	; 0x54
 8004a2c:	e001      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
 8004a30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d029      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4a:	d007      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004a4c:	e00f      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a4e:	4b35      	ldr	r3, [pc, #212]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	4a34      	ldr	r2, [pc, #208]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	2102      	movs	r1, #2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fb8a 	bl	800517c <RCCEx_PLL2_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004a6c:	e002      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
      break;
 8004a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a7a:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a86:	4927      	ldr	r1, [pc, #156]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a8c:	e001      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3324      	adds	r3, #36	; 0x24
 8004aa2:	2102      	movs	r1, #2
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fc1b 	bl	80052e0 <RCCEx_PLL3_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d035      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aca:	d017      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad0:	d811      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad6:	d013      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004adc:	d80b      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d010      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae6:	d106      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae8:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	4a0d      	ldr	r2, [pc, #52]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004af4:	e007      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
      break;
 8004afa:	e004      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004afc:	bf00      	nop
 8004afe:	e002      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004b00:	bf00      	nop
 8004b02:	e000      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10d      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1a:	4902      	ldr	r1, [pc, #8]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	654b      	str	r3, [r1, #84]	; 0x54
 8004b20:	e004      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004b22:	bf00      	nop
 8004b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b38:	4b30      	ldr	r3, [pc, #192]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b44:	492d      	ldr	r1, [pc, #180]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b56:	4b29      	ldr	r3, [pc, #164]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b62:	4926      	ldr	r1, [pc, #152]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004b74:	4b21      	ldr	r3, [pc, #132]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b78:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	491e      	ldr	r1, [pc, #120]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00d      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b92:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	4a19      	ldr	r2, [pc, #100]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b9c:	6113      	str	r3, [r2, #16]
 8004b9e:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ba8:	4914      	ldr	r1, [pc, #80]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	da08      	bge.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004bb6:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc2:	490e      	ldr	r1, [pc, #56]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d009      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	4906      	ldr	r1, [pc, #24]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004be8:	7dbb      	ldrb	r3, [r7, #22]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	58024400 	.word	0x58024400

08004c00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004c04:	f7ff f894 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	4904      	ldr	r1, [pc, #16]	; (8004c28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004c16:	5ccb      	ldrb	r3, [r1, r3]
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	58024400 	.word	0x58024400
 8004c28:	0800813c 	.word	0x0800813c

08004c2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b089      	sub	sp, #36	; 0x24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c34:	4ba1      	ldr	r3, [pc, #644]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	f003 0303 	and.w	r3, r3, #3
 8004c3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004c3e:	4b9f      	ldr	r3, [pc, #636]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	0b1b      	lsrs	r3, r3, #12
 8004c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c4a:	4b9c      	ldr	r3, [pc, #624]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	091b      	lsrs	r3, r3, #4
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004c56:	4b99      	ldr	r3, [pc, #612]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5a:	08db      	lsrs	r3, r3, #3
 8004c5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8111 	beq.w	8004e9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	f000 8083 	beq.w	8004d88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	f200 80a1 	bhi.w	8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d056      	beq.n	8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c96:	e099      	b.n	8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c98:	4b88      	ldr	r3, [pc, #544]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d02d      	beq.n	8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ca4:	4b85      	ldr	r3, [pc, #532]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	08db      	lsrs	r3, r3, #3
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	4a84      	ldr	r2, [pc, #528]	; (8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	ee07 3a90 	vmov	s15, r3
 8004cbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cce:	4b7b      	ldr	r3, [pc, #492]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004cfe:	e087      	b.n	8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d12:	4b6a      	ldr	r3, [pc, #424]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d42:	e065      	b.n	8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d56:	4b59      	ldr	r3, [pc, #356]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d86:	e043      	b.n	8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9a:	4b48      	ldr	r3, [pc, #288]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dca:	e021      	b.n	8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dde:	4b37      	ldr	r3, [pc, #220]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de6:	ee07 3a90 	vmov	s15, r3
 8004dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004df2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004e10:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	0a5b      	lsrs	r3, r3, #9
 8004e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e36:	ee17 2a90 	vmov	r2, s15
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004e3e:	4b1f      	ldr	r3, [pc, #124]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	0c1b      	lsrs	r3, r3, #16
 8004e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e48:	ee07 3a90 	vmov	s15, r3
 8004e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e58:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e64:	ee17 2a90 	vmov	r2, s15
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004e6c:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	0e1b      	lsrs	r3, r3, #24
 8004e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e92:	ee17 2a90 	vmov	r2, s15
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e9a:	e008      	b.n	8004eae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	609a      	str	r2, [r3, #8]
}
 8004eae:	bf00      	nop
 8004eb0:	3724      	adds	r7, #36	; 0x24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	03d09000 	.word	0x03d09000
 8004ec4:	46000000 	.word	0x46000000
 8004ec8:	4c742400 	.word	0x4c742400
 8004ecc:	4a742400 	.word	0x4a742400
 8004ed0:	4bb71b00 	.word	0x4bb71b00

08004ed4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	; 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004edc:	4ba1      	ldr	r3, [pc, #644]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004ee6:	4b9f      	ldr	r3, [pc, #636]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	0d1b      	lsrs	r3, r3, #20
 8004eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ef2:	4b9c      	ldr	r3, [pc, #624]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004efe:	4b99      	ldr	r3, [pc, #612]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	08db      	lsrs	r3, r3, #3
 8004f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8111 	beq.w	8005144 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	f000 8083 	beq.w	8005030 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	f200 80a1 	bhi.w	8005074 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d056      	beq.n	8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004f3e:	e099      	b.n	8005074 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f40:	4b88      	ldr	r3, [pc, #544]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d02d      	beq.n	8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f4c:	4b85      	ldr	r3, [pc, #532]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	08db      	lsrs	r3, r3, #3
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	4a84      	ldr	r2, [pc, #528]	; (8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f76:	4b7b      	ldr	r3, [pc, #492]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800516c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004fa6:	e087      	b.n	80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fba:	4b6a      	ldr	r3, [pc, #424]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800516c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fea:	e065      	b.n	80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ffe:	4b59      	ldr	r3, [pc, #356]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005012:	eddf 5a56 	vldr	s11, [pc, #344]	; 800516c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800501a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800501e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800502a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800502e:	e043      	b.n	80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800503e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005042:	4b48      	ldr	r3, [pc, #288]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005052:	ed97 6a03 	vldr	s12, [r7, #12]
 8005056:	eddf 5a45 	vldr	s11, [pc, #276]	; 800516c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800505a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800505e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005072:	e021      	b.n	80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005086:	4b37      	ldr	r3, [pc, #220]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005096:	ed97 6a03 	vldr	s12, [r7, #12]
 800509a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800516c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800509e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80050b8:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	0a5b      	lsrs	r3, r3, #9
 80050be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050de:	ee17 2a90 	vmov	r2, s15
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80050e6:	4b1f      	ldr	r3, [pc, #124]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	0c1b      	lsrs	r3, r3, #16
 80050ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050f0:	ee07 3a90 	vmov	s15, r3
 80050f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005100:	edd7 6a07 	vldr	s13, [r7, #28]
 8005104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800510c:	ee17 2a90 	vmov	r2, s15
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005114:	4b13      	ldr	r3, [pc, #76]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	0e1b      	lsrs	r3, r3, #24
 800511a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800512a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800512e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800513a:	ee17 2a90 	vmov	r2, s15
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005142:	e008      	b.n	8005156 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	609a      	str	r2, [r3, #8]
}
 8005156:	bf00      	nop
 8005158:	3724      	adds	r7, #36	; 0x24
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	58024400 	.word	0x58024400
 8005168:	03d09000 	.word	0x03d09000
 800516c:	46000000 	.word	0x46000000
 8005170:	4c742400 	.word	0x4c742400
 8005174:	4a742400 	.word	0x4a742400
 8005178:	4bb71b00 	.word	0x4bb71b00

0800517c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800518a:	4b53      	ldr	r3, [pc, #332]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 800518c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	2b03      	cmp	r3, #3
 8005194:	d101      	bne.n	800519a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e099      	b.n	80052ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800519a:	4b4f      	ldr	r3, [pc, #316]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a4e      	ldr	r2, [pc, #312]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 80051a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a6:	f7fb fff7 	bl	8001198 <HAL_GetTick>
 80051aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051ac:	e008      	b.n	80051c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80051ae:	f7fb fff3 	bl	8001198 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e086      	b.n	80052ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051c0:	4b45      	ldr	r3, [pc, #276]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1f0      	bne.n	80051ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80051cc:	4b42      	ldr	r3, [pc, #264]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	031b      	lsls	r3, r3, #12
 80051da:	493f      	ldr	r1, [pc, #252]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	628b      	str	r3, [r1, #40]	; 0x28
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	025b      	lsls	r3, r3, #9
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	3b01      	subs	r3, #1
 800520a:	061b      	lsls	r3, r3, #24
 800520c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005210:	4931      	ldr	r1, [pc, #196]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 8005212:	4313      	orrs	r3, r2
 8005214:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005216:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	492d      	ldr	r1, [pc, #180]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 8005224:	4313      	orrs	r3, r2
 8005226:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005228:	4b2b      	ldr	r3, [pc, #172]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	f023 0220 	bic.w	r2, r3, #32
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	4928      	ldr	r1, [pc, #160]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 8005236:	4313      	orrs	r3, r2
 8005238:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800523a:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	4a26      	ldr	r2, [pc, #152]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 8005240:	f023 0310 	bic.w	r3, r3, #16
 8005244:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005246:	4b24      	ldr	r3, [pc, #144]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 8005248:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800524a:	4b24      	ldr	r3, [pc, #144]	; (80052dc <RCCEx_PLL2_Config+0x160>)
 800524c:	4013      	ands	r3, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	69d2      	ldr	r2, [r2, #28]
 8005252:	00d2      	lsls	r2, r2, #3
 8005254:	4920      	ldr	r1, [pc, #128]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 8005256:	4313      	orrs	r3, r2
 8005258:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800525a:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	4a1e      	ldr	r2, [pc, #120]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 8005260:	f043 0310 	orr.w	r3, r3, #16
 8005264:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d106      	bne.n	800527a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800526c:	4b1a      	ldr	r3, [pc, #104]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	4a19      	ldr	r2, [pc, #100]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 8005272:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005276:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005278:	e00f      	b.n	800529a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d106      	bne.n	800528e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005280:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	4a14      	ldr	r2, [pc, #80]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 8005286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800528a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800528c:	e005      	b.n	800529a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800528e:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	4a11      	ldr	r2, [pc, #68]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 8005294:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005298:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800529a:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a0e      	ldr	r2, [pc, #56]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 80052a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a6:	f7fb ff77 	bl	8001198 <HAL_GetTick>
 80052aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052ac:	e008      	b.n	80052c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80052ae:	f7fb ff73 	bl	8001198 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e006      	b.n	80052ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <RCCEx_PLL2_Config+0x15c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f0      	beq.n	80052ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	58024400 	.word	0x58024400
 80052dc:	ffff0007 	.word	0xffff0007

080052e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052ee:	4b53      	ldr	r3, [pc, #332]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d101      	bne.n	80052fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e099      	b.n	8005432 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052fe:	4b4f      	ldr	r3, [pc, #316]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a4e      	ldr	r2, [pc, #312]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 8005304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530a:	f7fb ff45 	bl	8001198 <HAL_GetTick>
 800530e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005310:	e008      	b.n	8005324 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005312:	f7fb ff41 	bl	8001198 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d901      	bls.n	8005324 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e086      	b.n	8005432 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005324:	4b45      	ldr	r3, [pc, #276]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f0      	bne.n	8005312 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005330:	4b42      	ldr	r3, [pc, #264]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	051b      	lsls	r3, r3, #20
 800533e:	493f      	ldr	r1, [pc, #252]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 8005340:	4313      	orrs	r3, r2
 8005342:	628b      	str	r3, [r1, #40]	; 0x28
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	3b01      	subs	r3, #1
 800534a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	3b01      	subs	r3, #1
 8005354:	025b      	lsls	r3, r3, #9
 8005356:	b29b      	uxth	r3, r3
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	3b01      	subs	r3, #1
 8005360:	041b      	lsls	r3, r3, #16
 8005362:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	3b01      	subs	r3, #1
 800536e:	061b      	lsls	r3, r3, #24
 8005370:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005374:	4931      	ldr	r1, [pc, #196]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 8005376:	4313      	orrs	r3, r2
 8005378:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800537a:	4b30      	ldr	r3, [pc, #192]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	492d      	ldr	r1, [pc, #180]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 8005388:	4313      	orrs	r3, r2
 800538a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800538c:	4b2b      	ldr	r3, [pc, #172]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	4928      	ldr	r1, [pc, #160]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 800539a:	4313      	orrs	r3, r2
 800539c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800539e:	4b27      	ldr	r3, [pc, #156]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	4a26      	ldr	r2, [pc, #152]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 80053a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80053aa:	4b24      	ldr	r3, [pc, #144]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 80053ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ae:	4b24      	ldr	r3, [pc, #144]	; (8005440 <RCCEx_PLL3_Config+0x160>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	69d2      	ldr	r2, [r2, #28]
 80053b6:	00d2      	lsls	r2, r2, #3
 80053b8:	4920      	ldr	r1, [pc, #128]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80053be:	4b1f      	ldr	r3, [pc, #124]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	4a1e      	ldr	r2, [pc, #120]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 80053c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d106      	bne.n	80053de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80053d0:	4b1a      	ldr	r3, [pc, #104]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	4a19      	ldr	r2, [pc, #100]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 80053d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80053da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053dc:	e00f      	b.n	80053fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d106      	bne.n	80053f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80053e4:	4b15      	ldr	r3, [pc, #84]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	4a14      	ldr	r2, [pc, #80]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 80053ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053f0:	e005      	b.n	80053fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053f2:	4b12      	ldr	r3, [pc, #72]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	4a11      	ldr	r2, [pc, #68]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 80053f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053fe:	4b0f      	ldr	r3, [pc, #60]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a0e      	ldr	r2, [pc, #56]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 8005404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800540a:	f7fb fec5 	bl	8001198 <HAL_GetTick>
 800540e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005410:	e008      	b.n	8005424 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005412:	f7fb fec1 	bl	8001198 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e006      	b.n	8005432 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005424:	4b05      	ldr	r3, [pc, #20]	; (800543c <RCCEx_PLL3_Config+0x15c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0f0      	beq.n	8005412 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005430:	7bfb      	ldrb	r3, [r7, #15]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	58024400 	.word	0x58024400
 8005440:	ffff0007 	.word	0xffff0007

08005444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e042      	b.n	80054dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800545c:	2b00      	cmp	r3, #0
 800545e:	d106      	bne.n	800546e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fb fc87 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2224      	movs	r2, #36	; 0x24
 8005472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0201 	bic.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fd28 	bl	8005edc <UART_SetConfig>
 800548c:	4603      	mov	r3, r0
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e022      	b.n	80054dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f001 fb88 	bl	8006bb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f001 fc0f 	bl	8006cf8 <UART_CheckIdleState>
 80054da:	4603      	mov	r3, r0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08a      	sub	sp, #40	; 0x28
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	4613      	mov	r3, r2
 80054f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054fa:	2b20      	cmp	r3, #32
 80054fc:	f040 8083 	bne.w	8005606 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_UART_Transmit+0x28>
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e07b      	b.n	8005608 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005516:	2b01      	cmp	r3, #1
 8005518:	d101      	bne.n	800551e <HAL_UART_Transmit+0x3a>
 800551a:	2302      	movs	r3, #2
 800551c:	e074      	b.n	8005608 <HAL_UART_Transmit+0x124>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2221      	movs	r2, #33	; 0x21
 8005532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005536:	f7fb fe2f 	bl	8001198 <HAL_GetTick>
 800553a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	88fa      	ldrh	r2, [r7, #6]
 8005548:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005554:	d108      	bne.n	8005568 <HAL_UART_Transmit+0x84>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800555e:	2300      	movs	r3, #0
 8005560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	e003      	b.n	8005570 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005578:	e02c      	b.n	80055d4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2200      	movs	r2, #0
 8005582:	2180      	movs	r1, #128	; 0x80
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f001 fc02 	bl	8006d8e <UART_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e039      	b.n	8005608 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10b      	bne.n	80055b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	3302      	adds	r3, #2
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	e007      	b.n	80055c2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	781a      	ldrb	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	3301      	adds	r3, #1
 80055c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1cc      	bne.n	800557a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2200      	movs	r2, #0
 80055e8:	2140      	movs	r1, #64	; 0x40
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f001 fbcf 	bl	8006d8e <UART_WaitOnFlagUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e006      	b.n	8005608 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e000      	b.n	8005608 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005606:	2302      	movs	r3, #2
  }
}
 8005608:	4618      	mov	r0, r3
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005610:	b480      	push	{r7}
 8005612:	b091      	sub	sp, #68	; 0x44
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005624:	2b20      	cmp	r3, #32
 8005626:	f040 808c 	bne.w	8005742 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <HAL_UART_Transmit_IT+0x26>
 8005630:	88fb      	ldrh	r3, [r7, #6]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e084      	b.n	8005744 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_UART_Transmit_IT+0x38>
 8005644:	2302      	movs	r3, #2
 8005646:	e07d      	b.n	8005744 <HAL_UART_Transmit_IT+0x134>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	88fa      	ldrh	r2, [r7, #6]
 800565a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	88fa      	ldrh	r2, [r7, #6]
 8005662:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2221      	movs	r2, #33	; 0x21
 8005678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005684:	d12e      	bne.n	80056e4 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568e:	d107      	bne.n	80056a0 <HAL_UART_Transmit_IT+0x90>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d103      	bne.n	80056a0 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4a2d      	ldr	r2, [pc, #180]	; (8005750 <HAL_UART_Transmit_IT+0x140>)
 800569c:	675a      	str	r2, [r3, #116]	; 0x74
 800569e:	e002      	b.n	80056a6 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4a2c      	ldr	r2, [pc, #176]	; (8005754 <HAL_UART_Transmit_IT+0x144>)
 80056a4:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3308      	adds	r3, #8
 80056cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ce:	637a      	str	r2, [r7, #52]	; 0x34
 80056d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e5      	bne.n	80056ae <HAL_UART_Transmit_IT+0x9e>
 80056e2:	e02c      	b.n	800573e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ec:	d107      	bne.n	80056fe <HAL_UART_Transmit_IT+0xee>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4a17      	ldr	r2, [pc, #92]	; (8005758 <HAL_UART_Transmit_IT+0x148>)
 80056fa:	675a      	str	r2, [r3, #116]	; 0x74
 80056fc:	e002      	b.n	8005704 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4a16      	ldr	r2, [pc, #88]	; (800575c <HAL_UART_Transmit_IT+0x14c>)
 8005702:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	613b      	str	r3, [r7, #16]
   return(result);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572a:	623b      	str	r3, [r7, #32]
 800572c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	69f9      	ldr	r1, [r7, #28]
 8005730:	6a3a      	ldr	r2, [r7, #32]
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	61bb      	str	r3, [r7, #24]
   return(result);
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e6      	bne.n	800570c <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e000      	b.n	8005744 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005742:	2302      	movs	r3, #2
  }
}
 8005744:	4618      	mov	r0, r3
 8005746:	3744      	adds	r7, #68	; 0x44
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	08007273 	.word	0x08007273
 8005754:	08007193 	.word	0x08007193
 8005758:	080070d1 	.word	0x080070d1
 800575c:	08007019 	.word	0x08007019

08005760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b0ba      	sub	sp, #232	; 0xe8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800578a:	f640 030f 	movw	r3, #2063	; 0x80f
 800578e:	4013      	ands	r3, r2
 8005790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005798:	2b00      	cmp	r3, #0
 800579a:	d11b      	bne.n	80057d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800579c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d015      	beq.n	80057d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d009      	beq.n	80057d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 835a 	beq.w	8005e7e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	4798      	blx	r3
      }
      return;
 80057d2:	e354      	b.n	8005e7e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 811f 	beq.w	8005a1c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80057de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80057e2:	4b8b      	ldr	r3, [pc, #556]	; (8005a10 <HAL_UART_IRQHandler+0x2b0>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80057ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80057ee:	4b89      	ldr	r3, [pc, #548]	; (8005a14 <HAL_UART_IRQHandler+0x2b4>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 8112 	beq.w	8005a1c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d011      	beq.n	8005828 <HAL_UART_IRQHandler+0xc8>
 8005804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00b      	beq.n	8005828 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2201      	movs	r2, #1
 8005816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800581e:	f043 0201 	orr.w	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d011      	beq.n	8005858 <HAL_UART_IRQHandler+0xf8>
 8005834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00b      	beq.n	8005858 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2202      	movs	r2, #2
 8005846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800584e:	f043 0204 	orr.w	r2, r3, #4
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d011      	beq.n	8005888 <HAL_UART_IRQHandler+0x128>
 8005864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00b      	beq.n	8005888 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2204      	movs	r2, #4
 8005876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800587e:	f043 0202 	orr.w	r2, r3, #2
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b00      	cmp	r3, #0
 8005892:	d017      	beq.n	80058c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005898:	f003 0320 	and.w	r3, r3, #32
 800589c:	2b00      	cmp	r3, #0
 800589e:	d105      	bne.n	80058ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80058a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80058a4:	4b5a      	ldr	r3, [pc, #360]	; (8005a10 <HAL_UART_IRQHandler+0x2b0>)
 80058a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00b      	beq.n	80058c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2208      	movs	r2, #8
 80058b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ba:	f043 0208 	orr.w	r2, r3, #8
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d012      	beq.n	80058f6 <HAL_UART_IRQHandler+0x196>
 80058d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00c      	beq.n	80058f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ec:	f043 0220 	orr.w	r2, r3, #32
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 82c0 	beq.w	8005e82 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d013      	beq.n	8005936 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800590e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b00      	cmp	r3, #0
 8005918:	d105      	bne.n	8005926 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800591a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800591e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800593c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d005      	beq.n	800595a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800594e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005952:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005956:	2b00      	cmp	r3, #0
 8005958:	d04f      	beq.n	80059fa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f001 fae0 	bl	8006f20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596a:	2b40      	cmp	r3, #64	; 0x40
 800596c:	d141      	bne.n	80059f2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3308      	adds	r3, #8
 8005974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800597c:	e853 3f00 	ldrex	r3, [r3]
 8005980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800598c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3308      	adds	r3, #8
 8005996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800599a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800599e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1d9      	bne.n	800596e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d013      	beq.n	80059ea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059c6:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <HAL_UART_IRQHandler+0x2b8>)
 80059c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fc f81c 	bl	8001a0c <HAL_DMA_Abort_IT>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d017      	beq.n	8005a0a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80059e4:	4610      	mov	r0, r2
 80059e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e8:	e00f      	b.n	8005a0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fa60 	bl	8005eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f0:	e00b      	b.n	8005a0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa5c 	bl	8005eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f8:	e007      	b.n	8005a0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fa58 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005a08:	e23b      	b.n	8005e82 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0a:	bf00      	nop
    return;
 8005a0c:	e239      	b.n	8005e82 <HAL_UART_IRQHandler+0x722>
 8005a0e:	bf00      	nop
 8005a10:	10000001 	.word	0x10000001
 8005a14:	04000120 	.word	0x04000120
 8005a18:	08006fed 	.word	0x08006fed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	f040 81ce 	bne.w	8005dc2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 81c7 	beq.w	8005dc2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 81c0 	beq.w	8005dc2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2210      	movs	r2, #16
 8005a48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b40      	cmp	r3, #64	; 0x40
 8005a56:	f040 813b 	bne.w	8005cd0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a8b      	ldr	r2, [pc, #556]	; (8005c90 <HAL_UART_IRQHandler+0x530>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d059      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a89      	ldr	r2, [pc, #548]	; (8005c94 <HAL_UART_IRQHandler+0x534>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d053      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a87      	ldr	r2, [pc, #540]	; (8005c98 <HAL_UART_IRQHandler+0x538>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d04d      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a85      	ldr	r2, [pc, #532]	; (8005c9c <HAL_UART_IRQHandler+0x53c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d047      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a83      	ldr	r2, [pc, #524]	; (8005ca0 <HAL_UART_IRQHandler+0x540>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d041      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a81      	ldr	r2, [pc, #516]	; (8005ca4 <HAL_UART_IRQHandler+0x544>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d03b      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a7f      	ldr	r2, [pc, #508]	; (8005ca8 <HAL_UART_IRQHandler+0x548>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d035      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a7d      	ldr	r2, [pc, #500]	; (8005cac <HAL_UART_IRQHandler+0x54c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d02f      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a7b      	ldr	r2, [pc, #492]	; (8005cb0 <HAL_UART_IRQHandler+0x550>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d029      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a79      	ldr	r2, [pc, #484]	; (8005cb4 <HAL_UART_IRQHandler+0x554>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d023      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a77      	ldr	r2, [pc, #476]	; (8005cb8 <HAL_UART_IRQHandler+0x558>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d01d      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a75      	ldr	r2, [pc, #468]	; (8005cbc <HAL_UART_IRQHandler+0x55c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d017      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a73      	ldr	r2, [pc, #460]	; (8005cc0 <HAL_UART_IRQHandler+0x560>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d011      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a71      	ldr	r2, [pc, #452]	; (8005cc4 <HAL_UART_IRQHandler+0x564>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00b      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a6f      	ldr	r2, [pc, #444]	; (8005cc8 <HAL_UART_IRQHandler+0x568>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d005      	beq.n	8005b1a <HAL_UART_IRQHandler+0x3ba>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a6d      	ldr	r2, [pc, #436]	; (8005ccc <HAL_UART_IRQHandler+0x56c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d105      	bne.n	8005b26 <HAL_UART_IRQHandler+0x3c6>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	e004      	b.n	8005b30 <HAL_UART_IRQHandler+0x3d0>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 81a4 	beq.w	8005e86 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	f080 819c 	bcs.w	8005e86 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b62:	f000 8086 	beq.w	8005c72 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b94:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1da      	bne.n	8005b66 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3308      	adds	r3, #8
 8005bb6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bc2:	f023 0301 	bic.w	r3, r3, #1
 8005bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3308      	adds	r3, #8
 8005bd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bd4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bd8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e1      	bne.n	8005bb0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c10:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e3      	bne.n	8005bec <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c42:	f023 0310 	bic.w	r3, r3, #16
 8005c46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c54:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c5c:	e841 2300 	strex	r3, r2, [r1]
 8005c60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1e4      	bne.n	8005c32 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fb fbaf 	bl	80013d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f91c 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c8c:	e0fb      	b.n	8005e86 <HAL_UART_IRQHandler+0x726>
 8005c8e:	bf00      	nop
 8005c90:	40020010 	.word	0x40020010
 8005c94:	40020028 	.word	0x40020028
 8005c98:	40020040 	.word	0x40020040
 8005c9c:	40020058 	.word	0x40020058
 8005ca0:	40020070 	.word	0x40020070
 8005ca4:	40020088 	.word	0x40020088
 8005ca8:	400200a0 	.word	0x400200a0
 8005cac:	400200b8 	.word	0x400200b8
 8005cb0:	40020410 	.word	0x40020410
 8005cb4:	40020428 	.word	0x40020428
 8005cb8:	40020440 	.word	0x40020440
 8005cbc:	40020458 	.word	0x40020458
 8005cc0:	40020470 	.word	0x40020470
 8005cc4:	40020488 	.word	0x40020488
 8005cc8:	400204a0 	.word	0x400204a0
 8005ccc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 80cc 	beq.w	8005e8a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8005cf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 80c7 	beq.w	8005e8a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e4      	bne.n	8005cfc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3308      	adds	r3, #8
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	623b      	str	r3, [r7, #32]
   return(result);
 8005d42:	6a3a      	ldr	r2, [r7, #32]
 8005d44:	4b54      	ldr	r3, [pc, #336]	; (8005e98 <HAL_UART_IRQHandler+0x738>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3308      	adds	r3, #8
 8005d52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d56:	633a      	str	r2, [r7, #48]	; 0x30
 8005d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e3      	bne.n	8005d32 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0310 	bic.w	r3, r3, #16
 8005d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	69b9      	ldr	r1, [r7, #24]
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	617b      	str	r3, [r7, #20]
   return(result);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e4      	bne.n	8005d7e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f882 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dc0:	e063      	b.n	8005e8a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00e      	beq.n	8005dec <HAL_UART_IRQHandler+0x68c>
 8005dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d008      	beq.n	8005dec <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005de2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f001 fae4 	bl	80073b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dea:	e051      	b.n	8005e90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d014      	beq.n	8005e22 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d105      	bne.n	8005e10 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d008      	beq.n	8005e22 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d03a      	beq.n	8005e8e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	4798      	blx	r3
    }
    return;
 8005e20:	e035      	b.n	8005e8e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d009      	beq.n	8005e42 <HAL_UART_IRQHandler+0x6e2>
 8005e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f001 fa8e 	bl	800735c <UART_EndTransmit_IT>
    return;
 8005e40:	e026      	b.n	8005e90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <HAL_UART_IRQHandler+0x702>
 8005e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f001 fabd 	bl	80073da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e60:	e016      	b.n	8005e90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d010      	beq.n	8005e90 <HAL_UART_IRQHandler+0x730>
 8005e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	da0c      	bge.n	8005e90 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f001 faa5 	bl	80073c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e7c:	e008      	b.n	8005e90 <HAL_UART_IRQHandler+0x730>
      return;
 8005e7e:	bf00      	nop
 8005e80:	e006      	b.n	8005e90 <HAL_UART_IRQHandler+0x730>
    return;
 8005e82:	bf00      	nop
 8005e84:	e004      	b.n	8005e90 <HAL_UART_IRQHandler+0x730>
      return;
 8005e86:	bf00      	nop
 8005e88:	e002      	b.n	8005e90 <HAL_UART_IRQHandler+0x730>
      return;
 8005e8a:	bf00      	nop
 8005e8c:	e000      	b.n	8005e90 <HAL_UART_IRQHandler+0x730>
    return;
 8005e8e:	bf00      	nop
  }
}
 8005e90:	37e8      	adds	r7, #232	; 0xe8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	effffffe 	.word	0xeffffffe

08005e9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ee0:	b092      	sub	sp, #72	; 0x48
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4bbe      	ldr	r3, [pc, #760]	; (8006204 <UART_SetConfig+0x328>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f14:	430b      	orrs	r3, r1
 8005f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4ab3      	ldr	r2, [pc, #716]	; (8006208 <UART_SetConfig+0x32c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d004      	beq.n	8005f48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f44:	4313      	orrs	r3, r2
 8005f46:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	4baf      	ldr	r3, [pc, #700]	; (800620c <UART_SetConfig+0x330>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	6812      	ldr	r2, [r2, #0]
 8005f56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f58:	430b      	orrs	r3, r1
 8005f5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	f023 010f 	bic.w	r1, r3, #15
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4aa6      	ldr	r2, [pc, #664]	; (8006210 <UART_SetConfig+0x334>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d177      	bne.n	800606c <UART_SetConfig+0x190>
 8005f7c:	4ba5      	ldr	r3, [pc, #660]	; (8006214 <UART_SetConfig+0x338>)
 8005f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f84:	2b28      	cmp	r3, #40	; 0x28
 8005f86:	d86d      	bhi.n	8006064 <UART_SetConfig+0x188>
 8005f88:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <UART_SetConfig+0xb4>)
 8005f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8e:	bf00      	nop
 8005f90:	08006035 	.word	0x08006035
 8005f94:	08006065 	.word	0x08006065
 8005f98:	08006065 	.word	0x08006065
 8005f9c:	08006065 	.word	0x08006065
 8005fa0:	08006065 	.word	0x08006065
 8005fa4:	08006065 	.word	0x08006065
 8005fa8:	08006065 	.word	0x08006065
 8005fac:	08006065 	.word	0x08006065
 8005fb0:	0800603d 	.word	0x0800603d
 8005fb4:	08006065 	.word	0x08006065
 8005fb8:	08006065 	.word	0x08006065
 8005fbc:	08006065 	.word	0x08006065
 8005fc0:	08006065 	.word	0x08006065
 8005fc4:	08006065 	.word	0x08006065
 8005fc8:	08006065 	.word	0x08006065
 8005fcc:	08006065 	.word	0x08006065
 8005fd0:	08006045 	.word	0x08006045
 8005fd4:	08006065 	.word	0x08006065
 8005fd8:	08006065 	.word	0x08006065
 8005fdc:	08006065 	.word	0x08006065
 8005fe0:	08006065 	.word	0x08006065
 8005fe4:	08006065 	.word	0x08006065
 8005fe8:	08006065 	.word	0x08006065
 8005fec:	08006065 	.word	0x08006065
 8005ff0:	0800604d 	.word	0x0800604d
 8005ff4:	08006065 	.word	0x08006065
 8005ff8:	08006065 	.word	0x08006065
 8005ffc:	08006065 	.word	0x08006065
 8006000:	08006065 	.word	0x08006065
 8006004:	08006065 	.word	0x08006065
 8006008:	08006065 	.word	0x08006065
 800600c:	08006065 	.word	0x08006065
 8006010:	08006055 	.word	0x08006055
 8006014:	08006065 	.word	0x08006065
 8006018:	08006065 	.word	0x08006065
 800601c:	08006065 	.word	0x08006065
 8006020:	08006065 	.word	0x08006065
 8006024:	08006065 	.word	0x08006065
 8006028:	08006065 	.word	0x08006065
 800602c:	08006065 	.word	0x08006065
 8006030:	0800605d 	.word	0x0800605d
 8006034:	2301      	movs	r3, #1
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603a:	e326      	b.n	800668a <UART_SetConfig+0x7ae>
 800603c:	2304      	movs	r3, #4
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006042:	e322      	b.n	800668a <UART_SetConfig+0x7ae>
 8006044:	2308      	movs	r3, #8
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604a:	e31e      	b.n	800668a <UART_SetConfig+0x7ae>
 800604c:	2310      	movs	r3, #16
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006052:	e31a      	b.n	800668a <UART_SetConfig+0x7ae>
 8006054:	2320      	movs	r3, #32
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605a:	e316      	b.n	800668a <UART_SetConfig+0x7ae>
 800605c:	2340      	movs	r3, #64	; 0x40
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006062:	e312      	b.n	800668a <UART_SetConfig+0x7ae>
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606a:	e30e      	b.n	800668a <UART_SetConfig+0x7ae>
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a69      	ldr	r2, [pc, #420]	; (8006218 <UART_SetConfig+0x33c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d130      	bne.n	80060d8 <UART_SetConfig+0x1fc>
 8006076:	4b67      	ldr	r3, [pc, #412]	; (8006214 <UART_SetConfig+0x338>)
 8006078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	2b05      	cmp	r3, #5
 8006080:	d826      	bhi.n	80060d0 <UART_SetConfig+0x1f4>
 8006082:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <UART_SetConfig+0x1ac>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	080060a1 	.word	0x080060a1
 800608c:	080060a9 	.word	0x080060a9
 8006090:	080060b1 	.word	0x080060b1
 8006094:	080060b9 	.word	0x080060b9
 8006098:	080060c1 	.word	0x080060c1
 800609c:	080060c9 	.word	0x080060c9
 80060a0:	2300      	movs	r3, #0
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a6:	e2f0      	b.n	800668a <UART_SetConfig+0x7ae>
 80060a8:	2304      	movs	r3, #4
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ae:	e2ec      	b.n	800668a <UART_SetConfig+0x7ae>
 80060b0:	2308      	movs	r3, #8
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b6:	e2e8      	b.n	800668a <UART_SetConfig+0x7ae>
 80060b8:	2310      	movs	r3, #16
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060be:	e2e4      	b.n	800668a <UART_SetConfig+0x7ae>
 80060c0:	2320      	movs	r3, #32
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c6:	e2e0      	b.n	800668a <UART_SetConfig+0x7ae>
 80060c8:	2340      	movs	r3, #64	; 0x40
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ce:	e2dc      	b.n	800668a <UART_SetConfig+0x7ae>
 80060d0:	2380      	movs	r3, #128	; 0x80
 80060d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d6:	e2d8      	b.n	800668a <UART_SetConfig+0x7ae>
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a4f      	ldr	r2, [pc, #316]	; (800621c <UART_SetConfig+0x340>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d130      	bne.n	8006144 <UART_SetConfig+0x268>
 80060e2:	4b4c      	ldr	r3, [pc, #304]	; (8006214 <UART_SetConfig+0x338>)
 80060e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	2b05      	cmp	r3, #5
 80060ec:	d826      	bhi.n	800613c <UART_SetConfig+0x260>
 80060ee:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <UART_SetConfig+0x218>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	0800610d 	.word	0x0800610d
 80060f8:	08006115 	.word	0x08006115
 80060fc:	0800611d 	.word	0x0800611d
 8006100:	08006125 	.word	0x08006125
 8006104:	0800612d 	.word	0x0800612d
 8006108:	08006135 	.word	0x08006135
 800610c:	2300      	movs	r3, #0
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006112:	e2ba      	b.n	800668a <UART_SetConfig+0x7ae>
 8006114:	2304      	movs	r3, #4
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611a:	e2b6      	b.n	800668a <UART_SetConfig+0x7ae>
 800611c:	2308      	movs	r3, #8
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006122:	e2b2      	b.n	800668a <UART_SetConfig+0x7ae>
 8006124:	2310      	movs	r3, #16
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612a:	e2ae      	b.n	800668a <UART_SetConfig+0x7ae>
 800612c:	2320      	movs	r3, #32
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006132:	e2aa      	b.n	800668a <UART_SetConfig+0x7ae>
 8006134:	2340      	movs	r3, #64	; 0x40
 8006136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800613a:	e2a6      	b.n	800668a <UART_SetConfig+0x7ae>
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006142:	e2a2      	b.n	800668a <UART_SetConfig+0x7ae>
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a35      	ldr	r2, [pc, #212]	; (8006220 <UART_SetConfig+0x344>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d130      	bne.n	80061b0 <UART_SetConfig+0x2d4>
 800614e:	4b31      	ldr	r3, [pc, #196]	; (8006214 <UART_SetConfig+0x338>)
 8006150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	2b05      	cmp	r3, #5
 8006158:	d826      	bhi.n	80061a8 <UART_SetConfig+0x2cc>
 800615a:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <UART_SetConfig+0x284>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	08006179 	.word	0x08006179
 8006164:	08006181 	.word	0x08006181
 8006168:	08006189 	.word	0x08006189
 800616c:	08006191 	.word	0x08006191
 8006170:	08006199 	.word	0x08006199
 8006174:	080061a1 	.word	0x080061a1
 8006178:	2300      	movs	r3, #0
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617e:	e284      	b.n	800668a <UART_SetConfig+0x7ae>
 8006180:	2304      	movs	r3, #4
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006186:	e280      	b.n	800668a <UART_SetConfig+0x7ae>
 8006188:	2308      	movs	r3, #8
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800618e:	e27c      	b.n	800668a <UART_SetConfig+0x7ae>
 8006190:	2310      	movs	r3, #16
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006196:	e278      	b.n	800668a <UART_SetConfig+0x7ae>
 8006198:	2320      	movs	r3, #32
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619e:	e274      	b.n	800668a <UART_SetConfig+0x7ae>
 80061a0:	2340      	movs	r3, #64	; 0x40
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061a6:	e270      	b.n	800668a <UART_SetConfig+0x7ae>
 80061a8:	2380      	movs	r3, #128	; 0x80
 80061aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ae:	e26c      	b.n	800668a <UART_SetConfig+0x7ae>
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1b      	ldr	r2, [pc, #108]	; (8006224 <UART_SetConfig+0x348>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d142      	bne.n	8006240 <UART_SetConfig+0x364>
 80061ba:	4b16      	ldr	r3, [pc, #88]	; (8006214 <UART_SetConfig+0x338>)
 80061bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	2b05      	cmp	r3, #5
 80061c4:	d838      	bhi.n	8006238 <UART_SetConfig+0x35c>
 80061c6:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <UART_SetConfig+0x2f0>)
 80061c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061cc:	080061e5 	.word	0x080061e5
 80061d0:	080061ed 	.word	0x080061ed
 80061d4:	080061f5 	.word	0x080061f5
 80061d8:	080061fd 	.word	0x080061fd
 80061dc:	08006229 	.word	0x08006229
 80061e0:	08006231 	.word	0x08006231
 80061e4:	2300      	movs	r3, #0
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ea:	e24e      	b.n	800668a <UART_SetConfig+0x7ae>
 80061ec:	2304      	movs	r3, #4
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f2:	e24a      	b.n	800668a <UART_SetConfig+0x7ae>
 80061f4:	2308      	movs	r3, #8
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fa:	e246      	b.n	800668a <UART_SetConfig+0x7ae>
 80061fc:	2310      	movs	r3, #16
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006202:	e242      	b.n	800668a <UART_SetConfig+0x7ae>
 8006204:	cfff69f3 	.word	0xcfff69f3
 8006208:	58000c00 	.word	0x58000c00
 800620c:	11fff4ff 	.word	0x11fff4ff
 8006210:	40011000 	.word	0x40011000
 8006214:	58024400 	.word	0x58024400
 8006218:	40004400 	.word	0x40004400
 800621c:	40004800 	.word	0x40004800
 8006220:	40004c00 	.word	0x40004c00
 8006224:	40005000 	.word	0x40005000
 8006228:	2320      	movs	r3, #32
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622e:	e22c      	b.n	800668a <UART_SetConfig+0x7ae>
 8006230:	2340      	movs	r3, #64	; 0x40
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006236:	e228      	b.n	800668a <UART_SetConfig+0x7ae>
 8006238:	2380      	movs	r3, #128	; 0x80
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623e:	e224      	b.n	800668a <UART_SetConfig+0x7ae>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4ab1      	ldr	r2, [pc, #708]	; (800650c <UART_SetConfig+0x630>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d176      	bne.n	8006338 <UART_SetConfig+0x45c>
 800624a:	4bb1      	ldr	r3, [pc, #708]	; (8006510 <UART_SetConfig+0x634>)
 800624c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006252:	2b28      	cmp	r3, #40	; 0x28
 8006254:	d86c      	bhi.n	8006330 <UART_SetConfig+0x454>
 8006256:	a201      	add	r2, pc, #4	; (adr r2, 800625c <UART_SetConfig+0x380>)
 8006258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625c:	08006301 	.word	0x08006301
 8006260:	08006331 	.word	0x08006331
 8006264:	08006331 	.word	0x08006331
 8006268:	08006331 	.word	0x08006331
 800626c:	08006331 	.word	0x08006331
 8006270:	08006331 	.word	0x08006331
 8006274:	08006331 	.word	0x08006331
 8006278:	08006331 	.word	0x08006331
 800627c:	08006309 	.word	0x08006309
 8006280:	08006331 	.word	0x08006331
 8006284:	08006331 	.word	0x08006331
 8006288:	08006331 	.word	0x08006331
 800628c:	08006331 	.word	0x08006331
 8006290:	08006331 	.word	0x08006331
 8006294:	08006331 	.word	0x08006331
 8006298:	08006331 	.word	0x08006331
 800629c:	08006311 	.word	0x08006311
 80062a0:	08006331 	.word	0x08006331
 80062a4:	08006331 	.word	0x08006331
 80062a8:	08006331 	.word	0x08006331
 80062ac:	08006331 	.word	0x08006331
 80062b0:	08006331 	.word	0x08006331
 80062b4:	08006331 	.word	0x08006331
 80062b8:	08006331 	.word	0x08006331
 80062bc:	08006319 	.word	0x08006319
 80062c0:	08006331 	.word	0x08006331
 80062c4:	08006331 	.word	0x08006331
 80062c8:	08006331 	.word	0x08006331
 80062cc:	08006331 	.word	0x08006331
 80062d0:	08006331 	.word	0x08006331
 80062d4:	08006331 	.word	0x08006331
 80062d8:	08006331 	.word	0x08006331
 80062dc:	08006321 	.word	0x08006321
 80062e0:	08006331 	.word	0x08006331
 80062e4:	08006331 	.word	0x08006331
 80062e8:	08006331 	.word	0x08006331
 80062ec:	08006331 	.word	0x08006331
 80062f0:	08006331 	.word	0x08006331
 80062f4:	08006331 	.word	0x08006331
 80062f8:	08006331 	.word	0x08006331
 80062fc:	08006329 	.word	0x08006329
 8006300:	2301      	movs	r3, #1
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006306:	e1c0      	b.n	800668a <UART_SetConfig+0x7ae>
 8006308:	2304      	movs	r3, #4
 800630a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630e:	e1bc      	b.n	800668a <UART_SetConfig+0x7ae>
 8006310:	2308      	movs	r3, #8
 8006312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006316:	e1b8      	b.n	800668a <UART_SetConfig+0x7ae>
 8006318:	2310      	movs	r3, #16
 800631a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631e:	e1b4      	b.n	800668a <UART_SetConfig+0x7ae>
 8006320:	2320      	movs	r3, #32
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006326:	e1b0      	b.n	800668a <UART_SetConfig+0x7ae>
 8006328:	2340      	movs	r3, #64	; 0x40
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632e:	e1ac      	b.n	800668a <UART_SetConfig+0x7ae>
 8006330:	2380      	movs	r3, #128	; 0x80
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006336:	e1a8      	b.n	800668a <UART_SetConfig+0x7ae>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a75      	ldr	r2, [pc, #468]	; (8006514 <UART_SetConfig+0x638>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d130      	bne.n	80063a4 <UART_SetConfig+0x4c8>
 8006342:	4b73      	ldr	r3, [pc, #460]	; (8006510 <UART_SetConfig+0x634>)
 8006344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	2b05      	cmp	r3, #5
 800634c:	d826      	bhi.n	800639c <UART_SetConfig+0x4c0>
 800634e:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <UART_SetConfig+0x478>)
 8006350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006354:	0800636d 	.word	0x0800636d
 8006358:	08006375 	.word	0x08006375
 800635c:	0800637d 	.word	0x0800637d
 8006360:	08006385 	.word	0x08006385
 8006364:	0800638d 	.word	0x0800638d
 8006368:	08006395 	.word	0x08006395
 800636c:	2300      	movs	r3, #0
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006372:	e18a      	b.n	800668a <UART_SetConfig+0x7ae>
 8006374:	2304      	movs	r3, #4
 8006376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637a:	e186      	b.n	800668a <UART_SetConfig+0x7ae>
 800637c:	2308      	movs	r3, #8
 800637e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006382:	e182      	b.n	800668a <UART_SetConfig+0x7ae>
 8006384:	2310      	movs	r3, #16
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638a:	e17e      	b.n	800668a <UART_SetConfig+0x7ae>
 800638c:	2320      	movs	r3, #32
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006392:	e17a      	b.n	800668a <UART_SetConfig+0x7ae>
 8006394:	2340      	movs	r3, #64	; 0x40
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639a:	e176      	b.n	800668a <UART_SetConfig+0x7ae>
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a2:	e172      	b.n	800668a <UART_SetConfig+0x7ae>
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a5b      	ldr	r2, [pc, #364]	; (8006518 <UART_SetConfig+0x63c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d130      	bne.n	8006410 <UART_SetConfig+0x534>
 80063ae:	4b58      	ldr	r3, [pc, #352]	; (8006510 <UART_SetConfig+0x634>)
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	2b05      	cmp	r3, #5
 80063b8:	d826      	bhi.n	8006408 <UART_SetConfig+0x52c>
 80063ba:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <UART_SetConfig+0x4e4>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063d9 	.word	0x080063d9
 80063c4:	080063e1 	.word	0x080063e1
 80063c8:	080063e9 	.word	0x080063e9
 80063cc:	080063f1 	.word	0x080063f1
 80063d0:	080063f9 	.word	0x080063f9
 80063d4:	08006401 	.word	0x08006401
 80063d8:	2300      	movs	r3, #0
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063de:	e154      	b.n	800668a <UART_SetConfig+0x7ae>
 80063e0:	2304      	movs	r3, #4
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e6:	e150      	b.n	800668a <UART_SetConfig+0x7ae>
 80063e8:	2308      	movs	r3, #8
 80063ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ee:	e14c      	b.n	800668a <UART_SetConfig+0x7ae>
 80063f0:	2310      	movs	r3, #16
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f6:	e148      	b.n	800668a <UART_SetConfig+0x7ae>
 80063f8:	2320      	movs	r3, #32
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fe:	e144      	b.n	800668a <UART_SetConfig+0x7ae>
 8006400:	2340      	movs	r3, #64	; 0x40
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006406:	e140      	b.n	800668a <UART_SetConfig+0x7ae>
 8006408:	2380      	movs	r3, #128	; 0x80
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640e:	e13c      	b.n	800668a <UART_SetConfig+0x7ae>
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a41      	ldr	r2, [pc, #260]	; (800651c <UART_SetConfig+0x640>)
 8006416:	4293      	cmp	r3, r2
 8006418:	f040 8082 	bne.w	8006520 <UART_SetConfig+0x644>
 800641c:	4b3c      	ldr	r3, [pc, #240]	; (8006510 <UART_SetConfig+0x634>)
 800641e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006420:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006424:	2b28      	cmp	r3, #40	; 0x28
 8006426:	d86d      	bhi.n	8006504 <UART_SetConfig+0x628>
 8006428:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <UART_SetConfig+0x554>)
 800642a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642e:	bf00      	nop
 8006430:	080064d5 	.word	0x080064d5
 8006434:	08006505 	.word	0x08006505
 8006438:	08006505 	.word	0x08006505
 800643c:	08006505 	.word	0x08006505
 8006440:	08006505 	.word	0x08006505
 8006444:	08006505 	.word	0x08006505
 8006448:	08006505 	.word	0x08006505
 800644c:	08006505 	.word	0x08006505
 8006450:	080064dd 	.word	0x080064dd
 8006454:	08006505 	.word	0x08006505
 8006458:	08006505 	.word	0x08006505
 800645c:	08006505 	.word	0x08006505
 8006460:	08006505 	.word	0x08006505
 8006464:	08006505 	.word	0x08006505
 8006468:	08006505 	.word	0x08006505
 800646c:	08006505 	.word	0x08006505
 8006470:	080064e5 	.word	0x080064e5
 8006474:	08006505 	.word	0x08006505
 8006478:	08006505 	.word	0x08006505
 800647c:	08006505 	.word	0x08006505
 8006480:	08006505 	.word	0x08006505
 8006484:	08006505 	.word	0x08006505
 8006488:	08006505 	.word	0x08006505
 800648c:	08006505 	.word	0x08006505
 8006490:	080064ed 	.word	0x080064ed
 8006494:	08006505 	.word	0x08006505
 8006498:	08006505 	.word	0x08006505
 800649c:	08006505 	.word	0x08006505
 80064a0:	08006505 	.word	0x08006505
 80064a4:	08006505 	.word	0x08006505
 80064a8:	08006505 	.word	0x08006505
 80064ac:	08006505 	.word	0x08006505
 80064b0:	080064f5 	.word	0x080064f5
 80064b4:	08006505 	.word	0x08006505
 80064b8:	08006505 	.word	0x08006505
 80064bc:	08006505 	.word	0x08006505
 80064c0:	08006505 	.word	0x08006505
 80064c4:	08006505 	.word	0x08006505
 80064c8:	08006505 	.word	0x08006505
 80064cc:	08006505 	.word	0x08006505
 80064d0:	080064fd 	.word	0x080064fd
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064da:	e0d6      	b.n	800668a <UART_SetConfig+0x7ae>
 80064dc:	2304      	movs	r3, #4
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e2:	e0d2      	b.n	800668a <UART_SetConfig+0x7ae>
 80064e4:	2308      	movs	r3, #8
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ea:	e0ce      	b.n	800668a <UART_SetConfig+0x7ae>
 80064ec:	2310      	movs	r3, #16
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f2:	e0ca      	b.n	800668a <UART_SetConfig+0x7ae>
 80064f4:	2320      	movs	r3, #32
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fa:	e0c6      	b.n	800668a <UART_SetConfig+0x7ae>
 80064fc:	2340      	movs	r3, #64	; 0x40
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006502:	e0c2      	b.n	800668a <UART_SetConfig+0x7ae>
 8006504:	2380      	movs	r3, #128	; 0x80
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650a:	e0be      	b.n	800668a <UART_SetConfig+0x7ae>
 800650c:	40011400 	.word	0x40011400
 8006510:	58024400 	.word	0x58024400
 8006514:	40007800 	.word	0x40007800
 8006518:	40007c00 	.word	0x40007c00
 800651c:	40011800 	.word	0x40011800
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4aad      	ldr	r2, [pc, #692]	; (80067dc <UART_SetConfig+0x900>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d176      	bne.n	8006618 <UART_SetConfig+0x73c>
 800652a:	4bad      	ldr	r3, [pc, #692]	; (80067e0 <UART_SetConfig+0x904>)
 800652c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006532:	2b28      	cmp	r3, #40	; 0x28
 8006534:	d86c      	bhi.n	8006610 <UART_SetConfig+0x734>
 8006536:	a201      	add	r2, pc, #4	; (adr r2, 800653c <UART_SetConfig+0x660>)
 8006538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653c:	080065e1 	.word	0x080065e1
 8006540:	08006611 	.word	0x08006611
 8006544:	08006611 	.word	0x08006611
 8006548:	08006611 	.word	0x08006611
 800654c:	08006611 	.word	0x08006611
 8006550:	08006611 	.word	0x08006611
 8006554:	08006611 	.word	0x08006611
 8006558:	08006611 	.word	0x08006611
 800655c:	080065e9 	.word	0x080065e9
 8006560:	08006611 	.word	0x08006611
 8006564:	08006611 	.word	0x08006611
 8006568:	08006611 	.word	0x08006611
 800656c:	08006611 	.word	0x08006611
 8006570:	08006611 	.word	0x08006611
 8006574:	08006611 	.word	0x08006611
 8006578:	08006611 	.word	0x08006611
 800657c:	080065f1 	.word	0x080065f1
 8006580:	08006611 	.word	0x08006611
 8006584:	08006611 	.word	0x08006611
 8006588:	08006611 	.word	0x08006611
 800658c:	08006611 	.word	0x08006611
 8006590:	08006611 	.word	0x08006611
 8006594:	08006611 	.word	0x08006611
 8006598:	08006611 	.word	0x08006611
 800659c:	080065f9 	.word	0x080065f9
 80065a0:	08006611 	.word	0x08006611
 80065a4:	08006611 	.word	0x08006611
 80065a8:	08006611 	.word	0x08006611
 80065ac:	08006611 	.word	0x08006611
 80065b0:	08006611 	.word	0x08006611
 80065b4:	08006611 	.word	0x08006611
 80065b8:	08006611 	.word	0x08006611
 80065bc:	08006601 	.word	0x08006601
 80065c0:	08006611 	.word	0x08006611
 80065c4:	08006611 	.word	0x08006611
 80065c8:	08006611 	.word	0x08006611
 80065cc:	08006611 	.word	0x08006611
 80065d0:	08006611 	.word	0x08006611
 80065d4:	08006611 	.word	0x08006611
 80065d8:	08006611 	.word	0x08006611
 80065dc:	08006609 	.word	0x08006609
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065e6:	e050      	b.n	800668a <UART_SetConfig+0x7ae>
 80065e8:	2304      	movs	r3, #4
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ee:	e04c      	b.n	800668a <UART_SetConfig+0x7ae>
 80065f0:	2308      	movs	r3, #8
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f6:	e048      	b.n	800668a <UART_SetConfig+0x7ae>
 80065f8:	2310      	movs	r3, #16
 80065fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fe:	e044      	b.n	800668a <UART_SetConfig+0x7ae>
 8006600:	2320      	movs	r3, #32
 8006602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006606:	e040      	b.n	800668a <UART_SetConfig+0x7ae>
 8006608:	2340      	movs	r3, #64	; 0x40
 800660a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660e:	e03c      	b.n	800668a <UART_SetConfig+0x7ae>
 8006610:	2380      	movs	r3, #128	; 0x80
 8006612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006616:	e038      	b.n	800668a <UART_SetConfig+0x7ae>
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a71      	ldr	r2, [pc, #452]	; (80067e4 <UART_SetConfig+0x908>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d130      	bne.n	8006684 <UART_SetConfig+0x7a8>
 8006622:	4b6f      	ldr	r3, [pc, #444]	; (80067e0 <UART_SetConfig+0x904>)
 8006624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	2b05      	cmp	r3, #5
 800662c:	d826      	bhi.n	800667c <UART_SetConfig+0x7a0>
 800662e:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <UART_SetConfig+0x758>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	0800664d 	.word	0x0800664d
 8006638:	08006655 	.word	0x08006655
 800663c:	0800665d 	.word	0x0800665d
 8006640:	08006665 	.word	0x08006665
 8006644:	0800666d 	.word	0x0800666d
 8006648:	08006675 	.word	0x08006675
 800664c:	2302      	movs	r3, #2
 800664e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006652:	e01a      	b.n	800668a <UART_SetConfig+0x7ae>
 8006654:	2304      	movs	r3, #4
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665a:	e016      	b.n	800668a <UART_SetConfig+0x7ae>
 800665c:	2308      	movs	r3, #8
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006662:	e012      	b.n	800668a <UART_SetConfig+0x7ae>
 8006664:	2310      	movs	r3, #16
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666a:	e00e      	b.n	800668a <UART_SetConfig+0x7ae>
 800666c:	2320      	movs	r3, #32
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006672:	e00a      	b.n	800668a <UART_SetConfig+0x7ae>
 8006674:	2340      	movs	r3, #64	; 0x40
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667a:	e006      	b.n	800668a <UART_SetConfig+0x7ae>
 800667c:	2380      	movs	r3, #128	; 0x80
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006682:	e002      	b.n	800668a <UART_SetConfig+0x7ae>
 8006684:	2380      	movs	r3, #128	; 0x80
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a55      	ldr	r2, [pc, #340]	; (80067e4 <UART_SetConfig+0x908>)
 8006690:	4293      	cmp	r3, r2
 8006692:	f040 80f8 	bne.w	8006886 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006696:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800669a:	2b20      	cmp	r3, #32
 800669c:	dc46      	bgt.n	800672c <UART_SetConfig+0x850>
 800669e:	2b02      	cmp	r3, #2
 80066a0:	db75      	blt.n	800678e <UART_SetConfig+0x8b2>
 80066a2:	3b02      	subs	r3, #2
 80066a4:	2b1e      	cmp	r3, #30
 80066a6:	d872      	bhi.n	800678e <UART_SetConfig+0x8b2>
 80066a8:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <UART_SetConfig+0x7d4>)
 80066aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ae:	bf00      	nop
 80066b0:	08006733 	.word	0x08006733
 80066b4:	0800678f 	.word	0x0800678f
 80066b8:	0800673b 	.word	0x0800673b
 80066bc:	0800678f 	.word	0x0800678f
 80066c0:	0800678f 	.word	0x0800678f
 80066c4:	0800678f 	.word	0x0800678f
 80066c8:	0800674b 	.word	0x0800674b
 80066cc:	0800678f 	.word	0x0800678f
 80066d0:	0800678f 	.word	0x0800678f
 80066d4:	0800678f 	.word	0x0800678f
 80066d8:	0800678f 	.word	0x0800678f
 80066dc:	0800678f 	.word	0x0800678f
 80066e0:	0800678f 	.word	0x0800678f
 80066e4:	0800678f 	.word	0x0800678f
 80066e8:	0800675b 	.word	0x0800675b
 80066ec:	0800678f 	.word	0x0800678f
 80066f0:	0800678f 	.word	0x0800678f
 80066f4:	0800678f 	.word	0x0800678f
 80066f8:	0800678f 	.word	0x0800678f
 80066fc:	0800678f 	.word	0x0800678f
 8006700:	0800678f 	.word	0x0800678f
 8006704:	0800678f 	.word	0x0800678f
 8006708:	0800678f 	.word	0x0800678f
 800670c:	0800678f 	.word	0x0800678f
 8006710:	0800678f 	.word	0x0800678f
 8006714:	0800678f 	.word	0x0800678f
 8006718:	0800678f 	.word	0x0800678f
 800671c:	0800678f 	.word	0x0800678f
 8006720:	0800678f 	.word	0x0800678f
 8006724:	0800678f 	.word	0x0800678f
 8006728:	08006781 	.word	0x08006781
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	d02a      	beq.n	8006786 <UART_SetConfig+0x8aa>
 8006730:	e02d      	b.n	800678e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006732:	f7fe fa65 	bl	8004c00 <HAL_RCCEx_GetD3PCLK1Freq>
 8006736:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006738:	e02f      	b.n	800679a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800673a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fa74 	bl	8004c2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006748:	e027      	b.n	800679a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800674a:	f107 0318 	add.w	r3, r7, #24
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe fbc0 	bl	8004ed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006758:	e01f      	b.n	800679a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800675a:	4b21      	ldr	r3, [pc, #132]	; (80067e0 <UART_SetConfig+0x904>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006766:	4b1e      	ldr	r3, [pc, #120]	; (80067e0 <UART_SetConfig+0x904>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	08db      	lsrs	r3, r3, #3
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	4a1d      	ldr	r2, [pc, #116]	; (80067e8 <UART_SetConfig+0x90c>)
 8006772:	fa22 f303 	lsr.w	r3, r2, r3
 8006776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006778:	e00f      	b.n	800679a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800677a:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <UART_SetConfig+0x90c>)
 800677c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800677e:	e00c      	b.n	800679a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006780:	4b1a      	ldr	r3, [pc, #104]	; (80067ec <UART_SetConfig+0x910>)
 8006782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006784:	e009      	b.n	800679a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800678a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800678c:	e005      	b.n	800679a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006798:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800679a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 81ee 	beq.w	8006b7e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	4a12      	ldr	r2, [pc, #72]	; (80067f0 <UART_SetConfig+0x914>)
 80067a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067ac:	461a      	mov	r2, r3
 80067ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80067b4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	4413      	add	r3, r2
 80067c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d305      	bcc.n	80067d2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d910      	bls.n	80067f4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80067d8:	e1d1      	b.n	8006b7e <UART_SetConfig+0xca2>
 80067da:	bf00      	nop
 80067dc:	40011c00 	.word	0x40011c00
 80067e0:	58024400 	.word	0x58024400
 80067e4:	58000c00 	.word	0x58000c00
 80067e8:	03d09000 	.word	0x03d09000
 80067ec:	003d0900 	.word	0x003d0900
 80067f0:	0800814c 	.word	0x0800814c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f6:	2200      	movs	r2, #0
 80067f8:	60bb      	str	r3, [r7, #8]
 80067fa:	60fa      	str	r2, [r7, #12]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	4ac0      	ldr	r2, [pc, #768]	; (8006b04 <UART_SetConfig+0xc28>)
 8006802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006806:	b29b      	uxth	r3, r3
 8006808:	2200      	movs	r2, #0
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006812:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006816:	f7f9 fdc3 	bl	80003a0 <__aeabi_uldivmod>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4610      	mov	r0, r2
 8006820:	4619      	mov	r1, r3
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	f04f 0300 	mov.w	r3, #0
 800682a:	020b      	lsls	r3, r1, #8
 800682c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006830:	0202      	lsls	r2, r0, #8
 8006832:	6979      	ldr	r1, [r7, #20]
 8006834:	6849      	ldr	r1, [r1, #4]
 8006836:	0849      	lsrs	r1, r1, #1
 8006838:	2000      	movs	r0, #0
 800683a:	460c      	mov	r4, r1
 800683c:	4605      	mov	r5, r0
 800683e:	eb12 0804 	adds.w	r8, r2, r4
 8006842:	eb43 0905 	adc.w	r9, r3, r5
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	469a      	mov	sl, r3
 800684e:	4693      	mov	fp, r2
 8006850:	4652      	mov	r2, sl
 8006852:	465b      	mov	r3, fp
 8006854:	4640      	mov	r0, r8
 8006856:	4649      	mov	r1, r9
 8006858:	f7f9 fda2 	bl	80003a0 <__aeabi_uldivmod>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4613      	mov	r3, r2
 8006862:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800686a:	d308      	bcc.n	800687e <UART_SetConfig+0x9a2>
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006872:	d204      	bcs.n	800687e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800687a:	60da      	str	r2, [r3, #12]
 800687c:	e17f      	b.n	8006b7e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006884:	e17b      	b.n	8006b7e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688e:	f040 80bd 	bne.w	8006a0c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006892:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006896:	2b20      	cmp	r3, #32
 8006898:	dc48      	bgt.n	800692c <UART_SetConfig+0xa50>
 800689a:	2b00      	cmp	r3, #0
 800689c:	db7b      	blt.n	8006996 <UART_SetConfig+0xaba>
 800689e:	2b20      	cmp	r3, #32
 80068a0:	d879      	bhi.n	8006996 <UART_SetConfig+0xaba>
 80068a2:	a201      	add	r2, pc, #4	; (adr r2, 80068a8 <UART_SetConfig+0x9cc>)
 80068a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a8:	08006933 	.word	0x08006933
 80068ac:	0800693b 	.word	0x0800693b
 80068b0:	08006997 	.word	0x08006997
 80068b4:	08006997 	.word	0x08006997
 80068b8:	08006943 	.word	0x08006943
 80068bc:	08006997 	.word	0x08006997
 80068c0:	08006997 	.word	0x08006997
 80068c4:	08006997 	.word	0x08006997
 80068c8:	08006953 	.word	0x08006953
 80068cc:	08006997 	.word	0x08006997
 80068d0:	08006997 	.word	0x08006997
 80068d4:	08006997 	.word	0x08006997
 80068d8:	08006997 	.word	0x08006997
 80068dc:	08006997 	.word	0x08006997
 80068e0:	08006997 	.word	0x08006997
 80068e4:	08006997 	.word	0x08006997
 80068e8:	08006963 	.word	0x08006963
 80068ec:	08006997 	.word	0x08006997
 80068f0:	08006997 	.word	0x08006997
 80068f4:	08006997 	.word	0x08006997
 80068f8:	08006997 	.word	0x08006997
 80068fc:	08006997 	.word	0x08006997
 8006900:	08006997 	.word	0x08006997
 8006904:	08006997 	.word	0x08006997
 8006908:	08006997 	.word	0x08006997
 800690c:	08006997 	.word	0x08006997
 8006910:	08006997 	.word	0x08006997
 8006914:	08006997 	.word	0x08006997
 8006918:	08006997 	.word	0x08006997
 800691c:	08006997 	.word	0x08006997
 8006920:	08006997 	.word	0x08006997
 8006924:	08006997 	.word	0x08006997
 8006928:	08006989 	.word	0x08006989
 800692c:	2b40      	cmp	r3, #64	; 0x40
 800692e:	d02e      	beq.n	800698e <UART_SetConfig+0xab2>
 8006930:	e031      	b.n	8006996 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006932:	f7fd fa2d 	bl	8003d90 <HAL_RCC_GetPCLK1Freq>
 8006936:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006938:	e033      	b.n	80069a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800693a:	f7fd fa3f 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 800693e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006940:	e02f      	b.n	80069a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe f970 	bl	8004c2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006950:	e027      	b.n	80069a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006952:	f107 0318 	add.w	r3, r7, #24
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe fabc 	bl	8004ed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006960:	e01f      	b.n	80069a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006962:	4b69      	ldr	r3, [pc, #420]	; (8006b08 <UART_SetConfig+0xc2c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	d009      	beq.n	8006982 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800696e:	4b66      	ldr	r3, [pc, #408]	; (8006b08 <UART_SetConfig+0xc2c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	08db      	lsrs	r3, r3, #3
 8006974:	f003 0303 	and.w	r3, r3, #3
 8006978:	4a64      	ldr	r2, [pc, #400]	; (8006b0c <UART_SetConfig+0xc30>)
 800697a:	fa22 f303 	lsr.w	r3, r2, r3
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006980:	e00f      	b.n	80069a2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006982:	4b62      	ldr	r3, [pc, #392]	; (8006b0c <UART_SetConfig+0xc30>)
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006986:	e00c      	b.n	80069a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006988:	4b61      	ldr	r3, [pc, #388]	; (8006b10 <UART_SetConfig+0xc34>)
 800698a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800698c:	e009      	b.n	80069a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800698e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006994:	e005      	b.n	80069a2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80069a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 80ea 	beq.w	8006b7e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	4a55      	ldr	r2, [pc, #340]	; (8006b04 <UART_SetConfig+0xc28>)
 80069b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b4:	461a      	mov	r2, r3
 80069b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80069bc:	005a      	lsls	r2, r3, #1
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	441a      	add	r2, r3
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	2b0f      	cmp	r3, #15
 80069d4:	d916      	bls.n	8006a04 <UART_SetConfig+0xb28>
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069dc:	d212      	bcs.n	8006a04 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f023 030f 	bic.w	r3, r3, #15
 80069e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80069f6:	4313      	orrs	r3, r2
 80069f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006a00:	60da      	str	r2, [r3, #12]
 8006a02:	e0bc      	b.n	8006b7e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a0a:	e0b8      	b.n	8006b7e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a10:	2b20      	cmp	r3, #32
 8006a12:	dc4b      	bgt.n	8006aac <UART_SetConfig+0xbd0>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f2c0 8087 	blt.w	8006b28 <UART_SetConfig+0xc4c>
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	f200 8084 	bhi.w	8006b28 <UART_SetConfig+0xc4c>
 8006a20:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <UART_SetConfig+0xb4c>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006ab3 	.word	0x08006ab3
 8006a2c:	08006abb 	.word	0x08006abb
 8006a30:	08006b29 	.word	0x08006b29
 8006a34:	08006b29 	.word	0x08006b29
 8006a38:	08006ac3 	.word	0x08006ac3
 8006a3c:	08006b29 	.word	0x08006b29
 8006a40:	08006b29 	.word	0x08006b29
 8006a44:	08006b29 	.word	0x08006b29
 8006a48:	08006ad3 	.word	0x08006ad3
 8006a4c:	08006b29 	.word	0x08006b29
 8006a50:	08006b29 	.word	0x08006b29
 8006a54:	08006b29 	.word	0x08006b29
 8006a58:	08006b29 	.word	0x08006b29
 8006a5c:	08006b29 	.word	0x08006b29
 8006a60:	08006b29 	.word	0x08006b29
 8006a64:	08006b29 	.word	0x08006b29
 8006a68:	08006ae3 	.word	0x08006ae3
 8006a6c:	08006b29 	.word	0x08006b29
 8006a70:	08006b29 	.word	0x08006b29
 8006a74:	08006b29 	.word	0x08006b29
 8006a78:	08006b29 	.word	0x08006b29
 8006a7c:	08006b29 	.word	0x08006b29
 8006a80:	08006b29 	.word	0x08006b29
 8006a84:	08006b29 	.word	0x08006b29
 8006a88:	08006b29 	.word	0x08006b29
 8006a8c:	08006b29 	.word	0x08006b29
 8006a90:	08006b29 	.word	0x08006b29
 8006a94:	08006b29 	.word	0x08006b29
 8006a98:	08006b29 	.word	0x08006b29
 8006a9c:	08006b29 	.word	0x08006b29
 8006aa0:	08006b29 	.word	0x08006b29
 8006aa4:	08006b29 	.word	0x08006b29
 8006aa8:	08006b1b 	.word	0x08006b1b
 8006aac:	2b40      	cmp	r3, #64	; 0x40
 8006aae:	d037      	beq.n	8006b20 <UART_SetConfig+0xc44>
 8006ab0:	e03a      	b.n	8006b28 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab2:	f7fd f96d 	bl	8003d90 <HAL_RCC_GetPCLK1Freq>
 8006ab6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ab8:	e03c      	b.n	8006b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aba:	f7fd f97f 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 8006abe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ac0:	e038      	b.n	8006b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fe f8b0 	bl	8004c2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ad0:	e030      	b.n	8006b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ad2:	f107 0318 	add.w	r3, r7, #24
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe f9fc 	bl	8004ed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ae0:	e028      	b.n	8006b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ae2:	4b09      	ldr	r3, [pc, #36]	; (8006b08 <UART_SetConfig+0xc2c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d012      	beq.n	8006b14 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006aee:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <UART_SetConfig+0xc2c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	08db      	lsrs	r3, r3, #3
 8006af4:	f003 0303 	and.w	r3, r3, #3
 8006af8:	4a04      	ldr	r2, [pc, #16]	; (8006b0c <UART_SetConfig+0xc30>)
 8006afa:	fa22 f303 	lsr.w	r3, r2, r3
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b00:	e018      	b.n	8006b34 <UART_SetConfig+0xc58>
 8006b02:	bf00      	nop
 8006b04:	0800814c 	.word	0x0800814c
 8006b08:	58024400 	.word	0x58024400
 8006b0c:	03d09000 	.word	0x03d09000
 8006b10:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006b14:	4b24      	ldr	r3, [pc, #144]	; (8006ba8 <UART_SetConfig+0xccc>)
 8006b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b18:	e00c      	b.n	8006b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b1a:	4b24      	ldr	r3, [pc, #144]	; (8006bac <UART_SetConfig+0xcd0>)
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b1e:	e009      	b.n	8006b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b26:	e005      	b.n	8006b34 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b32:	bf00      	nop
    }

    if (pclk != 0U)
 8006b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d021      	beq.n	8006b7e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	4a1c      	ldr	r2, [pc, #112]	; (8006bb0 <UART_SetConfig+0xcd4>)
 8006b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b44:	461a      	mov	r2, r3
 8006b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b48:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	085b      	lsrs	r3, r3, #1
 8006b52:	441a      	add	r2, r3
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b60:	2b0f      	cmp	r3, #15
 8006b62:	d909      	bls.n	8006b78 <UART_SetConfig+0xc9c>
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6a:	d205      	bcs.n	8006b78 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	60da      	str	r2, [r3, #12]
 8006b76:	e002      	b.n	8006b7e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2200      	movs	r2, #0
 8006b92:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	2200      	movs	r2, #0
 8006b98:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006b9a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3748      	adds	r7, #72	; 0x48
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ba8:	03d09000 	.word	0x03d09000
 8006bac:	003d0900 	.word	0x003d0900
 8006bb0:	0800814c 	.word	0x0800814c

08006bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00a      	beq.n	8006bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00a      	beq.n	8006c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c26:	f003 0308 	and.w	r3, r3, #8
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	f003 0310 	and.w	r3, r3, #16
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00a      	beq.n	8006c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01a      	beq.n	8006cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cb2:	d10a      	bne.n	8006cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	605a      	str	r2, [r3, #4]
  }
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d08:	f7fa fa46 	bl	8001198 <HAL_GetTick>
 8006d0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d10e      	bne.n	8006d3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f82f 	bl	8006d8e <UART_WaitOnFlagUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e025      	b.n	8006d86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b04      	cmp	r3, #4
 8006d46:	d10e      	bne.n	8006d66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f819 	bl	8006d8e <UART_WaitOnFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e00f      	b.n	8006d86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2220      	movs	r2, #32
 8006d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b09c      	sub	sp, #112	; 0x70
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	603b      	str	r3, [r7, #0]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d9e:	e0a9      	b.n	8006ef4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da6:	f000 80a5 	beq.w	8006ef4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006daa:	f7fa f9f5 	bl	8001198 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d302      	bcc.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d140      	bne.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dd4:	667b      	str	r3, [r7, #100]	; 0x64
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006de0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006de4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e6      	bne.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3308      	adds	r3, #8
 8006df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	f023 0301 	bic.w	r3, r3, #1
 8006e08:	663b      	str	r3, [r7, #96]	; 0x60
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3308      	adds	r3, #8
 8006e10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e12:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e5      	bne.n	8006df2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e069      	b.n	8006f16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0304 	and.w	r3, r3, #4
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d051      	beq.n	8006ef4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e5e:	d149      	bne.n	8006ef4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e88:	637b      	str	r3, [r7, #52]	; 0x34
 8006e8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e6      	bne.n	8006e6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f023 0301 	bic.w	r3, r3, #1
 8006eb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ebc:	623a      	str	r2, [r7, #32]
 8006ebe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	69f9      	ldr	r1, [r7, #28]
 8006ec2:	6a3a      	ldr	r2, [r7, #32]
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e5      	bne.n	8006e9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e010      	b.n	8006f16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	69da      	ldr	r2, [r3, #28]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	4013      	ands	r3, r2
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	bf0c      	ite	eq
 8006f04:	2301      	moveq	r3, #1
 8006f06:	2300      	movne	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	f43f af46 	beq.w	8006da0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3770      	adds	r7, #112	; 0x70
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b095      	sub	sp, #84	; 0x54
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f46:	643b      	str	r3, [r7, #64]	; 0x40
 8006f48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e6      	bne.n	8006f28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	4b1e      	ldr	r3, [pc, #120]	; (8006fe8 <UART_EndRxTransfer+0xc8>)
 8006f6e:	4013      	ands	r3, r2
 8006f70:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3308      	adds	r3, #8
 8006f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e5      	bne.n	8006f5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d118      	bne.n	8006fc8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f023 0310 	bic.w	r3, r3, #16
 8006faa:	647b      	str	r3, [r7, #68]	; 0x44
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6979      	ldr	r1, [r7, #20]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e6      	bne.n	8006f96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006fdc:	bf00      	nop
 8006fde:	3754      	adds	r7, #84	; 0x54
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	effffffe 	.word	0xeffffffe

08006fec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f7fe ff50 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007018:	b480      	push	{r7}
 800701a:	b08f      	sub	sp, #60	; 0x3c
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007026:	2b21      	cmp	r3, #33	; 0x21
 8007028:	d14c      	bne.n	80070c4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007030:	b29b      	uxth	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d132      	bne.n	800709c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	e853 3f00 	ldrex	r3, [r3]
 8007042:	61fb      	str	r3, [r7, #28]
   return(result);
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800704a:	637b      	str	r3, [r7, #52]	; 0x34
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	461a      	mov	r2, r3
 8007052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007056:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800705a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e6      	bne.n	8007036 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	60bb      	str	r3, [r7, #8]
   return(result);
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800707c:	633b      	str	r3, [r7, #48]	; 0x30
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	61bb      	str	r3, [r7, #24]
 8007088:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6979      	ldr	r1, [r7, #20]
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	613b      	str	r3, [r7, #16]
   return(result);
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e6      	bne.n	8007068 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800709a:	e013      	b.n	80070c4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a0:	781a      	ldrb	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80070c4:	bf00      	nop
 80070c6:	373c      	adds	r7, #60	; 0x3c
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b091      	sub	sp, #68	; 0x44
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070de:	2b21      	cmp	r3, #33	; 0x21
 80070e0:	d151      	bne.n	8007186 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d132      	bne.n	8007154 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	e853 3f00 	ldrex	r3, [r3]
 80070fa:	623b      	str	r3, [r7, #32]
   return(result);
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007102:	63bb      	str	r3, [r7, #56]	; 0x38
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	461a      	mov	r2, r3
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	633b      	str	r3, [r7, #48]	; 0x30
 800710e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e6      	bne.n	80070ee <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	60fb      	str	r3, [r7, #12]
   return(result);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007134:	637b      	str	r3, [r7, #52]	; 0x34
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713e:	61fb      	str	r3, [r7, #28]
 8007140:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	69b9      	ldr	r1, [r7, #24]
 8007144:	69fa      	ldr	r2, [r7, #28]
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	617b      	str	r3, [r7, #20]
   return(result);
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1e6      	bne.n	8007120 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007152:	e018      	b.n	8007186 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007158:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800715a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007168:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800716e:	1c9a      	adds	r2, r3, #2
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800717a:	b29b      	uxth	r3, r3
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007186:	bf00      	nop
 8007188:	3744      	adds	r7, #68	; 0x44
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007192:	b480      	push	{r7}
 8007194:	b091      	sub	sp, #68	; 0x44
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071a0:	2b21      	cmp	r3, #33	; 0x21
 80071a2:	d160      	bne.n	8007266 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80071ac:	e057      	b.n	800725e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d133      	bne.n	8007222 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3308      	adds	r3, #8
 80071c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	e853 3f00 	ldrex	r3, [r3]
 80071c8:	623b      	str	r3, [r7, #32]
   return(result);
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80071d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3308      	adds	r3, #8
 80071d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071da:	633a      	str	r2, [r7, #48]	; 0x30
 80071dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e2:	e841 2300 	strex	r3, r2, [r1]
 80071e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1e5      	bne.n	80071ba <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007202:	637b      	str	r3, [r7, #52]	; 0x34
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720c:	61fb      	str	r3, [r7, #28]
 800720e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	69b9      	ldr	r1, [r7, #24]
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	617b      	str	r3, [r7, #20]
   return(result);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e6      	bne.n	80071ee <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007220:	e021      	b.n	8007266 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722c:	2b00      	cmp	r3, #0
 800722e:	d013      	beq.n	8007258 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007234:	781a      	ldrb	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800724c:	b29b      	uxth	r3, r3
 800724e:	3b01      	subs	r3, #1
 8007250:	b29a      	uxth	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007258:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800725a:	3b01      	subs	r3, #1
 800725c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800725e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1a4      	bne.n	80071ae <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007264:	e7ff      	b.n	8007266 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007266:	bf00      	nop
 8007268:	3744      	adds	r7, #68	; 0x44
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007272:	b480      	push	{r7}
 8007274:	b091      	sub	sp, #68	; 0x44
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007280:	2b21      	cmp	r3, #33	; 0x21
 8007282:	d165      	bne.n	8007350 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800728a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800728c:	e05c      	b.n	8007348 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007294:	b29b      	uxth	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d133      	bne.n	8007302 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3308      	adds	r3, #8
 80072a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80072b0:	637b      	str	r3, [r7, #52]	; 0x34
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3308      	adds	r3, #8
 80072b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e5      	bne.n	800729a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	60bb      	str	r3, [r7, #8]
   return(result);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e2:	633b      	str	r3, [r7, #48]	; 0x30
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	61bb      	str	r3, [r7, #24]
 80072ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6979      	ldr	r1, [r7, #20]
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	613b      	str	r3, [r7, #16]
   return(result);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e6      	bne.n	80072ce <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007300:	e026      	b.n	8007350 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730c:	2b00      	cmp	r3, #0
 800730e:	d018      	beq.n	8007342 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007314:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007324:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800732a:	1c9a      	adds	r2, r3, #2
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007336:	b29b      	uxth	r3, r3
 8007338:	3b01      	subs	r3, #1
 800733a:	b29a      	uxth	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007342:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007344:	3b01      	subs	r3, #1
 8007346:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007348:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800734a:	2b00      	cmp	r3, #0
 800734c:	d19f      	bne.n	800728e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800734e:	e7ff      	b.n	8007350 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007350:	bf00      	nop
 8007352:	3744      	adds	r7, #68	; 0x44
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b088      	sub	sp, #32
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	60bb      	str	r3, [r7, #8]
   return(result);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007378:	61fb      	str	r3, [r7, #28]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	61bb      	str	r3, [r7, #24]
 8007384:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	6979      	ldr	r1, [r7, #20]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	613b      	str	r3, [r7, #16]
   return(result);
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e6      	bne.n	8007364 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2220      	movs	r2, #32
 800739a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7fe fd79 	bl	8005e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073aa:	bf00      	nop
 80073ac:	3720      	adds	r7, #32
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b085      	sub	sp, #20
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_UARTEx_DisableFifoMode+0x16>
 8007400:	2302      	movs	r3, #2
 8007402:	e027      	b.n	8007454 <HAL_UARTEx_DisableFifoMode+0x66>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2224      	movs	r2, #36	; 0x24
 8007410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 0201 	bic.w	r2, r2, #1
 800742a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007432:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2220      	movs	r2, #32
 8007446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007470:	2b01      	cmp	r3, #1
 8007472:	d101      	bne.n	8007478 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007474:	2302      	movs	r3, #2
 8007476:	e02d      	b.n	80074d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2224      	movs	r2, #36	; 0x24
 8007484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 0201 	bic.w	r2, r2, #1
 800749e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f84f 	bl	8007558 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e02d      	b.n	8007550 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2224      	movs	r2, #36	; 0x24
 8007500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 0201 	bic.w	r2, r2, #1
 800751a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f811 	bl	8007558 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007564:	2b00      	cmp	r3, #0
 8007566:	d108      	bne.n	800757a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007578:	e031      	b.n	80075de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800757a:	2310      	movs	r3, #16
 800757c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800757e:	2310      	movs	r3, #16
 8007580:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	0e5b      	lsrs	r3, r3, #25
 800758a:	b2db      	uxtb	r3, r3
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	0f5b      	lsrs	r3, r3, #29
 800759a:	b2db      	uxtb	r3, r3
 800759c:	f003 0307 	and.w	r3, r3, #7
 80075a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	7b3a      	ldrb	r2, [r7, #12]
 80075a6:	4911      	ldr	r1, [pc, #68]	; (80075ec <UARTEx_SetNbDataToProcess+0x94>)
 80075a8:	5c8a      	ldrb	r2, [r1, r2]
 80075aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075ae:	7b3a      	ldrb	r2, [r7, #12]
 80075b0:	490f      	ldr	r1, [pc, #60]	; (80075f0 <UARTEx_SetNbDataToProcess+0x98>)
 80075b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	7b7a      	ldrb	r2, [r7, #13]
 80075c4:	4909      	ldr	r1, [pc, #36]	; (80075ec <UARTEx_SetNbDataToProcess+0x94>)
 80075c6:	5c8a      	ldrb	r2, [r1, r2]
 80075c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075cc:	7b7a      	ldrb	r2, [r7, #13]
 80075ce:	4908      	ldr	r1, [pc, #32]	; (80075f0 <UARTEx_SetNbDataToProcess+0x98>)
 80075d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80075de:	bf00      	nop
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	08008164 	.word	0x08008164
 80075f0:	0800816c 	.word	0x0800816c

080075f4 <siprintf>:
 80075f4:	b40e      	push	{r1, r2, r3}
 80075f6:	b500      	push	{lr}
 80075f8:	b09c      	sub	sp, #112	; 0x70
 80075fa:	ab1d      	add	r3, sp, #116	; 0x74
 80075fc:	9002      	str	r0, [sp, #8]
 80075fe:	9006      	str	r0, [sp, #24]
 8007600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007604:	4809      	ldr	r0, [pc, #36]	; (800762c <siprintf+0x38>)
 8007606:	9107      	str	r1, [sp, #28]
 8007608:	9104      	str	r1, [sp, #16]
 800760a:	4909      	ldr	r1, [pc, #36]	; (8007630 <siprintf+0x3c>)
 800760c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007610:	9105      	str	r1, [sp, #20]
 8007612:	6800      	ldr	r0, [r0, #0]
 8007614:	9301      	str	r3, [sp, #4]
 8007616:	a902      	add	r1, sp, #8
 8007618:	f000 f9a0 	bl	800795c <_svfiprintf_r>
 800761c:	9b02      	ldr	r3, [sp, #8]
 800761e:	2200      	movs	r2, #0
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	b01c      	add	sp, #112	; 0x70
 8007624:	f85d eb04 	ldr.w	lr, [sp], #4
 8007628:	b003      	add	sp, #12
 800762a:	4770      	bx	lr
 800762c:	24000060 	.word	0x24000060
 8007630:	ffff0208 	.word	0xffff0208

08007634 <memset>:
 8007634:	4402      	add	r2, r0
 8007636:	4603      	mov	r3, r0
 8007638:	4293      	cmp	r3, r2
 800763a:	d100      	bne.n	800763e <memset+0xa>
 800763c:	4770      	bx	lr
 800763e:	f803 1b01 	strb.w	r1, [r3], #1
 8007642:	e7f9      	b.n	8007638 <memset+0x4>

08007644 <__errno>:
 8007644:	4b01      	ldr	r3, [pc, #4]	; (800764c <__errno+0x8>)
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	24000060 	.word	0x24000060

08007650 <__libc_init_array>:
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	4d0d      	ldr	r5, [pc, #52]	; (8007688 <__libc_init_array+0x38>)
 8007654:	4c0d      	ldr	r4, [pc, #52]	; (800768c <__libc_init_array+0x3c>)
 8007656:	1b64      	subs	r4, r4, r5
 8007658:	10a4      	asrs	r4, r4, #2
 800765a:	2600      	movs	r6, #0
 800765c:	42a6      	cmp	r6, r4
 800765e:	d109      	bne.n	8007674 <__libc_init_array+0x24>
 8007660:	4d0b      	ldr	r5, [pc, #44]	; (8007690 <__libc_init_array+0x40>)
 8007662:	4c0c      	ldr	r4, [pc, #48]	; (8007694 <__libc_init_array+0x44>)
 8007664:	f000 fc6a 	bl	8007f3c <_init>
 8007668:	1b64      	subs	r4, r4, r5
 800766a:	10a4      	asrs	r4, r4, #2
 800766c:	2600      	movs	r6, #0
 800766e:	42a6      	cmp	r6, r4
 8007670:	d105      	bne.n	800767e <__libc_init_array+0x2e>
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	f855 3b04 	ldr.w	r3, [r5], #4
 8007678:	4798      	blx	r3
 800767a:	3601      	adds	r6, #1
 800767c:	e7ee      	b.n	800765c <__libc_init_array+0xc>
 800767e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007682:	4798      	blx	r3
 8007684:	3601      	adds	r6, #1
 8007686:	e7f2      	b.n	800766e <__libc_init_array+0x1e>
 8007688:	080081b0 	.word	0x080081b0
 800768c:	080081b0 	.word	0x080081b0
 8007690:	080081b0 	.word	0x080081b0
 8007694:	080081b4 	.word	0x080081b4

08007698 <__retarget_lock_acquire_recursive>:
 8007698:	4770      	bx	lr

0800769a <__retarget_lock_release_recursive>:
 800769a:	4770      	bx	lr

0800769c <memcpy>:
 800769c:	440a      	add	r2, r1
 800769e:	4291      	cmp	r1, r2
 80076a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80076a4:	d100      	bne.n	80076a8 <memcpy+0xc>
 80076a6:	4770      	bx	lr
 80076a8:	b510      	push	{r4, lr}
 80076aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b2:	4291      	cmp	r1, r2
 80076b4:	d1f9      	bne.n	80076aa <memcpy+0xe>
 80076b6:	bd10      	pop	{r4, pc}

080076b8 <_free_r>:
 80076b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076ba:	2900      	cmp	r1, #0
 80076bc:	d044      	beq.n	8007748 <_free_r+0x90>
 80076be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076c2:	9001      	str	r0, [sp, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f1a1 0404 	sub.w	r4, r1, #4
 80076ca:	bfb8      	it	lt
 80076cc:	18e4      	addlt	r4, r4, r3
 80076ce:	f000 f8df 	bl	8007890 <__malloc_lock>
 80076d2:	4a1e      	ldr	r2, [pc, #120]	; (800774c <_free_r+0x94>)
 80076d4:	9801      	ldr	r0, [sp, #4]
 80076d6:	6813      	ldr	r3, [r2, #0]
 80076d8:	b933      	cbnz	r3, 80076e8 <_free_r+0x30>
 80076da:	6063      	str	r3, [r4, #4]
 80076dc:	6014      	str	r4, [r2, #0]
 80076de:	b003      	add	sp, #12
 80076e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076e4:	f000 b8da 	b.w	800789c <__malloc_unlock>
 80076e8:	42a3      	cmp	r3, r4
 80076ea:	d908      	bls.n	80076fe <_free_r+0x46>
 80076ec:	6825      	ldr	r5, [r4, #0]
 80076ee:	1961      	adds	r1, r4, r5
 80076f0:	428b      	cmp	r3, r1
 80076f2:	bf01      	itttt	eq
 80076f4:	6819      	ldreq	r1, [r3, #0]
 80076f6:	685b      	ldreq	r3, [r3, #4]
 80076f8:	1949      	addeq	r1, r1, r5
 80076fa:	6021      	streq	r1, [r4, #0]
 80076fc:	e7ed      	b.n	80076da <_free_r+0x22>
 80076fe:	461a      	mov	r2, r3
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	b10b      	cbz	r3, 8007708 <_free_r+0x50>
 8007704:	42a3      	cmp	r3, r4
 8007706:	d9fa      	bls.n	80076fe <_free_r+0x46>
 8007708:	6811      	ldr	r1, [r2, #0]
 800770a:	1855      	adds	r5, r2, r1
 800770c:	42a5      	cmp	r5, r4
 800770e:	d10b      	bne.n	8007728 <_free_r+0x70>
 8007710:	6824      	ldr	r4, [r4, #0]
 8007712:	4421      	add	r1, r4
 8007714:	1854      	adds	r4, r2, r1
 8007716:	42a3      	cmp	r3, r4
 8007718:	6011      	str	r1, [r2, #0]
 800771a:	d1e0      	bne.n	80076de <_free_r+0x26>
 800771c:	681c      	ldr	r4, [r3, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	6053      	str	r3, [r2, #4]
 8007722:	440c      	add	r4, r1
 8007724:	6014      	str	r4, [r2, #0]
 8007726:	e7da      	b.n	80076de <_free_r+0x26>
 8007728:	d902      	bls.n	8007730 <_free_r+0x78>
 800772a:	230c      	movs	r3, #12
 800772c:	6003      	str	r3, [r0, #0]
 800772e:	e7d6      	b.n	80076de <_free_r+0x26>
 8007730:	6825      	ldr	r5, [r4, #0]
 8007732:	1961      	adds	r1, r4, r5
 8007734:	428b      	cmp	r3, r1
 8007736:	bf04      	itt	eq
 8007738:	6819      	ldreq	r1, [r3, #0]
 800773a:	685b      	ldreq	r3, [r3, #4]
 800773c:	6063      	str	r3, [r4, #4]
 800773e:	bf04      	itt	eq
 8007740:	1949      	addeq	r1, r1, r5
 8007742:	6021      	streq	r1, [r4, #0]
 8007744:	6054      	str	r4, [r2, #4]
 8007746:	e7ca      	b.n	80076de <_free_r+0x26>
 8007748:	b003      	add	sp, #12
 800774a:	bd30      	pop	{r4, r5, pc}
 800774c:	240002c4 	.word	0x240002c4

08007750 <sbrk_aligned>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	4e0e      	ldr	r6, [pc, #56]	; (800778c <sbrk_aligned+0x3c>)
 8007754:	460c      	mov	r4, r1
 8007756:	6831      	ldr	r1, [r6, #0]
 8007758:	4605      	mov	r5, r0
 800775a:	b911      	cbnz	r1, 8007762 <sbrk_aligned+0x12>
 800775c:	f000 fba6 	bl	8007eac <_sbrk_r>
 8007760:	6030      	str	r0, [r6, #0]
 8007762:	4621      	mov	r1, r4
 8007764:	4628      	mov	r0, r5
 8007766:	f000 fba1 	bl	8007eac <_sbrk_r>
 800776a:	1c43      	adds	r3, r0, #1
 800776c:	d00a      	beq.n	8007784 <sbrk_aligned+0x34>
 800776e:	1cc4      	adds	r4, r0, #3
 8007770:	f024 0403 	bic.w	r4, r4, #3
 8007774:	42a0      	cmp	r0, r4
 8007776:	d007      	beq.n	8007788 <sbrk_aligned+0x38>
 8007778:	1a21      	subs	r1, r4, r0
 800777a:	4628      	mov	r0, r5
 800777c:	f000 fb96 	bl	8007eac <_sbrk_r>
 8007780:	3001      	adds	r0, #1
 8007782:	d101      	bne.n	8007788 <sbrk_aligned+0x38>
 8007784:	f04f 34ff 	mov.w	r4, #4294967295
 8007788:	4620      	mov	r0, r4
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	240002c8 	.word	0x240002c8

08007790 <_malloc_r>:
 8007790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007794:	1ccd      	adds	r5, r1, #3
 8007796:	f025 0503 	bic.w	r5, r5, #3
 800779a:	3508      	adds	r5, #8
 800779c:	2d0c      	cmp	r5, #12
 800779e:	bf38      	it	cc
 80077a0:	250c      	movcc	r5, #12
 80077a2:	2d00      	cmp	r5, #0
 80077a4:	4607      	mov	r7, r0
 80077a6:	db01      	blt.n	80077ac <_malloc_r+0x1c>
 80077a8:	42a9      	cmp	r1, r5
 80077aa:	d905      	bls.n	80077b8 <_malloc_r+0x28>
 80077ac:	230c      	movs	r3, #12
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	2600      	movs	r6, #0
 80077b2:	4630      	mov	r0, r6
 80077b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800788c <_malloc_r+0xfc>
 80077bc:	f000 f868 	bl	8007890 <__malloc_lock>
 80077c0:	f8d8 3000 	ldr.w	r3, [r8]
 80077c4:	461c      	mov	r4, r3
 80077c6:	bb5c      	cbnz	r4, 8007820 <_malloc_r+0x90>
 80077c8:	4629      	mov	r1, r5
 80077ca:	4638      	mov	r0, r7
 80077cc:	f7ff ffc0 	bl	8007750 <sbrk_aligned>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	4604      	mov	r4, r0
 80077d4:	d155      	bne.n	8007882 <_malloc_r+0xf2>
 80077d6:	f8d8 4000 	ldr.w	r4, [r8]
 80077da:	4626      	mov	r6, r4
 80077dc:	2e00      	cmp	r6, #0
 80077de:	d145      	bne.n	800786c <_malloc_r+0xdc>
 80077e0:	2c00      	cmp	r4, #0
 80077e2:	d048      	beq.n	8007876 <_malloc_r+0xe6>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	4631      	mov	r1, r6
 80077e8:	4638      	mov	r0, r7
 80077ea:	eb04 0903 	add.w	r9, r4, r3
 80077ee:	f000 fb5d 	bl	8007eac <_sbrk_r>
 80077f2:	4581      	cmp	r9, r0
 80077f4:	d13f      	bne.n	8007876 <_malloc_r+0xe6>
 80077f6:	6821      	ldr	r1, [r4, #0]
 80077f8:	1a6d      	subs	r5, r5, r1
 80077fa:	4629      	mov	r1, r5
 80077fc:	4638      	mov	r0, r7
 80077fe:	f7ff ffa7 	bl	8007750 <sbrk_aligned>
 8007802:	3001      	adds	r0, #1
 8007804:	d037      	beq.n	8007876 <_malloc_r+0xe6>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	442b      	add	r3, r5
 800780a:	6023      	str	r3, [r4, #0]
 800780c:	f8d8 3000 	ldr.w	r3, [r8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d038      	beq.n	8007886 <_malloc_r+0xf6>
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	42a2      	cmp	r2, r4
 8007818:	d12b      	bne.n	8007872 <_malloc_r+0xe2>
 800781a:	2200      	movs	r2, #0
 800781c:	605a      	str	r2, [r3, #4]
 800781e:	e00f      	b.n	8007840 <_malloc_r+0xb0>
 8007820:	6822      	ldr	r2, [r4, #0]
 8007822:	1b52      	subs	r2, r2, r5
 8007824:	d41f      	bmi.n	8007866 <_malloc_r+0xd6>
 8007826:	2a0b      	cmp	r2, #11
 8007828:	d917      	bls.n	800785a <_malloc_r+0xca>
 800782a:	1961      	adds	r1, r4, r5
 800782c:	42a3      	cmp	r3, r4
 800782e:	6025      	str	r5, [r4, #0]
 8007830:	bf18      	it	ne
 8007832:	6059      	strne	r1, [r3, #4]
 8007834:	6863      	ldr	r3, [r4, #4]
 8007836:	bf08      	it	eq
 8007838:	f8c8 1000 	streq.w	r1, [r8]
 800783c:	5162      	str	r2, [r4, r5]
 800783e:	604b      	str	r3, [r1, #4]
 8007840:	4638      	mov	r0, r7
 8007842:	f104 060b 	add.w	r6, r4, #11
 8007846:	f000 f829 	bl	800789c <__malloc_unlock>
 800784a:	f026 0607 	bic.w	r6, r6, #7
 800784e:	1d23      	adds	r3, r4, #4
 8007850:	1af2      	subs	r2, r6, r3
 8007852:	d0ae      	beq.n	80077b2 <_malloc_r+0x22>
 8007854:	1b9b      	subs	r3, r3, r6
 8007856:	50a3      	str	r3, [r4, r2]
 8007858:	e7ab      	b.n	80077b2 <_malloc_r+0x22>
 800785a:	42a3      	cmp	r3, r4
 800785c:	6862      	ldr	r2, [r4, #4]
 800785e:	d1dd      	bne.n	800781c <_malloc_r+0x8c>
 8007860:	f8c8 2000 	str.w	r2, [r8]
 8007864:	e7ec      	b.n	8007840 <_malloc_r+0xb0>
 8007866:	4623      	mov	r3, r4
 8007868:	6864      	ldr	r4, [r4, #4]
 800786a:	e7ac      	b.n	80077c6 <_malloc_r+0x36>
 800786c:	4634      	mov	r4, r6
 800786e:	6876      	ldr	r6, [r6, #4]
 8007870:	e7b4      	b.n	80077dc <_malloc_r+0x4c>
 8007872:	4613      	mov	r3, r2
 8007874:	e7cc      	b.n	8007810 <_malloc_r+0x80>
 8007876:	230c      	movs	r3, #12
 8007878:	603b      	str	r3, [r7, #0]
 800787a:	4638      	mov	r0, r7
 800787c:	f000 f80e 	bl	800789c <__malloc_unlock>
 8007880:	e797      	b.n	80077b2 <_malloc_r+0x22>
 8007882:	6025      	str	r5, [r4, #0]
 8007884:	e7dc      	b.n	8007840 <_malloc_r+0xb0>
 8007886:	605b      	str	r3, [r3, #4]
 8007888:	deff      	udf	#255	; 0xff
 800788a:	bf00      	nop
 800788c:	240002c4 	.word	0x240002c4

08007890 <__malloc_lock>:
 8007890:	4801      	ldr	r0, [pc, #4]	; (8007898 <__malloc_lock+0x8>)
 8007892:	f7ff bf01 	b.w	8007698 <__retarget_lock_acquire_recursive>
 8007896:	bf00      	nop
 8007898:	240002c0 	.word	0x240002c0

0800789c <__malloc_unlock>:
 800789c:	4801      	ldr	r0, [pc, #4]	; (80078a4 <__malloc_unlock+0x8>)
 800789e:	f7ff befc 	b.w	800769a <__retarget_lock_release_recursive>
 80078a2:	bf00      	nop
 80078a4:	240002c0 	.word	0x240002c0

080078a8 <__ssputs_r>:
 80078a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ac:	688e      	ldr	r6, [r1, #8]
 80078ae:	461f      	mov	r7, r3
 80078b0:	42be      	cmp	r6, r7
 80078b2:	680b      	ldr	r3, [r1, #0]
 80078b4:	4682      	mov	sl, r0
 80078b6:	460c      	mov	r4, r1
 80078b8:	4690      	mov	r8, r2
 80078ba:	d82c      	bhi.n	8007916 <__ssputs_r+0x6e>
 80078bc:	898a      	ldrh	r2, [r1, #12]
 80078be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078c2:	d026      	beq.n	8007912 <__ssputs_r+0x6a>
 80078c4:	6965      	ldr	r5, [r4, #20]
 80078c6:	6909      	ldr	r1, [r1, #16]
 80078c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078cc:	eba3 0901 	sub.w	r9, r3, r1
 80078d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078d4:	1c7b      	adds	r3, r7, #1
 80078d6:	444b      	add	r3, r9
 80078d8:	106d      	asrs	r5, r5, #1
 80078da:	429d      	cmp	r5, r3
 80078dc:	bf38      	it	cc
 80078de:	461d      	movcc	r5, r3
 80078e0:	0553      	lsls	r3, r2, #21
 80078e2:	d527      	bpl.n	8007934 <__ssputs_r+0x8c>
 80078e4:	4629      	mov	r1, r5
 80078e6:	f7ff ff53 	bl	8007790 <_malloc_r>
 80078ea:	4606      	mov	r6, r0
 80078ec:	b360      	cbz	r0, 8007948 <__ssputs_r+0xa0>
 80078ee:	6921      	ldr	r1, [r4, #16]
 80078f0:	464a      	mov	r2, r9
 80078f2:	f7ff fed3 	bl	800769c <memcpy>
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007900:	81a3      	strh	r3, [r4, #12]
 8007902:	6126      	str	r6, [r4, #16]
 8007904:	6165      	str	r5, [r4, #20]
 8007906:	444e      	add	r6, r9
 8007908:	eba5 0509 	sub.w	r5, r5, r9
 800790c:	6026      	str	r6, [r4, #0]
 800790e:	60a5      	str	r5, [r4, #8]
 8007910:	463e      	mov	r6, r7
 8007912:	42be      	cmp	r6, r7
 8007914:	d900      	bls.n	8007918 <__ssputs_r+0x70>
 8007916:	463e      	mov	r6, r7
 8007918:	6820      	ldr	r0, [r4, #0]
 800791a:	4632      	mov	r2, r6
 800791c:	4641      	mov	r1, r8
 800791e:	f000 faab 	bl	8007e78 <memmove>
 8007922:	68a3      	ldr	r3, [r4, #8]
 8007924:	1b9b      	subs	r3, r3, r6
 8007926:	60a3      	str	r3, [r4, #8]
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	4433      	add	r3, r6
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	2000      	movs	r0, #0
 8007930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007934:	462a      	mov	r2, r5
 8007936:	f000 fac9 	bl	8007ecc <_realloc_r>
 800793a:	4606      	mov	r6, r0
 800793c:	2800      	cmp	r0, #0
 800793e:	d1e0      	bne.n	8007902 <__ssputs_r+0x5a>
 8007940:	6921      	ldr	r1, [r4, #16]
 8007942:	4650      	mov	r0, sl
 8007944:	f7ff feb8 	bl	80076b8 <_free_r>
 8007948:	230c      	movs	r3, #12
 800794a:	f8ca 3000 	str.w	r3, [sl]
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007954:	81a3      	strh	r3, [r4, #12]
 8007956:	f04f 30ff 	mov.w	r0, #4294967295
 800795a:	e7e9      	b.n	8007930 <__ssputs_r+0x88>

0800795c <_svfiprintf_r>:
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	4698      	mov	r8, r3
 8007962:	898b      	ldrh	r3, [r1, #12]
 8007964:	061b      	lsls	r3, r3, #24
 8007966:	b09d      	sub	sp, #116	; 0x74
 8007968:	4607      	mov	r7, r0
 800796a:	460d      	mov	r5, r1
 800796c:	4614      	mov	r4, r2
 800796e:	d50e      	bpl.n	800798e <_svfiprintf_r+0x32>
 8007970:	690b      	ldr	r3, [r1, #16]
 8007972:	b963      	cbnz	r3, 800798e <_svfiprintf_r+0x32>
 8007974:	2140      	movs	r1, #64	; 0x40
 8007976:	f7ff ff0b 	bl	8007790 <_malloc_r>
 800797a:	6028      	str	r0, [r5, #0]
 800797c:	6128      	str	r0, [r5, #16]
 800797e:	b920      	cbnz	r0, 800798a <_svfiprintf_r+0x2e>
 8007980:	230c      	movs	r3, #12
 8007982:	603b      	str	r3, [r7, #0]
 8007984:	f04f 30ff 	mov.w	r0, #4294967295
 8007988:	e0d0      	b.n	8007b2c <_svfiprintf_r+0x1d0>
 800798a:	2340      	movs	r3, #64	; 0x40
 800798c:	616b      	str	r3, [r5, #20]
 800798e:	2300      	movs	r3, #0
 8007990:	9309      	str	r3, [sp, #36]	; 0x24
 8007992:	2320      	movs	r3, #32
 8007994:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007998:	f8cd 800c 	str.w	r8, [sp, #12]
 800799c:	2330      	movs	r3, #48	; 0x30
 800799e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007b44 <_svfiprintf_r+0x1e8>
 80079a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079a6:	f04f 0901 	mov.w	r9, #1
 80079aa:	4623      	mov	r3, r4
 80079ac:	469a      	mov	sl, r3
 80079ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b2:	b10a      	cbz	r2, 80079b8 <_svfiprintf_r+0x5c>
 80079b4:	2a25      	cmp	r2, #37	; 0x25
 80079b6:	d1f9      	bne.n	80079ac <_svfiprintf_r+0x50>
 80079b8:	ebba 0b04 	subs.w	fp, sl, r4
 80079bc:	d00b      	beq.n	80079d6 <_svfiprintf_r+0x7a>
 80079be:	465b      	mov	r3, fp
 80079c0:	4622      	mov	r2, r4
 80079c2:	4629      	mov	r1, r5
 80079c4:	4638      	mov	r0, r7
 80079c6:	f7ff ff6f 	bl	80078a8 <__ssputs_r>
 80079ca:	3001      	adds	r0, #1
 80079cc:	f000 80a9 	beq.w	8007b22 <_svfiprintf_r+0x1c6>
 80079d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d2:	445a      	add	r2, fp
 80079d4:	9209      	str	r2, [sp, #36]	; 0x24
 80079d6:	f89a 3000 	ldrb.w	r3, [sl]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 80a1 	beq.w	8007b22 <_svfiprintf_r+0x1c6>
 80079e0:	2300      	movs	r3, #0
 80079e2:	f04f 32ff 	mov.w	r2, #4294967295
 80079e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079ea:	f10a 0a01 	add.w	sl, sl, #1
 80079ee:	9304      	str	r3, [sp, #16]
 80079f0:	9307      	str	r3, [sp, #28]
 80079f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079f6:	931a      	str	r3, [sp, #104]	; 0x68
 80079f8:	4654      	mov	r4, sl
 80079fa:	2205      	movs	r2, #5
 80079fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a00:	4850      	ldr	r0, [pc, #320]	; (8007b44 <_svfiprintf_r+0x1e8>)
 8007a02:	f7f8 fc7d 	bl	8000300 <memchr>
 8007a06:	9a04      	ldr	r2, [sp, #16]
 8007a08:	b9d8      	cbnz	r0, 8007a42 <_svfiprintf_r+0xe6>
 8007a0a:	06d0      	lsls	r0, r2, #27
 8007a0c:	bf44      	itt	mi
 8007a0e:	2320      	movmi	r3, #32
 8007a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a14:	0711      	lsls	r1, r2, #28
 8007a16:	bf44      	itt	mi
 8007a18:	232b      	movmi	r3, #43	; 0x2b
 8007a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a22:	2b2a      	cmp	r3, #42	; 0x2a
 8007a24:	d015      	beq.n	8007a52 <_svfiprintf_r+0xf6>
 8007a26:	9a07      	ldr	r2, [sp, #28]
 8007a28:	4654      	mov	r4, sl
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	f04f 0c0a 	mov.w	ip, #10
 8007a30:	4621      	mov	r1, r4
 8007a32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a36:	3b30      	subs	r3, #48	; 0x30
 8007a38:	2b09      	cmp	r3, #9
 8007a3a:	d94d      	bls.n	8007ad8 <_svfiprintf_r+0x17c>
 8007a3c:	b1b0      	cbz	r0, 8007a6c <_svfiprintf_r+0x110>
 8007a3e:	9207      	str	r2, [sp, #28]
 8007a40:	e014      	b.n	8007a6c <_svfiprintf_r+0x110>
 8007a42:	eba0 0308 	sub.w	r3, r0, r8
 8007a46:	fa09 f303 	lsl.w	r3, r9, r3
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	9304      	str	r3, [sp, #16]
 8007a4e:	46a2      	mov	sl, r4
 8007a50:	e7d2      	b.n	80079f8 <_svfiprintf_r+0x9c>
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	1d19      	adds	r1, r3, #4
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	9103      	str	r1, [sp, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	bfbb      	ittet	lt
 8007a5e:	425b      	neglt	r3, r3
 8007a60:	f042 0202 	orrlt.w	r2, r2, #2
 8007a64:	9307      	strge	r3, [sp, #28]
 8007a66:	9307      	strlt	r3, [sp, #28]
 8007a68:	bfb8      	it	lt
 8007a6a:	9204      	strlt	r2, [sp, #16]
 8007a6c:	7823      	ldrb	r3, [r4, #0]
 8007a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a70:	d10c      	bne.n	8007a8c <_svfiprintf_r+0x130>
 8007a72:	7863      	ldrb	r3, [r4, #1]
 8007a74:	2b2a      	cmp	r3, #42	; 0x2a
 8007a76:	d134      	bne.n	8007ae2 <_svfiprintf_r+0x186>
 8007a78:	9b03      	ldr	r3, [sp, #12]
 8007a7a:	1d1a      	adds	r2, r3, #4
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	9203      	str	r2, [sp, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	bfb8      	it	lt
 8007a84:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a88:	3402      	adds	r4, #2
 8007a8a:	9305      	str	r3, [sp, #20]
 8007a8c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007b54 <_svfiprintf_r+0x1f8>
 8007a90:	7821      	ldrb	r1, [r4, #0]
 8007a92:	2203      	movs	r2, #3
 8007a94:	4650      	mov	r0, sl
 8007a96:	f7f8 fc33 	bl	8000300 <memchr>
 8007a9a:	b138      	cbz	r0, 8007aac <_svfiprintf_r+0x150>
 8007a9c:	9b04      	ldr	r3, [sp, #16]
 8007a9e:	eba0 000a 	sub.w	r0, r0, sl
 8007aa2:	2240      	movs	r2, #64	; 0x40
 8007aa4:	4082      	lsls	r2, r0
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	3401      	adds	r4, #1
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab0:	4825      	ldr	r0, [pc, #148]	; (8007b48 <_svfiprintf_r+0x1ec>)
 8007ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ab6:	2206      	movs	r2, #6
 8007ab8:	f7f8 fc22 	bl	8000300 <memchr>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d038      	beq.n	8007b32 <_svfiprintf_r+0x1d6>
 8007ac0:	4b22      	ldr	r3, [pc, #136]	; (8007b4c <_svfiprintf_r+0x1f0>)
 8007ac2:	bb1b      	cbnz	r3, 8007b0c <_svfiprintf_r+0x1b0>
 8007ac4:	9b03      	ldr	r3, [sp, #12]
 8007ac6:	3307      	adds	r3, #7
 8007ac8:	f023 0307 	bic.w	r3, r3, #7
 8007acc:	3308      	adds	r3, #8
 8007ace:	9303      	str	r3, [sp, #12]
 8007ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad2:	4433      	add	r3, r6
 8007ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad6:	e768      	b.n	80079aa <_svfiprintf_r+0x4e>
 8007ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007adc:	460c      	mov	r4, r1
 8007ade:	2001      	movs	r0, #1
 8007ae0:	e7a6      	b.n	8007a30 <_svfiprintf_r+0xd4>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	3401      	adds	r4, #1
 8007ae6:	9305      	str	r3, [sp, #20]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f04f 0c0a 	mov.w	ip, #10
 8007aee:	4620      	mov	r0, r4
 8007af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007af4:	3a30      	subs	r2, #48	; 0x30
 8007af6:	2a09      	cmp	r2, #9
 8007af8:	d903      	bls.n	8007b02 <_svfiprintf_r+0x1a6>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0c6      	beq.n	8007a8c <_svfiprintf_r+0x130>
 8007afe:	9105      	str	r1, [sp, #20]
 8007b00:	e7c4      	b.n	8007a8c <_svfiprintf_r+0x130>
 8007b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b06:	4604      	mov	r4, r0
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e7f0      	b.n	8007aee <_svfiprintf_r+0x192>
 8007b0c:	ab03      	add	r3, sp, #12
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	462a      	mov	r2, r5
 8007b12:	4b0f      	ldr	r3, [pc, #60]	; (8007b50 <_svfiprintf_r+0x1f4>)
 8007b14:	a904      	add	r1, sp, #16
 8007b16:	4638      	mov	r0, r7
 8007b18:	f3af 8000 	nop.w
 8007b1c:	1c42      	adds	r2, r0, #1
 8007b1e:	4606      	mov	r6, r0
 8007b20:	d1d6      	bne.n	8007ad0 <_svfiprintf_r+0x174>
 8007b22:	89ab      	ldrh	r3, [r5, #12]
 8007b24:	065b      	lsls	r3, r3, #25
 8007b26:	f53f af2d 	bmi.w	8007984 <_svfiprintf_r+0x28>
 8007b2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b2c:	b01d      	add	sp, #116	; 0x74
 8007b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b32:	ab03      	add	r3, sp, #12
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	462a      	mov	r2, r5
 8007b38:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <_svfiprintf_r+0x1f4>)
 8007b3a:	a904      	add	r1, sp, #16
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	f000 f879 	bl	8007c34 <_printf_i>
 8007b42:	e7eb      	b.n	8007b1c <_svfiprintf_r+0x1c0>
 8007b44:	08008174 	.word	0x08008174
 8007b48:	0800817e 	.word	0x0800817e
 8007b4c:	00000000 	.word	0x00000000
 8007b50:	080078a9 	.word	0x080078a9
 8007b54:	0800817a 	.word	0x0800817a

08007b58 <_printf_common>:
 8007b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b5c:	4616      	mov	r6, r2
 8007b5e:	4699      	mov	r9, r3
 8007b60:	688a      	ldr	r2, [r1, #8]
 8007b62:	690b      	ldr	r3, [r1, #16]
 8007b64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	bfb8      	it	lt
 8007b6c:	4613      	movlt	r3, r2
 8007b6e:	6033      	str	r3, [r6, #0]
 8007b70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b74:	4607      	mov	r7, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	b10a      	cbz	r2, 8007b7e <_printf_common+0x26>
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	6033      	str	r3, [r6, #0]
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	0699      	lsls	r1, r3, #26
 8007b82:	bf42      	ittt	mi
 8007b84:	6833      	ldrmi	r3, [r6, #0]
 8007b86:	3302      	addmi	r3, #2
 8007b88:	6033      	strmi	r3, [r6, #0]
 8007b8a:	6825      	ldr	r5, [r4, #0]
 8007b8c:	f015 0506 	ands.w	r5, r5, #6
 8007b90:	d106      	bne.n	8007ba0 <_printf_common+0x48>
 8007b92:	f104 0a19 	add.w	sl, r4, #25
 8007b96:	68e3      	ldr	r3, [r4, #12]
 8007b98:	6832      	ldr	r2, [r6, #0]
 8007b9a:	1a9b      	subs	r3, r3, r2
 8007b9c:	42ab      	cmp	r3, r5
 8007b9e:	dc26      	bgt.n	8007bee <_printf_common+0x96>
 8007ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ba4:	1e13      	subs	r3, r2, #0
 8007ba6:	6822      	ldr	r2, [r4, #0]
 8007ba8:	bf18      	it	ne
 8007baa:	2301      	movne	r3, #1
 8007bac:	0692      	lsls	r2, r2, #26
 8007bae:	d42b      	bmi.n	8007c08 <_printf_common+0xb0>
 8007bb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	47c0      	blx	r8
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d01e      	beq.n	8007bfc <_printf_common+0xa4>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	6922      	ldr	r2, [r4, #16]
 8007bc2:	f003 0306 	and.w	r3, r3, #6
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	bf02      	ittt	eq
 8007bca:	68e5      	ldreq	r5, [r4, #12]
 8007bcc:	6833      	ldreq	r3, [r6, #0]
 8007bce:	1aed      	subeq	r5, r5, r3
 8007bd0:	68a3      	ldr	r3, [r4, #8]
 8007bd2:	bf0c      	ite	eq
 8007bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bd8:	2500      	movne	r5, #0
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	bfc4      	itt	gt
 8007bde:	1a9b      	subgt	r3, r3, r2
 8007be0:	18ed      	addgt	r5, r5, r3
 8007be2:	2600      	movs	r6, #0
 8007be4:	341a      	adds	r4, #26
 8007be6:	42b5      	cmp	r5, r6
 8007be8:	d11a      	bne.n	8007c20 <_printf_common+0xc8>
 8007bea:	2000      	movs	r0, #0
 8007bec:	e008      	b.n	8007c00 <_printf_common+0xa8>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	4652      	mov	r2, sl
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	47c0      	blx	r8
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d103      	bne.n	8007c04 <_printf_common+0xac>
 8007bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c04:	3501      	adds	r5, #1
 8007c06:	e7c6      	b.n	8007b96 <_printf_common+0x3e>
 8007c08:	18e1      	adds	r1, r4, r3
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	2030      	movs	r0, #48	; 0x30
 8007c0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c12:	4422      	add	r2, r4
 8007c14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c1c:	3302      	adds	r3, #2
 8007c1e:	e7c7      	b.n	8007bb0 <_printf_common+0x58>
 8007c20:	2301      	movs	r3, #1
 8007c22:	4622      	mov	r2, r4
 8007c24:	4649      	mov	r1, r9
 8007c26:	4638      	mov	r0, r7
 8007c28:	47c0      	blx	r8
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d0e6      	beq.n	8007bfc <_printf_common+0xa4>
 8007c2e:	3601      	adds	r6, #1
 8007c30:	e7d9      	b.n	8007be6 <_printf_common+0x8e>
	...

08007c34 <_printf_i>:
 8007c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	7e0f      	ldrb	r7, [r1, #24]
 8007c3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c3c:	2f78      	cmp	r7, #120	; 0x78
 8007c3e:	4691      	mov	r9, r2
 8007c40:	4680      	mov	r8, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	469a      	mov	sl, r3
 8007c46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c4a:	d807      	bhi.n	8007c5c <_printf_i+0x28>
 8007c4c:	2f62      	cmp	r7, #98	; 0x62
 8007c4e:	d80a      	bhi.n	8007c66 <_printf_i+0x32>
 8007c50:	2f00      	cmp	r7, #0
 8007c52:	f000 80d4 	beq.w	8007dfe <_printf_i+0x1ca>
 8007c56:	2f58      	cmp	r7, #88	; 0x58
 8007c58:	f000 80c0 	beq.w	8007ddc <_printf_i+0x1a8>
 8007c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c64:	e03a      	b.n	8007cdc <_printf_i+0xa8>
 8007c66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c6a:	2b15      	cmp	r3, #21
 8007c6c:	d8f6      	bhi.n	8007c5c <_printf_i+0x28>
 8007c6e:	a101      	add	r1, pc, #4	; (adr r1, 8007c74 <_printf_i+0x40>)
 8007c70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c74:	08007ccd 	.word	0x08007ccd
 8007c78:	08007ce1 	.word	0x08007ce1
 8007c7c:	08007c5d 	.word	0x08007c5d
 8007c80:	08007c5d 	.word	0x08007c5d
 8007c84:	08007c5d 	.word	0x08007c5d
 8007c88:	08007c5d 	.word	0x08007c5d
 8007c8c:	08007ce1 	.word	0x08007ce1
 8007c90:	08007c5d 	.word	0x08007c5d
 8007c94:	08007c5d 	.word	0x08007c5d
 8007c98:	08007c5d 	.word	0x08007c5d
 8007c9c:	08007c5d 	.word	0x08007c5d
 8007ca0:	08007de5 	.word	0x08007de5
 8007ca4:	08007d0d 	.word	0x08007d0d
 8007ca8:	08007d9f 	.word	0x08007d9f
 8007cac:	08007c5d 	.word	0x08007c5d
 8007cb0:	08007c5d 	.word	0x08007c5d
 8007cb4:	08007e07 	.word	0x08007e07
 8007cb8:	08007c5d 	.word	0x08007c5d
 8007cbc:	08007d0d 	.word	0x08007d0d
 8007cc0:	08007c5d 	.word	0x08007c5d
 8007cc4:	08007c5d 	.word	0x08007c5d
 8007cc8:	08007da7 	.word	0x08007da7
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	1d1a      	adds	r2, r3, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	602a      	str	r2, [r5, #0]
 8007cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e09f      	b.n	8007e20 <_printf_i+0x1ec>
 8007ce0:	6820      	ldr	r0, [r4, #0]
 8007ce2:	682b      	ldr	r3, [r5, #0]
 8007ce4:	0607      	lsls	r7, r0, #24
 8007ce6:	f103 0104 	add.w	r1, r3, #4
 8007cea:	6029      	str	r1, [r5, #0]
 8007cec:	d501      	bpl.n	8007cf2 <_printf_i+0xbe>
 8007cee:	681e      	ldr	r6, [r3, #0]
 8007cf0:	e003      	b.n	8007cfa <_printf_i+0xc6>
 8007cf2:	0646      	lsls	r6, r0, #25
 8007cf4:	d5fb      	bpl.n	8007cee <_printf_i+0xba>
 8007cf6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007cfa:	2e00      	cmp	r6, #0
 8007cfc:	da03      	bge.n	8007d06 <_printf_i+0xd2>
 8007cfe:	232d      	movs	r3, #45	; 0x2d
 8007d00:	4276      	negs	r6, r6
 8007d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d06:	485a      	ldr	r0, [pc, #360]	; (8007e70 <_printf_i+0x23c>)
 8007d08:	230a      	movs	r3, #10
 8007d0a:	e012      	b.n	8007d32 <_printf_i+0xfe>
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	6820      	ldr	r0, [r4, #0]
 8007d10:	1d19      	adds	r1, r3, #4
 8007d12:	6029      	str	r1, [r5, #0]
 8007d14:	0605      	lsls	r5, r0, #24
 8007d16:	d501      	bpl.n	8007d1c <_printf_i+0xe8>
 8007d18:	681e      	ldr	r6, [r3, #0]
 8007d1a:	e002      	b.n	8007d22 <_printf_i+0xee>
 8007d1c:	0641      	lsls	r1, r0, #25
 8007d1e:	d5fb      	bpl.n	8007d18 <_printf_i+0xe4>
 8007d20:	881e      	ldrh	r6, [r3, #0]
 8007d22:	4853      	ldr	r0, [pc, #332]	; (8007e70 <_printf_i+0x23c>)
 8007d24:	2f6f      	cmp	r7, #111	; 0x6f
 8007d26:	bf0c      	ite	eq
 8007d28:	2308      	moveq	r3, #8
 8007d2a:	230a      	movne	r3, #10
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d32:	6865      	ldr	r5, [r4, #4]
 8007d34:	60a5      	str	r5, [r4, #8]
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	bfa2      	ittt	ge
 8007d3a:	6821      	ldrge	r1, [r4, #0]
 8007d3c:	f021 0104 	bicge.w	r1, r1, #4
 8007d40:	6021      	strge	r1, [r4, #0]
 8007d42:	b90e      	cbnz	r6, 8007d48 <_printf_i+0x114>
 8007d44:	2d00      	cmp	r5, #0
 8007d46:	d04b      	beq.n	8007de0 <_printf_i+0x1ac>
 8007d48:	4615      	mov	r5, r2
 8007d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8007d52:	5dc7      	ldrb	r7, [r0, r7]
 8007d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d58:	4637      	mov	r7, r6
 8007d5a:	42bb      	cmp	r3, r7
 8007d5c:	460e      	mov	r6, r1
 8007d5e:	d9f4      	bls.n	8007d4a <_printf_i+0x116>
 8007d60:	2b08      	cmp	r3, #8
 8007d62:	d10b      	bne.n	8007d7c <_printf_i+0x148>
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	07de      	lsls	r6, r3, #31
 8007d68:	d508      	bpl.n	8007d7c <_printf_i+0x148>
 8007d6a:	6923      	ldr	r3, [r4, #16]
 8007d6c:	6861      	ldr	r1, [r4, #4]
 8007d6e:	4299      	cmp	r1, r3
 8007d70:	bfde      	ittt	le
 8007d72:	2330      	movle	r3, #48	; 0x30
 8007d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d7c:	1b52      	subs	r2, r2, r5
 8007d7e:	6122      	str	r2, [r4, #16]
 8007d80:	f8cd a000 	str.w	sl, [sp]
 8007d84:	464b      	mov	r3, r9
 8007d86:	aa03      	add	r2, sp, #12
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	f7ff fee4 	bl	8007b58 <_printf_common>
 8007d90:	3001      	adds	r0, #1
 8007d92:	d14a      	bne.n	8007e2a <_printf_i+0x1f6>
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295
 8007d98:	b004      	add	sp, #16
 8007d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	f043 0320 	orr.w	r3, r3, #32
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	4833      	ldr	r0, [pc, #204]	; (8007e74 <_printf_i+0x240>)
 8007da8:	2778      	movs	r7, #120	; 0x78
 8007daa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	6829      	ldr	r1, [r5, #0]
 8007db2:	061f      	lsls	r7, r3, #24
 8007db4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007db8:	d402      	bmi.n	8007dc0 <_printf_i+0x18c>
 8007dba:	065f      	lsls	r7, r3, #25
 8007dbc:	bf48      	it	mi
 8007dbe:	b2b6      	uxthmi	r6, r6
 8007dc0:	07df      	lsls	r7, r3, #31
 8007dc2:	bf48      	it	mi
 8007dc4:	f043 0320 	orrmi.w	r3, r3, #32
 8007dc8:	6029      	str	r1, [r5, #0]
 8007dca:	bf48      	it	mi
 8007dcc:	6023      	strmi	r3, [r4, #0]
 8007dce:	b91e      	cbnz	r6, 8007dd8 <_printf_i+0x1a4>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	f023 0320 	bic.w	r3, r3, #32
 8007dd6:	6023      	str	r3, [r4, #0]
 8007dd8:	2310      	movs	r3, #16
 8007dda:	e7a7      	b.n	8007d2c <_printf_i+0xf8>
 8007ddc:	4824      	ldr	r0, [pc, #144]	; (8007e70 <_printf_i+0x23c>)
 8007dde:	e7e4      	b.n	8007daa <_printf_i+0x176>
 8007de0:	4615      	mov	r5, r2
 8007de2:	e7bd      	b.n	8007d60 <_printf_i+0x12c>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	6826      	ldr	r6, [r4, #0]
 8007de8:	6961      	ldr	r1, [r4, #20]
 8007dea:	1d18      	adds	r0, r3, #4
 8007dec:	6028      	str	r0, [r5, #0]
 8007dee:	0635      	lsls	r5, r6, #24
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	d501      	bpl.n	8007df8 <_printf_i+0x1c4>
 8007df4:	6019      	str	r1, [r3, #0]
 8007df6:	e002      	b.n	8007dfe <_printf_i+0x1ca>
 8007df8:	0670      	lsls	r0, r6, #25
 8007dfa:	d5fb      	bpl.n	8007df4 <_printf_i+0x1c0>
 8007dfc:	8019      	strh	r1, [r3, #0]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	6123      	str	r3, [r4, #16]
 8007e02:	4615      	mov	r5, r2
 8007e04:	e7bc      	b.n	8007d80 <_printf_i+0x14c>
 8007e06:	682b      	ldr	r3, [r5, #0]
 8007e08:	1d1a      	adds	r2, r3, #4
 8007e0a:	602a      	str	r2, [r5, #0]
 8007e0c:	681d      	ldr	r5, [r3, #0]
 8007e0e:	6862      	ldr	r2, [r4, #4]
 8007e10:	2100      	movs	r1, #0
 8007e12:	4628      	mov	r0, r5
 8007e14:	f7f8 fa74 	bl	8000300 <memchr>
 8007e18:	b108      	cbz	r0, 8007e1e <_printf_i+0x1ea>
 8007e1a:	1b40      	subs	r0, r0, r5
 8007e1c:	6060      	str	r0, [r4, #4]
 8007e1e:	6863      	ldr	r3, [r4, #4]
 8007e20:	6123      	str	r3, [r4, #16]
 8007e22:	2300      	movs	r3, #0
 8007e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e28:	e7aa      	b.n	8007d80 <_printf_i+0x14c>
 8007e2a:	6923      	ldr	r3, [r4, #16]
 8007e2c:	462a      	mov	r2, r5
 8007e2e:	4649      	mov	r1, r9
 8007e30:	4640      	mov	r0, r8
 8007e32:	47d0      	blx	sl
 8007e34:	3001      	adds	r0, #1
 8007e36:	d0ad      	beq.n	8007d94 <_printf_i+0x160>
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	079b      	lsls	r3, r3, #30
 8007e3c:	d413      	bmi.n	8007e66 <_printf_i+0x232>
 8007e3e:	68e0      	ldr	r0, [r4, #12]
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	4298      	cmp	r0, r3
 8007e44:	bfb8      	it	lt
 8007e46:	4618      	movlt	r0, r3
 8007e48:	e7a6      	b.n	8007d98 <_printf_i+0x164>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4632      	mov	r2, r6
 8007e4e:	4649      	mov	r1, r9
 8007e50:	4640      	mov	r0, r8
 8007e52:	47d0      	blx	sl
 8007e54:	3001      	adds	r0, #1
 8007e56:	d09d      	beq.n	8007d94 <_printf_i+0x160>
 8007e58:	3501      	adds	r5, #1
 8007e5a:	68e3      	ldr	r3, [r4, #12]
 8007e5c:	9903      	ldr	r1, [sp, #12]
 8007e5e:	1a5b      	subs	r3, r3, r1
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	dcf2      	bgt.n	8007e4a <_printf_i+0x216>
 8007e64:	e7eb      	b.n	8007e3e <_printf_i+0x20a>
 8007e66:	2500      	movs	r5, #0
 8007e68:	f104 0619 	add.w	r6, r4, #25
 8007e6c:	e7f5      	b.n	8007e5a <_printf_i+0x226>
 8007e6e:	bf00      	nop
 8007e70:	08008185 	.word	0x08008185
 8007e74:	08008196 	.word	0x08008196

08007e78 <memmove>:
 8007e78:	4288      	cmp	r0, r1
 8007e7a:	b510      	push	{r4, lr}
 8007e7c:	eb01 0402 	add.w	r4, r1, r2
 8007e80:	d902      	bls.n	8007e88 <memmove+0x10>
 8007e82:	4284      	cmp	r4, r0
 8007e84:	4623      	mov	r3, r4
 8007e86:	d807      	bhi.n	8007e98 <memmove+0x20>
 8007e88:	1e43      	subs	r3, r0, #1
 8007e8a:	42a1      	cmp	r1, r4
 8007e8c:	d008      	beq.n	8007ea0 <memmove+0x28>
 8007e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e96:	e7f8      	b.n	8007e8a <memmove+0x12>
 8007e98:	4402      	add	r2, r0
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	428a      	cmp	r2, r1
 8007e9e:	d100      	bne.n	8007ea2 <memmove+0x2a>
 8007ea0:	bd10      	pop	{r4, pc}
 8007ea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007eaa:	e7f7      	b.n	8007e9c <memmove+0x24>

08007eac <_sbrk_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4d06      	ldr	r5, [pc, #24]	; (8007ec8 <_sbrk_r+0x1c>)
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	4608      	mov	r0, r1
 8007eb6:	602b      	str	r3, [r5, #0]
 8007eb8:	f7f9 f810 	bl	8000edc <_sbrk>
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	d102      	bne.n	8007ec6 <_sbrk_r+0x1a>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	b103      	cbz	r3, 8007ec6 <_sbrk_r+0x1a>
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	240002bc 	.word	0x240002bc

08007ecc <_realloc_r>:
 8007ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed0:	4680      	mov	r8, r0
 8007ed2:	4614      	mov	r4, r2
 8007ed4:	460e      	mov	r6, r1
 8007ed6:	b921      	cbnz	r1, 8007ee2 <_realloc_r+0x16>
 8007ed8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007edc:	4611      	mov	r1, r2
 8007ede:	f7ff bc57 	b.w	8007790 <_malloc_r>
 8007ee2:	b92a      	cbnz	r2, 8007ef0 <_realloc_r+0x24>
 8007ee4:	f7ff fbe8 	bl	80076b8 <_free_r>
 8007ee8:	4625      	mov	r5, r4
 8007eea:	4628      	mov	r0, r5
 8007eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef0:	f000 f81b 	bl	8007f2a <_malloc_usable_size_r>
 8007ef4:	4284      	cmp	r4, r0
 8007ef6:	4607      	mov	r7, r0
 8007ef8:	d802      	bhi.n	8007f00 <_realloc_r+0x34>
 8007efa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007efe:	d812      	bhi.n	8007f26 <_realloc_r+0x5a>
 8007f00:	4621      	mov	r1, r4
 8007f02:	4640      	mov	r0, r8
 8007f04:	f7ff fc44 	bl	8007790 <_malloc_r>
 8007f08:	4605      	mov	r5, r0
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d0ed      	beq.n	8007eea <_realloc_r+0x1e>
 8007f0e:	42bc      	cmp	r4, r7
 8007f10:	4622      	mov	r2, r4
 8007f12:	4631      	mov	r1, r6
 8007f14:	bf28      	it	cs
 8007f16:	463a      	movcs	r2, r7
 8007f18:	f7ff fbc0 	bl	800769c <memcpy>
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4640      	mov	r0, r8
 8007f20:	f7ff fbca 	bl	80076b8 <_free_r>
 8007f24:	e7e1      	b.n	8007eea <_realloc_r+0x1e>
 8007f26:	4635      	mov	r5, r6
 8007f28:	e7df      	b.n	8007eea <_realloc_r+0x1e>

08007f2a <_malloc_usable_size_r>:
 8007f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f2e:	1f18      	subs	r0, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	bfbc      	itt	lt
 8007f34:	580b      	ldrlt	r3, [r1, r0]
 8007f36:	18c0      	addlt	r0, r0, r3
 8007f38:	4770      	bx	lr
	...

08007f3c <_init>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	bf00      	nop
 8007f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f42:	bc08      	pop	{r3}
 8007f44:	469e      	mov	lr, r3
 8007f46:	4770      	bx	lr

08007f48 <_fini>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	bf00      	nop
 8007f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4e:	bc08      	pop	{r3}
 8007f50:	469e      	mov	lr, r3
 8007f52:	4770      	bx	lr
