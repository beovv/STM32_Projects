
F411_i2c_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004150  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  080042f0  080042f0  000142f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004574  08004574  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08004574  08004574  00014574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800457c  0800457c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800457c  0800457c  0001457c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004580  08004580  00014580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08004584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200000b4  08004638  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08004638  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d21  00000000  00000000  00020127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000168e  00000000  00000000  00029e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000900  00000000  00000000  0002b4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000070f  00000000  00000000  0002bdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b7d  00000000  00000000  0002c4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000be00  00000000  00000000  00042064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088000  00000000  00000000  0004de64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a70  00000000  00000000  000d5e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d88d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042d8 	.word	0x080042d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	080042d8 	.word	0x080042d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8000592:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint8_t Buf20[20]   = {0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x1C};
 8000594:	4b61      	ldr	r3, [pc, #388]	; (800071c <main+0x190>)
 8000596:	f507 7408 	add.w	r4, r7, #544	; 0x220
 800059a:	461d      	mov	r5, r3
 800059c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a0:	682b      	ldr	r3, [r5, #0]
 80005a2:	6023      	str	r3, [r4, #0]
	uint8_t Init10[20]  = {0x30,0x03,0x43,0x40,0x40,0x11,0x06,0x00,0x01,0xB1,0x41,0x22,0xA9,0x41,0x22,0xFF,0xFF,0x00,0x30,0x00};
 80005a4:	4b5e      	ldr	r3, [pc, #376]	; (8000720 <main+0x194>)
 80005a6:	f507 7403 	add.w	r4, r7, #524	; 0x20c
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	682b      	ldr	r3, [r5, #0]
 80005b2:	6023      	str	r3, [r4, #0]
	uint8_t Init11[20]  = {0x30,0x03,0x43,0x40,0x40,0x11,0x06,0x01,0x01,0xB1,0x41,0x22,0xA9,0x41,0x22,0xFF,0xFF,0x00,0x30,0x00};
 80005b4:	4b5b      	ldr	r3, [pc, #364]	; (8000724 <main+0x198>)
 80005b6:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 80005ba:	461d      	mov	r5, r3
 80005bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c0:	682b      	ldr	r3, [r5, #0]
 80005c2:	6023      	str	r3, [r4, #0]
	uint8_t Init12[20]  = {0x30,0x03,0x43,0x40,0x40,0x11,0x06,0x02,0x01,0xB1,0x41,0x22,0xA9,0x41,0x22,0xFF,0xFF,0x00,0x30,0x00};
 80005c4:	4b58      	ldr	r3, [pc, #352]	; (8000728 <main+0x19c>)
 80005c6:	f507 74f2 	add.w	r4, r7, #484	; 0x1e4
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	682b      	ldr	r3, [r5, #0]
 80005d2:	6023      	str	r3, [r4, #0]
	char strs[20][20] = {"POWER_CTRL","AMP_DAC_CTRL","DAC_CTRL","VOL_LEFT_CTRL","VOL_RIGHT_CTRL",
 80005d4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80005d8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80005dc:	4a53      	ldr	r2, [pc, #332]	; (800072c <main+0x1a0>)
 80005de:	4618      	mov	r0, r3
 80005e0:	4611      	mov	r1, r2
 80005e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80005e6:	461a      	mov	r2, r3
 80005e8:	f003 fa26 	bl	8003a38 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fd1a 	bl	8001024 <HAL_Init>

  /* USER CODE BEGIN Init */
	uint8_t i = 0, ret;
 80005f0:	2300      	movs	r3, #0
 80005f2:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	uint8_t Buf1[1];
	uint8_t Buf2[1];
	uint8_t dB10[1];
	uint8_t dB11[1];
	uint8_t dB12[1];
	char log[55] = {0,};
 80005f6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80005fa:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	3304      	adds	r3, #4
 8000604:	2233      	movs	r2, #51	; 0x33
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f003 f9e1 	bl	80039d0 <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 fa47 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 fb33 	bl	8000c7c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000616:	f000 faab 	bl	8000b70 <MX_I2C1_Init>
  MX_I2C2_Init();
 800061a:	f000 fad7 	bl	8000bcc <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800061e:	f000 fb03 	bl	8000c28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(50);
 8000622:	2032      	movs	r0, #50	; 0x32
 8000624:	f000 fd70 	bl	8001108 <HAL_Delay>
  HAL_UART_Transmit(&huart1, StartMSG1, sizeof(StartMSG1), 10000);
 8000628:	f242 7310 	movw	r3, #10000	; 0x2710
 800062c:	221f      	movs	r2, #31
 800062e:	4940      	ldr	r1, [pc, #256]	; (8000730 <main+0x1a4>)
 8000630:	4840      	ldr	r0, [pc, #256]	; (8000734 <main+0x1a8>)
 8000632:	f002 fdf1 	bl	8003218 <HAL_UART_Transmit>
  for(i=16; i<19; i++)
 8000636:	2310      	movs	r3, #16
 8000638:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 800063c:	e023      	b.n	8000686 <main+0xfa>
  {
     ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 800063e:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000642:	b29b      	uxth	r3, r3
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	b299      	uxth	r1, r3
 8000648:	2305      	movs	r3, #5
 800064a:	2203      	movs	r2, #3
 800064c:	483a      	ldr	r0, [pc, #232]	; (8000738 <main+0x1ac>)
 800064e:	f001 fc59 	bl	8001f04 <HAL_I2C_IsDeviceReady>
 8000652:	4603      	mov	r3, r0
 8000654:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
      //if (ret != HAL_OK) // No ACK Received At That Address
      //{
      //    HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
      //}
      //else if(ret == HAL_OK)
       if (ret == HAL_OK)
 8000658:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 800065c:	2b00      	cmp	r3, #0
 800065e:	d10d      	bne.n	800067c <main+0xf0>
     {
    	  sprintf(buf, "0x%X \r\n", i);
 8000660:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000664:	461a      	mov	r2, r3
 8000666:	4935      	ldr	r1, [pc, #212]	; (800073c <main+0x1b0>)
 8000668:	4835      	ldr	r0, [pc, #212]	; (8000740 <main+0x1b4>)
 800066a:	f003 f991 	bl	8003990 <siprintf>
          HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 10000);
 800066e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000672:	2208      	movs	r2, #8
 8000674:	4932      	ldr	r1, [pc, #200]	; (8000740 <main+0x1b4>)
 8000676:	482f      	ldr	r0, [pc, #188]	; (8000734 <main+0x1a8>)
 8000678:	f002 fdce 	bl	8003218 <HAL_UART_Transmit>
  for(i=16; i<19; i++)
 800067c:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000680:	3301      	adds	r3, #1
 8000682:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 8000686:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800068a:	2b12      	cmp	r3, #18
 800068c:	d9d7      	bls.n	800063e <main+0xb2>
      }
  };
  HAL_UART_Transmit(&huart1, StartMSG2, sizeof(StartMSG2), 10000);
 800068e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000692:	221f      	movs	r2, #31
 8000694:	492b      	ldr	r1, [pc, #172]	; (8000744 <main+0x1b8>)
 8000696:	4827      	ldr	r0, [pc, #156]	; (8000734 <main+0x1a8>)
 8000698:	f002 fdbe 	bl	8003218 <HAL_UART_Transmit>
  HAL_Delay(50);
 800069c:	2032      	movs	r0, #50	; 0x32
 800069e:	f000 fd33 	bl	8001108 <HAL_Delay>
  for(i=16; i<19; i++)
 80006a2:	2310      	movs	r3, #16
 80006a4:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 80006a8:	e023      	b.n	80006f2 <main+0x166>
  {
     ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 80006aa:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	b299      	uxth	r1, r3
 80006b4:	2305      	movs	r3, #5
 80006b6:	2203      	movs	r2, #3
 80006b8:	4823      	ldr	r0, [pc, #140]	; (8000748 <main+0x1bc>)
 80006ba:	f001 fc23 	bl	8001f04 <HAL_I2C_IsDeviceReady>
 80006be:	4603      	mov	r3, r0
 80006c0:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
      //if (ret != HAL_OK) // No ACK Received At That Address
      //{
      //    HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
      //}
      //else if(ret == HAL_OK)
       if (ret == HAL_OK)
 80006c4:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10d      	bne.n	80006e8 <main+0x15c>
     {
    	  sprintf(buf, "0x%X \r\n", i);
 80006cc:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80006d0:	461a      	mov	r2, r3
 80006d2:	491a      	ldr	r1, [pc, #104]	; (800073c <main+0x1b0>)
 80006d4:	481a      	ldr	r0, [pc, #104]	; (8000740 <main+0x1b4>)
 80006d6:	f003 f95b 	bl	8003990 <siprintf>
          HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), 10000);
 80006da:	f242 7310 	movw	r3, #10000	; 0x2710
 80006de:	2208      	movs	r2, #8
 80006e0:	4917      	ldr	r1, [pc, #92]	; (8000740 <main+0x1b4>)
 80006e2:	4814      	ldr	r0, [pc, #80]	; (8000734 <main+0x1a8>)
 80006e4:	f002 fd98 	bl	8003218 <HAL_UART_Transmit>
  for(i=16; i<19; i++)
 80006e8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80006ec:	3301      	adds	r3, #1
 80006ee:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 80006f2:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80006f6:	2b12      	cmp	r3, #18
 80006f8:	d9d7      	bls.n	80006aa <main+0x11e>
      }
  };
  HAL_Delay(50);
 80006fa:	2032      	movs	r0, #50	; 0x32
 80006fc:	f000 fd04 	bl	8001108 <HAL_Delay>
  HAL_UART_Transmit(&huart1, NewLine, sizeof(NewLine), 10000);
 8000700:	f242 7310 	movw	r3, #10000	; 0x2710
 8000704:	2218      	movs	r2, #24
 8000706:	4911      	ldr	r1, [pc, #68]	; (800074c <main+0x1c0>)
 8000708:	480a      	ldr	r0, [pc, #40]	; (8000734 <main+0x1a8>)
 800070a:	f002 fd85 	bl	8003218 <HAL_UART_Transmit>
  HAL_Delay(100);
 800070e:	2064      	movs	r0, #100	; 0x64
 8000710:	f000 fcfa 	bl	8001108 <HAL_Delay>
  for(i=0; i<20; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 800071a:	e1b0      	b.n	8000a7e <main+0x4f2>
 800071c:	08004348 	.word	0x08004348
 8000720:	0800435c 	.word	0x0800435c
 8000724:	08004370 	.word	0x08004370
 8000728:	08004384 	.word	0x08004384
 800072c:	08004398 	.word	0x08004398
 8000730:	20000018 	.word	0x20000018
 8000734:	20000178 	.word	0x20000178
 8000738:	200000d0 	.word	0x200000d0
 800073c:	080042f0 	.word	0x080042f0
 8000740:	200001c0 	.word	0x200001c0
 8000744:	20000038 	.word	0x20000038
 8000748:	20000124 	.word	0x20000124
 800074c:	20000000 	.word	0x20000000
  {
	  dB10[0] = Init10[i]; dB11[0] = Init11[i]; dB12[0] = Init12[i];
 8000750:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000754:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000758:	443b      	add	r3, r7
 800075a:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 800075e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000762:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800076c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000770:	443b      	add	r3, r7
 8000772:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8000776:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800077a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000784:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000788:	443b      	add	r3, r7
 800078a:	f813 2c54 	ldrb.w	r2, [r3, #-84]
 800078e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000792:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000796:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, (0x10 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, dB10, 1, 100);
 8000798:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800079c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80007a0:	443b      	add	r3, r7
 80007a2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	9302      	str	r3, [sp, #8]
 80007ac:	2301      	movs	r3, #1
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	2120      	movs	r1, #32
 80007ba:	48b4      	ldr	r0, [pc, #720]	; (8000a8c <main+0x500>)
 80007bc:	f001 f876 	bl	80018ac <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 80007c0:	2002      	movs	r0, #2
 80007c2:	f000 fca1 	bl	8001108 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, (0x10 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, Buf0, 1, 100);
 80007c6:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80007ca:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80007ce:	443b      	add	r3, r7
 80007d0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	9302      	str	r3, [sp, #8]
 80007da:	2301      	movs	r3, #1
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2301      	movs	r3, #1
 80007e6:	2120      	movs	r1, #32
 80007e8:	48a8      	ldr	r0, [pc, #672]	; (8000a8c <main+0x500>)
 80007ea:	f001 f959 	bl	8001aa0 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Write(&hi2c1, (0x11 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, dB11, 1, 100);
 80007ee:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80007f2:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80007f6:	443b      	add	r3, r7
 80007f8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	9302      	str	r3, [sp, #8]
 8000802:	2301      	movs	r3, #1
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	2301      	movs	r3, #1
 800080e:	2122      	movs	r1, #34	; 0x22
 8000810:	489e      	ldr	r0, [pc, #632]	; (8000a8c <main+0x500>)
 8000812:	f001 f84b 	bl	80018ac <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 8000816:	2002      	movs	r0, #2
 8000818:	f000 fc76 	bl	8001108 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, (0x11 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, Buf1, 1, 100);
 800081c:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000820:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000824:	443b      	add	r3, r7
 8000826:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800082a:	b29a      	uxth	r2, r3
 800082c:	2364      	movs	r3, #100	; 0x64
 800082e:	9302      	str	r3, [sp, #8]
 8000830:	2301      	movs	r3, #1
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2301      	movs	r3, #1
 800083c:	2122      	movs	r1, #34	; 0x22
 800083e:	4893      	ldr	r0, [pc, #588]	; (8000a8c <main+0x500>)
 8000840:	f001 f92e 	bl	8001aa0 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Write(&hi2c1, (0x12 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, dB12, 1, 100);
 8000844:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000848:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800084c:	443b      	add	r3, r7
 800084e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000852:	b29a      	uxth	r2, r3
 8000854:	2364      	movs	r3, #100	; 0x64
 8000856:	9302      	str	r3, [sp, #8]
 8000858:	2301      	movs	r3, #1
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2301      	movs	r3, #1
 8000864:	2124      	movs	r1, #36	; 0x24
 8000866:	4889      	ldr	r0, [pc, #548]	; (8000a8c <main+0x500>)
 8000868:	f001 f820 	bl	80018ac <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 800086c:	2002      	movs	r0, #2
 800086e:	f000 fc4b 	bl	8001108 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, (0x12 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, Buf2, 1, 100);
 8000872:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000876:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800087a:	443b      	add	r3, r7
 800087c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000880:	b29a      	uxth	r2, r3
 8000882:	2364      	movs	r3, #100	; 0x64
 8000884:	9302      	str	r3, [sp, #8]
 8000886:	2301      	movs	r3, #1
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	2124      	movs	r1, #36	; 0x24
 8000894:	487d      	ldr	r0, [pc, #500]	; (8000a8c <main+0x500>)
 8000896:	f001 f903 	bl	8001aa0 <HAL_I2C_Mem_Read>
	  sprintf(log, " 0x%X 0x%X 0x%X : %s I2C1 Adrs 0x%X\r\n", Buf0[0], Buf1[0], Buf2[0], strs[i], Buf20[i]);
 800089a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800089e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461d      	mov	r5, r3
 80008a6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80008aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461e      	mov	r6, r3
 80008b2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80008b6:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461c      	mov	r4, r3
 80008be:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 80008c2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	440b      	add	r3, r1
 80008d0:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 80008d4:	f502 720e 	add.w	r2, r2, #568	; 0x238
 80008d8:	443a      	add	r2, r7
 80008da:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80008de:	1d38      	adds	r0, r7, #4
 80008e0:	9202      	str	r2, [sp, #8]
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	9400      	str	r4, [sp, #0]
 80008e6:	4633      	mov	r3, r6
 80008e8:	462a      	mov	r2, r5
 80008ea:	4969      	ldr	r1, [pc, #420]	; (8000a90 <main+0x504>)
 80008ec:	f003 f850 	bl	8003990 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)log, strlen(log), 100);
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fc74 	bl	80001e0 <strlen>
 80008f8:	4603      	mov	r3, r0
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	1d39      	adds	r1, r7, #4
 80008fe:	2364      	movs	r3, #100	; 0x64
 8000900:	4864      	ldr	r0, [pc, #400]	; (8000a94 <main+0x508>)
 8000902:	f002 fc89 	bl	8003218 <HAL_UART_Transmit>
	  HAL_I2C_Mem_Write(&hi2c2, (0x10 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, dB10, 1, 100);
 8000906:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800090a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800090e:	443b      	add	r3, r7
 8000910:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000914:	b29a      	uxth	r2, r3
 8000916:	2364      	movs	r3, #100	; 0x64
 8000918:	9302      	str	r3, [sp, #8]
 800091a:	2301      	movs	r3, #1
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2301      	movs	r3, #1
 8000926:	2120      	movs	r1, #32
 8000928:	485b      	ldr	r0, [pc, #364]	; (8000a98 <main+0x50c>)
 800092a:	f000 ffbf 	bl	80018ac <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 800092e:	2002      	movs	r0, #2
 8000930:	f000 fbea 	bl	8001108 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c2, (0x10 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, Buf0, 1, 100);
 8000934:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000938:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800093c:	443b      	add	r3, r7
 800093e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000942:	b29a      	uxth	r2, r3
 8000944:	2364      	movs	r3, #100	; 0x64
 8000946:	9302      	str	r3, [sp, #8]
 8000948:	2301      	movs	r3, #1
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2301      	movs	r3, #1
 8000954:	2120      	movs	r1, #32
 8000956:	4850      	ldr	r0, [pc, #320]	; (8000a98 <main+0x50c>)
 8000958:	f001 f8a2 	bl	8001aa0 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Write(&hi2c2, (0x11 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, dB11, 1, 100);
 800095c:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000960:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000964:	443b      	add	r3, r7
 8000966:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800096a:	b29a      	uxth	r2, r3
 800096c:	2364      	movs	r3, #100	; 0x64
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	2301      	movs	r3, #1
 8000972:	9301      	str	r3, [sp, #4]
 8000974:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2301      	movs	r3, #1
 800097c:	2122      	movs	r1, #34	; 0x22
 800097e:	4846      	ldr	r0, [pc, #280]	; (8000a98 <main+0x50c>)
 8000980:	f000 ff94 	bl	80018ac <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 8000984:	2002      	movs	r0, #2
 8000986:	f000 fbbf 	bl	8001108 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c2, (0x11 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, Buf1, 1, 100);
 800098a:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800098e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000992:	443b      	add	r3, r7
 8000994:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	9302      	str	r3, [sp, #8]
 800099e:	2301      	movs	r3, #1
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	2122      	movs	r1, #34	; 0x22
 80009ac:	483a      	ldr	r0, [pc, #232]	; (8000a98 <main+0x50c>)
 80009ae:	f001 f877 	bl	8001aa0 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Write(&hi2c2, (0x12 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, dB12, 1, 100);
 80009b2:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80009b6:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80009ba:	443b      	add	r3, r7
 80009bc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	2364      	movs	r3, #100	; 0x64
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	2301      	movs	r3, #1
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2301      	movs	r3, #1
 80009d2:	2124      	movs	r1, #36	; 0x24
 80009d4:	4830      	ldr	r0, [pc, #192]	; (8000a98 <main+0x50c>)
 80009d6:	f000 ff69 	bl	80018ac <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 80009da:	2002      	movs	r0, #2
 80009dc:	f000 fb94 	bl	8001108 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c2, (0x12 << 1), Buf20[i], I2C_MEMADD_SIZE_8BIT, Buf2, 1, 100);
 80009e0:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80009e4:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80009e8:	443b      	add	r3, r7
 80009ea:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	2301      	movs	r3, #1
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2301      	movs	r3, #1
 8000a00:	2124      	movs	r1, #36	; 0x24
 8000a02:	4825      	ldr	r0, [pc, #148]	; (8000a98 <main+0x50c>)
 8000a04:	f001 f84c 	bl	8001aa0 <HAL_I2C_Mem_Read>
	  sprintf(log, " 0x%X 0x%X 0x%X : %s I2C2 Adrs 0x%X\r\n", Buf0[0], Buf1[0], Buf2[0], strs[i], Buf20[i]);
 8000a08:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000a0c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461d      	mov	r5, r3
 8000a14:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000a18:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461e      	mov	r6, r3
 8000a20:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000a24:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461c      	mov	r4, r3
 8000a2c:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 8000a30:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000a34:	4613      	mov	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4413      	add	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 8000a42:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8000a46:	443a      	add	r2, r7
 8000a48:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8000a4c:	1d38      	adds	r0, r7, #4
 8000a4e:	9202      	str	r2, [sp, #8]
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	9400      	str	r4, [sp, #0]
 8000a54:	4633      	mov	r3, r6
 8000a56:	462a      	mov	r2, r5
 8000a58:	4910      	ldr	r1, [pc, #64]	; (8000a9c <main+0x510>)
 8000a5a:	f002 ff99 	bl	8003990 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)log, strlen(log), 100);
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fbbd 	bl	80001e0 <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	1d39      	adds	r1, r7, #4
 8000a6c:	2364      	movs	r3, #100	; 0x64
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <main+0x508>)
 8000a70:	f002 fbd2 	bl	8003218 <HAL_UART_Transmit>
  for(i=0; i<20; i++)
 8000a74:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000a78:	3301      	adds	r3, #1
 8000a7a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 8000a7e:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000a82:	2b13      	cmp	r3, #19
 8000a84:	f67f ae64 	bls.w	8000750 <main+0x1c4>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <main+0x4fc>
 8000a8a:	bf00      	nop
 8000a8c:	200000d0 	.word	0x200000d0
 8000a90:	080042f8 	.word	0x080042f8
 8000a94:	20000178 	.word	0x20000178
 8000a98:	20000124 	.word	0x20000124
 8000a9c:	08004320 	.word	0x08004320

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b094      	sub	sp, #80	; 0x50
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0320 	add.w	r3, r7, #32
 8000aaa:	2230      	movs	r2, #48	; 0x30
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 ff8e 	bl	80039d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <SystemClock_Config+0xc8>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <SystemClock_Config+0xc8>)
 8000ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <SystemClock_Config+0xc8>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <SystemClock_Config+0xcc>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <SystemClock_Config+0xcc>)
 8000aea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <SystemClock_Config+0xcc>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000afc:	2301      	movs	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b06:	2302      	movs	r3, #2
 8000b08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b10:	2319      	movs	r3, #25
 8000b12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b14:	23a8      	movs	r3, #168	; 0xa8
 8000b16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0320 	add.w	r3, r7, #32
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 fecf 	bl	80028c8 <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b30:	f000 f8da 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 f931 	bl	8002db8 <HAL_RCC_ClockConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b5c:	f000 f8c4 	bl	8000ce8 <Error_Handler>
  }
}
 8000b60:	bf00      	nop
 8000b62:	3750      	adds	r7, #80	; 0x50
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40007000 	.word	0x40007000

08000b70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000b76:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <MX_I2C1_Init+0x54>)
 8000b78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000b7c:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <MX_I2C1_Init+0x58>)
 8000b7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000b8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <MX_I2C1_Init+0x50>)
 8000bae:	f000 fd39 	bl	8001624 <HAL_I2C_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bb8:	f000 f896 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200000d0 	.word	0x200000d0
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	000186a0 	.word	0x000186a0

08000bcc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_I2C2_Init+0x50>)
 8000bd2:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <MX_I2C2_Init+0x54>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_I2C2_Init+0x50>)
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <MX_I2C2_Init+0x58>)
 8000bda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_I2C2_Init+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_I2C2_Init+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_I2C2_Init+0x50>)
 8000bea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MX_I2C2_Init+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_I2C2_Init+0x50>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <MX_I2C2_Init+0x50>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_I2C2_Init+0x50>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_I2C2_Init+0x50>)
 8000c0a:	f000 fd0b 	bl	8001624 <HAL_I2C_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c14:	f000 f868 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000124 	.word	0x20000124
 8000c20:	40005800 	.word	0x40005800
 8000c24:	000186a0 	.word	0x000186a0

08000c28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <MX_USART1_UART_Init+0x50>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c60:	f002 fa8a 	bl	8003178 <HAL_UART_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c6a:	f000 f83d 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000178 	.word	0x20000178
 8000c78:	40011000 	.word	0x40011000

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_GPIO_Init+0x68>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <MX_GPIO_Init+0x68>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_GPIO_Init+0x68>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_GPIO_Init+0x68>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a0f      	ldr	r2, [pc, #60]	; (8000ce4 <MX_GPIO_Init+0x68>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <MX_GPIO_Init+0x68>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_GPIO_Init+0x68>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <MX_GPIO_Init+0x68>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_GPIO_Init+0x68>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>
	...

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08c      	sub	sp, #48	; 0x30
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a3a      	ldr	r2, [pc, #232]	; (8000e4c <HAL_I2C_MspInit+0x108>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12c      	bne.n	8000dc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
 8000d6a:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <HAL_I2C_MspInit+0x10c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a38      	ldr	r2, [pc, #224]	; (8000e50 <HAL_I2C_MspInit+0x10c>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <HAL_I2C_MspInit+0x10c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	61bb      	str	r3, [r7, #24]
 8000d80:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d82:	23c0      	movs	r3, #192	; 0xc0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d86:	2312      	movs	r3, #18
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d92:	2304      	movs	r3, #4
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	482d      	ldr	r0, [pc, #180]	; (8000e54 <HAL_I2C_MspInit+0x110>)
 8000d9e:	f000 fabd 	bl	800131c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <HAL_I2C_MspInit+0x10c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a29      	ldr	r2, [pc, #164]	; (8000e50 <HAL_I2C_MspInit+0x10c>)
 8000dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <HAL_I2C_MspInit+0x10c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dbe:	e041      	b.n	8000e44 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a24      	ldr	r2, [pc, #144]	; (8000e58 <HAL_I2C_MspInit+0x114>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d13c      	bne.n	8000e44 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <HAL_I2C_MspInit+0x10c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <HAL_I2C_MspInit+0x10c>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <HAL_I2C_MspInit+0x10c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dec:	2312      	movs	r3, #18
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4814      	ldr	r0, [pc, #80]	; (8000e54 <HAL_I2C_MspInit+0x110>)
 8000e04:	f000 fa8a 	bl	800131c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0c:	2312      	movs	r3, #18
 8000e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000e18:	2309      	movs	r3, #9
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	480c      	ldr	r0, [pc, #48]	; (8000e54 <HAL_I2C_MspInit+0x110>)
 8000e24:	f000 fa7a 	bl	800131c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_I2C_MspInit+0x10c>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_I2C_MspInit+0x10c>)
 8000e32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_I2C_MspInit+0x10c>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3730      	adds	r7, #48	; 0x30
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020400 	.word	0x40020400
 8000e58:	40005800 	.word	0x40005800

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <HAL_UART_MspInit+0x84>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d12c      	bne.n	8000ed8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <HAL_UART_MspInit+0x88>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a17      	ldr	r2, [pc, #92]	; (8000ee4 <HAL_UART_MspInit+0x88>)
 8000e88:	f043 0310 	orr.w	r3, r3, #16
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_UART_MspInit+0x88>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_UART_MspInit+0x88>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <HAL_UART_MspInit+0x88>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_UART_MspInit+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000eb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <HAL_UART_MspInit+0x8c>)
 8000ed4:	f000 fa22 	bl	800131c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40011000 	.word	0x40011000
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f38:	f000 f8c6 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f002 fd36 	bl	80039e0 <__errno>
 8000f74:	4603      	mov	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20020000 	.word	0x20020000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	200001c8 	.word	0x200001c8
 8000fa8:	20000318 	.word	0x20000318

08000fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd4:	f7ff ffea 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fda:	490d      	ldr	r1, [pc, #52]	; (8001010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff0:	4c0a      	ldr	r4, [pc, #40]	; (800101c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f002 fcf5 	bl	80039ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fac3 	bl	800058c <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001014:	08004584 	.word	0x08004584
  ldr r2, =_sbss
 8001018:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 800101c:	20000318 	.word	0x20000318

08001020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_Init+0x40>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_Init+0x40>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_Init+0x40>)
 8001046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f931 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	200f      	movs	r0, #15
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fe4c 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f93b 	bl	8001302 <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f000 f911 	bl	80012ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000058 	.word	0x20000058
 80010c0:	20000060 	.word	0x20000060
 80010c4:	2000005c 	.word	0x2000005c

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000060 	.word	0x20000060
 80010ec:	200001cc 	.word	0x200001cc

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	200001cc 	.word	0x200001cc

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffde 	bl	80010f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000060 	.word	0x20000060

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ff8e 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff47 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff5c 	bl	8001198 <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff8e 	bl	8001208 <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5d 	bl	80011b4 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffb0 	bl	8001270 <SysTick_Config>
 8001310:	4603      	mov	r3, r0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	e159      	b.n	80015ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001338:	2201      	movs	r2, #1
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	429a      	cmp	r2, r3
 8001352:	f040 8148 	bne.w	80015e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d005      	beq.n	800136e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800136a:	2b02      	cmp	r3, #2
 800136c:	d130      	bne.n	80013d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	68da      	ldr	r2, [r3, #12]
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a4:	2201      	movs	r2, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	091b      	lsrs	r3, r3, #4
 80013ba:	f003 0201 	and.w	r2, r3, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d017      	beq.n	800140c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d123      	bne.n	8001460 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	08da      	lsrs	r2, r3, #3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3208      	adds	r2, #8
 8001420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	691a      	ldr	r2, [r3, #16]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	69b9      	ldr	r1, [r7, #24]
 800145c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0203 	and.w	r2, r3, #3
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80a2 	beq.w	80015e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b57      	ldr	r3, [pc, #348]	; (8001604 <HAL_GPIO_Init+0x2e8>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a56      	ldr	r2, [pc, #344]	; (8001604 <HAL_GPIO_Init+0x2e8>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b54      	ldr	r3, [pc, #336]	; (8001604 <HAL_GPIO_Init+0x2e8>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014be:	4a52      	ldr	r2, [pc, #328]	; (8001608 <HAL_GPIO_Init+0x2ec>)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3302      	adds	r3, #2
 80014c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	220f      	movs	r2, #15
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a49      	ldr	r2, [pc, #292]	; (800160c <HAL_GPIO_Init+0x2f0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d019      	beq.n	800151e <HAL_GPIO_Init+0x202>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a48      	ldr	r2, [pc, #288]	; (8001610 <HAL_GPIO_Init+0x2f4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d013      	beq.n	800151a <HAL_GPIO_Init+0x1fe>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a47      	ldr	r2, [pc, #284]	; (8001614 <HAL_GPIO_Init+0x2f8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00d      	beq.n	8001516 <HAL_GPIO_Init+0x1fa>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a46      	ldr	r2, [pc, #280]	; (8001618 <HAL_GPIO_Init+0x2fc>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d007      	beq.n	8001512 <HAL_GPIO_Init+0x1f6>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a45      	ldr	r2, [pc, #276]	; (800161c <HAL_GPIO_Init+0x300>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d101      	bne.n	800150e <HAL_GPIO_Init+0x1f2>
 800150a:	2304      	movs	r3, #4
 800150c:	e008      	b.n	8001520 <HAL_GPIO_Init+0x204>
 800150e:	2307      	movs	r3, #7
 8001510:	e006      	b.n	8001520 <HAL_GPIO_Init+0x204>
 8001512:	2303      	movs	r3, #3
 8001514:	e004      	b.n	8001520 <HAL_GPIO_Init+0x204>
 8001516:	2302      	movs	r3, #2
 8001518:	e002      	b.n	8001520 <HAL_GPIO_Init+0x204>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_GPIO_Init+0x204>
 800151e:	2300      	movs	r3, #0
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	f002 0203 	and.w	r2, r2, #3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4093      	lsls	r3, r2
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001530:	4935      	ldr	r1, [pc, #212]	; (8001608 <HAL_GPIO_Init+0x2ec>)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800153e:	4b38      	ldr	r3, [pc, #224]	; (8001620 <HAL_GPIO_Init+0x304>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001562:	4a2f      	ldr	r2, [pc, #188]	; (8001620 <HAL_GPIO_Init+0x304>)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_GPIO_Init+0x304>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800158c:	4a24      	ldr	r2, [pc, #144]	; (8001620 <HAL_GPIO_Init+0x304>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <HAL_GPIO_Init+0x304>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015b6:	4a1a      	ldr	r2, [pc, #104]	; (8001620 <HAL_GPIO_Init+0x304>)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_GPIO_Init+0x304>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015e0:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <HAL_GPIO_Init+0x304>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3301      	adds	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	2b0f      	cmp	r3, #15
 80015f0:	f67f aea2 	bls.w	8001338 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	40013800 	.word	0x40013800
 800160c:	40020000 	.word	0x40020000
 8001610:	40020400 	.word	0x40020400
 8001614:	40020800 	.word	0x40020800
 8001618:	40020c00 	.word	0x40020c00
 800161c:	40021000 	.word	0x40021000
 8001620:	40013c00 	.word	0x40013c00

08001624 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e12b      	b.n	800188e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d106      	bne.n	8001650 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fb7a 	bl	8000d44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2224      	movs	r2, #36	; 0x24
 8001654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001676:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001686:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001688:	f001 fd4e 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 800168c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4a81      	ldr	r2, [pc, #516]	; (8001898 <HAL_I2C_Init+0x274>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d807      	bhi.n	80016a8 <HAL_I2C_Init+0x84>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4a80      	ldr	r2, [pc, #512]	; (800189c <HAL_I2C_Init+0x278>)
 800169c:	4293      	cmp	r3, r2
 800169e:	bf94      	ite	ls
 80016a0:	2301      	movls	r3, #1
 80016a2:	2300      	movhi	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	e006      	b.n	80016b6 <HAL_I2C_Init+0x92>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4a7d      	ldr	r2, [pc, #500]	; (80018a0 <HAL_I2C_Init+0x27c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	bf94      	ite	ls
 80016b0:	2301      	movls	r3, #1
 80016b2:	2300      	movhi	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0e7      	b.n	800188e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4a78      	ldr	r2, [pc, #480]	; (80018a4 <HAL_I2C_Init+0x280>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0c9b      	lsrs	r3, r3, #18
 80016c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	430a      	orrs	r2, r1
 80016dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a6a      	ldr	r2, [pc, #424]	; (8001898 <HAL_I2C_Init+0x274>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d802      	bhi.n	80016f8 <HAL_I2C_Init+0xd4>
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	3301      	adds	r3, #1
 80016f6:	e009      	b.n	800170c <HAL_I2C_Init+0xe8>
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	4a69      	ldr	r2, [pc, #420]	; (80018a8 <HAL_I2C_Init+0x284>)
 8001704:	fba2 2303 	umull	r2, r3, r2, r3
 8001708:	099b      	lsrs	r3, r3, #6
 800170a:	3301      	adds	r3, #1
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	430b      	orrs	r3, r1
 8001712:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800171e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	495c      	ldr	r1, [pc, #368]	; (8001898 <HAL_I2C_Init+0x274>)
 8001728:	428b      	cmp	r3, r1
 800172a:	d819      	bhi.n	8001760 <HAL_I2C_Init+0x13c>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1e59      	subs	r1, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fbb1 f3f3 	udiv	r3, r1, r3
 800173a:	1c59      	adds	r1, r3, #1
 800173c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001740:	400b      	ands	r3, r1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00a      	beq.n	800175c <HAL_I2C_Init+0x138>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1e59      	subs	r1, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fbb1 f3f3 	udiv	r3, r1, r3
 8001754:	3301      	adds	r3, #1
 8001756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175a:	e051      	b.n	8001800 <HAL_I2C_Init+0x1dc>
 800175c:	2304      	movs	r3, #4
 800175e:	e04f      	b.n	8001800 <HAL_I2C_Init+0x1dc>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d111      	bne.n	800178c <HAL_I2C_Init+0x168>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1e58      	subs	r0, r3, #1
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	440b      	add	r3, r1
 8001776:	fbb0 f3f3 	udiv	r3, r0, r3
 800177a:	3301      	adds	r3, #1
 800177c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	e012      	b.n	80017b2 <HAL_I2C_Init+0x18e>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1e58      	subs	r0, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	0099      	lsls	r1, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf0c      	ite	eq
 80017ac:	2301      	moveq	r3, #1
 80017ae:	2300      	movne	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_I2C_Init+0x196>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e022      	b.n	8001800 <HAL_I2C_Init+0x1dc>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10e      	bne.n	80017e0 <HAL_I2C_Init+0x1bc>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1e58      	subs	r0, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6859      	ldr	r1, [r3, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	440b      	add	r3, r1
 80017d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d4:	3301      	adds	r3, #1
 80017d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017de:	e00f      	b.n	8001800 <HAL_I2C_Init+0x1dc>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1e58      	subs	r0, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	0099      	lsls	r1, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f6:	3301      	adds	r3, #1
 80017f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	6809      	ldr	r1, [r1, #0]
 8001804:	4313      	orrs	r3, r2
 8001806:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800182e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6911      	ldr	r1, [r2, #16]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68d2      	ldr	r2, [r2, #12]
 800183a:	4311      	orrs	r1, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	430b      	orrs	r3, r1
 8001842:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695a      	ldr	r2, [r3, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0201 	orr.w	r2, r2, #1
 800186e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2220      	movs	r2, #32
 800187a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	000186a0 	.word	0x000186a0
 800189c:	001e847f 	.word	0x001e847f
 80018a0:	003d08ff 	.word	0x003d08ff
 80018a4:	431bde83 	.word	0x431bde83
 80018a8:	10624dd3 	.word	0x10624dd3

080018ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	4608      	mov	r0, r1
 80018b6:	4611      	mov	r1, r2
 80018b8:	461a      	mov	r2, r3
 80018ba:	4603      	mov	r3, r0
 80018bc:	817b      	strh	r3, [r7, #10]
 80018be:	460b      	mov	r3, r1
 80018c0:	813b      	strh	r3, [r7, #8]
 80018c2:	4613      	mov	r3, r2
 80018c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018c6:	f7ff fc13 	bl	80010f0 <HAL_GetTick>
 80018ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b20      	cmp	r3, #32
 80018d6:	f040 80d9 	bne.w	8001a8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2319      	movs	r3, #25
 80018e0:	2201      	movs	r2, #1
 80018e2:	496d      	ldr	r1, [pc, #436]	; (8001a98 <HAL_I2C_Mem_Write+0x1ec>)
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 fdb9 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80018f0:	2302      	movs	r3, #2
 80018f2:	e0cc      	b.n	8001a8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_I2C_Mem_Write+0x56>
 80018fe:	2302      	movs	r3, #2
 8001900:	e0c5      	b.n	8001a8e <HAL_I2C_Mem_Write+0x1e2>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d007      	beq.n	8001928 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001936:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2221      	movs	r2, #33	; 0x21
 800193c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2240      	movs	r2, #64	; 0x40
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a3a      	ldr	r2, [r7, #32]
 8001952:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001958:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195e:	b29a      	uxth	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4a4d      	ldr	r2, [pc, #308]	; (8001a9c <HAL_I2C_Mem_Write+0x1f0>)
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800196a:	88f8      	ldrh	r0, [r7, #6]
 800196c:	893a      	ldrh	r2, [r7, #8]
 800196e:	8979      	ldrh	r1, [r7, #10]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4603      	mov	r3, r0
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fbf0 	bl	8002160 <I2C_RequestMemoryWrite>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d052      	beq.n	8001a2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e081      	b.n	8001a8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 fe7e 	bl	8002690 <I2C_WaitOnTXEFlagUntilTimeout>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00d      	beq.n	80019b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d107      	bne.n	80019b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e06b      	b.n	8001a8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	781a      	ldrb	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d0:	3b01      	subs	r3, #1
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d11b      	bne.n	8001a2c <HAL_I2C_Mem_Write+0x180>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d017      	beq.n	8001a2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	781a      	ldrb	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1aa      	bne.n	800198a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 fe71 	bl	8002720 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00d      	beq.n	8001a60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d107      	bne.n	8001a5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e016      	b.n	8001a8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e000      	b.n	8001a8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a8c:	2302      	movs	r3, #2
  }
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	00100002 	.word	0x00100002
 8001a9c:	ffff0000 	.word	0xffff0000

08001aa0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	4611      	mov	r1, r2
 8001aac:	461a      	mov	r2, r3
 8001aae:	4603      	mov	r3, r0
 8001ab0:	817b      	strh	r3, [r7, #10]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	813b      	strh	r3, [r7, #8]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001aba:	f7ff fb19 	bl	80010f0 <HAL_GetTick>
 8001abe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b20      	cmp	r3, #32
 8001aca:	f040 8214 	bne.w	8001ef6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2319      	movs	r3, #25
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	497b      	ldr	r1, [pc, #492]	; (8001cc4 <HAL_I2C_Mem_Read+0x224>)
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 fcbf 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e207      	b.n	8001ef8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_I2C_Mem_Read+0x56>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e200      	b.n	8001ef8 <HAL_I2C_Mem_Read+0x458>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d007      	beq.n	8001b1c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2222      	movs	r2, #34	; 0x22
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4a5b      	ldr	r2, [pc, #364]	; (8001cc8 <HAL_I2C_Mem_Read+0x228>)
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b5e:	88f8      	ldrh	r0, [r7, #6]
 8001b60:	893a      	ldrh	r2, [r7, #8]
 8001b62:	8979      	ldrh	r1, [r7, #10]
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fb8c 	bl	800228c <I2C_RequestMemoryRead>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e1bc      	b.n	8001ef8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d113      	bne.n	8001bae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	623b      	str	r3, [r7, #32]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	623b      	str	r3, [r7, #32]
 8001b9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	e190      	b.n	8001ed0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d11b      	bne.n	8001bee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	e170      	b.n	8001ed0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d11b      	bne.n	8001c2e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	61bb      	str	r3, [r7, #24]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	e150      	b.n	8001ed0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c44:	e144      	b.n	8001ed0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	f200 80f1 	bhi.w	8001e32 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d123      	bne.n	8001ca0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 fda7 	bl	80027b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e145      	b.n	8001ef8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c9e:	e117      	b.n	8001ed0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d14e      	bne.n	8001d46 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cae:	2200      	movs	r2, #0
 8001cb0:	4906      	ldr	r1, [pc, #24]	; (8001ccc <HAL_I2C_Mem_Read+0x22c>)
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 fbd2 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d008      	beq.n	8001cd0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e11a      	b.n	8001ef8 <HAL_I2C_Mem_Read+0x458>
 8001cc2:	bf00      	nop
 8001cc4:	00100002 	.word	0x00100002
 8001cc8:	ffff0000 	.word	0xffff0000
 8001ccc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d44:	e0c4      	b.n	8001ed0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	496c      	ldr	r1, [pc, #432]	; (8001f00 <HAL_I2C_Mem_Read+0x460>)
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 fb83 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0cb      	b.n	8001ef8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da8:	2200      	movs	r2, #0
 8001daa:	4955      	ldr	r1, [pc, #340]	; (8001f00 <HAL_I2C_Mem_Read+0x460>)
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 fb55 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e09d      	b.n	8001ef8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e30:	e04e      	b.n	8001ed0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fcba 	bl	80027b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e058      	b.n	8001ef8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d124      	bne.n	8001ed0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d107      	bne.n	8001e9e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f47f aeb6 	bne.w	8001c46 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001ef6:	2302      	movs	r3, #2
  }
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3728      	adds	r7, #40	; 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	00010004 	.word	0x00010004

08001f04 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	460b      	mov	r3, r1
 8001f12:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff f8ec 	bl	80010f0 <HAL_GetTick>
 8001f18:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	f040 8111 	bne.w	800214e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2319      	movs	r3, #25
 8001f32:	2201      	movs	r2, #1
 8001f34:	4988      	ldr	r1, [pc, #544]	; (8002158 <HAL_I2C_IsDeviceReady+0x254>)
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 fa90 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001f42:	2302      	movs	r3, #2
 8001f44:	e104      	b.n	8002150 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_I2C_IsDeviceReady+0x50>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e0fd      	b.n	8002150 <HAL_I2C_IsDeviceReady+0x24c>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d007      	beq.n	8001f7a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0201 	orr.w	r2, r2, #1
 8001f78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2224      	movs	r2, #36	; 0x24
 8001f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a70      	ldr	r2, [pc, #448]	; (800215c <HAL_I2C_IsDeviceReady+0x258>)
 8001f9c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fa4e 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00d      	beq.n	8001fe2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd4:	d103      	bne.n	8001fde <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e0b6      	b.n	8002150 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fe2:	897b      	ldrh	r3, [r7, #10]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ff0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f87d 	bl	80010f0 <HAL_GetTick>
 8001ff6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b02      	cmp	r3, #2
 8002004:	bf0c      	ite	eq
 8002006:	2301      	moveq	r3, #1
 8002008:	2300      	movne	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201c:	bf0c      	ite	eq
 800201e:	2301      	moveq	r3, #1
 8002020:	2300      	movne	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002026:	e025      	b.n	8002074 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002028:	f7ff f862 	bl	80010f0 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d302      	bcc.n	800203e <HAL_I2C_IsDeviceReady+0x13a>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d103      	bne.n	8002046 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	22a0      	movs	r2, #160	; 0xa0
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b02      	cmp	r3, #2
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2ba0      	cmp	r3, #160	; 0xa0
 800207e:	d005      	beq.n	800208c <HAL_I2C_IsDeviceReady+0x188>
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <HAL_I2C_IsDeviceReady+0x188>
 8002086:	7dbb      	ldrb	r3, [r7, #22]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0cd      	beq.n	8002028 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d129      	bne.n	80020f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2319      	movs	r3, #25
 80020ce:	2201      	movs	r2, #1
 80020d0:	4921      	ldr	r1, [pc, #132]	; (8002158 <HAL_I2C_IsDeviceReady+0x254>)
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f9c2 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e036      	b.n	8002150 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e02c      	b.n	8002150 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002104:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800210e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	2319      	movs	r3, #25
 8002116:	2201      	movs	r2, #1
 8002118:	490f      	ldr	r1, [pc, #60]	; (8002158 <HAL_I2C_IsDeviceReady+0x254>)
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f99e 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e012      	b.n	8002150 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	3301      	adds	r3, #1
 800212e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	f4ff af32 	bcc.w	8001f9e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800214e:	2302      	movs	r3, #2
  }
}
 8002150:	4618      	mov	r0, r3
 8002152:	3720      	adds	r7, #32
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	00100002 	.word	0x00100002
 800215c:	ffff0000 	.word	0xffff0000

08002160 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af02      	add	r7, sp, #8
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	4608      	mov	r0, r1
 800216a:	4611      	mov	r1, r2
 800216c:	461a      	mov	r2, r3
 800216e:	4603      	mov	r3, r0
 8002170:	817b      	strh	r3, [r7, #10]
 8002172:	460b      	mov	r3, r1
 8002174:	813b      	strh	r3, [r7, #8]
 8002176:	4613      	mov	r3, r2
 8002178:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002188:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	2200      	movs	r2, #0
 8002192:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f960 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00d      	beq.n	80021be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021b0:	d103      	bne.n	80021ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e05f      	b.n	800227e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021be:	897b      	ldrh	r3, [r7, #10]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	6a3a      	ldr	r2, [r7, #32]
 80021d2:	492d      	ldr	r1, [pc, #180]	; (8002288 <I2C_RequestMemoryWrite+0x128>)
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f9bb 	bl	8002550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e04c      	b.n	800227e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fc:	6a39      	ldr	r1, [r7, #32]
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 fa46 	bl	8002690 <I2C_WaitOnTXEFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00d      	beq.n	8002226 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2b04      	cmp	r3, #4
 8002210:	d107      	bne.n	8002222 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002220:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e02b      	b.n	800227e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d105      	bne.n	8002238 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800222c:	893b      	ldrh	r3, [r7, #8]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	611a      	str	r2, [r3, #16]
 8002236:	e021      	b.n	800227c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002238:	893b      	ldrh	r3, [r7, #8]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	b29b      	uxth	r3, r3
 800223e:	b2da      	uxtb	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002248:	6a39      	ldr	r1, [r7, #32]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fa20 	bl	8002690 <I2C_WaitOnTXEFlagUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00d      	beq.n	8002272 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	2b04      	cmp	r3, #4
 800225c:	d107      	bne.n	800226e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e005      	b.n	800227e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002272:	893b      	ldrh	r3, [r7, #8]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	00010002 	.word	0x00010002

0800228c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	4608      	mov	r0, r1
 8002296:	4611      	mov	r1, r2
 8002298:	461a      	mov	r2, r3
 800229a:	4603      	mov	r3, r0
 800229c:	817b      	strh	r3, [r7, #10]
 800229e:	460b      	mov	r3, r1
 80022a0:	813b      	strh	r3, [r7, #8]
 80022a2:	4613      	mov	r3, r2
 80022a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f8c2 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00d      	beq.n	80022fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ec:	d103      	bne.n	80022f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e0aa      	b.n	8002450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022fa:	897b      	ldrh	r3, [r7, #10]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002308:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	6a3a      	ldr	r2, [r7, #32]
 800230e:	4952      	ldr	r1, [pc, #328]	; (8002458 <I2C_RequestMemoryRead+0x1cc>)
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 f91d 	bl	8002550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e097      	b.n	8002450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	6a39      	ldr	r1, [r7, #32]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f9a8 	bl	8002690 <I2C_WaitOnTXEFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00d      	beq.n	8002362 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	2b04      	cmp	r3, #4
 800234c:	d107      	bne.n	800235e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e076      	b.n	8002450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d105      	bne.n	8002374 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002368:	893b      	ldrh	r3, [r7, #8]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	e021      	b.n	80023b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002374:	893b      	ldrh	r3, [r7, #8]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	b29b      	uxth	r3, r3
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002384:	6a39      	ldr	r1, [r7, #32]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f982 	bl	8002690 <I2C_WaitOnTXEFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00d      	beq.n	80023ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2b04      	cmp	r3, #4
 8002398:	d107      	bne.n	80023aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e050      	b.n	8002450 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023ae:	893b      	ldrh	r3, [r7, #8]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	6a39      	ldr	r1, [r7, #32]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f967 	bl	8002690 <I2C_WaitOnTXEFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00d      	beq.n	80023e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d107      	bne.n	80023e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e035      	b.n	8002450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f82b 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00d      	beq.n	8002428 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800241a:	d103      	bne.n	8002424 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e013      	b.n	8002450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002428:	897b      	ldrh	r3, [r7, #10]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	b2da      	uxtb	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	6a3a      	ldr	r2, [r7, #32]
 800243c:	4906      	ldr	r1, [pc, #24]	; (8002458 <I2C_RequestMemoryRead+0x1cc>)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f886 	bl	8002550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	00010002 	.word	0x00010002

0800245c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800246c:	e048      	b.n	8002500 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d044      	beq.n	8002500 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002476:	f7fe fe3b 	bl	80010f0 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d302      	bcc.n	800248c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d139      	bne.n	8002500 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10d      	bne.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	43da      	mvns	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4013      	ands	r3, r2
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	e00c      	b.n	80024cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	43da      	mvns	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	4013      	ands	r3, r2
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d116      	bne.n	8002500 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f043 0220 	orr.w	r2, r3, #32
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e023      	b.n	8002548 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	0c1b      	lsrs	r3, r3, #16
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d10d      	bne.n	8002526 <I2C_WaitOnFlagUntilTimeout+0xca>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	43da      	mvns	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4013      	ands	r3, r2
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	e00c      	b.n	8002540 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	43da      	mvns	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	4013      	ands	r3, r2
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf0c      	ite	eq
 8002538:	2301      	moveq	r3, #1
 800253a:	2300      	movne	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	429a      	cmp	r2, r3
 8002544:	d093      	beq.n	800246e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800255e:	e071      	b.n	8002644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800256e:	d123      	bne.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002588:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f043 0204 	orr.w	r2, r3, #4
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e067      	b.n	8002688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025be:	d041      	beq.n	8002644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c0:	f7fe fd96 	bl	80010f0 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d302      	bcc.n	80025d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d136      	bne.n	8002644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10c      	bne.n	80025fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4013      	ands	r3, r2
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf14      	ite	ne
 80025f2:	2301      	movne	r3, #1
 80025f4:	2300      	moveq	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	e00b      	b.n	8002612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	43da      	mvns	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4013      	ands	r3, r2
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf14      	ite	ne
 800260c:	2301      	movne	r3, #1
 800260e:	2300      	moveq	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f043 0220 	orr.w	r2, r3, #32
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e021      	b.n	8002688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	0c1b      	lsrs	r3, r3, #16
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d10c      	bne.n	8002668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	43da      	mvns	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4013      	ands	r3, r2
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e00b      	b.n	8002680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4013      	ands	r3, r2
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf14      	ite	ne
 800267a:	2301      	movne	r3, #1
 800267c:	2300      	moveq	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	f47f af6d 	bne.w	8002560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800269c:	e034      	b.n	8002708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f8e3 	bl	800286a <I2C_IsAcknowledgeFailed>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e034      	b.n	8002718 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d028      	beq.n	8002708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b6:	f7fe fd1b 	bl	80010f0 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d302      	bcc.n	80026cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d11d      	bne.n	8002708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d6:	2b80      	cmp	r3, #128	; 0x80
 80026d8:	d016      	beq.n	8002708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f043 0220 	orr.w	r2, r3, #32
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e007      	b.n	8002718 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b80      	cmp	r3, #128	; 0x80
 8002714:	d1c3      	bne.n	800269e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800272c:	e034      	b.n	8002798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f89b 	bl	800286a <I2C_IsAcknowledgeFailed>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e034      	b.n	80027a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d028      	beq.n	8002798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002746:	f7fe fcd3 	bl	80010f0 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	429a      	cmp	r2, r3
 8002754:	d302      	bcc.n	800275c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d11d      	bne.n	8002798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b04      	cmp	r3, #4
 8002768:	d016      	beq.n	8002798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f043 0220 	orr.w	r2, r3, #32
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e007      	b.n	80027a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d1c3      	bne.n	800272e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027bc:	e049      	b.n	8002852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d119      	bne.n	8002800 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0210 	mvn.w	r2, #16
 80027d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e030      	b.n	8002862 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002800:	f7fe fc76 	bl	80010f0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	429a      	cmp	r2, r3
 800280e:	d302      	bcc.n	8002816 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d11d      	bne.n	8002852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002820:	2b40      	cmp	r3, #64	; 0x40
 8002822:	d016      	beq.n	8002852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f043 0220 	orr.w	r2, r3, #32
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e007      	b.n	8002862 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d1ae      	bne.n	80027be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002880:	d11b      	bne.n	80028ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800288a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f043 0204 	orr.w	r2, r3, #4
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e267      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d075      	beq.n	80029d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028e6:	4b88      	ldr	r3, [pc, #544]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d00c      	beq.n	800290c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f2:	4b85      	ldr	r3, [pc, #532]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d112      	bne.n	8002924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fe:	4b82      	ldr	r3, [pc, #520]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800290a:	d10b      	bne.n	8002924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	4b7e      	ldr	r3, [pc, #504]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d05b      	beq.n	80029d0 <HAL_RCC_OscConfig+0x108>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d157      	bne.n	80029d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e242      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292c:	d106      	bne.n	800293c <HAL_RCC_OscConfig+0x74>
 800292e:	4b76      	ldr	r3, [pc, #472]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a75      	ldr	r2, [pc, #468]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e01d      	b.n	8002978 <HAL_RCC_OscConfig+0xb0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x98>
 8002946:	4b70      	ldr	r3, [pc, #448]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6f      	ldr	r2, [pc, #444]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 800294c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b6d      	ldr	r3, [pc, #436]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6c      	ldr	r2, [pc, #432]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0xb0>
 8002960:	4b69      	ldr	r3, [pc, #420]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a68      	ldr	r2, [pc, #416]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	4b66      	ldr	r3, [pc, #408]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a65      	ldr	r2, [pc, #404]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7fe fbb6 	bl	80010f0 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002988:	f7fe fbb2 	bl	80010f0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	; 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e207      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b5b      	ldr	r3, [pc, #364]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0xc0>
 80029a6:	e014      	b.n	80029d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7fe fba2 	bl	80010f0 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b0:	f7fe fb9e 	bl	80010f0 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e1f3      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	4b51      	ldr	r3, [pc, #324]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0xe8>
 80029ce:	e000      	b.n	80029d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d063      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029de:	4b4a      	ldr	r3, [pc, #296]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ea:	4b47      	ldr	r3, [pc, #284]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d11c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f6:	4b44      	ldr	r3, [pc, #272]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d116      	bne.n	8002a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a02:	4b41      	ldr	r3, [pc, #260]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_RCC_OscConfig+0x152>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e1c7      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1a:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4937      	ldr	r1, [pc, #220]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2e:	e03a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d020      	beq.n	8002a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a38:	4b34      	ldr	r3, [pc, #208]	; (8002b0c <HAL_RCC_OscConfig+0x244>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fb57 	bl	80010f0 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a46:	f7fe fb53 	bl	80010f0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1a8      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a64:	4b28      	ldr	r3, [pc, #160]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4925      	ldr	r1, [pc, #148]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]
 8002a78:	e015      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7a:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <HAL_RCC_OscConfig+0x244>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe fb36 	bl	80010f0 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a88:	f7fe fb32 	bl	80010f0 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e187      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d036      	beq.n	8002b20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d016      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <HAL_RCC_OscConfig+0x248>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7fe fb16 	bl	80010f0 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac8:	f7fe fb12 	bl	80010f0 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e167      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x200>
 8002ae6:	e01b      	b.n	8002b20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae8:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <HAL_RCC_OscConfig+0x248>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7fe faff 	bl	80010f0 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	e00e      	b.n	8002b14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af6:	f7fe fafb 	bl	80010f0 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d907      	bls.n	8002b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e150      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	42470000 	.word	0x42470000
 8002b10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	4b88      	ldr	r3, [pc, #544]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ea      	bne.n	8002af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8097 	beq.w	8002c5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b32:	4b81      	ldr	r3, [pc, #516]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10f      	bne.n	8002b5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	4b7d      	ldr	r3, [pc, #500]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	4a7c      	ldr	r2, [pc, #496]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4e:	4b7a      	ldr	r3, [pc, #488]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b77      	ldr	r3, [pc, #476]	; (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d118      	bne.n	8002b9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	4b74      	ldr	r3, [pc, #464]	; (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a73      	ldr	r2, [pc, #460]	; (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b76:	f7fe fabb 	bl	80010f0 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7e:	f7fe fab7 	bl	80010f0 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e10c      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	4b6a      	ldr	r3, [pc, #424]	; (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x2ea>
 8002ba4:	4b64      	ldr	r3, [pc, #400]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	4a63      	ldr	r2, [pc, #396]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb0:	e01c      	b.n	8002bec <HAL_RCC_OscConfig+0x324>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x30c>
 8002bba:	4b5f      	ldr	r3, [pc, #380]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	4a5e      	ldr	r2, [pc, #376]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc6:	4b5c      	ldr	r3, [pc, #368]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a5b      	ldr	r2, [pc, #364]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0x324>
 8002bd4:	4b58      	ldr	r3, [pc, #352]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	4a57      	ldr	r2, [pc, #348]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	6713      	str	r3, [r2, #112]	; 0x70
 8002be0:	4b55      	ldr	r3, [pc, #340]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	4a54      	ldr	r2, [pc, #336]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002be6:	f023 0304 	bic.w	r3, r3, #4
 8002bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d015      	beq.n	8002c20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7fe fa7c 	bl	80010f0 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fa78 	bl	80010f0 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e0cb      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	4b49      	ldr	r3, [pc, #292]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0ee      	beq.n	8002bfc <HAL_RCC_OscConfig+0x334>
 8002c1e:	e014      	b.n	8002c4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c20:	f7fe fa66 	bl	80010f0 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f7fe fa62 	bl	80010f0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e0b5      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1ee      	bne.n	8002c28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c50:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	4a38      	ldr	r2, [pc, #224]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80a1 	beq.w	8002da8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c66:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d05c      	beq.n	8002d2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d141      	bne.n	8002cfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7a:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe fa36 	bl	80010f0 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fa32 	bl	80010f0 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e087      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	4b27      	ldr	r3, [pc, #156]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	061b      	lsls	r3, r3, #24
 8002cca:	491b      	ldr	r1, [pc, #108]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fa0b 	bl	80010f0 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cde:	f7fe fa07 	bl	80010f0 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e05c      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf0:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x416>
 8002cfc:	e054      	b.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe f9f4 	bl	80010f0 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fe f9f0 	bl	80010f0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e045      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x444>
 8002d2a:	e03d      	b.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e038      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40007000 	.word	0x40007000
 8002d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_RCC_OscConfig+0x4ec>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d028      	beq.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d121      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d11a      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d111      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800

08002db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0cc      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b68      	ldr	r3, [pc, #416]	; (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d90c      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b65      	ldr	r3, [pc, #404]	; (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0b8      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e0c:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e24:	4b53      	ldr	r3, [pc, #332]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a52      	ldr	r2, [pc, #328]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e30:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	494d      	ldr	r1, [pc, #308]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d044      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d119      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e07f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d003      	beq.n	8002e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e06f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e86:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e067      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e96:	4b37      	ldr	r3, [pc, #220]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4934      	ldr	r1, [pc, #208]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea8:	f7fe f922 	bl	80010f0 <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb0:	f7fe f91e 	bl	80010f0 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e04f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 020c 	and.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1eb      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d20c      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e032      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4916      	ldr	r1, [pc, #88]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	490e      	ldr	r1, [pc, #56]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f3e:	f000 f821 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	490a      	ldr	r1, [pc, #40]	; (8002f78 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	5ccb      	ldrb	r3, [r1, r3]
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe f882 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023c00 	.word	0x40023c00
 8002f74:	40023800 	.word	0x40023800
 8002f78:	08004528 	.word	0x08004528
 8002f7c:	20000058 	.word	0x20000058
 8002f80:	2000005c 	.word	0x2000005c

08002f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f88:	b090      	sub	sp, #64	; 0x40
 8002f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f90:	2300      	movs	r3, #0
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f94:	2300      	movs	r3, #0
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f9c:	4b59      	ldr	r3, [pc, #356]	; (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	f200 80a1 	bhi.w	80030f0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d003      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002fb6:	e09b      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fb8:	4b53      	ldr	r3, [pc, #332]	; (8003108 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002fbc:	e09b      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fbe:	4b53      	ldr	r3, [pc, #332]	; (800310c <HAL_RCC_GetSysClockFreq+0x188>)
 8002fc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fc2:	e098      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc4:	4b4f      	ldr	r3, [pc, #316]	; (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fce:	4b4d      	ldr	r3, [pc, #308]	; (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d028      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fda:	4b4a      	ldr	r3, [pc, #296]	; (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	623b      	str	r3, [r7, #32]
 8002fe4:	627a      	str	r2, [r7, #36]	; 0x24
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fec:	2100      	movs	r1, #0
 8002fee:	4b47      	ldr	r3, [pc, #284]	; (800310c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ff0:	fb03 f201 	mul.w	r2, r3, r1
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	fb00 f303 	mul.w	r3, r0, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a43      	ldr	r2, [pc, #268]	; (800310c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ffe:	fba0 1202 	umull	r1, r2, r0, r2
 8003002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003004:	460a      	mov	r2, r1
 8003006:	62ba      	str	r2, [r7, #40]	; 0x28
 8003008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800300a:	4413      	add	r3, r2
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003010:	2200      	movs	r2, #0
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	61fa      	str	r2, [r7, #28]
 8003016:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800301a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800301e:	f7fd f937 	bl	8000290 <__aeabi_uldivmod>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4613      	mov	r3, r2
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800302a:	e053      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302c:	4b35      	ldr	r3, [pc, #212]	; (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	2200      	movs	r2, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	617a      	str	r2, [r7, #20]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800303e:	f04f 0b00 	mov.w	fp, #0
 8003042:	4652      	mov	r2, sl
 8003044:	465b      	mov	r3, fp
 8003046:	f04f 0000 	mov.w	r0, #0
 800304a:	f04f 0100 	mov.w	r1, #0
 800304e:	0159      	lsls	r1, r3, #5
 8003050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003054:	0150      	lsls	r0, r2, #5
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	ebb2 080a 	subs.w	r8, r2, sl
 800305e:	eb63 090b 	sbc.w	r9, r3, fp
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800306e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003072:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003076:	ebb2 0408 	subs.w	r4, r2, r8
 800307a:	eb63 0509 	sbc.w	r5, r3, r9
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	00eb      	lsls	r3, r5, #3
 8003088:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800308c:	00e2      	lsls	r2, r4, #3
 800308e:	4614      	mov	r4, r2
 8003090:	461d      	mov	r5, r3
 8003092:	eb14 030a 	adds.w	r3, r4, sl
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	eb45 030b 	adc.w	r3, r5, fp
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030aa:	4629      	mov	r1, r5
 80030ac:	028b      	lsls	r3, r1, #10
 80030ae:	4621      	mov	r1, r4
 80030b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030b4:	4621      	mov	r1, r4
 80030b6:	028a      	lsls	r2, r1, #10
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030be:	2200      	movs	r2, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	60fa      	str	r2, [r7, #12]
 80030c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030c8:	f7fd f8e2 	bl	8000290 <__aeabi_uldivmod>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4613      	mov	r3, r2
 80030d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	3301      	adds	r3, #1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80030e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030ee:	e002      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetSysClockFreq+0x184>)
 80030f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3740      	adds	r7, #64	; 0x40
 80030fc:	46bd      	mov	sp, r7
 80030fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
 8003108:	00f42400 	.word	0x00f42400
 800310c:	017d7840 	.word	0x017d7840

08003110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_RCC_GetHCLKFreq+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000058 	.word	0x20000058

08003128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800312c:	f7ff fff0 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0a9b      	lsrs	r3, r3, #10
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4903      	ldr	r1, [pc, #12]	; (800314c <HAL_RCC_GetPCLK1Freq+0x24>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	08004538 	.word	0x08004538

08003150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003154:	f7ff ffdc 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	0b5b      	lsrs	r3, r3, #13
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40023800 	.word	0x40023800
 8003174:	08004538 	.word	0x08004538

08003178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e042      	b.n	8003210 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fe5c 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f973 	bl	80034a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b20      	cmp	r3, #32
 8003236:	d175      	bne.n	8003324 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_UART_Transmit+0x2c>
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e06e      	b.n	8003326 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2221      	movs	r2, #33	; 0x21
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003256:	f7fd ff4b 	bl	80010f0 <HAL_GetTick>
 800325a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	88fa      	ldrh	r2, [r7, #6]
 8003260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	88fa      	ldrh	r2, [r7, #6]
 8003266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003270:	d108      	bne.n	8003284 <HAL_UART_Transmit+0x6c>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d104      	bne.n	8003284 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	e003      	b.n	800328c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003288:	2300      	movs	r3, #0
 800328a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800328c:	e02e      	b.n	80032ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2200      	movs	r2, #0
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f848 	bl	800332e <UART_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e03a      	b.n	8003326 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10b      	bne.n	80032ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	3302      	adds	r3, #2
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	e007      	b.n	80032de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	3301      	adds	r3, #1
 80032dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1cb      	bne.n	800328e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2140      	movs	r1, #64	; 0x40
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f814 	bl	800332e <UART_WaitOnFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e006      	b.n	8003326 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
  }
}
 8003326:	4618      	mov	r0, r3
 8003328:	3720      	adds	r7, #32
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b086      	sub	sp, #24
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	4613      	mov	r3, r2
 800333c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800333e:	e03b      	b.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003346:	d037      	beq.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003348:	f7fd fed2 	bl	80010f0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	6a3a      	ldr	r2, [r7, #32]
 8003354:	429a      	cmp	r2, r3
 8003356:	d302      	bcc.n	800335e <UART_WaitOnFlagUntilTimeout+0x30>
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e03a      	b.n	80033d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d023      	beq.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b80      	cmp	r3, #128	; 0x80
 8003374:	d020      	beq.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d01d      	beq.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b08      	cmp	r3, #8
 8003388:	d116      	bne.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f81d 	bl	80033e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2208      	movs	r2, #8
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e00f      	b.n	80033d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d0b4      	beq.n	8003340 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b095      	sub	sp, #84	; 0x54
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003408:	643a      	str	r2, [r7, #64]	; 0x40
 800340a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800340e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e5      	bne.n	80033e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3314      	adds	r3, #20
 8003422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	61fb      	str	r3, [r7, #28]
   return(result);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	64bb      	str	r3, [r7, #72]	; 0x48
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3314      	adds	r3, #20
 800343a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800343c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e5      	bne.n	800341c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	2b01      	cmp	r3, #1
 8003456:	d119      	bne.n	800348c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	330c      	adds	r3, #12
 800345e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	60bb      	str	r3, [r7, #8]
   return(result);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f023 0310 	bic.w	r3, r3, #16
 800346e:	647b      	str	r3, [r7, #68]	; 0x44
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	330c      	adds	r3, #12
 8003476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003478:	61ba      	str	r2, [r7, #24]
 800347a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	6979      	ldr	r1, [r7, #20]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	e841 2300 	strex	r3, r2, [r1]
 8003484:	613b      	str	r3, [r7, #16]
   return(result);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e5      	bne.n	8003458 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
}
 800349a:	bf00      	nop
 800349c:	3754      	adds	r7, #84	; 0x54
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ac:	b0c0      	sub	sp, #256	; 0x100
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	68d9      	ldr	r1, [r3, #12]
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	ea40 0301 	orr.w	r3, r0, r1
 80034d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	431a      	orrs	r2, r3
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003500:	f021 010c 	bic.w	r1, r1, #12
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800350e:	430b      	orrs	r3, r1
 8003510:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003522:	6999      	ldr	r1, [r3, #24]
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	ea40 0301 	orr.w	r3, r0, r1
 800352e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b8f      	ldr	r3, [pc, #572]	; (8003774 <UART_SetConfig+0x2cc>)
 8003538:	429a      	cmp	r2, r3
 800353a:	d005      	beq.n	8003548 <UART_SetConfig+0xa0>
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4b8d      	ldr	r3, [pc, #564]	; (8003778 <UART_SetConfig+0x2d0>)
 8003544:	429a      	cmp	r2, r3
 8003546:	d104      	bne.n	8003552 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003548:	f7ff fe02 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 800354c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003550:	e003      	b.n	800355a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003552:	f7ff fde9 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8003556:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003564:	f040 810c 	bne.w	8003780 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800356c:	2200      	movs	r2, #0
 800356e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003572:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003576:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800357a:	4622      	mov	r2, r4
 800357c:	462b      	mov	r3, r5
 800357e:	1891      	adds	r1, r2, r2
 8003580:	65b9      	str	r1, [r7, #88]	; 0x58
 8003582:	415b      	adcs	r3, r3
 8003584:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003586:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800358a:	4621      	mov	r1, r4
 800358c:	eb12 0801 	adds.w	r8, r2, r1
 8003590:	4629      	mov	r1, r5
 8003592:	eb43 0901 	adc.w	r9, r3, r1
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035aa:	4690      	mov	r8, r2
 80035ac:	4699      	mov	r9, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	eb18 0303 	adds.w	r3, r8, r3
 80035b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035b8:	462b      	mov	r3, r5
 80035ba:	eb49 0303 	adc.w	r3, r9, r3
 80035be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035d6:	460b      	mov	r3, r1
 80035d8:	18db      	adds	r3, r3, r3
 80035da:	653b      	str	r3, [r7, #80]	; 0x50
 80035dc:	4613      	mov	r3, r2
 80035de:	eb42 0303 	adc.w	r3, r2, r3
 80035e2:	657b      	str	r3, [r7, #84]	; 0x54
 80035e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035ec:	f7fc fe50 	bl	8000290 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4b61      	ldr	r3, [pc, #388]	; (800377c <UART_SetConfig+0x2d4>)
 80035f6:	fba3 2302 	umull	r2, r3, r3, r2
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	011c      	lsls	r4, r3, #4
 80035fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003602:	2200      	movs	r2, #0
 8003604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003608:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800360c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003610:	4642      	mov	r2, r8
 8003612:	464b      	mov	r3, r9
 8003614:	1891      	adds	r1, r2, r2
 8003616:	64b9      	str	r1, [r7, #72]	; 0x48
 8003618:	415b      	adcs	r3, r3
 800361a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800361c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003620:	4641      	mov	r1, r8
 8003622:	eb12 0a01 	adds.w	sl, r2, r1
 8003626:	4649      	mov	r1, r9
 8003628:	eb43 0b01 	adc.w	fp, r3, r1
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003638:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800363c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003640:	4692      	mov	sl, r2
 8003642:	469b      	mov	fp, r3
 8003644:	4643      	mov	r3, r8
 8003646:	eb1a 0303 	adds.w	r3, sl, r3
 800364a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800364e:	464b      	mov	r3, r9
 8003650:	eb4b 0303 	adc.w	r3, fp, r3
 8003654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003664:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003668:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800366c:	460b      	mov	r3, r1
 800366e:	18db      	adds	r3, r3, r3
 8003670:	643b      	str	r3, [r7, #64]	; 0x40
 8003672:	4613      	mov	r3, r2
 8003674:	eb42 0303 	adc.w	r3, r2, r3
 8003678:	647b      	str	r3, [r7, #68]	; 0x44
 800367a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800367e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003682:	f7fc fe05 	bl	8000290 <__aeabi_uldivmod>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4611      	mov	r1, r2
 800368c:	4b3b      	ldr	r3, [pc, #236]	; (800377c <UART_SetConfig+0x2d4>)
 800368e:	fba3 2301 	umull	r2, r3, r3, r1
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	2264      	movs	r2, #100	; 0x64
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	1acb      	subs	r3, r1, r3
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036a2:	4b36      	ldr	r3, [pc, #216]	; (800377c <UART_SetConfig+0x2d4>)
 80036a4:	fba3 2302 	umull	r2, r3, r3, r2
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036b0:	441c      	add	r4, r3
 80036b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036c4:	4642      	mov	r2, r8
 80036c6:	464b      	mov	r3, r9
 80036c8:	1891      	adds	r1, r2, r2
 80036ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80036cc:	415b      	adcs	r3, r3
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036d4:	4641      	mov	r1, r8
 80036d6:	1851      	adds	r1, r2, r1
 80036d8:	6339      	str	r1, [r7, #48]	; 0x30
 80036da:	4649      	mov	r1, r9
 80036dc:	414b      	adcs	r3, r1
 80036de:	637b      	str	r3, [r7, #52]	; 0x34
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036ec:	4659      	mov	r1, fp
 80036ee:	00cb      	lsls	r3, r1, #3
 80036f0:	4651      	mov	r1, sl
 80036f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036f6:	4651      	mov	r1, sl
 80036f8:	00ca      	lsls	r2, r1, #3
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	4642      	mov	r2, r8
 8003702:	189b      	adds	r3, r3, r2
 8003704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003708:	464b      	mov	r3, r9
 800370a:	460a      	mov	r2, r1
 800370c:	eb42 0303 	adc.w	r3, r2, r3
 8003710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003720:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003724:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003728:	460b      	mov	r3, r1
 800372a:	18db      	adds	r3, r3, r3
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
 800372e:	4613      	mov	r3, r2
 8003730:	eb42 0303 	adc.w	r3, r2, r3
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003736:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800373a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800373e:	f7fc fda7 	bl	8000290 <__aeabi_uldivmod>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <UART_SetConfig+0x2d4>)
 8003748:	fba3 1302 	umull	r1, r3, r3, r2
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	2164      	movs	r1, #100	; 0x64
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	3332      	adds	r3, #50	; 0x32
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <UART_SetConfig+0x2d4>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	f003 0207 	and.w	r2, r3, #7
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4422      	add	r2, r4
 800376e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003770:	e106      	b.n	8003980 <UART_SetConfig+0x4d8>
 8003772:	bf00      	nop
 8003774:	40011000 	.word	0x40011000
 8003778:	40011400 	.word	0x40011400
 800377c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003784:	2200      	movs	r2, #0
 8003786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800378a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800378e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003792:	4642      	mov	r2, r8
 8003794:	464b      	mov	r3, r9
 8003796:	1891      	adds	r1, r2, r2
 8003798:	6239      	str	r1, [r7, #32]
 800379a:	415b      	adcs	r3, r3
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
 800379e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037a2:	4641      	mov	r1, r8
 80037a4:	1854      	adds	r4, r2, r1
 80037a6:	4649      	mov	r1, r9
 80037a8:	eb43 0501 	adc.w	r5, r3, r1
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	00eb      	lsls	r3, r5, #3
 80037b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ba:	00e2      	lsls	r2, r4, #3
 80037bc:	4614      	mov	r4, r2
 80037be:	461d      	mov	r5, r3
 80037c0:	4643      	mov	r3, r8
 80037c2:	18e3      	adds	r3, r4, r3
 80037c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037c8:	464b      	mov	r3, r9
 80037ca:	eb45 0303 	adc.w	r3, r5, r3
 80037ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037ee:	4629      	mov	r1, r5
 80037f0:	008b      	lsls	r3, r1, #2
 80037f2:	4621      	mov	r1, r4
 80037f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f8:	4621      	mov	r1, r4
 80037fa:	008a      	lsls	r2, r1, #2
 80037fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003800:	f7fc fd46 	bl	8000290 <__aeabi_uldivmod>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4b60      	ldr	r3, [pc, #384]	; (800398c <UART_SetConfig+0x4e4>)
 800380a:	fba3 2302 	umull	r2, r3, r3, r2
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	011c      	lsls	r4, r3, #4
 8003812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003816:	2200      	movs	r2, #0
 8003818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800381c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003820:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003824:	4642      	mov	r2, r8
 8003826:	464b      	mov	r3, r9
 8003828:	1891      	adds	r1, r2, r2
 800382a:	61b9      	str	r1, [r7, #24]
 800382c:	415b      	adcs	r3, r3
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003834:	4641      	mov	r1, r8
 8003836:	1851      	adds	r1, r2, r1
 8003838:	6139      	str	r1, [r7, #16]
 800383a:	4649      	mov	r1, r9
 800383c:	414b      	adcs	r3, r1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800384c:	4659      	mov	r1, fp
 800384e:	00cb      	lsls	r3, r1, #3
 8003850:	4651      	mov	r1, sl
 8003852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003856:	4651      	mov	r1, sl
 8003858:	00ca      	lsls	r2, r1, #3
 800385a:	4610      	mov	r0, r2
 800385c:	4619      	mov	r1, r3
 800385e:	4603      	mov	r3, r0
 8003860:	4642      	mov	r2, r8
 8003862:	189b      	adds	r3, r3, r2
 8003864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003868:	464b      	mov	r3, r9
 800386a:	460a      	mov	r2, r1
 800386c:	eb42 0303 	adc.w	r3, r2, r3
 8003870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	67bb      	str	r3, [r7, #120]	; 0x78
 800387e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800388c:	4649      	mov	r1, r9
 800388e:	008b      	lsls	r3, r1, #2
 8003890:	4641      	mov	r1, r8
 8003892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003896:	4641      	mov	r1, r8
 8003898:	008a      	lsls	r2, r1, #2
 800389a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800389e:	f7fc fcf7 	bl	8000290 <__aeabi_uldivmod>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	4b38      	ldr	r3, [pc, #224]	; (800398c <UART_SetConfig+0x4e4>)
 80038aa:	fba3 2301 	umull	r2, r3, r3, r1
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	2264      	movs	r2, #100	; 0x64
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	1acb      	subs	r3, r1, r3
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	3332      	adds	r3, #50	; 0x32
 80038bc:	4a33      	ldr	r2, [pc, #204]	; (800398c <UART_SetConfig+0x4e4>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c8:	441c      	add	r4, r3
 80038ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ce:	2200      	movs	r2, #0
 80038d0:	673b      	str	r3, [r7, #112]	; 0x70
 80038d2:	677a      	str	r2, [r7, #116]	; 0x74
 80038d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038d8:	4642      	mov	r2, r8
 80038da:	464b      	mov	r3, r9
 80038dc:	1891      	adds	r1, r2, r2
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	415b      	adcs	r3, r3
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038e8:	4641      	mov	r1, r8
 80038ea:	1851      	adds	r1, r2, r1
 80038ec:	6039      	str	r1, [r7, #0]
 80038ee:	4649      	mov	r1, r9
 80038f0:	414b      	adcs	r3, r1
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003900:	4659      	mov	r1, fp
 8003902:	00cb      	lsls	r3, r1, #3
 8003904:	4651      	mov	r1, sl
 8003906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800390a:	4651      	mov	r1, sl
 800390c:	00ca      	lsls	r2, r1, #3
 800390e:	4610      	mov	r0, r2
 8003910:	4619      	mov	r1, r3
 8003912:	4603      	mov	r3, r0
 8003914:	4642      	mov	r2, r8
 8003916:	189b      	adds	r3, r3, r2
 8003918:	66bb      	str	r3, [r7, #104]	; 0x68
 800391a:	464b      	mov	r3, r9
 800391c:	460a      	mov	r2, r1
 800391e:	eb42 0303 	adc.w	r3, r2, r3
 8003922:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	663b      	str	r3, [r7, #96]	; 0x60
 800392e:	667a      	str	r2, [r7, #100]	; 0x64
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800393c:	4649      	mov	r1, r9
 800393e:	008b      	lsls	r3, r1, #2
 8003940:	4641      	mov	r1, r8
 8003942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003946:	4641      	mov	r1, r8
 8003948:	008a      	lsls	r2, r1, #2
 800394a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800394e:	f7fc fc9f 	bl	8000290 <__aeabi_uldivmod>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <UART_SetConfig+0x4e4>)
 8003958:	fba3 1302 	umull	r1, r3, r3, r2
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	2164      	movs	r1, #100	; 0x64
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	3332      	adds	r3, #50	; 0x32
 800396a:	4a08      	ldr	r2, [pc, #32]	; (800398c <UART_SetConfig+0x4e4>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	f003 020f 	and.w	r2, r3, #15
 8003976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4422      	add	r2, r4
 800397e:	609a      	str	r2, [r3, #8]
}
 8003980:	bf00      	nop
 8003982:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003986:	46bd      	mov	sp, r7
 8003988:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800398c:	51eb851f 	.word	0x51eb851f

08003990 <siprintf>:
 8003990:	b40e      	push	{r1, r2, r3}
 8003992:	b500      	push	{lr}
 8003994:	b09c      	sub	sp, #112	; 0x70
 8003996:	ab1d      	add	r3, sp, #116	; 0x74
 8003998:	9002      	str	r0, [sp, #8]
 800399a:	9006      	str	r0, [sp, #24]
 800399c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039a0:	4809      	ldr	r0, [pc, #36]	; (80039c8 <siprintf+0x38>)
 80039a2:	9107      	str	r1, [sp, #28]
 80039a4:	9104      	str	r1, [sp, #16]
 80039a6:	4909      	ldr	r1, [pc, #36]	; (80039cc <siprintf+0x3c>)
 80039a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80039ac:	9105      	str	r1, [sp, #20]
 80039ae:	6800      	ldr	r0, [r0, #0]
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	a902      	add	r1, sp, #8
 80039b4:	f000 f9a0 	bl	8003cf8 <_svfiprintf_r>
 80039b8:	9b02      	ldr	r3, [sp, #8]
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	b01c      	add	sp, #112	; 0x70
 80039c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80039c4:	b003      	add	sp, #12
 80039c6:	4770      	bx	lr
 80039c8:	200000b0 	.word	0x200000b0
 80039cc:	ffff0208 	.word	0xffff0208

080039d0 <memset>:
 80039d0:	4402      	add	r2, r0
 80039d2:	4603      	mov	r3, r0
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d100      	bne.n	80039da <memset+0xa>
 80039d8:	4770      	bx	lr
 80039da:	f803 1b01 	strb.w	r1, [r3], #1
 80039de:	e7f9      	b.n	80039d4 <memset+0x4>

080039e0 <__errno>:
 80039e0:	4b01      	ldr	r3, [pc, #4]	; (80039e8 <__errno+0x8>)
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	200000b0 	.word	0x200000b0

080039ec <__libc_init_array>:
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	4d0d      	ldr	r5, [pc, #52]	; (8003a24 <__libc_init_array+0x38>)
 80039f0:	4c0d      	ldr	r4, [pc, #52]	; (8003a28 <__libc_init_array+0x3c>)
 80039f2:	1b64      	subs	r4, r4, r5
 80039f4:	10a4      	asrs	r4, r4, #2
 80039f6:	2600      	movs	r6, #0
 80039f8:	42a6      	cmp	r6, r4
 80039fa:	d109      	bne.n	8003a10 <__libc_init_array+0x24>
 80039fc:	4d0b      	ldr	r5, [pc, #44]	; (8003a2c <__libc_init_array+0x40>)
 80039fe:	4c0c      	ldr	r4, [pc, #48]	; (8003a30 <__libc_init_array+0x44>)
 8003a00:	f000 fc6a 	bl	80042d8 <_init>
 8003a04:	1b64      	subs	r4, r4, r5
 8003a06:	10a4      	asrs	r4, r4, #2
 8003a08:	2600      	movs	r6, #0
 8003a0a:	42a6      	cmp	r6, r4
 8003a0c:	d105      	bne.n	8003a1a <__libc_init_array+0x2e>
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a14:	4798      	blx	r3
 8003a16:	3601      	adds	r6, #1
 8003a18:	e7ee      	b.n	80039f8 <__libc_init_array+0xc>
 8003a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1e:	4798      	blx	r3
 8003a20:	3601      	adds	r6, #1
 8003a22:	e7f2      	b.n	8003a0a <__libc_init_array+0x1e>
 8003a24:	0800457c 	.word	0x0800457c
 8003a28:	0800457c 	.word	0x0800457c
 8003a2c:	0800457c 	.word	0x0800457c
 8003a30:	08004580 	.word	0x08004580

08003a34 <__retarget_lock_acquire_recursive>:
 8003a34:	4770      	bx	lr

08003a36 <__retarget_lock_release_recursive>:
 8003a36:	4770      	bx	lr

08003a38 <memcpy>:
 8003a38:	440a      	add	r2, r1
 8003a3a:	4291      	cmp	r1, r2
 8003a3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a40:	d100      	bne.n	8003a44 <memcpy+0xc>
 8003a42:	4770      	bx	lr
 8003a44:	b510      	push	{r4, lr}
 8003a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a4e:	4291      	cmp	r1, r2
 8003a50:	d1f9      	bne.n	8003a46 <memcpy+0xe>
 8003a52:	bd10      	pop	{r4, pc}

08003a54 <_free_r>:
 8003a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a56:	2900      	cmp	r1, #0
 8003a58:	d044      	beq.n	8003ae4 <_free_r+0x90>
 8003a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a5e:	9001      	str	r0, [sp, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f1a1 0404 	sub.w	r4, r1, #4
 8003a66:	bfb8      	it	lt
 8003a68:	18e4      	addlt	r4, r4, r3
 8003a6a:	f000 f8df 	bl	8003c2c <__malloc_lock>
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <_free_r+0x94>)
 8003a70:	9801      	ldr	r0, [sp, #4]
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	b933      	cbnz	r3, 8003a84 <_free_r+0x30>
 8003a76:	6063      	str	r3, [r4, #4]
 8003a78:	6014      	str	r4, [r2, #0]
 8003a7a:	b003      	add	sp, #12
 8003a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a80:	f000 b8da 	b.w	8003c38 <__malloc_unlock>
 8003a84:	42a3      	cmp	r3, r4
 8003a86:	d908      	bls.n	8003a9a <_free_r+0x46>
 8003a88:	6825      	ldr	r5, [r4, #0]
 8003a8a:	1961      	adds	r1, r4, r5
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	bf01      	itttt	eq
 8003a90:	6819      	ldreq	r1, [r3, #0]
 8003a92:	685b      	ldreq	r3, [r3, #4]
 8003a94:	1949      	addeq	r1, r1, r5
 8003a96:	6021      	streq	r1, [r4, #0]
 8003a98:	e7ed      	b.n	8003a76 <_free_r+0x22>
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	b10b      	cbz	r3, 8003aa4 <_free_r+0x50>
 8003aa0:	42a3      	cmp	r3, r4
 8003aa2:	d9fa      	bls.n	8003a9a <_free_r+0x46>
 8003aa4:	6811      	ldr	r1, [r2, #0]
 8003aa6:	1855      	adds	r5, r2, r1
 8003aa8:	42a5      	cmp	r5, r4
 8003aaa:	d10b      	bne.n	8003ac4 <_free_r+0x70>
 8003aac:	6824      	ldr	r4, [r4, #0]
 8003aae:	4421      	add	r1, r4
 8003ab0:	1854      	adds	r4, r2, r1
 8003ab2:	42a3      	cmp	r3, r4
 8003ab4:	6011      	str	r1, [r2, #0]
 8003ab6:	d1e0      	bne.n	8003a7a <_free_r+0x26>
 8003ab8:	681c      	ldr	r4, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	6053      	str	r3, [r2, #4]
 8003abe:	440c      	add	r4, r1
 8003ac0:	6014      	str	r4, [r2, #0]
 8003ac2:	e7da      	b.n	8003a7a <_free_r+0x26>
 8003ac4:	d902      	bls.n	8003acc <_free_r+0x78>
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	6003      	str	r3, [r0, #0]
 8003aca:	e7d6      	b.n	8003a7a <_free_r+0x26>
 8003acc:	6825      	ldr	r5, [r4, #0]
 8003ace:	1961      	adds	r1, r4, r5
 8003ad0:	428b      	cmp	r3, r1
 8003ad2:	bf04      	itt	eq
 8003ad4:	6819      	ldreq	r1, [r3, #0]
 8003ad6:	685b      	ldreq	r3, [r3, #4]
 8003ad8:	6063      	str	r3, [r4, #4]
 8003ada:	bf04      	itt	eq
 8003adc:	1949      	addeq	r1, r1, r5
 8003ade:	6021      	streq	r1, [r4, #0]
 8003ae0:	6054      	str	r4, [r2, #4]
 8003ae2:	e7ca      	b.n	8003a7a <_free_r+0x26>
 8003ae4:	b003      	add	sp, #12
 8003ae6:	bd30      	pop	{r4, r5, pc}
 8003ae8:	20000310 	.word	0x20000310

08003aec <sbrk_aligned>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	4e0e      	ldr	r6, [pc, #56]	; (8003b28 <sbrk_aligned+0x3c>)
 8003af0:	460c      	mov	r4, r1
 8003af2:	6831      	ldr	r1, [r6, #0]
 8003af4:	4605      	mov	r5, r0
 8003af6:	b911      	cbnz	r1, 8003afe <sbrk_aligned+0x12>
 8003af8:	f000 fba6 	bl	8004248 <_sbrk_r>
 8003afc:	6030      	str	r0, [r6, #0]
 8003afe:	4621      	mov	r1, r4
 8003b00:	4628      	mov	r0, r5
 8003b02:	f000 fba1 	bl	8004248 <_sbrk_r>
 8003b06:	1c43      	adds	r3, r0, #1
 8003b08:	d00a      	beq.n	8003b20 <sbrk_aligned+0x34>
 8003b0a:	1cc4      	adds	r4, r0, #3
 8003b0c:	f024 0403 	bic.w	r4, r4, #3
 8003b10:	42a0      	cmp	r0, r4
 8003b12:	d007      	beq.n	8003b24 <sbrk_aligned+0x38>
 8003b14:	1a21      	subs	r1, r4, r0
 8003b16:	4628      	mov	r0, r5
 8003b18:	f000 fb96 	bl	8004248 <_sbrk_r>
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d101      	bne.n	8003b24 <sbrk_aligned+0x38>
 8003b20:	f04f 34ff 	mov.w	r4, #4294967295
 8003b24:	4620      	mov	r0, r4
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	20000314 	.word	0x20000314

08003b2c <_malloc_r>:
 8003b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b30:	1ccd      	adds	r5, r1, #3
 8003b32:	f025 0503 	bic.w	r5, r5, #3
 8003b36:	3508      	adds	r5, #8
 8003b38:	2d0c      	cmp	r5, #12
 8003b3a:	bf38      	it	cc
 8003b3c:	250c      	movcc	r5, #12
 8003b3e:	2d00      	cmp	r5, #0
 8003b40:	4607      	mov	r7, r0
 8003b42:	db01      	blt.n	8003b48 <_malloc_r+0x1c>
 8003b44:	42a9      	cmp	r1, r5
 8003b46:	d905      	bls.n	8003b54 <_malloc_r+0x28>
 8003b48:	230c      	movs	r3, #12
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	2600      	movs	r6, #0
 8003b4e:	4630      	mov	r0, r6
 8003b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c28 <_malloc_r+0xfc>
 8003b58:	f000 f868 	bl	8003c2c <__malloc_lock>
 8003b5c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b60:	461c      	mov	r4, r3
 8003b62:	bb5c      	cbnz	r4, 8003bbc <_malloc_r+0x90>
 8003b64:	4629      	mov	r1, r5
 8003b66:	4638      	mov	r0, r7
 8003b68:	f7ff ffc0 	bl	8003aec <sbrk_aligned>
 8003b6c:	1c43      	adds	r3, r0, #1
 8003b6e:	4604      	mov	r4, r0
 8003b70:	d155      	bne.n	8003c1e <_malloc_r+0xf2>
 8003b72:	f8d8 4000 	ldr.w	r4, [r8]
 8003b76:	4626      	mov	r6, r4
 8003b78:	2e00      	cmp	r6, #0
 8003b7a:	d145      	bne.n	8003c08 <_malloc_r+0xdc>
 8003b7c:	2c00      	cmp	r4, #0
 8003b7e:	d048      	beq.n	8003c12 <_malloc_r+0xe6>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	4631      	mov	r1, r6
 8003b84:	4638      	mov	r0, r7
 8003b86:	eb04 0903 	add.w	r9, r4, r3
 8003b8a:	f000 fb5d 	bl	8004248 <_sbrk_r>
 8003b8e:	4581      	cmp	r9, r0
 8003b90:	d13f      	bne.n	8003c12 <_malloc_r+0xe6>
 8003b92:	6821      	ldr	r1, [r4, #0]
 8003b94:	1a6d      	subs	r5, r5, r1
 8003b96:	4629      	mov	r1, r5
 8003b98:	4638      	mov	r0, r7
 8003b9a:	f7ff ffa7 	bl	8003aec <sbrk_aligned>
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	d037      	beq.n	8003c12 <_malloc_r+0xe6>
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	442b      	add	r3, r5
 8003ba6:	6023      	str	r3, [r4, #0]
 8003ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d038      	beq.n	8003c22 <_malloc_r+0xf6>
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	42a2      	cmp	r2, r4
 8003bb4:	d12b      	bne.n	8003c0e <_malloc_r+0xe2>
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	e00f      	b.n	8003bdc <_malloc_r+0xb0>
 8003bbc:	6822      	ldr	r2, [r4, #0]
 8003bbe:	1b52      	subs	r2, r2, r5
 8003bc0:	d41f      	bmi.n	8003c02 <_malloc_r+0xd6>
 8003bc2:	2a0b      	cmp	r2, #11
 8003bc4:	d917      	bls.n	8003bf6 <_malloc_r+0xca>
 8003bc6:	1961      	adds	r1, r4, r5
 8003bc8:	42a3      	cmp	r3, r4
 8003bca:	6025      	str	r5, [r4, #0]
 8003bcc:	bf18      	it	ne
 8003bce:	6059      	strne	r1, [r3, #4]
 8003bd0:	6863      	ldr	r3, [r4, #4]
 8003bd2:	bf08      	it	eq
 8003bd4:	f8c8 1000 	streq.w	r1, [r8]
 8003bd8:	5162      	str	r2, [r4, r5]
 8003bda:	604b      	str	r3, [r1, #4]
 8003bdc:	4638      	mov	r0, r7
 8003bde:	f104 060b 	add.w	r6, r4, #11
 8003be2:	f000 f829 	bl	8003c38 <__malloc_unlock>
 8003be6:	f026 0607 	bic.w	r6, r6, #7
 8003bea:	1d23      	adds	r3, r4, #4
 8003bec:	1af2      	subs	r2, r6, r3
 8003bee:	d0ae      	beq.n	8003b4e <_malloc_r+0x22>
 8003bf0:	1b9b      	subs	r3, r3, r6
 8003bf2:	50a3      	str	r3, [r4, r2]
 8003bf4:	e7ab      	b.n	8003b4e <_malloc_r+0x22>
 8003bf6:	42a3      	cmp	r3, r4
 8003bf8:	6862      	ldr	r2, [r4, #4]
 8003bfa:	d1dd      	bne.n	8003bb8 <_malloc_r+0x8c>
 8003bfc:	f8c8 2000 	str.w	r2, [r8]
 8003c00:	e7ec      	b.n	8003bdc <_malloc_r+0xb0>
 8003c02:	4623      	mov	r3, r4
 8003c04:	6864      	ldr	r4, [r4, #4]
 8003c06:	e7ac      	b.n	8003b62 <_malloc_r+0x36>
 8003c08:	4634      	mov	r4, r6
 8003c0a:	6876      	ldr	r6, [r6, #4]
 8003c0c:	e7b4      	b.n	8003b78 <_malloc_r+0x4c>
 8003c0e:	4613      	mov	r3, r2
 8003c10:	e7cc      	b.n	8003bac <_malloc_r+0x80>
 8003c12:	230c      	movs	r3, #12
 8003c14:	603b      	str	r3, [r7, #0]
 8003c16:	4638      	mov	r0, r7
 8003c18:	f000 f80e 	bl	8003c38 <__malloc_unlock>
 8003c1c:	e797      	b.n	8003b4e <_malloc_r+0x22>
 8003c1e:	6025      	str	r5, [r4, #0]
 8003c20:	e7dc      	b.n	8003bdc <_malloc_r+0xb0>
 8003c22:	605b      	str	r3, [r3, #4]
 8003c24:	deff      	udf	#255	; 0xff
 8003c26:	bf00      	nop
 8003c28:	20000310 	.word	0x20000310

08003c2c <__malloc_lock>:
 8003c2c:	4801      	ldr	r0, [pc, #4]	; (8003c34 <__malloc_lock+0x8>)
 8003c2e:	f7ff bf01 	b.w	8003a34 <__retarget_lock_acquire_recursive>
 8003c32:	bf00      	nop
 8003c34:	2000030c 	.word	0x2000030c

08003c38 <__malloc_unlock>:
 8003c38:	4801      	ldr	r0, [pc, #4]	; (8003c40 <__malloc_unlock+0x8>)
 8003c3a:	f7ff befc 	b.w	8003a36 <__retarget_lock_release_recursive>
 8003c3e:	bf00      	nop
 8003c40:	2000030c 	.word	0x2000030c

08003c44 <__ssputs_r>:
 8003c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c48:	688e      	ldr	r6, [r1, #8]
 8003c4a:	461f      	mov	r7, r3
 8003c4c:	42be      	cmp	r6, r7
 8003c4e:	680b      	ldr	r3, [r1, #0]
 8003c50:	4682      	mov	sl, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	4690      	mov	r8, r2
 8003c56:	d82c      	bhi.n	8003cb2 <__ssputs_r+0x6e>
 8003c58:	898a      	ldrh	r2, [r1, #12]
 8003c5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c5e:	d026      	beq.n	8003cae <__ssputs_r+0x6a>
 8003c60:	6965      	ldr	r5, [r4, #20]
 8003c62:	6909      	ldr	r1, [r1, #16]
 8003c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c68:	eba3 0901 	sub.w	r9, r3, r1
 8003c6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c70:	1c7b      	adds	r3, r7, #1
 8003c72:	444b      	add	r3, r9
 8003c74:	106d      	asrs	r5, r5, #1
 8003c76:	429d      	cmp	r5, r3
 8003c78:	bf38      	it	cc
 8003c7a:	461d      	movcc	r5, r3
 8003c7c:	0553      	lsls	r3, r2, #21
 8003c7e:	d527      	bpl.n	8003cd0 <__ssputs_r+0x8c>
 8003c80:	4629      	mov	r1, r5
 8003c82:	f7ff ff53 	bl	8003b2c <_malloc_r>
 8003c86:	4606      	mov	r6, r0
 8003c88:	b360      	cbz	r0, 8003ce4 <__ssputs_r+0xa0>
 8003c8a:	6921      	ldr	r1, [r4, #16]
 8003c8c:	464a      	mov	r2, r9
 8003c8e:	f7ff fed3 	bl	8003a38 <memcpy>
 8003c92:	89a3      	ldrh	r3, [r4, #12]
 8003c94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9c:	81a3      	strh	r3, [r4, #12]
 8003c9e:	6126      	str	r6, [r4, #16]
 8003ca0:	6165      	str	r5, [r4, #20]
 8003ca2:	444e      	add	r6, r9
 8003ca4:	eba5 0509 	sub.w	r5, r5, r9
 8003ca8:	6026      	str	r6, [r4, #0]
 8003caa:	60a5      	str	r5, [r4, #8]
 8003cac:	463e      	mov	r6, r7
 8003cae:	42be      	cmp	r6, r7
 8003cb0:	d900      	bls.n	8003cb4 <__ssputs_r+0x70>
 8003cb2:	463e      	mov	r6, r7
 8003cb4:	6820      	ldr	r0, [r4, #0]
 8003cb6:	4632      	mov	r2, r6
 8003cb8:	4641      	mov	r1, r8
 8003cba:	f000 faab 	bl	8004214 <memmove>
 8003cbe:	68a3      	ldr	r3, [r4, #8]
 8003cc0:	1b9b      	subs	r3, r3, r6
 8003cc2:	60a3      	str	r3, [r4, #8]
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	4433      	add	r3, r6
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	2000      	movs	r0, #0
 8003ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd0:	462a      	mov	r2, r5
 8003cd2:	f000 fac9 	bl	8004268 <_realloc_r>
 8003cd6:	4606      	mov	r6, r0
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d1e0      	bne.n	8003c9e <__ssputs_r+0x5a>
 8003cdc:	6921      	ldr	r1, [r4, #16]
 8003cde:	4650      	mov	r0, sl
 8003ce0:	f7ff feb8 	bl	8003a54 <_free_r>
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	f8ca 3000 	str.w	r3, [sl]
 8003cea:	89a3      	ldrh	r3, [r4, #12]
 8003cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf0:	81a3      	strh	r3, [r4, #12]
 8003cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf6:	e7e9      	b.n	8003ccc <__ssputs_r+0x88>

08003cf8 <_svfiprintf_r>:
 8003cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfc:	4698      	mov	r8, r3
 8003cfe:	898b      	ldrh	r3, [r1, #12]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	b09d      	sub	sp, #116	; 0x74
 8003d04:	4607      	mov	r7, r0
 8003d06:	460d      	mov	r5, r1
 8003d08:	4614      	mov	r4, r2
 8003d0a:	d50e      	bpl.n	8003d2a <_svfiprintf_r+0x32>
 8003d0c:	690b      	ldr	r3, [r1, #16]
 8003d0e:	b963      	cbnz	r3, 8003d2a <_svfiprintf_r+0x32>
 8003d10:	2140      	movs	r1, #64	; 0x40
 8003d12:	f7ff ff0b 	bl	8003b2c <_malloc_r>
 8003d16:	6028      	str	r0, [r5, #0]
 8003d18:	6128      	str	r0, [r5, #16]
 8003d1a:	b920      	cbnz	r0, 8003d26 <_svfiprintf_r+0x2e>
 8003d1c:	230c      	movs	r3, #12
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295
 8003d24:	e0d0      	b.n	8003ec8 <_svfiprintf_r+0x1d0>
 8003d26:	2340      	movs	r3, #64	; 0x40
 8003d28:	616b      	str	r3, [r5, #20]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d2e:	2320      	movs	r3, #32
 8003d30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d38:	2330      	movs	r3, #48	; 0x30
 8003d3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ee0 <_svfiprintf_r+0x1e8>
 8003d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d42:	f04f 0901 	mov.w	r9, #1
 8003d46:	4623      	mov	r3, r4
 8003d48:	469a      	mov	sl, r3
 8003d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d4e:	b10a      	cbz	r2, 8003d54 <_svfiprintf_r+0x5c>
 8003d50:	2a25      	cmp	r2, #37	; 0x25
 8003d52:	d1f9      	bne.n	8003d48 <_svfiprintf_r+0x50>
 8003d54:	ebba 0b04 	subs.w	fp, sl, r4
 8003d58:	d00b      	beq.n	8003d72 <_svfiprintf_r+0x7a>
 8003d5a:	465b      	mov	r3, fp
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	4629      	mov	r1, r5
 8003d60:	4638      	mov	r0, r7
 8003d62:	f7ff ff6f 	bl	8003c44 <__ssputs_r>
 8003d66:	3001      	adds	r0, #1
 8003d68:	f000 80a9 	beq.w	8003ebe <_svfiprintf_r+0x1c6>
 8003d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d6e:	445a      	add	r2, fp
 8003d70:	9209      	str	r2, [sp, #36]	; 0x24
 8003d72:	f89a 3000 	ldrb.w	r3, [sl]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80a1 	beq.w	8003ebe <_svfiprintf_r+0x1c6>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d86:	f10a 0a01 	add.w	sl, sl, #1
 8003d8a:	9304      	str	r3, [sp, #16]
 8003d8c:	9307      	str	r3, [sp, #28]
 8003d8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d92:	931a      	str	r3, [sp, #104]	; 0x68
 8003d94:	4654      	mov	r4, sl
 8003d96:	2205      	movs	r2, #5
 8003d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d9c:	4850      	ldr	r0, [pc, #320]	; (8003ee0 <_svfiprintf_r+0x1e8>)
 8003d9e:	f7fc fa27 	bl	80001f0 <memchr>
 8003da2:	9a04      	ldr	r2, [sp, #16]
 8003da4:	b9d8      	cbnz	r0, 8003dde <_svfiprintf_r+0xe6>
 8003da6:	06d0      	lsls	r0, r2, #27
 8003da8:	bf44      	itt	mi
 8003daa:	2320      	movmi	r3, #32
 8003dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003db0:	0711      	lsls	r1, r2, #28
 8003db2:	bf44      	itt	mi
 8003db4:	232b      	movmi	r3, #43	; 0x2b
 8003db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dba:	f89a 3000 	ldrb.w	r3, [sl]
 8003dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8003dc0:	d015      	beq.n	8003dee <_svfiprintf_r+0xf6>
 8003dc2:	9a07      	ldr	r2, [sp, #28]
 8003dc4:	4654      	mov	r4, sl
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	f04f 0c0a 	mov.w	ip, #10
 8003dcc:	4621      	mov	r1, r4
 8003dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dd2:	3b30      	subs	r3, #48	; 0x30
 8003dd4:	2b09      	cmp	r3, #9
 8003dd6:	d94d      	bls.n	8003e74 <_svfiprintf_r+0x17c>
 8003dd8:	b1b0      	cbz	r0, 8003e08 <_svfiprintf_r+0x110>
 8003dda:	9207      	str	r2, [sp, #28]
 8003ddc:	e014      	b.n	8003e08 <_svfiprintf_r+0x110>
 8003dde:	eba0 0308 	sub.w	r3, r0, r8
 8003de2:	fa09 f303 	lsl.w	r3, r9, r3
 8003de6:	4313      	orrs	r3, r2
 8003de8:	9304      	str	r3, [sp, #16]
 8003dea:	46a2      	mov	sl, r4
 8003dec:	e7d2      	b.n	8003d94 <_svfiprintf_r+0x9c>
 8003dee:	9b03      	ldr	r3, [sp, #12]
 8003df0:	1d19      	adds	r1, r3, #4
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	9103      	str	r1, [sp, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bfbb      	ittet	lt
 8003dfa:	425b      	neglt	r3, r3
 8003dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8003e00:	9307      	strge	r3, [sp, #28]
 8003e02:	9307      	strlt	r3, [sp, #28]
 8003e04:	bfb8      	it	lt
 8003e06:	9204      	strlt	r2, [sp, #16]
 8003e08:	7823      	ldrb	r3, [r4, #0]
 8003e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e0c:	d10c      	bne.n	8003e28 <_svfiprintf_r+0x130>
 8003e0e:	7863      	ldrb	r3, [r4, #1]
 8003e10:	2b2a      	cmp	r3, #42	; 0x2a
 8003e12:	d134      	bne.n	8003e7e <_svfiprintf_r+0x186>
 8003e14:	9b03      	ldr	r3, [sp, #12]
 8003e16:	1d1a      	adds	r2, r3, #4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	9203      	str	r2, [sp, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bfb8      	it	lt
 8003e20:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e24:	3402      	adds	r4, #2
 8003e26:	9305      	str	r3, [sp, #20]
 8003e28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003ef0 <_svfiprintf_r+0x1f8>
 8003e2c:	7821      	ldrb	r1, [r4, #0]
 8003e2e:	2203      	movs	r2, #3
 8003e30:	4650      	mov	r0, sl
 8003e32:	f7fc f9dd 	bl	80001f0 <memchr>
 8003e36:	b138      	cbz	r0, 8003e48 <_svfiprintf_r+0x150>
 8003e38:	9b04      	ldr	r3, [sp, #16]
 8003e3a:	eba0 000a 	sub.w	r0, r0, sl
 8003e3e:	2240      	movs	r2, #64	; 0x40
 8003e40:	4082      	lsls	r2, r0
 8003e42:	4313      	orrs	r3, r2
 8003e44:	3401      	adds	r4, #1
 8003e46:	9304      	str	r3, [sp, #16]
 8003e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e4c:	4825      	ldr	r0, [pc, #148]	; (8003ee4 <_svfiprintf_r+0x1ec>)
 8003e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e52:	2206      	movs	r2, #6
 8003e54:	f7fc f9cc 	bl	80001f0 <memchr>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d038      	beq.n	8003ece <_svfiprintf_r+0x1d6>
 8003e5c:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <_svfiprintf_r+0x1f0>)
 8003e5e:	bb1b      	cbnz	r3, 8003ea8 <_svfiprintf_r+0x1b0>
 8003e60:	9b03      	ldr	r3, [sp, #12]
 8003e62:	3307      	adds	r3, #7
 8003e64:	f023 0307 	bic.w	r3, r3, #7
 8003e68:	3308      	adds	r3, #8
 8003e6a:	9303      	str	r3, [sp, #12]
 8003e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e6e:	4433      	add	r3, r6
 8003e70:	9309      	str	r3, [sp, #36]	; 0x24
 8003e72:	e768      	b.n	8003d46 <_svfiprintf_r+0x4e>
 8003e74:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e78:	460c      	mov	r4, r1
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	e7a6      	b.n	8003dcc <_svfiprintf_r+0xd4>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	3401      	adds	r4, #1
 8003e82:	9305      	str	r3, [sp, #20]
 8003e84:	4619      	mov	r1, r3
 8003e86:	f04f 0c0a 	mov.w	ip, #10
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e90:	3a30      	subs	r2, #48	; 0x30
 8003e92:	2a09      	cmp	r2, #9
 8003e94:	d903      	bls.n	8003e9e <_svfiprintf_r+0x1a6>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0c6      	beq.n	8003e28 <_svfiprintf_r+0x130>
 8003e9a:	9105      	str	r1, [sp, #20]
 8003e9c:	e7c4      	b.n	8003e28 <_svfiprintf_r+0x130>
 8003e9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e7f0      	b.n	8003e8a <_svfiprintf_r+0x192>
 8003ea8:	ab03      	add	r3, sp, #12
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	462a      	mov	r2, r5
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <_svfiprintf_r+0x1f4>)
 8003eb0:	a904      	add	r1, sp, #16
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	f3af 8000 	nop.w
 8003eb8:	1c42      	adds	r2, r0, #1
 8003eba:	4606      	mov	r6, r0
 8003ebc:	d1d6      	bne.n	8003e6c <_svfiprintf_r+0x174>
 8003ebe:	89ab      	ldrh	r3, [r5, #12]
 8003ec0:	065b      	lsls	r3, r3, #25
 8003ec2:	f53f af2d 	bmi.w	8003d20 <_svfiprintf_r+0x28>
 8003ec6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ec8:	b01d      	add	sp, #116	; 0x74
 8003eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ece:	ab03      	add	r3, sp, #12
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	462a      	mov	r2, r5
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <_svfiprintf_r+0x1f4>)
 8003ed6:	a904      	add	r1, sp, #16
 8003ed8:	4638      	mov	r0, r7
 8003eda:	f000 f879 	bl	8003fd0 <_printf_i>
 8003ede:	e7eb      	b.n	8003eb8 <_svfiprintf_r+0x1c0>
 8003ee0:	08004540 	.word	0x08004540
 8003ee4:	0800454a 	.word	0x0800454a
 8003ee8:	00000000 	.word	0x00000000
 8003eec:	08003c45 	.word	0x08003c45
 8003ef0:	08004546 	.word	0x08004546

08003ef4 <_printf_common>:
 8003ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef8:	4616      	mov	r6, r2
 8003efa:	4699      	mov	r9, r3
 8003efc:	688a      	ldr	r2, [r1, #8]
 8003efe:	690b      	ldr	r3, [r1, #16]
 8003f00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f04:	4293      	cmp	r3, r2
 8003f06:	bfb8      	it	lt
 8003f08:	4613      	movlt	r3, r2
 8003f0a:	6033      	str	r3, [r6, #0]
 8003f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f10:	4607      	mov	r7, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	b10a      	cbz	r2, 8003f1a <_printf_common+0x26>
 8003f16:	3301      	adds	r3, #1
 8003f18:	6033      	str	r3, [r6, #0]
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	0699      	lsls	r1, r3, #26
 8003f1e:	bf42      	ittt	mi
 8003f20:	6833      	ldrmi	r3, [r6, #0]
 8003f22:	3302      	addmi	r3, #2
 8003f24:	6033      	strmi	r3, [r6, #0]
 8003f26:	6825      	ldr	r5, [r4, #0]
 8003f28:	f015 0506 	ands.w	r5, r5, #6
 8003f2c:	d106      	bne.n	8003f3c <_printf_common+0x48>
 8003f2e:	f104 0a19 	add.w	sl, r4, #25
 8003f32:	68e3      	ldr	r3, [r4, #12]
 8003f34:	6832      	ldr	r2, [r6, #0]
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	42ab      	cmp	r3, r5
 8003f3a:	dc26      	bgt.n	8003f8a <_printf_common+0x96>
 8003f3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f40:	1e13      	subs	r3, r2, #0
 8003f42:	6822      	ldr	r2, [r4, #0]
 8003f44:	bf18      	it	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	0692      	lsls	r2, r2, #26
 8003f4a:	d42b      	bmi.n	8003fa4 <_printf_common+0xb0>
 8003f4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f50:	4649      	mov	r1, r9
 8003f52:	4638      	mov	r0, r7
 8003f54:	47c0      	blx	r8
 8003f56:	3001      	adds	r0, #1
 8003f58:	d01e      	beq.n	8003f98 <_printf_common+0xa4>
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	6922      	ldr	r2, [r4, #16]
 8003f5e:	f003 0306 	and.w	r3, r3, #6
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	bf02      	ittt	eq
 8003f66:	68e5      	ldreq	r5, [r4, #12]
 8003f68:	6833      	ldreq	r3, [r6, #0]
 8003f6a:	1aed      	subeq	r5, r5, r3
 8003f6c:	68a3      	ldr	r3, [r4, #8]
 8003f6e:	bf0c      	ite	eq
 8003f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f74:	2500      	movne	r5, #0
 8003f76:	4293      	cmp	r3, r2
 8003f78:	bfc4      	itt	gt
 8003f7a:	1a9b      	subgt	r3, r3, r2
 8003f7c:	18ed      	addgt	r5, r5, r3
 8003f7e:	2600      	movs	r6, #0
 8003f80:	341a      	adds	r4, #26
 8003f82:	42b5      	cmp	r5, r6
 8003f84:	d11a      	bne.n	8003fbc <_printf_common+0xc8>
 8003f86:	2000      	movs	r0, #0
 8003f88:	e008      	b.n	8003f9c <_printf_common+0xa8>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4652      	mov	r2, sl
 8003f8e:	4649      	mov	r1, r9
 8003f90:	4638      	mov	r0, r7
 8003f92:	47c0      	blx	r8
 8003f94:	3001      	adds	r0, #1
 8003f96:	d103      	bne.n	8003fa0 <_printf_common+0xac>
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa0:	3501      	adds	r5, #1
 8003fa2:	e7c6      	b.n	8003f32 <_printf_common+0x3e>
 8003fa4:	18e1      	adds	r1, r4, r3
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	2030      	movs	r0, #48	; 0x30
 8003faa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fae:	4422      	add	r2, r4
 8003fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fb8:	3302      	adds	r3, #2
 8003fba:	e7c7      	b.n	8003f4c <_printf_common+0x58>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	47c0      	blx	r8
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d0e6      	beq.n	8003f98 <_printf_common+0xa4>
 8003fca:	3601      	adds	r6, #1
 8003fcc:	e7d9      	b.n	8003f82 <_printf_common+0x8e>
	...

08003fd0 <_printf_i>:
 8003fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd4:	7e0f      	ldrb	r7, [r1, #24]
 8003fd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fd8:	2f78      	cmp	r7, #120	; 0x78
 8003fda:	4691      	mov	r9, r2
 8003fdc:	4680      	mov	r8, r0
 8003fde:	460c      	mov	r4, r1
 8003fe0:	469a      	mov	sl, r3
 8003fe2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fe6:	d807      	bhi.n	8003ff8 <_printf_i+0x28>
 8003fe8:	2f62      	cmp	r7, #98	; 0x62
 8003fea:	d80a      	bhi.n	8004002 <_printf_i+0x32>
 8003fec:	2f00      	cmp	r7, #0
 8003fee:	f000 80d4 	beq.w	800419a <_printf_i+0x1ca>
 8003ff2:	2f58      	cmp	r7, #88	; 0x58
 8003ff4:	f000 80c0 	beq.w	8004178 <_printf_i+0x1a8>
 8003ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004000:	e03a      	b.n	8004078 <_printf_i+0xa8>
 8004002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004006:	2b15      	cmp	r3, #21
 8004008:	d8f6      	bhi.n	8003ff8 <_printf_i+0x28>
 800400a:	a101      	add	r1, pc, #4	; (adr r1, 8004010 <_printf_i+0x40>)
 800400c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004010:	08004069 	.word	0x08004069
 8004014:	0800407d 	.word	0x0800407d
 8004018:	08003ff9 	.word	0x08003ff9
 800401c:	08003ff9 	.word	0x08003ff9
 8004020:	08003ff9 	.word	0x08003ff9
 8004024:	08003ff9 	.word	0x08003ff9
 8004028:	0800407d 	.word	0x0800407d
 800402c:	08003ff9 	.word	0x08003ff9
 8004030:	08003ff9 	.word	0x08003ff9
 8004034:	08003ff9 	.word	0x08003ff9
 8004038:	08003ff9 	.word	0x08003ff9
 800403c:	08004181 	.word	0x08004181
 8004040:	080040a9 	.word	0x080040a9
 8004044:	0800413b 	.word	0x0800413b
 8004048:	08003ff9 	.word	0x08003ff9
 800404c:	08003ff9 	.word	0x08003ff9
 8004050:	080041a3 	.word	0x080041a3
 8004054:	08003ff9 	.word	0x08003ff9
 8004058:	080040a9 	.word	0x080040a9
 800405c:	08003ff9 	.word	0x08003ff9
 8004060:	08003ff9 	.word	0x08003ff9
 8004064:	08004143 	.word	0x08004143
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	1d1a      	adds	r2, r3, #4
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	602a      	str	r2, [r5, #0]
 8004070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004078:	2301      	movs	r3, #1
 800407a:	e09f      	b.n	80041bc <_printf_i+0x1ec>
 800407c:	6820      	ldr	r0, [r4, #0]
 800407e:	682b      	ldr	r3, [r5, #0]
 8004080:	0607      	lsls	r7, r0, #24
 8004082:	f103 0104 	add.w	r1, r3, #4
 8004086:	6029      	str	r1, [r5, #0]
 8004088:	d501      	bpl.n	800408e <_printf_i+0xbe>
 800408a:	681e      	ldr	r6, [r3, #0]
 800408c:	e003      	b.n	8004096 <_printf_i+0xc6>
 800408e:	0646      	lsls	r6, r0, #25
 8004090:	d5fb      	bpl.n	800408a <_printf_i+0xba>
 8004092:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004096:	2e00      	cmp	r6, #0
 8004098:	da03      	bge.n	80040a2 <_printf_i+0xd2>
 800409a:	232d      	movs	r3, #45	; 0x2d
 800409c:	4276      	negs	r6, r6
 800409e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040a2:	485a      	ldr	r0, [pc, #360]	; (800420c <_printf_i+0x23c>)
 80040a4:	230a      	movs	r3, #10
 80040a6:	e012      	b.n	80040ce <_printf_i+0xfe>
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	6820      	ldr	r0, [r4, #0]
 80040ac:	1d19      	adds	r1, r3, #4
 80040ae:	6029      	str	r1, [r5, #0]
 80040b0:	0605      	lsls	r5, r0, #24
 80040b2:	d501      	bpl.n	80040b8 <_printf_i+0xe8>
 80040b4:	681e      	ldr	r6, [r3, #0]
 80040b6:	e002      	b.n	80040be <_printf_i+0xee>
 80040b8:	0641      	lsls	r1, r0, #25
 80040ba:	d5fb      	bpl.n	80040b4 <_printf_i+0xe4>
 80040bc:	881e      	ldrh	r6, [r3, #0]
 80040be:	4853      	ldr	r0, [pc, #332]	; (800420c <_printf_i+0x23c>)
 80040c0:	2f6f      	cmp	r7, #111	; 0x6f
 80040c2:	bf0c      	ite	eq
 80040c4:	2308      	moveq	r3, #8
 80040c6:	230a      	movne	r3, #10
 80040c8:	2100      	movs	r1, #0
 80040ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ce:	6865      	ldr	r5, [r4, #4]
 80040d0:	60a5      	str	r5, [r4, #8]
 80040d2:	2d00      	cmp	r5, #0
 80040d4:	bfa2      	ittt	ge
 80040d6:	6821      	ldrge	r1, [r4, #0]
 80040d8:	f021 0104 	bicge.w	r1, r1, #4
 80040dc:	6021      	strge	r1, [r4, #0]
 80040de:	b90e      	cbnz	r6, 80040e4 <_printf_i+0x114>
 80040e0:	2d00      	cmp	r5, #0
 80040e2:	d04b      	beq.n	800417c <_printf_i+0x1ac>
 80040e4:	4615      	mov	r5, r2
 80040e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80040ea:	fb03 6711 	mls	r7, r3, r1, r6
 80040ee:	5dc7      	ldrb	r7, [r0, r7]
 80040f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040f4:	4637      	mov	r7, r6
 80040f6:	42bb      	cmp	r3, r7
 80040f8:	460e      	mov	r6, r1
 80040fa:	d9f4      	bls.n	80040e6 <_printf_i+0x116>
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d10b      	bne.n	8004118 <_printf_i+0x148>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	07de      	lsls	r6, r3, #31
 8004104:	d508      	bpl.n	8004118 <_printf_i+0x148>
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	6861      	ldr	r1, [r4, #4]
 800410a:	4299      	cmp	r1, r3
 800410c:	bfde      	ittt	le
 800410e:	2330      	movle	r3, #48	; 0x30
 8004110:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004114:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004118:	1b52      	subs	r2, r2, r5
 800411a:	6122      	str	r2, [r4, #16]
 800411c:	f8cd a000 	str.w	sl, [sp]
 8004120:	464b      	mov	r3, r9
 8004122:	aa03      	add	r2, sp, #12
 8004124:	4621      	mov	r1, r4
 8004126:	4640      	mov	r0, r8
 8004128:	f7ff fee4 	bl	8003ef4 <_printf_common>
 800412c:	3001      	adds	r0, #1
 800412e:	d14a      	bne.n	80041c6 <_printf_i+0x1f6>
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	b004      	add	sp, #16
 8004136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	f043 0320 	orr.w	r3, r3, #32
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	4833      	ldr	r0, [pc, #204]	; (8004210 <_printf_i+0x240>)
 8004144:	2778      	movs	r7, #120	; 0x78
 8004146:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	6829      	ldr	r1, [r5, #0]
 800414e:	061f      	lsls	r7, r3, #24
 8004150:	f851 6b04 	ldr.w	r6, [r1], #4
 8004154:	d402      	bmi.n	800415c <_printf_i+0x18c>
 8004156:	065f      	lsls	r7, r3, #25
 8004158:	bf48      	it	mi
 800415a:	b2b6      	uxthmi	r6, r6
 800415c:	07df      	lsls	r7, r3, #31
 800415e:	bf48      	it	mi
 8004160:	f043 0320 	orrmi.w	r3, r3, #32
 8004164:	6029      	str	r1, [r5, #0]
 8004166:	bf48      	it	mi
 8004168:	6023      	strmi	r3, [r4, #0]
 800416a:	b91e      	cbnz	r6, 8004174 <_printf_i+0x1a4>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	f023 0320 	bic.w	r3, r3, #32
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	2310      	movs	r3, #16
 8004176:	e7a7      	b.n	80040c8 <_printf_i+0xf8>
 8004178:	4824      	ldr	r0, [pc, #144]	; (800420c <_printf_i+0x23c>)
 800417a:	e7e4      	b.n	8004146 <_printf_i+0x176>
 800417c:	4615      	mov	r5, r2
 800417e:	e7bd      	b.n	80040fc <_printf_i+0x12c>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	6826      	ldr	r6, [r4, #0]
 8004184:	6961      	ldr	r1, [r4, #20]
 8004186:	1d18      	adds	r0, r3, #4
 8004188:	6028      	str	r0, [r5, #0]
 800418a:	0635      	lsls	r5, r6, #24
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	d501      	bpl.n	8004194 <_printf_i+0x1c4>
 8004190:	6019      	str	r1, [r3, #0]
 8004192:	e002      	b.n	800419a <_printf_i+0x1ca>
 8004194:	0670      	lsls	r0, r6, #25
 8004196:	d5fb      	bpl.n	8004190 <_printf_i+0x1c0>
 8004198:	8019      	strh	r1, [r3, #0]
 800419a:	2300      	movs	r3, #0
 800419c:	6123      	str	r3, [r4, #16]
 800419e:	4615      	mov	r5, r2
 80041a0:	e7bc      	b.n	800411c <_printf_i+0x14c>
 80041a2:	682b      	ldr	r3, [r5, #0]
 80041a4:	1d1a      	adds	r2, r3, #4
 80041a6:	602a      	str	r2, [r5, #0]
 80041a8:	681d      	ldr	r5, [r3, #0]
 80041aa:	6862      	ldr	r2, [r4, #4]
 80041ac:	2100      	movs	r1, #0
 80041ae:	4628      	mov	r0, r5
 80041b0:	f7fc f81e 	bl	80001f0 <memchr>
 80041b4:	b108      	cbz	r0, 80041ba <_printf_i+0x1ea>
 80041b6:	1b40      	subs	r0, r0, r5
 80041b8:	6060      	str	r0, [r4, #4]
 80041ba:	6863      	ldr	r3, [r4, #4]
 80041bc:	6123      	str	r3, [r4, #16]
 80041be:	2300      	movs	r3, #0
 80041c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c4:	e7aa      	b.n	800411c <_printf_i+0x14c>
 80041c6:	6923      	ldr	r3, [r4, #16]
 80041c8:	462a      	mov	r2, r5
 80041ca:	4649      	mov	r1, r9
 80041cc:	4640      	mov	r0, r8
 80041ce:	47d0      	blx	sl
 80041d0:	3001      	adds	r0, #1
 80041d2:	d0ad      	beq.n	8004130 <_printf_i+0x160>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	079b      	lsls	r3, r3, #30
 80041d8:	d413      	bmi.n	8004202 <_printf_i+0x232>
 80041da:	68e0      	ldr	r0, [r4, #12]
 80041dc:	9b03      	ldr	r3, [sp, #12]
 80041de:	4298      	cmp	r0, r3
 80041e0:	bfb8      	it	lt
 80041e2:	4618      	movlt	r0, r3
 80041e4:	e7a6      	b.n	8004134 <_printf_i+0x164>
 80041e6:	2301      	movs	r3, #1
 80041e8:	4632      	mov	r2, r6
 80041ea:	4649      	mov	r1, r9
 80041ec:	4640      	mov	r0, r8
 80041ee:	47d0      	blx	sl
 80041f0:	3001      	adds	r0, #1
 80041f2:	d09d      	beq.n	8004130 <_printf_i+0x160>
 80041f4:	3501      	adds	r5, #1
 80041f6:	68e3      	ldr	r3, [r4, #12]
 80041f8:	9903      	ldr	r1, [sp, #12]
 80041fa:	1a5b      	subs	r3, r3, r1
 80041fc:	42ab      	cmp	r3, r5
 80041fe:	dcf2      	bgt.n	80041e6 <_printf_i+0x216>
 8004200:	e7eb      	b.n	80041da <_printf_i+0x20a>
 8004202:	2500      	movs	r5, #0
 8004204:	f104 0619 	add.w	r6, r4, #25
 8004208:	e7f5      	b.n	80041f6 <_printf_i+0x226>
 800420a:	bf00      	nop
 800420c:	08004551 	.word	0x08004551
 8004210:	08004562 	.word	0x08004562

08004214 <memmove>:
 8004214:	4288      	cmp	r0, r1
 8004216:	b510      	push	{r4, lr}
 8004218:	eb01 0402 	add.w	r4, r1, r2
 800421c:	d902      	bls.n	8004224 <memmove+0x10>
 800421e:	4284      	cmp	r4, r0
 8004220:	4623      	mov	r3, r4
 8004222:	d807      	bhi.n	8004234 <memmove+0x20>
 8004224:	1e43      	subs	r3, r0, #1
 8004226:	42a1      	cmp	r1, r4
 8004228:	d008      	beq.n	800423c <memmove+0x28>
 800422a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800422e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004232:	e7f8      	b.n	8004226 <memmove+0x12>
 8004234:	4402      	add	r2, r0
 8004236:	4601      	mov	r1, r0
 8004238:	428a      	cmp	r2, r1
 800423a:	d100      	bne.n	800423e <memmove+0x2a>
 800423c:	bd10      	pop	{r4, pc}
 800423e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004246:	e7f7      	b.n	8004238 <memmove+0x24>

08004248 <_sbrk_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4d06      	ldr	r5, [pc, #24]	; (8004264 <_sbrk_r+0x1c>)
 800424c:	2300      	movs	r3, #0
 800424e:	4604      	mov	r4, r0
 8004250:	4608      	mov	r0, r1
 8004252:	602b      	str	r3, [r5, #0]
 8004254:	f7fc fe74 	bl	8000f40 <_sbrk>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_sbrk_r+0x1a>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b103      	cbz	r3, 8004262 <_sbrk_r+0x1a>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	20000308 	.word	0x20000308

08004268 <_realloc_r>:
 8004268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800426c:	4680      	mov	r8, r0
 800426e:	4614      	mov	r4, r2
 8004270:	460e      	mov	r6, r1
 8004272:	b921      	cbnz	r1, 800427e <_realloc_r+0x16>
 8004274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004278:	4611      	mov	r1, r2
 800427a:	f7ff bc57 	b.w	8003b2c <_malloc_r>
 800427e:	b92a      	cbnz	r2, 800428c <_realloc_r+0x24>
 8004280:	f7ff fbe8 	bl	8003a54 <_free_r>
 8004284:	4625      	mov	r5, r4
 8004286:	4628      	mov	r0, r5
 8004288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800428c:	f000 f81b 	bl	80042c6 <_malloc_usable_size_r>
 8004290:	4284      	cmp	r4, r0
 8004292:	4607      	mov	r7, r0
 8004294:	d802      	bhi.n	800429c <_realloc_r+0x34>
 8004296:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800429a:	d812      	bhi.n	80042c2 <_realloc_r+0x5a>
 800429c:	4621      	mov	r1, r4
 800429e:	4640      	mov	r0, r8
 80042a0:	f7ff fc44 	bl	8003b2c <_malloc_r>
 80042a4:	4605      	mov	r5, r0
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d0ed      	beq.n	8004286 <_realloc_r+0x1e>
 80042aa:	42bc      	cmp	r4, r7
 80042ac:	4622      	mov	r2, r4
 80042ae:	4631      	mov	r1, r6
 80042b0:	bf28      	it	cs
 80042b2:	463a      	movcs	r2, r7
 80042b4:	f7ff fbc0 	bl	8003a38 <memcpy>
 80042b8:	4631      	mov	r1, r6
 80042ba:	4640      	mov	r0, r8
 80042bc:	f7ff fbca 	bl	8003a54 <_free_r>
 80042c0:	e7e1      	b.n	8004286 <_realloc_r+0x1e>
 80042c2:	4635      	mov	r5, r6
 80042c4:	e7df      	b.n	8004286 <_realloc_r+0x1e>

080042c6 <_malloc_usable_size_r>:
 80042c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ca:	1f18      	subs	r0, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bfbc      	itt	lt
 80042d0:	580b      	ldrlt	r3, [r1, r0]
 80042d2:	18c0      	addlt	r0, r0, r3
 80042d4:	4770      	bx	lr
	...

080042d8 <_init>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	bf00      	nop
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr

080042e4 <_fini>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr
